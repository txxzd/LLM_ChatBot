[{"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "by Wallace Wang Beginning Programming FOR DUMmIES \u2030 3RD EDITION Beginning Programming For Dummies\u00ae, 3rd Edition Published by Wiley Publishing, Inc. 111 River Street Hoboken, NJ 07030-5774 Copyright \u00a9 2004 by Wiley Publishing, Inc., Indianapolis, Indiana Published by Wiley Publishing, Inc., Indianapolis, Indiana Published simultaneously in Canada No part of this publication may be reproduced, stored in a retrieval system or transmitted in any form or by any means, electronic, mechanical, photocopying, recording, scanning or otherwise, except as permitted under Sections 107 or 108 of the 1976 United States Copyright Act, without either the prior written permis- sion of the Publisher, or authorization through payment of the appropriate per-copy fee to the Copyright Clearance Center, 222 Rosewood Drive, Danvers, MA 01923, (978) 750-8400, fax (978) 646-8600. Requests to the Publisher for permission should be addressed to the Legal Department, Wiley Publishing, Inc., 10475 Crosspoint Blvd., Indianapolis, IN 46256, (317) 572-3447, fax (317) 572-4447, e-mail: permcoordinator@ wiley.com. Trademarks: Wiley, the Wiley Publishing logo, For Dummies, the Dummies Man logo, A Reference for the Rest of Us!, The Dummies Way, Dummies Daily, The Fun and Easy Way, Dummies.com, and related trade dress are trademarks or registered trademarks of John Wiley & Sons, Inc., and/or its affiliates in the United States and other countries, and may not be used without written permission. All other trademarks are the property of their respective owners. Wiley Publishing, Inc., is not associated with any product or vendor mentioned in this book. LIMIT OF LIABILITY/DISCLAIMER OF WARRANTY: WHILE THE PUBLISHER AND AUTHOR HAVE USED THEIR BEST EFFORTS IN PREPARING THIS BOOK, THEY MAKE NO REPRESENTATIONS OR WAR- RANTIES WITH RESPECT TO THE ACCURACY OR COMPLETENESS OF THE CONTENTS OF THIS BOOK AND SPECIFICALLY DISCLAIM ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. NO WARRANTY MAY BE CREATED OR EXTENDED BY SALES REPRESENTATIVES OR WRITTEN SALES MATERIALS. THE ADVICE AND STRATEGIES CONTAINED HEREIN MAY NOT BE SUITABLE FOR YOUR SITUATION. YOU SHOULD CONSULT WITH A PROFESSIONAL WHERE APPROPRI- ATE. NEITHER THE PUBLISHER NOR AUTHOR SHALL BE LIABLE FOR ANY LOSS OF PROFIT OR ANY OTHER COMMERCIAL DAMAGES, INCLUDING BUT NOT LIMITED TO SPECIAL, INCIDENTAL, CONSE- QUENTIAL, OR OTHER DAMAGES. For general information on our other products and services or to obtain technical support, please contact our Customer Care Department within the U.S. at 800-762-2974, outside the U.S. at 317-572-3993, or fax 317-572-4002. Wiley also publishes its books in a variety of electronic formats. Some content that appears in print may not be available in electronic books. Library of Congress Control Number: 2003114793 ISBN: 0-7645-4997-9 Manufactured in the United States of America 10 9 8 7 6 5 4 3 2 1 3B/SU/RR/QT About the Author After spending his first two post-college years working for a dead-end corpo- ration that encouraged its employees to use euphemisms to disguise the fact that they were manufacturing nuclear weapons with the potential to wipe out most forms of life on the planet, Wallace Wang decided that his life was meant"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "books in a variety of electronic formats. Some content that appears in print may not be available in electronic books. Library of Congress Control Number: 2003114793 ISBN: 0-7645-4997-9 Manufactured in the United States of America 10 9 8 7 6 5 4 3 2 1 3B/SU/RR/QT About the Author After spending his first two post-college years working for a dead-end corpo- ration that encouraged its employees to use euphemisms to disguise the fact that they were manufacturing nuclear weapons with the potential to wipe out most forms of life on the planet, Wallace Wang decided that his life was meant to be spent doing something more exciting than existing in a corporate culture that stifled freedom and democracy while building missiles ostensibly to protect freedom and democracy. With the thought of escape in his mind, he bought one of the first IBM personal computers on the market \u2014 and quickly realized that the accompanying computer manuals were completely incom- prehensible. After deciphering the manuals and learning to master the arcane commands of the ancient MS-DOS version 1.25 operating system, Wallace decided to pub- lish fragments of his notes in a local computer magazine for the amusement of others \u2014 and to provide an alternative source of income for his eventual departure from the mentally suffocating environment of the military-industrial complex. After people began responding favorably to his introductory computer maga- zine articles, he continued writing more, eventually turning to writing full-time. For the first time, he managed to earn a living in a job that didn\u2019t involve devel- oping something that could blow up people who happen to live in another part of the world. Today, the author is happily pursuing a dual career in the book publishing industry and the stand-up comedy industry. His eventual goal is to convince people that enjoying yourself while learning is all right. In the meantime, he plans to continue making fun of any idiots and morons who happen to get in his way. Dedication This book is dedicated to all the wonderful people I\u2019ve met along the path of life, including . . . Cassandra (my wife), Jordan (my son), and Bo, Scraps, Tasha, and Nuit (our cats). Lily Carnie, the only person I know who can truly see both sides of the story. All the friendly folks I\u2019ve met while performing at the Riviera Comedy Club, located at the Riviera Hotel & Casino in Las Vegas: Steve Schirripa (who also appears on the HBO show, The Sopranos, which you can read about at www. hbo.com/sopranos), Don Learned, Bob Zany, Gerry Bednob, Bruce Clark, Darrell Joyce, Tony Vicich, and Kip Addotta. The next time you\u2019re visiting Las Vegas, drop by the Riviera and watch a comedy show. Then dump some money in a slot machine on the way out to ensure that the Riviera Hotel & Casino continues making enough money to keep its comedy club open. Patrick DeGuire, who helped me form Top Bananas (at www.topbananas.com), our company devoted to providing clean,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Casino in Las Vegas: Steve Schirripa (who also appears on the HBO show, The Sopranos, which you can read about at www. hbo.com/sopranos), Don Learned, Bob Zany, Gerry Bednob, Bruce Clark, Darrell Joyce, Tony Vicich, and Kip Addotta. The next time you\u2019re visiting Las Vegas, drop by the Riviera and watch a comedy show. Then dump some money in a slot machine on the way out to ensure that the Riviera Hotel & Casino continues making enough money to keep its comedy club open. Patrick DeGuire, who helped me form Top Bananas (at www.topbananas.com), our company devoted to providing clean, quality stand-up comedy to the wonderful people in San Diego. Thanks must also go to Leo (the man, the myth, the legend) Fontaine, Chris (the Zooman) Clobber, and Dante (who gets excited just to see his name in a book). Author\u2019s Acknowledgments If it weren\u2019t for Matt Wagner and Bill Gladstone at Waterside Productions, I may never have written this book (and someone else may have). That\u2019s why I don\u2019t mind paying these guys 15 percent of the book royalties so that they can afford to buy their groceries. Additional thanks go to Allen Wyatt (the technical reviewer) for making sure that everything in this book is accurate, and to Cassandra (my wife) for putting up with multiple computers that (from her point of view) seem to spontaneously appear and disappear from the house at random. Each time a computer disappears, a more advanced model appears that promises more speed and hard disk space but still never seems to have more speed or as much room as the previous computer model that it replaced. A final note of thanks must go to the Chinese and Russians who\u2019ve translated my other books, Microsoft Office For Dummies and Visual Basic For Dummies. The Chinese and Russian editions are the only foreign translations of my books ever to include my previously published references to General Dynamics as a \u201cbomb factory.\u201d Whether translators in other countries purposely omitted this humorous reference or whether it\u2019s just a coincidence that only the Chinese and Russian editions included this reference is unknown. Still, this fact alone provides an endless source of amusement to think that Chinese and Russian readers are privy to an American joking about his country\u2019s nuclear missile factories, while readers in other countries are not. For that reason alone, the Chinese and Russian translators of my books have my eternal gratitude and blessing, not because they happen to be Chinese or Russian, but because they appear to be able to appreciate a joke. Publisher\u2019s Acknowledgments We\u2019re proud of this book; please send us your comments through our online registration form located at www.dummies.com/register/. Some of the people who helped bring this book to market include the following: Acquisitions, Editorial, and Media Development Project Editor: Andrea C. Boucher (Previous Edition: Linda Morris) Acquisitions Editor: Bob Woerner Technical Editor: Allen Wyatt Editorial Manager: Carol Sheehan Permissions Editor: Carmen Krikorian, Senior Permissions Editor Media Development Specialist: Travis"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "of my books have my eternal gratitude and blessing, not because they happen to be Chinese or Russian, but because they appear to be able to appreciate a joke. Publisher\u2019s Acknowledgments We\u2019re proud of this book; please send us your comments through our online registration form located at www.dummies.com/register/. Some of the people who helped bring this book to market include the following: Acquisitions, Editorial, and Media Development Project Editor: Andrea C. Boucher (Previous Edition: Linda Morris) Acquisitions Editor: Bob Woerner Technical Editor: Allen Wyatt Editorial Manager: Carol Sheehan Permissions Editor: Carmen Krikorian, Senior Permissions Editor Media Development Specialist: Travis Silvers Media Development Manager: Laura VanWinkle Media Development Supervisor: Richard Graves Editorial Assistant: Amanda Foxworth Cartoons: Rich Tennant (www.the5thwave.com) Production Project Coordinator: Erin Smith Layout and Graphics: Seth Conley, Michael Kruzil, Barry Offringa, Lynsey Osborne, Heather Ryan, Shae Wilson, Melanie Wolven Proofreaders: TECHBOOKS Production Services, Carl William Pierce, Brian H. Walls Indexer: TECHBOOKS Production Service Publishing and Editorial for Technology Dummies Richard Swadley, Vice President and Executive Group Publisher Andy Cummings, Vice President and Publisher Mary C. Corder, Editorial Director Publishing for Consumer Dummies Diane Graves Steele, Vice President and Publisher Joyce Pepple, Acquisitions Director Composition Services Gerry Fahey, Vice President of Production Services Debbie Stailey, Director of Composition Services Contents at a Glance Introduction ................................................................1 Part I: Programming a Computer ...................................7 Chapter 1: Learning Computer Programming for the First Time ................................9 Chapter 2: All about Programming Languages ............................................................19 Chapter 3: How to Write a Program ..............................................................................37 Chapter 4: The Tools of a Computer Programmer ......................................................47 Part II: Learning Programming with Liberty BASIC ......59 Chapter 5: Getting Your Hands on a Real Language: Liberty BASIC .........................61 Chapter 6: Handling Input and Output .........................................................................71 Chapter 7: Variables, Constants, and Comments ........................................................79 Chapter 8: Crunching Numbers and Playing with Strings ..........................................95 Chapter 9: Making Decisions with Control Statements ............................................111 Chapter 10: Repeating Yourself with Loops ...............................................................129 Part III: Advanced Programming with Liberty BASIC ..................................................139 Chapter 11: Writing Large Programs by Using Subprograms ..................................141 Chapter 12: Drawing Pictures and Making Noise ......................................................161 Chapter 13: Saving and Retrieving Stuff in Files ........................................................175 Chapter 14: Creating a User Interface .........................................................................191 Chapter 15: Debugging Programs ................................................................................215 Part IV: Dealing with Data Structures .......................223 Chapter 16: Storing Stuff in Arrays ..............................................................................225 Chapter 17: Lumping Related Data in Records ..........................................................235 Chapter 18: Linked Lists and Pointers ........................................................................241 Chapter 19: Playing with Object-Oriented Programming .........................................255 Part V: Algorithms: Telling the Computer What to Do ...............................................267 Chapter 20: Sorting .......................................................................................................269 Chapter 21: Searching ...................................................................................................287 Chapter 22: Optimizing Your Code ..............................................................................299 Part VI: Internet Programming ..................................309 Chapter 23: Playing with HTML ...................................................................................311 Chapter 24: Making Interactive Web Pages with JavaScript ....................................339 Chapter 25 Using Java Applets on Web Pages ...........................................................351 Part VII: The Part of Tens .........................................359 Chapter 26: Ten Cool Programming Careers ..............................................................361 Chapter 27: Ten Additional Programming Resources ...............................................371 Appendix: About the CD ...............................................................................................387 Bonus Chapter: Programming in Python....................CD-1 Index ......................................................................395 End-User License Agreement .....................................413 Table of Contents Introduction .................................................................1 Who Should Buy This Book ...........................................................................2 How This Book"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the Computer What to Do ...............................................267 Chapter 20: Sorting .......................................................................................................269 Chapter 21: Searching ...................................................................................................287 Chapter 22: Optimizing Your Code ..............................................................................299 Part VI: Internet Programming ..................................309 Chapter 23: Playing with HTML ...................................................................................311 Chapter 24: Making Interactive Web Pages with JavaScript ....................................339 Chapter 25 Using Java Applets on Web Pages ...........................................................351 Part VII: The Part of Tens .........................................359 Chapter 26: Ten Cool Programming Careers ..............................................................361 Chapter 27: Ten Additional Programming Resources ...............................................371 Appendix: About the CD ...............................................................................................387 Bonus Chapter: Programming in Python....................CD-1 Index ......................................................................395 End-User License Agreement .....................................413 Table of Contents Introduction .................................................................1 Who Should Buy This Book ...........................................................................2 How This Book Is Organized ..........................................................................2 Part I: Programming a Computer .........................................................2 Part II: Learning Programming with Liberty BASIC ...........................3 Part III: Advanced Programming with Liberty BASIC ........................3 Part IV: Dealing with Data Structures .................................................3 Part V: Algorithms: Telling the Computer What to Do .....................4 Part VI: Internet Programming .............................................................4 Part VII: The Part of Tens .....................................................................4 How to Use This Book ....................................................................................5 Foolish assumptions .............................................................................5 Icons used in this book .........................................................................5 Part I: Programming a Computer ...................................7 Chapter 1: Learning Computer Programming for the First Time . . . . . .9 Why Learn Computer Programming? ...........................................................9 How Does a Computer Program Work? ......................................................13 Programming is problem-solving ......................................................14 Programming isn\u2019t difficult; it\u2019s just time-consuming .....................15 What Do I Need to Know to Program a Computer? ..................................16 Chapter 2: All about Programming Languages . . . . . . . . . . . . . . . . . . .19 Why So Many Different Programming Languages? ...................................19 The joy of assembly language ............................................................20 C: The portable assembler .................................................................22 High-level programming languages ...................................................24 Rapid Application Development (RAD) programming languages ..................................................................27 Database programming languages ....................................................29 Scripting programming languages ....................................................30 Web-page programming languages ...................................................32 So What\u2019s the Best Programming Language to Learn? .............................34 Chapter 3: How to Write a Program . . . . . . . . . . . . . . . . . . . . . . . . . . . .37 Before You Write Your Program ..................................................................37 The program\u2019s users ...........................................................................38 The target computer ...........................................................................38 Your own programming skill ..............................................................39 Beginning Programming For Dummies, 3rd Edition x The Technical Details of Writing a Program ..............................................40 Prototyping ..........................................................................................41 Choosing a programming language ...................................................42 Defining how the program should work ...........................................43 The Life Cycle of a Typical Program ...........................................................44 The development cycle ......................................................................44 The maintenance cycle .......................................................................45 The upgrade cycle ...............................................................................46 Chapter 4: The Tools of a Computer Programmer . . . . . . . . . . . . . . . . .47 Writing Programs in an Editor .....................................................................48 Using a Compiler or an Interpreter .............................................................50 Compilers .............................................................................................50 Interpreters ..........................................................................................51 P-code: A combination compiler and interpreter ...........................51 So what do I use? .................................................................................53 Squashing Bugs with a Debugger ................................................................53 Writing a Help File .........................................................................................55 Creating an Installation Program ................................................................56 Part II: Learning Programming with Liberty BASIC .......59 Chapter 5: Getting Your Hands on a Real Language: Liberty BASIC . . . . . . . ."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "cycle ...............................................................................46 Chapter 4: The Tools of a Computer Programmer . . . . . . . . . . . . . . . . .47 Writing Programs in an Editor .....................................................................48 Using a Compiler or an Interpreter .............................................................50 Compilers .............................................................................................50 Interpreters ..........................................................................................51 P-code: A combination compiler and interpreter ...........................51 So what do I use? .................................................................................53 Squashing Bugs with a Debugger ................................................................53 Writing a Help File .........................................................................................55 Creating an Installation Program ................................................................56 Part II: Learning Programming with Liberty BASIC .......59 Chapter 5: Getting Your Hands on a Real Language: Liberty BASIC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .61 Why Learn Liberty BASIC? ...........................................................................62 Liberty BASIC is (almost) free ...........................................................62 Liberty BASIC is easy ..........................................................................62 Liberty BASIC runs on Windows .......................................................62 You can start using Liberty BASIC today .........................................63 Installing Liberty BASIC ................................................................................63 Loading Liberty BASIC ..................................................................................64 Your First Liberty BASIC Program ...............................................................64 Running a Liberty BASIC program .....................................................65 Saving a Liberty BASIC program ........................................................66 Loading or starting a Liberty BASIC program ..................................67 Using Keystroke Commands in Liberty BASIC ..........................................68 Getting Help Using Liberty BASIC ...............................................................69 Exiting Liberty BASIC ....................................................................................70 Chapter 6: Handling Input and Output . . . . . . . . . . . . . . . . . . . . . . . . . . .71 Inputting and Outputting Data: The Old-Fashioned Way .........................71 Inputting and Outputting Data: The Modern Way .....................................74 Getting input ........................................................................................74 Displaying output ................................................................................75 Sending Data to the Printer ..........................................................................76 Chapter 7: Variables, Constants, and Comments . . . . . . . . . . . . . . . . .79 Storing Data in Variables ..............................................................................80 Creating a variable ..............................................................................81 Assigning a value to a variable ..........................................................83 Declaring your variables ....................................................................87 Using Constants .............................................................................................90 Commenting Your Code ...............................................................................92 Chapter 8: Crunching Numbers and Playing with Strings . . . . . . . . .95 Adding, Subtracting, Dividing, and Multiplying ........................................95 Using variables ....................................................................................96 Working with precedence ...................................................................97 Using parentheses ...............................................................................99 Using Liberty BASIC\u2019s Built-In Math Functions .......................................100 Manipulating Strings ...................................................................................101 Declaring variables as strings ..........................................................102 Smashing strings together ...............................................................103 Playing with Liberty BASIC\u2019s String Functions ........................................103 Playing with UPPERCASE and lowercase .......................................104 Counting the length of a string ........................................................104 Trimming the front and back of a string .........................................105 Inserting spaces .................................................................................106 Yanking characters out of a string ..................................................106 Looking for a string inside another string ......................................107 Converting strings into numbers (and vice versa) .......................108 Chapter 9: Making Decisions with Control Statements . . . . . . . . . .111 Using Boolean Expressions ........................................................................111 Using variables in Boolean expressions .........................................113 Using Boolean operators ..................................................................114 Exploring IF THEN Statements ..................................................................119 IF THEN ELSE statements .................................................................120 Working with SELECT CASE Statements ..................................................121 Checking a range of values ...............................................................124 Checking a relational operator ........................................................125 Chapter 10: Repeating Yourself"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "a string ........................................................104 Trimming the front and back of a string .........................................105 Inserting spaces .................................................................................106 Yanking characters out of a string ..................................................106 Looking for a string inside another string ......................................107 Converting strings into numbers (and vice versa) .......................108 Chapter 9: Making Decisions with Control Statements . . . . . . . . . .111 Using Boolean Expressions ........................................................................111 Using variables in Boolean expressions .........................................113 Using Boolean operators ..................................................................114 Exploring IF THEN Statements ..................................................................119 IF THEN ELSE statements .................................................................120 Working with SELECT CASE Statements ..................................................121 Checking a range of values ...............................................................124 Checking a relational operator ........................................................125 Chapter 10: Repeating Yourself with Loops . . . . . . . . . . . . . . . . . . . . .129 Using the WHILE-WEND Loop ....................................................................130 Exiting a WHILE-WEND loop prematurely ......................................131 Endless loops #1: Failing to modify the Boolean expression inside the loop ...............................................................................132 Endless loops #2: Failing to initialize a Boolean expression outside the loop .............................................................................133 Looping a Fixed Number of Times ............................................................134 Counting with different numbers ....................................................135 Counting in increments ....................................................................135 Exiting a FOR-NEXT loop prematurely ............................................137 xi Table of Contents Part III: Advanced Programming with Liberty BASIC ..................................................139 Chapter 11: Writing Large Programs by Using Subprograms . . . . . .141 Breaking the Bad Programming Habits of the Past .................................141 Introducing Structured Programming ......................................................144 Sequential instructions .....................................................................144 Branching instructions .....................................................................144 Looping instructions .........................................................................145 Putting structured programming into practice .............................146 Writing Modular Programs .........................................................................147 Using Subroutines .......................................................................................150 Defining a subroutine ........................................................................151 Passing data to a subroutine ............................................................151 Calling a subroutine ..........................................................................153 Exiting prematurely from a subroutine ..........................................154 Using Functions ...........................................................................................155 Defining a function ............................................................................155 Passing data to a function ................................................................156 Calling a function ...............................................................................156 Exiting prematurely from a function ...............................................158 Passing Data by Value or by Reference ....................................................158 Chapter 12: Drawing Pictures and Making Noise . . . . . . . . . . . . . . .161 Creating a Graphics Control ......................................................................161 Using Turtle Graphics .................................................................................162 Defining line thickness ......................................................................166 Defining line colors ...........................................................................167 Drawing Circles ...........................................................................................168 Drawing Boxes .............................................................................................170 Displaying text .............................................................................................171 Making Sounds ............................................................................................172 Making a beeping noise ....................................................................173 Playing WAV files ................................................................................173 Chapter 13: Saving and Retrieving Stuff in Files . . . . . . . . . . . . . . . . .175 Storing Stuff in Text Files ............................................................................175 Creating a new text file .....................................................................176 Putting stuff in a text file ..................................................................176 Adding new stuff to an existing text file .........................................177 Retrieving data from a text file ........................................................178 Storing Stuff in Random-Access Files .......................................................180 Creating a new random-access file ..................................................181 Saving data into a random-access file ............................................183 Retrieving data from a random-access file .....................................184 Beginning Programming For Dummies, 3rd Edition xii Saving and Retrieving Data in a Binary File .............................................186 Creating a new binary file .................................................................186 Saving stuff in a binary file ...............................................................187 Changing stuff in a binary file ..........................................................187 Retrieving stuff from a binary file ...................................................189 Chapter 14: Creating a User Interface . . . . . . . . . . ."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "stuff to an existing text file .........................................177 Retrieving data from a text file ........................................................178 Storing Stuff in Random-Access Files .......................................................180 Creating a new random-access file ..................................................181 Saving data into a random-access file ............................................183 Retrieving data from a random-access file .....................................184 Beginning Programming For Dummies, 3rd Edition xii Saving and Retrieving Data in a Binary File .............................................186 Creating a new binary file .................................................................186 Saving stuff in a binary file ...............................................................187 Changing stuff in a binary file ..........................................................187 Retrieving stuff from a binary file ...................................................189 Chapter 14: Creating a User Interface . . . . . . . . . . . . . . . . . . . . . . . . . .191 Designing a Window ....................................................................................191 Creating a new window .....................................................................192 Defining the size and location of a window ...................................193 Adding color to a window ................................................................194 Putting Pull-Down Menus in a Window ....................................................195 Making Pop-Up Menus ................................................................................198 Putting Controls in a Window ....................................................................200 Creating a command button ............................................................200 Displaying text ...................................................................................203 Creating a check box .........................................................................204 Creating a radio button .....................................................................205 Creating text boxes ...........................................................................207 Creating list boxes .............................................................................209 Creating combo boxes ......................................................................211 Creating group boxes ........................................................................213 Chapter 15: Debugging Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . .215 Anatomy of a Computer Bug ......................................................................215 Syntax Errors ...............................................................................................216 Run-Time Errors ..........................................................................................218 Fun with Logic Errors .................................................................................219 Stepping line by line ..........................................................................220 Tracing through your program ........................................................221 Part IV: Dealing with Data Structures ........................223 Chapter 16: Storing Stuff in Arrays . . . . . . . . . . . . . . . . . . . . . . . . . . . .225 Making an Array ..........................................................................................226 Storing (and Retrieving) Data in an Array ...............................................228 Making a Multidimensional Array .............................................................230 Creating Dynamic Arrays ...........................................................................232 Chapter 17: Lumping Related Data in Records . . . . . . . . . . . . . . . . . .235 Creating a Record ........................................................................................236 Manipulating Data in Records ...................................................................237 Storing data in a record ....................................................................237 Retrieving data from a record ..........................................................238 Using Records with Arrays ........................................................................239 xiii Table of Contents Chapter 18: Linked Lists and Pointers . . . . . . . . . . . . . . . . . . . . . . . . . .241 Starting with a Pointer ................................................................................241 Defining the parts of a linked list ....................................................243 Creating a linked list .........................................................................245 Managing a linked list .......................................................................247 Making Data Structures with Linked Lists ...............................................249 Double-linked lists .............................................................................249 Circular-linked lists ...........................................................................250 Stacks ..................................................................................................251 Queues ................................................................................................252 Trees ...................................................................................................253 Graphs .................................................................................................254 Chapter 19: Playing with Object-Oriented Programming . . . . . . . . .255 The Problem with Software .......................................................................256 Ways to Make Programming Easier ..........................................................256 Breaking Programs into Objects ...............................................................258 How to use objects ............................................................................259 How to create an object ....................................................................261 Writing an object\u2019s methods ............................................................262 Creating an object .............................................................................263 Choosing an Object-Oriented Language ...................................................265 Part"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "with a Pointer ................................................................................241 Defining the parts of a linked list ....................................................243 Creating a linked list .........................................................................245 Managing a linked list .......................................................................247 Making Data Structures with Linked Lists ...............................................249 Double-linked lists .............................................................................249 Circular-linked lists ...........................................................................250 Stacks ..................................................................................................251 Queues ................................................................................................252 Trees ...................................................................................................253 Graphs .................................................................................................254 Chapter 19: Playing with Object-Oriented Programming . . . . . . . . .255 The Problem with Software .......................................................................256 Ways to Make Programming Easier ..........................................................256 Breaking Programs into Objects ...............................................................258 How to use objects ............................................................................259 How to create an object ....................................................................261 Writing an object\u2019s methods ............................................................262 Creating an object .............................................................................263 Choosing an Object-Oriented Language ...................................................265 Part V: Algorithms: Telling the Computer What to Do ..............................................................267 Chapter 20: Sorting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .269 Insertion Sort ...............................................................................................270 Bubble Sort ..................................................................................................273 Shell Sort ......................................................................................................276 Quicksort ......................................................................................................280 Sorting Algorithms ......................................................................................283 Chapter 21: Searching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .287 Searching Sequentially ...............................................................................287 Performing a Binary Search .......................................................................289 Hashing .........................................................................................................292 Dealing with collisions ......................................................................293 Searching by using a hash function ................................................294 Picking a Searching Algorithm ...................................................................297 Beginning Programming For Dummies, 3rd Edition xiv xv Table of Contents Chapter 22: Optimizing Your Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . .299 Choosing the Right Data Structure ...........................................................300 Choosing the Right Algorithm ...................................................................300 Fine-Tuning the Source Code .....................................................................301 Put the condition most likely to be false first ................................301 Put the condition most likely to be true first ................................302 Don\u2019t run a FOR-NEXT loop needlessly ..........................................303 Clean out your loops .........................................................................304 Use the correct data types ...............................................................304 Use built-in commands whenever possible ...................................306 Using a Faster Language .............................................................................306 Optimizing Your Compiler .........................................................................307 Part VI: Internet Programming ..................................309 Chapter 23: Playing with HTML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .311 Grasping the Basics of HTML ....................................................................312 Grasping the most important HTML tags .......................................313 Creating a header and title ...............................................................313 Defining the bulk of your Web page ................................................314 Adding comments .............................................................................314 Defining Text with Tags ..............................................................................315 Making a heading ...............................................................................315 Defining a paragraph .........................................................................316 Highlighting a quote ..........................................................................317 Adding emphasis to text ...................................................................318 Using Tag Attributes ...................................................................................319 Aligning text .......................................................................................319 Playing with colors ............................................................................319 Coloring your hyperlinks ..................................................................320 Making a List ................................................................................................321 Unordered lists ..................................................................................321 Ordered lists ......................................................................................323 Definition lists ....................................................................................323 Creating Hyperlinks ....................................................................................325 Making external hyperlinks ..............................................................326 Making internal hyperlinks ..............................................................326 Linking to a specific spot on a Web page .......................................326 Displaying Graphics ....................................................................................327 Putting a picture on a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "important HTML tags .......................................313 Creating a header and title ...............................................................313 Defining the bulk of your Web page ................................................314 Adding comments .............................................................................314 Defining Text with Tags ..............................................................................315 Making a heading ...............................................................................315 Defining a paragraph .........................................................................316 Highlighting a quote ..........................................................................317 Adding emphasis to text ...................................................................318 Using Tag Attributes ...................................................................................319 Aligning text .......................................................................................319 Playing with colors ............................................................................319 Coloring your hyperlinks ..................................................................320 Making a List ................................................................................................321 Unordered lists ..................................................................................321 Ordered lists ......................................................................................323 Definition lists ....................................................................................323 Creating Hyperlinks ....................................................................................325 Making external hyperlinks ..............................................................326 Making internal hyperlinks ..............................................................326 Linking to a specific spot on a Web page .......................................326 Displaying Graphics ....................................................................................327 Putting a picture on a Web page ......................................................328 Adding a background picture ..........................................................329 Creating a User Interface on a Form .........................................................329 Handling events .................................................................................330 Creating a text box ............................................................................331 Creating a command button ............................................................332 Creating a check box .........................................................................333 Creating a radio button .....................................................................335 Deciding to Use Additional HTML Features .............................................337 Chapter 24: Making Interactive Web Pages with JavaScript . . . . .339 Understanding the Basics of JavaScript ...................................................340 Displaying text ...................................................................................341 Creating variables ..............................................................................342 Making dialog boxes .........................................................................343 Playing with Functions ...............................................................................345 Opening and Closing a Window .................................................................347 Opening a window .............................................................................348 Defining a window\u2019s appearance .....................................................348 Closing a window ...............................................................................349 Chapter 25: Using Java Applets on Web Pages . . . . . . . . . . . . . . . . .351 How Java Applets Work ..............................................................................351 Adding a Java Applet to a Web Page .........................................................354 Defining the size of a Java applet window .....................................354 Aligning the location of a Java applet window ..............................355 Defining space around a Java applet ..............................................356 Finding Free Java Applets ..........................................................................358 Part VII: The Part of Tens ..........................................359 Chapter 26: Ten Cool Programming Careers . . . . . . . . . . . . . . . . . . . .361 Programming Computer Games for Fun and Profit ................................361 Creating Computer Animation ...................................................................363 Making (and Breaking) Encryption ...........................................................364 Internet Programming ................................................................................365 Fighting Computer Viruses and Worms ...................................................366 Hacking for Hire ...........................................................................................367 Participating in an Open-Source Project ..................................................368 Niche-Market Programming .......................................................................369 Teaching Others about Computers ...........................................................369 Selling Your Own Software .........................................................................370 Beginning Programming For Dummies, 3rd Edition xvi Chapter 27: Ten Additional Programming Resources . . . . . . . . . . . .371 Trying Commercial Compilers ...................................................................372 Windows programming .....................................................................372 Macintosh and Palm OS programming ...........................................374 Linux programming ...........................................................................375 Testing the Shareware and Freeware Compilers .....................................376 BASIC compilers ................................................................................376 C/C++ and Java compilers ................................................................377 Pascal compilers ...............................................................................377 Oddball language compilers and interpreters ...............................378 Using a Proprietary Language ...................................................................378 HyperCard ..........................................................................................379 Revolution ..........................................................................................380 PowerBuilder .....................................................................................380 Shopping by Mail Order .............................................................................380 Getting Your Hands on Source Code ........................................................381 Joining a Local User Group ........................................................................382 Frequenting Usenet Newsgroups ..............................................................382 Playing Core War .........................................................................................383 Programming a Battling Robot ..................................................................384 Toying with Lego Mindstorms ...................................................................385 Appendix: About the CD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "C/C++ and Java compilers ................................................................377 Pascal compilers ...............................................................................377 Oddball language compilers and interpreters ...............................378 Using a Proprietary Language ...................................................................378 HyperCard ..........................................................................................379 Revolution ..........................................................................................380 PowerBuilder .....................................................................................380 Shopping by Mail Order .............................................................................380 Getting Your Hands on Source Code ........................................................381 Joining a Local User Group ........................................................................382 Frequenting Usenet Newsgroups ..............................................................382 Playing Core War .........................................................................................383 Programming a Battling Robot ..................................................................384 Toying with Lego Mindstorms ...................................................................385 Appendix: About the CD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .387 System Requirements .................................................................................387 Using the CD with Microsoft Windows .....................................................388 Using the CD with Mac OS ..........................................................................389 Using the CD with Linux ............................................................................389 What You\u2019ll Find ..........................................................................................390 Software ..............................................................................................390 If You\u2019ve Got Problems (Of the CD Kind) .................................................392 Bonus Chapter: Programming in Python . . . . . . . . . . . . . . . . . . . . . . .CD-1 Understanding Python .............................................................................CD-1 Playing with data..............................................................................CD-3 Data structures.................................................................................CD-5 Comments ........................................................................................CD-7 Using Control Structures...........................................................................CD-8 Using Control Structures...........................................................................CD-9 The while statement ......................................................................CD-10 The for statement...........................................................................CD-10 Writing Subprograms in Python.............................................................CD-11 Index ......................................................................395 End-User License Agreement .....................................413 xvii Table of Contents Beginning Programming For Dummies, 3rd Edition xviii Introduction F irst of all, anyone can learn to program a computer. Computer program- ming doesn\u2019t require a high IQ and an innate proficiency in advanced mathematics. Computer programming just requires a desire to learn and the patience never to give up. Programming is a skill like swimming, dancing, and juggling. Some people are naturally better than others, but anyone can get better with constant prac- tice. That\u2019s why so many kids become programming wizards at such an early age. The kids aren\u2019t necessarily brilliant; they\u2019re just willing to put in the time to learn a new skill, and they\u2019re not afraid of failing. If you ever dreamed about writing your own programs, rest assured that you can. Programming can be lots of fun, but it can also be frustrating, annoying, and time-consuming. That\u2019s why Wiley publishes this particular book \u2014 to help you discover how to program a computer with the minimum amount of inconvenience and the maximum amount of enjoyment. Whether you want to pick up computer programming for fun, to start a new career, or to help make your current job easier, consider this book your per- sonal guide through the sometimes scary \u2014 and initially intimidating \u2014 world of computer programming. After you finish this book, you can choose the best programming language to accomplish a particular task, understand the tools that programmers use, and even write your own programs for personal use or for sale to others. And after you read Beginning Programming For Dummies, 3rd Edition, you can find more detailed information about specific languages by reading Visual BASIC.NET For Windows For Dummies, by Wallace Wang; C For Dummies, by Dan Gookin; Visual C++ .NET For Dummies, by Michael Hyman and"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "book your per- sonal guide through the sometimes scary \u2014 and initially intimidating \u2014 world of computer programming. After you finish this book, you can choose the best programming language to accomplish a particular task, understand the tools that programmers use, and even write your own programs for personal use or for sale to others. And after you read Beginning Programming For Dummies, 3rd Edition, you can find more detailed information about specific languages by reading Visual BASIC.NET For Windows For Dummies, by Wallace Wang; C For Dummies, by Dan Gookin; Visual C++ .NET For Dummies, by Michael Hyman and Bob Arnson; C++ For Dummies and C# For Dummies, by Stephen R. Davis; Beginning Programming with Java For Dummies, by Barry Burd; Windows Game Programming For Dummies, by Andre LaMothe; or Perl For Dummies, by Paul Hoffman (all published by Wiley Publishing). Who Should Buy This Book Everyone should buy this book right now because you know the importance of stimulating the economy by spending as much money as possible so the current President can stay in office another four years. But you should espe- cially buy this book if you want to know any of the following: \u0001 How to write a computer program \u0001 The best programming languages to use and why \u0001 Shortcuts for programming a computer as simply and quickly as possible \u0001 The evolution of computer programming languages \u0001 How to program a Macintosh, Palm handheld, Linux, Windows 98/Me/NT/2000/XP, or PocketPC computer \u0001 Whether to write your next computer program by using Visual BASIC, C++, Perl, SmallTalk, C#, or some other programming language To help you start right away, this book shows you how to use a program- ming language by the name of Liberty BASIC, which is a shareware BASIC compiler that you can download from the Liberty BASIC Web site at www. libertybasic.com (or copy from the CD that comes with this book). By using this book and Liberty BASIC, you can start programming right away, and later, if you want, graduate to the other programming books in the popu- lar For Dummies series. How This Book Is Organized This book follows the time-honored tradition of the printing industry by orga- nizing consecutively numbered pages one after the other to form a book. To help you find what you need quickly, this book consists of seven parts, where each part covers a certain topic about programming a computer, as the fol- lowing sections describe. Whenever you need help, just flip through the book, find the part that covers the topic you\u2019re looking for, and then keep the book at your side as you get back to work. Part I: Programming a Computer If computer programming seems a mysterious arcane science, relax. This part of the book demystifies all the common myths about computer programming, 2 Beginning Programming For Dummies, 3rd Edition shows you exactly how computer programs work, and explains why program- ming isn\u2019t as difficult as many people think. To help you"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "topic about programming a computer, as the fol- lowing sections describe. Whenever you need help, just flip through the book, find the part that covers the topic you\u2019re looking for, and then keep the book at your side as you get back to work. Part I: Programming a Computer If computer programming seems a mysterious arcane science, relax. This part of the book demystifies all the common myths about computer programming, 2 Beginning Programming For Dummies, 3rd Edition shows you exactly how computer programs work, and explains why program- ming isn\u2019t as difficult as many people think. To help you better understand programming, this part also shows you how programming has evolved, why so many different programming languages exist, and how programming follows easy-to-remember principles so you can start programming your own computer right away. Part II: Learning Programming with Liberty BASIC Trying to pick up programming from a book is like trying to learn judo by reading a pamphlet. In both cases, you may glean a theoretical understanding of the subject, but until you actually practice your skill, you don\u2019t know how much you really picked up. To give you practical, hands-on experience in using an honest-to-goodness programming language, this part of the book explains how to install and use Liberty BASIC so that you can write real computer programs by using the BASIC programming language. Writing programs in Liberty BASIC helps you to better understand how programming really works as you work with pro- grams and see the results right on your own computer. Part III: Advanced Programming with Liberty BASIC Liberty BASIC provides plenty of advanced features for displaying graphics, making sound, and debugging your programs. This part of the book shows you how to take advantage of these special features and shows you the prin- ciples behind writing programs in other languages at the same time. Part IV: Dealing with Data Structures As do people, computers need a place to store information. People usually dump their information in wallets, purses, filing cabinets, or garages, but computers don\u2019t have that luxury. Instead, computers must store information in something known as a data structure. Every computer program uses data structures, and programmers 3 Introduction invent all sorts of different data structures for various uses. So in this part of the book, I explain how every program uses data structures and provide hands-on examples you can try using Liberty BASIC. Part V: Algorithms: Telling the Computer What to Do Algorithms are a fancy way of telling a computer how to accomplish a specific task, step-by-step. Think of an algorithm as a recipe that the computer blindly follows without question. One perfect algorithm doesn\u2019t exist for writing all computer programs, just as one perfect recipe doesn\u2019t exist for making all dinners. To make programming easier, programmers invent common algorithms for accomplishing certain tasks. This part of the book explains how those algorithms work and why you want to use them. Part VI: Internet Programming The Internet is an integral part"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "BASIC. Part V: Algorithms: Telling the Computer What to Do Algorithms are a fancy way of telling a computer how to accomplish a specific task, step-by-step. Think of an algorithm as a recipe that the computer blindly follows without question. One perfect algorithm doesn\u2019t exist for writing all computer programs, just as one perfect recipe doesn\u2019t exist for making all dinners. To make programming easier, programmers invent common algorithms for accomplishing certain tasks. This part of the book explains how those algorithms work and why you want to use them. Part VI: Internet Programming The Internet is an integral part of the computer world, so this part of the book introduces you to the basics of various Internet languages, including HTML (which designs the appearance of Web pages), JavaScript, and Java. In this part, you also see how other people create cool Web pages that look good and can display forms and respond to users. You can use this informa- tion to create Web sites that interact with users. Part VII: The Part of Tens To help gently guide you toward writing your own programs, this part of the book provides information that you may find useful to take your program- ming education a step farther. This part is where the book shows you many of the opportunities that a career in programming can offer. In this part, too, you discover where to find and use various free or commercial programming languages available on the Internet or on this book\u2019s enclosed CD. Many of these programming lan- guages sport common names such as C++ and BASIC \u2014 or bizarre names such as LISP, Oberon, and Python. 4 Beginning Programming For Dummies, 3rd Edition How to Use This Book Most people use this book to read, although a few are known to line their bookshelves with copies to give the room a more literary appearance. You\u2019re most likely to use this book as a reference, a tutorial, or a weapon (if you can throw it really hard at somebody you don\u2019t like). Ideally, you want to use this book along with your computer. Read some of the book and then try what you just read on your computer so that you can see with your own eyes how programming works. Foolish assumptions To get the most out of this book, you need access to a computer (because trying to understand computer programming is tough if you can\u2019t get near a computer). To take full advantage of this book, you need a computer running Microsoft Windows 98, Windows Me, Windows NT, Windows 2000, or Windows XP. If you don\u2019t feel comfortable with Windows 98, Windows Me, Windows 2000, or Windows XP, buy Windows 98 For Dummies, Windows Me For Dummies, or Windows XP For Dummies, all by Andy Rathbone (and published by Wiley Publishing). For more information about Windows NT or 2000, pick up a copy of Windows NT 4 For Dummies or Windows 2000 Professional For Dummies, both by Andy Rathbone"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "programming is tough if you can\u2019t get near a computer). To take full advantage of this book, you need a computer running Microsoft Windows 98, Windows Me, Windows NT, Windows 2000, or Windows XP. If you don\u2019t feel comfortable with Windows 98, Windows Me, Windows 2000, or Windows XP, buy Windows 98 For Dummies, Windows Me For Dummies, or Windows XP For Dummies, all by Andy Rathbone (and published by Wiley Publishing). For more information about Windows NT or 2000, pick up a copy of Windows NT 4 For Dummies or Windows 2000 Professional For Dummies, both by Andy Rathbone and Sharon Crawford (also published by Wiley Publishing). Icons used in this book Icons highlight useful tips, important information to remember, or technical explanations that can amuse you for a moment before you forget all about them. Keep an eye open for the following icons throughout the book: This icon highlights useful information that can save you time (as long as you remember it, of course). This icon reminds you to do something or emphasizes an important point that you don\u2019t want to forget. 5 Introduction Watch out! This icon tells you how to avoid potential headaches and trouble. This icon points out step-by-step explanations that show how the computer follows the instructions in a typical program. This icon highlights information that\u2019s nice to know but that you can safely ignore if you choose. (If you want to become a real programmer, however, you need to cram your brain with as much technical information as possible so that you can fit in with the rest of the programmers in the world.) 6 Beginning Programming For Dummies, 3rd Edition Part I Programming a Computer In this part . . . F iguring out how to program a computer may seem intimidating, so this part of the book gently guides you through the wonderful world of computer program- ming. First, you see exactly what programs do and how professionals write programs. Next, you learn why so many different programming lan- guages exist and why some are more popular than others. You get to know the different tools that programmers use to create, edit, and distribute a program from start to \ufb01nish. Finally, this part shows you what to consider if you decide to write a program. You see the pros and cons of using different programming languages and understand how people can write programs even though they may possess very little programming experience. By the time that you \ufb01nish this part of the book, you should have a better idea of how to write a program, what steps to follow, and how to convert your idea for a program into an actual working product that you can sell or give away for others to use. Who knows? With a little bit of imagina- tion and a lot of persistence, you may create the next pro- gram that makes so much money that you can start your own software company and make a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "write programs even though they may possess very little programming experience. By the time that you \ufb01nish this part of the book, you should have a better idea of how to write a program, what steps to follow, and how to convert your idea for a program into an actual working product that you can sell or give away for others to use. Who knows? With a little bit of imagina- tion and a lot of persistence, you may create the next pro- gram that makes so much money that you can start your own software company and make a million bucks. Chapter 1 Learning Computer Programming for the First Time In This Chapter \u0001 Learning computer programming \u0001 Understanding how a computer program works \u0001 Knowing how to program a computer D espite what you may have heard, programming a computer isn\u2019t diffi- cult. Computer programming is a skill that anyone can pick up, given enough practice, patience, and caffeinated beverages. Although computers may seem like tremendously complex electronic beasts, relax. Few people know how an internal-combustion engine works, yet people still figure out how to drive a car. Similarly, anyone can pick up programming skills without worrying (too much) about the specific details that make a computer work. Why Learn Computer Programming? The first question that you (or your friends, co-workers, and relatives) may ask is, \u201cWhy bother learning to program a computer?\u201d The answer depends on your ultimate goals, but the following list offers some common answers to consider: \u0002 For fun: People learn skiing, dancing, gardening, scuba diving, and flower-arranging because they enjoy the experience. Similarly, program- ming a computer can prove fun because you can, for example, design simple programs that display your boss\u2019s ugly face on the computer. More complex programs may make you a million dollars so that you never again need to work for a boss with an ugly face. Figure 1-1 shows a program known as Comedy Writer, which prods users into creating funny ideas. A stand-up comedian wrote the program in BASIC for his own amusement, using a program known as CA-Realizer. Then he decided to sell the program to others. \u0002 To fill a need: Many people learn programming with no intention of becoming a full-time, professional programmer. They just want a pro- gram that solves a particular problem, but they can\u2019t find a program that does it, so they write the program themselves. A psychologist who spe- cialized in dream interpretation used his knowledge and a program known as ToolBook to create and sell DreamScape, a program that inter- prets the meaning of dreams, as shown in Figure 1-2. Whatever your interests, you can write a program to solve a specific problem that others may find useful as well. \u0002 For a new or second career: With computers taking over the world, you\u2019re never unemployed for long if you know how to program a com- puter. Companies are always looking to create new programs, but you also find"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "they write the program themselves. A psychologist who spe- cialized in dream interpretation used his knowledge and a program known as ToolBook to create and sell DreamScape, a program that inter- prets the meaning of dreams, as shown in Figure 1-2. Whatever your interests, you can write a program to solve a specific problem that others may find useful as well. \u0002 For a new or second career: With computers taking over the world, you\u2019re never unemployed for long if you know how to program a com- puter. Companies are always looking to create new programs, but you also find a growing market for programmers who can maintain and modify the millions of existing programs that do everything from storing hotel reser- vations to transferring bank deposits electronically. If you know how to program a computer, you\u2019re in a much better position to earn a lot of money and live wherever you want. You may still want to keep your cur- rent job, but programming gives you a new way to expand and share your knowledge. A group of alternative health-care practitioners, for example, wrote IBIS, a program that provides information for treating a variety of ailments by using acupuncture, massage, diet, and homeopathy (see Figure 1-3). They wrote IBIS by using a program known as MetaCard. \u0002 As an intellectual challenge: Many people find the sheer complexity of computers as fascinating as studying a mathematical puzzle. Not sur- prisingly, computers tend to attract people of above-average intelligence who enjoy programming a computer to pry into the thought processes of their own minds. To help turn a computer into a thinking tool, one programmer created the Axon Idea Processor (see Figure 1-4) by using Prolog, a popular programming language used for researching artificial intelligence. The goal was to create a program to help people manipulate ideas, concepts, and facts so that they can devise a variety of possible solutions while better understanding their own way of thinking in the process. If using a computer normally seems boring, try writing your own program to help you use your brain more effectively. Although you can make a decent living programming computers, you can also make a decent living selling paper clips, fixing leaky toilets, or raising farm animals. If you aren\u2019t doing what you truly enjoy, all the money in the world isn\u2019t going to make your life better. Choose to learn programming because you want to \u2014 not because you think that it\u2019s going to make you rich. 10 Part I: Programming a Computer Figure 1-2: Dream Scape enables your computer to analyze your dreams for hidden meanings. Figure 1-1: Comedy Writer is a program that can help you create funny ideas. 11 Chapter 1: Learning Computer Programming for the First Time Figure 1-4: The Axon Idea Processor turns your computer screen into a canvas for organizing and manipu- lating ideas. Figure 1-3: IBIS harnesses the power of your computer to help health- care practi- tioners find a variety of alternate"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "programming because you want to \u2014 not because you think that it\u2019s going to make you rich. 10 Part I: Programming a Computer Figure 1-2: Dream Scape enables your computer to analyze your dreams for hidden meanings. Figure 1-1: Comedy Writer is a program that can help you create funny ideas. 11 Chapter 1: Learning Computer Programming for the First Time Figure 1-4: The Axon Idea Processor turns your computer screen into a canvas for organizing and manipu- lating ideas. Figure 1-3: IBIS harnesses the power of your computer to help health- care practi- tioners find a variety of alternate health-care procedures for curing different diseases. 12 Part I: Programming a Computer How Does a Computer Program Work? Computers don\u2019t do anything without someone telling them what to do, much like the average teenager. To make the computer do something useful, you must give it instructions in either of the following two ways: \u0002 Write a program, which tells a computer what to do, step-by-step, much as you write out a recipe. \u0002 Buy a program that someone else has already written that tells the com- puter what to do. Ultimately, to get a computer to do something useful, you (or somebody else) must write a program. A program does nothing more than tell the computer how to accept some type of input, manipulate that input, and spit it back out again in some form that humans find useful. Table 1-1 lists some common types of programs, the type of input that they accept, and the output that they produce. Table 1-1 Input and Output for Various Programs Type of Input What the Output Program Program Does Word Characters you Formats the text; Displays and processor type from the corrects spelling prints neatly keyboard organized text Game Keystrokes Calculates how fast Moves a or joystick and far to move a cartoon figure movements cartoon figure on-screen on-screen Stock-market Current and past Tries to recognize Predicts the predictor prices for stocks trends in a stock\u2019s future price of price fluctuations a stock Missile guidance Current location Calculates how to Corrects the program of the missile and make the missile\u2019s trajectory so the target location and the that it stays target\u2019s location aimed at the coincide target (continued) 13 Chapter 1: Learning Computer Programming for the First Time Table 1-1 (continued) Type of Input What the Output Program Program Does Optical character Text from Recognizes Converts recognition (OCR) a scanner shapes of scanned text characters into a text file that a word pro- cessor can edit Web browser HyperText Markup Converts the HTML Displays Web Language (HTML) codes into text and pages on- codes on other graphics screen computers Programming is problem-solving Essentially, a program tells the computer how to solve a specific problem. Because the world is full of problems, the number and variety of programs that people can write for computers is practically endless. But to tell a computer how to solve one big problem, you usually must tell the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Text from Recognizes Converts recognition (OCR) a scanner shapes of scanned text characters into a text file that a word pro- cessor can edit Web browser HyperText Markup Converts the HTML Displays Web Language (HTML) codes into text and pages on- codes on other graphics screen computers Programming is problem-solving Essentially, a program tells the computer how to solve a specific problem. Because the world is full of problems, the number and variety of programs that people can write for computers is practically endless. But to tell a computer how to solve one big problem, you usually must tell the computer how to solve a bunch of little problems that make up the bigger problem. If you want to make your own video game, for example, you need to solve some of the following problems: \u0002 Determine how far to move a cartoon figure (such as a car, a spaceship, or a man) on-screen as the user moves a joystick. \u0002 Detect whether the cartoon figure bumps into a wall, falls off a cliff, or runs into another cartoon figure on-screen. \u0002 Make sure that the cartoon figure doesn\u2019t make any illegal moves, such as walking through a wall. \u0002 Draw the terrain surrounding the cartoon figure and make sure that if the cartoon figure walks behind an object such as a tree, the tree realisti- cally blocks the figure from sight. \u0002 Determine whether bullets that another cartoon figure fires are hitting the player\u2019s cartoon figure. If so, determine the amount of damage, how it affects the movement of the damaged cartoon figure, and how the damage appears on-screen. The simpler that the problem is that you need to solve, the more easily you can write a program that tells the computer how to work. A program that 14 Part I: Programming a Computer displays a simple Ping-Pong game with two stick paddles and a ball is much easier to write than a program that displays World War II fighter airplanes firing machine guns and dropping bombs on moving tanks, while dodging anti-aircraft fire. Programming isn\u2019t difficult; it\u2019s just time-consuming Programming really isn\u2019t that difficult or mysterious. If you can write step-by- step instructions directing someone to your house, you can write a program. The hardest part about programming is identifying all the little problems that make up the big problem that you\u2019re trying to solve. Because computers are completely stupid, you need to tell them how to do everything. If you\u2019re giving a friend instructions to get to your house, for example, you may write down the following information: 1. Go south on Highway I-5. 2. Get off at the Sweetwater Road exit. 3. Turn right at the light. 4. Turn into the second driveway on the left. Of course, if you try giving these instructions to a computer, the computer gets confused and wants to know the following additional information: 1. Where do I start and exactly how far south do I drive down Highway I-5? 2."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "completely stupid, you need to tell them how to do everything. If you\u2019re giving a friend instructions to get to your house, for example, you may write down the following information: 1. Go south on Highway I-5. 2. Get off at the Sweetwater Road exit. 3. Turn right at the light. 4. Turn into the second driveway on the left. Of course, if you try giving these instructions to a computer, the computer gets confused and wants to know the following additional information: 1. Where do I start and exactly how far south do I drive down Highway I-5? 2. How do I recognize the Sweetwater Road exit, and how do I get off at this exit? 3. After I turn right at the light, how far to the right do I turn, and do you mean the traffic light or the street light on the corner? 4. After I turn into the second driveway on the left, what do I do next? Park the car? Honk the horn? Gun the engine and accelerate through your garage door? You need to tell computers how to do everything, which can make giving them instructions as aggravating and frustrating as telling children what to do. Unless you specify everything that you want the computer to do and exactly how to do it, the computer just plain doesn\u2019t do what you want it to do. 15 Chapter 1: Learning Computer Programming for the First Time What Do I Need to Know to Program a Computer? If you\u2019re the type who finds the idea of making a program (such as a video game) more exciting than actually using it, you already have everything you need to program a computer. If you want to learn computer programming, you need a healthy dose of the following three qualities: \u0002 Desire: If you want something badly enough, you tend to get it (although you may serve time in prison afterward if you do something illegal to get it). If you have the desire to learn how to program a computer, your desire helps you learn programming, no matter what obstacles may get in your way. 16 Part I: Programming a Computer Sometimes programs never work After spending years writing a program, people sometimes find that throwing away the whole thing and starting over is easier (and cheaper) than trying to figure out why the current pro- gram isn\u2019t working and how to make it work. Back in the mid-1980s, for example, the United States government had the bright idea to develop a self-propelled, anti-aircraft weapon nicknamed the Sergeant York. The purpose of the Sergeant York weapon was simple: Find an enemy aircraft and shoot it down. Unfortunately, the program controlling the Sergeant York never quite worked correctly. After spending millions of dollars and countless hours rewriting the program, testing it, and rewriting it again, the programmers thought that they\u2019d finally gotten the program to work right. To celebrate their achievement, the company that made the Sergeant York"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "isn\u2019t working and how to make it work. Back in the mid-1980s, for example, the United States government had the bright idea to develop a self-propelled, anti-aircraft weapon nicknamed the Sergeant York. The purpose of the Sergeant York weapon was simple: Find an enemy aircraft and shoot it down. Unfortunately, the program controlling the Sergeant York never quite worked correctly. After spending millions of dollars and countless hours rewriting the program, testing it, and rewriting it again, the programmers thought that they\u2019d finally gotten the program to work right. To celebrate their achievement, the company that made the Sergeant York weapon staged a demonstration for the top Pentagon generals and officials. They put the Sergeant York in a field, sat all the people from the Pentagon in a nearby grandstand, and flew a remote- controlled drone overhead to demonstrate the Sergeant York\u2019s capability to track and shoot down an enemy airplane. But instead of aiming at the overhead target, rumor has it that the Sergeant York leveled its twin 40mm cannons toward the ground and swiveled its guns until they pointed directly at the grandstand where all the Pentagon officials were sitting. Needless to say, the Pentagon officials created quite a commotion as they scrambled to get out of the line of fire. Fortunately, the Sergeant York didn\u2019t fire its cannons into the grandstand, but after this disastrous demonstration, the Pentagon cancelled further development and scrapped the entire Sergeant York project. So if you ever start writing a program and feel like giving up before it ever works, you\u2019re in good company, along with the Pentagon, mili- tary contractors, Fortune 500 corporations, and practically everyone else in the world. \u0002 Curiosity: A healthy dose of curiosity can encourage you to experiment and continue learning about programming long after you finish reading this book. With curiosity behind you, learning to program seems less a chore and more fun. And as long as you\u2019re having fun, you tend to learn and retain more information than does someone without any curiosity whatsoever (such as your boss). \u0002 Imagination: Computer programming is a skill, but imagination can give your skill direction and guidance. A mediocre programmer with lots of imagination always creates more interesting and useful programs than a great programmer with no imagination. If you don\u2019t know what to do with your programming skill, your talent goes to waste without imagina- tion prodding you onward. Desire, curiosity, and imagination are three crucial ingredients that every programmer needs. If you possess these qualities, you can worry about trivial details such as learning a specific programming language (such as C++), study- ing advanced math, or attending a university where you can buy a college degree that you can just as easily make with your computer and a desktop- publishing program instead. Learning to program a computer may (initially) seem an impossible task, but don\u2019t worry. Computer programming is relatively simple to understand; every- thing just tends to fall apart after you try to put a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "you onward. Desire, curiosity, and imagination are three crucial ingredients that every programmer needs. If you possess these qualities, you can worry about trivial details such as learning a specific programming language (such as C++), study- ing advanced math, or attending a university where you can buy a college degree that you can just as easily make with your computer and a desktop- publishing program instead. Learning to program a computer may (initially) seem an impossible task, but don\u2019t worry. Computer programming is relatively simple to understand; every- thing just tends to fall apart after you try to put a program into actual use. 17 Chapter 1: Learning Computer Programming for the First Time 18 Part I: Programming a Computer Chapter 2 All about Programming Languages In This Chapter \u0001 Understanding the need for different programming languages \u0001 Knowing the differences between programming languages \u0001 Choosing a programming language P rogramming is nothing more than writing step-by-step instructions telling the computer exactly what you want it to do. Because computers are stupid, they require exact instructions, and this limitation is what makes programming so time consuming. Computers don\u2019t understand English (or French, Chinese, Arabic, Spanish, or any other language that human beings use). Because computers are function- ally brain-dead, people must write instructions for a computer by using a spe- cial language, hence, the term programming language. A collection of instructions that tell the computer what to do is known as a program. The instructions, written in a specific programming language, is known as the source code. Why So Many Different Programming Languages? You have many programming languages to choose among because each lan- guage serves a specific purpose, and people are always creating new lan- guages to solve different types of problems. Essentially, computers really understand only one language, which consists of zeroes and ones, also known as machine language. A typical program that you could write in machine language might look something like the following example: 0010 1010 0001 1101 0011 1100 1010 1111 0101 0110 1101 0101 1101 1111 0010 1001 Machine language has the following two major drawbacks: \u0002 You can easily type a 0 or 1 by mistake, thereby preventing you from giving the computer the correct instructions. \u0002 Machine language takes a long time to write (and an even longer time to understand what the language is actually telling the computer to do). Because of these two huge problems, few people write programs in machine language. To make writing a program easier, programmers quickly invented a simpler programming language known as assembly language. The joy of assembly language The whole purpose of assembly language is to enable you to write programs faster and easier than using machine language. So rather than force program- mers to write cryptic programs using 0s and 1s, assembly language uses short, easy-to-remember (to programmers, that is) phrases such as JMP, MOV, and ADD, which represent specific machine-language instructions. Not only does this convention make assembly language source code shorter"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "of these two huge problems, few people write programs in machine language. To make writing a program easier, programmers quickly invented a simpler programming language known as assembly language. The joy of assembly language The whole purpose of assembly language is to enable you to write programs faster and easier than using machine language. So rather than force program- mers to write cryptic programs using 0s and 1s, assembly language uses short, easy-to-remember (to programmers, that is) phrases such as JMP, MOV, and ADD, which represent specific machine-language instructions. Not only does this convention make assembly language source code shorter and easier to write, but it also makes the code easier to read and modify later. A typical assembly language program looks like the following example: title Nap Program ; This program displays \u201cTake a nap!\u201d on the screen dosseg .model small .stack 100h .data my_message db \u2018Take a nap!\u2019,0dh,0ah,\u2019$\u2019 .code main proc mov ax,@data mov ds,ax mov ah,9 mov dx,offset my_message 20 Part I: Programming a Computer int 21h mov ax,4C00h int 21h main endp end main Making programs easy to read and modify is crucial because most programs never work right the first time you use them. And if you want to add new fea- tures to a program later, you need to understand how the current program works so that you know how to modify it. Programmers created assembly language for their convenience only. The computer itself has no idea how to read or use any instructions written in assembly language. Because computers can\u2019t read assembly language instructions, programmers created special programs that translate assembly language into machine lan- guage. These special programs are known as assemblers. If you give your computer a program written in assembly language without an assembler, your computer won\u2019t have the slightest idea how to read assembly language. So after you write a program in assembly language, you have to feed it to an assembler, which translates your assembly language program into machine code, which your computer can understand. Assembly language offers the following two distinct advantages over machine language: \u0002 Assembly language programs are easier to read than machine language programs. \u0002 Assembly language programs are easier to write (and modify) than machine language programs. Of course, assembly language has the following disadvantages: \u0002 Programs that you create by using assembly language run slower and gobble up more space (both physical disk space and memory) than equivalent programs that you may create with machine language. \u0002 You can\u2019t easily transfer (or, to use programming lingo, port) a program that you write in assembly language for one computer to another computer. \u0002 Writing a program in assembly language can prove extremely tedious, time-consuming, and complicated. That\u2019s why few people bother to write large programs in assembly language. 21 Chapter 2: All about Programming Languages In general, the easier the programming language is to read and write, the slower and larger are the programs it creates. The Holy Grail of computer programming is"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "disk space and memory) than equivalent programs that you may create with machine language. \u0002 You can\u2019t easily transfer (or, to use programming lingo, port) a program that you write in assembly language for one computer to another computer. \u0002 Writing a program in assembly language can prove extremely tedious, time-consuming, and complicated. That\u2019s why few people bother to write large programs in assembly language. 21 Chapter 2: All about Programming Languages In general, the easier the programming language is to read and write, the slower and larger are the programs it creates. The Holy Grail of computer programming is to create programs that are easy to write, run as fast as pos- sible, and take up as little space as possible. C: The portable assembler To combat the drawbacks of assembly language, programmers created a wide variety of different programming languages with names such as COBOL and FORTRAN. (See the following section, \u201cHigh-level programming languages,\u201d to find out more about the advantages and disadvantages of these types of pro- gramming languages.) But some programmers felt that they needed a language that offers the power to access hardware (as does assembly language) but is easier to read, write, and modify (as are COBOL and FORTRAN). Eventually, they invented a pro- gramming language known simply as C. Programmers based the C programming language on an early programming language by the name of B (although no programming language known as A ever existed). Programmers wanted to make programming as easy as possible for them- selves, so they made the C programming language look more like actual words that people can understand, as the following example demonstrates: main() { printf (\u201cTake a nap!\\n\u201d); } This C program is equivalent to the assembly language program found in the preceding section of this chapter that displays \u201cTake a nap!\u201d on-screen. Comparing the two, you can see that the C language source code is smaller and easier to read than the equivalent assembly language source code. By using assembly language, programmers sacrifice readability for speed and size. A program that you write in C runs slower and creates larger program files than does an equivalent assembly language program. That\u2019s because assembly language is closer to the native language of computers (which is machine code) than C. So C programs need to first get translated into assem- bly language code before finally being converted into machine language code. This two-step process tends to be less efficient than writing an equivalent assembly language program. C source code, however, is much easier to read, write, and modify than assembly language source code (and far easier to read, write, and modify than an equivalent machine-language source code). 22 Part I: Programming a Computer The programmers who created the C programming language had the follow- ing three main goals: \u0002 To create a language that\u2019s easier to read and write than assembly language. \u0002 To offer programmers the capability to access all the parts of the com- puter just as they"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "code. This two-step process tends to be less efficient than writing an equivalent assembly language program. C source code, however, is much easier to read, write, and modify than assembly language source code (and far easier to read, write, and modify than an equivalent machine-language source code). 22 Part I: Programming a Computer The programmers who created the C programming language had the follow- ing three main goals: \u0002 To create a language that\u2019s easier to read and write than assembly language. \u0002 To offer programmers the capability to access all the parts of the com- puter just as they can by using assembly language. \u0002 To provide a small, simple language that you can easily port from one computer to another. Programs that you write in C can run on different computers without massive rewriting, which is the main drawback with assembly- and machine-language programs. This third goal may look strange, so here\u2019s the rationale behind it: Computers don\u2019t understand C any better than they understand assembly language. (Computers are notorious for not understanding much of anything, which is why programming must be so precise.) If you write an entire program using C, your computer doesn\u2019t have the slightest clue how to read your instructions. To make a computer read and understand instructions written in C, you must convert your C program into equivalent machine-language instructions. Programmers created special programs, known as compilers, to do this con- version for them. A compiler takes your C program and converts it into machine language, which is like translating a Jules Verne novel from French into English. As is true of translations between human languages, the simpler the lan- guage, the easier is the translation. Translating a children\u2019s book from French into Japanese is much easier than translating a mathematics dissertation from French into Japanese, mainly because a children\u2019s book uses simple words, while a mathematics dissertation uses more complicated words. Similarly, translating C into machine language code is more difficult than translating assembly language into machine language code. So the only way that you can run a C program on another computer is if someone\u2019s already written a C compiler for that other computer. Because C is a simple language, writing C compilers for different computers is relatively easy, especially if you compare it with the same task for other programming languages, such as Ada or LISP. Because C compilers are fairly easy to write, you can find C compilers for almost every computer in the world. Theoretically, you can write a C pro- gram for the Macintosh, copy it to a computer running Windows XP, recom- pile it, and run the program with little or no modification. 23 Chapter 2: All about Programming Languages Although, in theory, C programs can run on different computers without modification, the reality is that you almost always must modify a C program slightly or drastically to get it to run on a different computer. Modifying a C program, however, is still much easier than"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "fairly easy to write, you can find C compilers for almost every computer in the world. Theoretically, you can write a C pro- gram for the Macintosh, copy it to a computer running Windows XP, recom- pile it, and run the program with little or no modification. 23 Chapter 2: All about Programming Languages Although, in theory, C programs can run on different computers without modification, the reality is that you almost always must modify a C program slightly or drastically to get it to run on a different computer. Modifying a C program, however, is still much easier than modifying an assembly or machine-language program. Given its power and portability, C has quickly become one of the most popu- lar programming languages in the world. The majority of all programs are written in C although most newer programs are now written in a C derivative language called C++. Some of the more famous (or infamous) programs that have been written in C or C++ include operating systems such as Windows 95/98/Me/NT/2000/XP, Unix, and Linux, as well as major commercial pro- grams such as Quicken, Netscape Navigator, and Microsoft Word. Although C is popular, it has its share of flaws: \u0002 C creates larger and slower programs than equivalent assembly or machine-language programs. \u0002 The C language gives programmers access to all parts of a computer, including the capability to manipulate the computer\u2019s memory. Unfortunately, all this power can prove as dangerous as giving a hyper- active monkey a chainsaw and a hand grenade. If you don\u2019t write your C programs carefully, they can accidentally wreck your computer\u2019s memory, causing your program to crash your computer. In a desperate attempt to make C programming more reliable, programmers developed languages similar to C, such as C++, Java, Perl, Python, and C#. All of these C-derived languages add a special feature known as object-orientation, which encourages programmers to write small programs that they can easily reuse and modify. In addition, these other languages try to protect program- mers from writing programs that can mess up the computer\u2019s memory, as C programs can do, which decreases the chance of writing a program that crashes an entire computer. High-level programming languages Because writing machine- or assembly-language programs was so difficult and confusing, people developed additional languages that look more like human languages, with names such as FORTRAN, COBOL, BASIC, Pascal, and Ada. By making programming languages look more like ordinary human lan- guages, the creators of these high-level languages hoped to make programs easier to write and modify later on. One of the first high-level languages was FORTRAN (which stands for FORmula TRANslator). FORTRAN was designed specifically for mathematical calcula- tions. Another early high-level language was COBOL (COmmon Business- Oriented Language), which was designed for business data processing. 24 Part I: Programming a Computer Because each language has a specialized purpose, most people aren\u2019t going to use FORTRAN or COBOL to write video games, operating systems, or word processors (although you can still do"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "programming languages look more like ordinary human lan- guages, the creators of these high-level languages hoped to make programs easier to write and modify later on. One of the first high-level languages was FORTRAN (which stands for FORmula TRANslator). FORTRAN was designed specifically for mathematical calcula- tions. Another early high-level language was COBOL (COmmon Business- Oriented Language), which was designed for business data processing. 24 Part I: Programming a Computer Because each language has a specialized purpose, most people aren\u2019t going to use FORTRAN or COBOL to write video games, operating systems, or word processors (although you can still do so if you really want). Because programming was still too difficult for many people, computer scientists soon created both Pascal and BASIC to teach people programming. BASIC \u2014 Beginner\u2019s All-purpose Symbolic Instruction Code \u2014 was designed to teach complete novices how to program. Beginners could start learning to program by using C, but the complexities of C can discourage people too soon \u2014 sort of like trying to teach a three-year-old how to ride a bicycle by putting him on a motorcycle in the middle of rush-hour traffic. The main advantage of BASIC is its simplicity. To print the words \u201cTake a nap!\u201d on-screen, you need only the one following command: PRINT \u201cTake a nap!\u201d If you compare it with the equivalent C or assembly language source code, BASIC source code enables you to focus on the task that you want to accom- plish instead of worrying about the cryptic commands of a specific program- ming language. Pascal (named after the French philosopher, Blaise Pascal) is another language designed to help beginners learn how to program. The main differ- ence between BASIC and Pascal is that Pascal encourages you to write well- structured programs that you can easily read, understand, and modify at a later date. The following is a Pascal program that displays \u201cTake a nap!\u201d on-screen: Program Message (Input, Output); Begin Writeln (\u2018Take a nap!\u2019); End.0 Compared with Pascal, BASIC is much less structured, which makes writing a BASIC program easy but makes reading and understanding large BASIC pro- grams much more difficult. Pascal is more structured and forces you to plan your program before you write, as you do if you first plan a trip before leav- ing home. This planning may take longer, but your program and your trip will be more organized than if you rush into writing the program right away, which can be as disorganized as showing up in Paris in the middle of the night with no hotel reservations. On the other hand, BASIC enables you to start writing your program right away, which is more likely to lead to a more disorganized program. BASIC is such a popular language that programmers tried to combine the structured features of Pascal with the simplicity of BASIC to create various dialects of BASIC. Liberty BASIC (see Chapter 5) is one example of a struc- tured version of BASIC. 25 Chapter 2: All about Programming"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "rush into writing the program right away, which can be as disorganized as showing up in Paris in the middle of the night with no hotel reservations. On the other hand, BASIC enables you to start writing your program right away, which is more likely to lead to a more disorganized program. BASIC is such a popular language that programmers tried to combine the structured features of Pascal with the simplicity of BASIC to create various dialects of BASIC. Liberty BASIC (see Chapter 5) is one example of a struc- tured version of BASIC. 25 Chapter 2: All about Programming Languages As usual, high-level programming languages such as Pascal, BASIC, FORTRAN, Ada, and COBOL have their own share of problems: \u0002 High-level programming languages create larger and slower programs than equivalent C, assembly language, or machine-language programs. \u0002 High-level programming languages shield you from accessing all the parts of the computer, preventing you from using the power available in C, assembly language, or machine-language programs. As a result, writ- ing certain types of programs, such as operating systems or disk utility programs (such as the Norton Utilities), is more difficult (but not impos- sible) in high-level languages. \u0002 High-level programming languages more closely resemble human lan- guages, so writing a compiler for a high-level language is more difficult. If your computer doesn\u2019t have a compiler for your favorite high-level lan- guage (such as Ada), you can\u2019t write a program for your computer in that particular programming language. Of course, nobody would use high-level programming languages such as Pascal, BASIC, FORTRAN, Ada, and COBOL unless they offered some advan- tages over C, assembly language, or machine language. Following are several reasons for using a high-level programming language: \u0002 You can write programs much faster in a high-level programming lan- guage than you can in assembly language or machine language. (You can write a program in C in roughly the same amount of time as in a high- level language such as Pascal.) \u0002 Learning and mastering a high-level programming language takes less time than learning and mastering machine language, assembly language, or C programming. \u0002 Because high-level programming languages shield you from accessing all parts of a computer, they protect you from writing programs that acci- dentally mess up the computer, causing it to crash. \u0002 Reading and modifying a program written in a high-level language is much easier than reading and modifying an equivalent program written in C, assembly language, or machine language. \u0002 Programs written in high-level languages can run on a variety of comput- ers. If you write a program in a high-level language, you can (theoreti- cally) port that program to run on a different computer. Naturally, high-level languages have their own share of problems, which include the following: \u0002 Programs written in high-level languages are more complicated to trans- late into machine code, which means that a program written in Ada or COBOL will likely run much slower and require more memory and disk space than"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "and modifying an equivalent program written in C, assembly language, or machine language. \u0002 Programs written in high-level languages can run on a variety of comput- ers. If you write a program in a high-level language, you can (theoreti- cally) port that program to run on a different computer. Naturally, high-level languages have their own share of problems, which include the following: \u0002 Programs written in high-level languages are more complicated to trans- late into machine code, which means that a program written in Ada or COBOL will likely run much slower and require more memory and disk space than a similar program written in C, assembly, or machine language 26 Part I: Programming a Computer \u0002 Creating a compiler for a high-level language is much harder than creat- ing one for C. As a result, not all computers have compilers available for every high-level language. So if you write a program in Modula-2 or LISP, you may find it nearly impossible to port to another computer or operat- ing system. Rapid Application Development (RAD) programming languages Most programming languages were designed back in the days when computer screens displayed nothing but text. The screen didn\u2019t show graphics, mouse pointers, buttons, or windows. Because computer screens could display only text, languages such as C++, BASIC, and Pascal just had simple commands to display information, such as the following BASIC command: PRINT \u201cThis sentence appears on-screen.\u201d After computers developed fancy graphical user interfaces with windows, scroll bars, and toolbars, people began demanding programs that included all these fancy graphical features as well. To help programmers create programs with fancy user interfaces, many companies developed special dialects of existing languages, which they dubbed rapid application development (RAD) languages. RAD languages enable programmers to design the way that they want their program to look (the user interface) and then write source code to make that user interface actually do something useful, such as display information in a window. Figure 2-1 shows such an interface in Real Basic. Some popular RAD languages are Visual Basic and Real Basic (based on BASIC), Delphi and Kylix (based on Pascal), Visual C# (based on C++), and JBuilder (based on Java). RAD languages offer the following benefits: \u0002 You can write programs with graphical user interfaces much faster by using RAD than you can by using ordinary C++, BASIC, or Pascal. Figure 2-2 shows StoryCraft, a story-creating program that two profes- sional fiction writers developed to help people create original stories for novels, short stories, plays, or screenplays. 27 Chapter 2: All about Programming Languages Figure 2-2: StoryCraft was written in Visual Basic to help writers create better stories, novels, and screenplays. Figure 2-1: Real Basic enables you to create a user interface and then write BASIC commands to make that user interface do something useful. 28 Part I: Programming a Computer \u0002 RAD languages simplify the process of creating user interfaces so that you can focus on getting the rest of your program to work. Without a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "that two profes- sional fiction writers developed to help people create original stories for novels, short stories, plays, or screenplays. 27 Chapter 2: All about Programming Languages Figure 2-2: StoryCraft was written in Visual Basic to help writers create better stories, novels, and screenplays. Figure 2-1: Real Basic enables you to create a user interface and then write BASIC commands to make that user interface do something useful. 28 Part I: Programming a Computer \u0002 RAD languages simplify the process of creating user interfaces so that you can focus on getting the rest of your program to work. Without a RAD language, you\u2019d need to write instructions to make the user inter- face work and then write additional instructions to make the rest of the program work as well, essentially doubling your work and the chance of making a mistake. \u0002 Because RAD languages derive from existing high-level languages (C++, BASIC, and Pascal), you can learn and start programming in a RAD lan- guage right away if you already know C++, BASIC, or Pascal. Not surprisingly, RAD languages have a few major drawbacks, which shouldn\u2019t surprise you because nothing involving computers is ever perfect. The follow- ing list describes these drawbacks: \u0002 Programs that you write in RAD languages are rarely portable between different computers. Visual Basic runs only on Microsoft Windows 98/Me/NT/2000/XP, for example, so if you write a program in Visual Basic, you can never run it on a Macintosh, Linux, or other computer operating system without extensive modification. \u0002 RAD languages create larger and slower programs than the equivalent programs written in pure C++, BASIC, or Pascal. A RAD language may help you create programs faster, but you sacrifice speed and program size. Database programming languages Programming languages such as C++, BASIC, and Pascal were designed as general-purpose languages, which means that you can use them to write a flight simulator, an accounting program, a voice-recognition program, or a word processor. One of the most popular uses for computers, however, is storing and retriev- ing information, such as names, addresses, phone numbers, prison records, credit history, and past job experience. Computers store such information in a database. Almost every business relies on databases to store information about cus- tomers, inventories, and employees, so nearly every company uses a data- base program. Unfortunately, most people don\u2019t want to know the strange and often bizarre commands necessary to store, retrieve, or print information from a database. To make databases easier to use, most databases include a programming language. 29 Chapter 2: All about Programming Languages If you write programs using a database\u2019s programming language, you can create custom databases for different companies. Best of all, database pro- gramming languages enable you to create custom databases much faster than using a general-purpose language such as C++ or BASIC. If you use a database programming language, you write instructions only to manipulate the data- base information. If you use a general-purpose language such as C++, you must write instructions to store"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "retrieve, or print information from a database. To make databases easier to use, most databases include a programming language. 29 Chapter 2: All about Programming Languages If you write programs using a database\u2019s programming language, you can create custom databases for different companies. Best of all, database pro- gramming languages enable you to create custom databases much faster than using a general-purpose language such as C++ or BASIC. If you use a database programming language, you write instructions only to manipulate the data- base information. If you use a general-purpose language such as C++, you must write instructions to store information and then write additional instructions to manipulate that information, essentially doubling the amount of work to accomplish the same task. Most popular database programs, such as FileMaker and Microsoft Access, offer their own special programming language. For manipulating large amounts of data such as on big mainframe computers, database programs tend to use a language known as SQL (which stands for Structured Query Language). The following SQL code displays the message \u201cTake a nap!\u201d select \u2018Take a nap!\u2019 from dual; Database programming languages can fill the following specific needs: \u0002 If you\u2019re writing a program that stores huge chunks of information, you can write a program much faster by using a database programming lan- guage than by using a general-purpose language such as C++ or Pascal. \u0002 Database programming is a lucrative field. If you know how to create customized databases, you almost never need to worry about being unemployed or not making enough money. Of course, database programming languages aren\u2019t for everybody. They have several crucial limitations, as the following list describes: \u0002 Database programs are often tied to a specific computer. If you write a custom database using FileMaker, for example, you can run your pro- gram only on a computer that can also run the FileMaker program. Because FileMaker is currently limited to the Macintosh and Windows operating systems, you can\u2019t run a FileMaker program on a computer that uses Linux. \u0002 Database programming languages are great at making custom databases but lousy at making anything else, such as video games, word proces- sors, or utility programs (such as anti-virus utilities). If you need to create a variety of programs, you can\u2019t rely on a database programming language by itself. Scripting programming languages Writing a program from scratch gives you the most flexibility but can take a really long time and drive you nuts in the process. Suppose, for example, that you want to write a word processor specifically for creating screenplays. 30 Part I: Programming a Computer If you decide to use a general-purpose language such as C++ or Pascal, you first need to write instructions that create a simple word processor; you then need to write additional instructions to give the word processor the features necessary to create and format screenplays. As an alternative to going mad by writing everything yourself, many pro- grams offer their own scripting languages. Rather than write an entire"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "a really long time and drive you nuts in the process. Suppose, for example, that you want to write a word processor specifically for creating screenplays. 30 Part I: Programming a Computer If you decide to use a general-purpose language such as C++ or Pascal, you first need to write instructions that create a simple word processor; you then need to write additional instructions to give the word processor the features necessary to create and format screenplays. As an alternative to going mad by writing everything yourself, many pro- grams offer their own scripting languages. Rather than write an entire word processor from scratch, you can buy an existing word processor (such as WordPerfect or Microsoft Word) and then use that word processor\u2019s scripting language to make the word processor do what you want it to do (such as create and format screenplays). A scripting language enables you to focus on the task that you want to accomplish without worrying about irrelevant details. Most Microsoft programs, such as Word, Excel, PowerPoint, and Access, offer a scripting language known as Visual Basic for Applications (VBA), which is nearly identical to Visual Basic. The Macintosh operating system also includes a scripting language, known as AppleScript, so you can write pro- grams to automate your Mac (to a limited extent). The following code shows how to use AppleScript to display the message, \u201cTake a nap!\u201d on-screen: on DisplayMessage() display dialog \u201cTake a nap!\u201d buttons {\u201cOK\u201d} end DisplayMessage DisplayMessage() Scripting programming languages can come in handy in many of the following ways: \u0002 A scripting language enables you to modify an existing program, such as a word processor or spreadsheet. That way, you can create sophisti- cated programs quickly with very little programming. \u0002 Scripting languages are generally easier to learn than more powerful pro- gramming languages, such as C++. As a result, you can learn and start writing programs faster. But before you jump wholeheartedly into learning and using a scripting lan- guage, beware of the following problems: \u0002 Scripting languages are tied to a specific program. If you customize a word processor by using a scripting language, your program runs only on computers that run that particular word processor. If you cus- tomize Microsoft Word, your program works only on computers that can run Microsoft Word, such as Windows and Macintosh computers. \u0002 Selling and distributing your programs is much more difficult. To use your program, people must buy or already own the program (word processor, spreadsheet, and so on) that you customize. So if you create a custom program for WordPerfect, Microsoft Word users can\u2019t use it. 31 Chapter 2: All about Programming Languages \u0002 A scripting language provides much less flexibility than does a general- purpose programming language such as C++. Make sure that the tradeoff of convenience and ease of programming is worth the limitations of using a scripting language. Web-page programming languages In the early days of the Internet, people communicated through plain old text without fancy graphics,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "To use your program, people must buy or already own the program (word processor, spreadsheet, and so on) that you customize. So if you create a custom program for WordPerfect, Microsoft Word users can\u2019t use it. 31 Chapter 2: All about Programming Languages \u0002 A scripting language provides much less flexibility than does a general- purpose programming language such as C++. Make sure that the tradeoff of convenience and ease of programming is worth the limitations of using a scripting language. Web-page programming languages In the early days of the Internet, people communicated through plain old text without fancy graphics, animation, or forms that make up today\u2019s Web pages. Although people have been reading text for years, it can get boring and diffi- cult to read if you view it on a computer screen that requires constant scrolling to view an entire document. To remedy this problem and spruce up the appearance of text, programmers created HyperText Markup Language (HTML), which defines the graphical appearance of Web pages. Figure 2-3 shows a typical Web page as its HTML code defines it. HTML codes tell a browser how to display a page. So whenever you use a browser to view a Web page (such as www.dummies.com), your browser automatically converts the HTML code into the fancy graphics, as shown in Figure 2-4. Figure 2-3: HTML code can look messy and unreadable. 32 Part I: Programming a Computer After a while, people got tired of plain ol\u2019 HTML Web pages that resemble bill- boards that you view through your computer screen. To make Web pages capable of interacting with the user (for playing games, filling out forms, and so on), programmers created special Web-page programming languages such as Java, JavaScript, and VBScript. Java can create two types of programs: stand-alone applications (such as games or word processors) and smaller applets, which can run off a Web page. The following code shows how a Java application can display the words, \u201cTake a nap!\u201d on-screen: public class DisplayMessage { public static void main (String args[]) { system.out.println (\u201cTake a nap!\u201d); } } Web-page programming languages enable you to create Web sites that more closely resemble video games than scanned images of paper on a computer screen. Such interactive Web pages can increase interest in your Web site and encourage people to return. Figure 2-4: The cryptic HTML code from Figure 2-3 actually defines the appearance of the For Dummies Web site. 33 Chapter 2: All about Programming Languages Web-page programming languages offer the following advantages: \u0002 You can create interactive Web pages to make your site more interesting to look at and to encourage viewers to stay on your site longer. \u0002 The language is easy to learn and enables you to create programs that anyone around the world with Internet access can use. Then again, Web page programming languages are very limited in their capa- bilities, as the following list describes: \u0002 Not all browsers support all features of Web page languages such"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "appearance of the For Dummies Web site. 33 Chapter 2: All about Programming Languages Web-page programming languages offer the following advantages: \u0002 You can create interactive Web pages to make your site more interesting to look at and to encourage viewers to stay on your site longer. \u0002 The language is easy to learn and enables you to create programs that anyone around the world with Internet access can use. Then again, Web page programming languages are very limited in their capa- bilities, as the following list describes: \u0002 Not all browsers support all features of Web page languages such as JavaScript or VBScript. As a result, users of older browsers can\u2019t run programs that you create by using Web-page languages. \u0002 For Internet users saddled with slow access (such as through a 28.8 baud modem), programs that you create in a Web-page language (such as VBScript) can run slowly, discouraging visitors from visiting your Web site. \u0002 Only people with Internet access can run programs that you create with a Web-page language (except for Java). If you want to sell a program to others, you don\u2019t want to use a Web-page language. So What\u2019s the Best Programming Language to Learn? No single \u201cbest\u201d programming language exists. If you want to write programs professionally, you want to learn at least one high-level language (most likely C++ because it\u2019s currently the most popular of the high-level languages) and one database programming language (such as SQL). You can\u2019t go wrong learn- ing C++. With so many companies writing programs in C++, people with C++ programming experience can get a job almost anywhere. But the immense popularity of C++ programming means that competition is often high. Because thousands of older computers still run COBOL pro- grams that need constant updating, many programmers are finding a lucra- tive career learning to write and modify COBOL programs. With fewer COBOL programmers available, companies often must pay COBOL programmers a higher salary. For those planning to work for themselves, one of the most lucrative markets is writing custom databases for other companies. To get into this field, you obviously must know a database programming language, such as SQL or VBA, which Microsoft Access uses. If you plan to create Web pages, you need to know HTML and gain some familiarity with Java, JavaScript, VBScript, and 34 Part I: Programming a Computer the other Internet programming languages. Ultimately, the best programming language to know is the one that enables you to accomplish the task that you want as quickly and easily as possible, whether that language is C++, BASIC, Java, SQL, or assembly language. For a quick introduction to the way different programming languages solve the same problem, visit the Hello World! Web site at www.latech.edu/~acm/ HelloWorld.shtml. This Web site provides sample programs, written in a variety of programming languages, which tell the computer to display the words \u201cHello World!\u201d on-screen. 35 Chapter 2: All about Programming Languages 36 Part I: Programming a Computer Chapter 3 How"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Ultimately, the best programming language to know is the one that enables you to accomplish the task that you want as quickly and easily as possible, whether that language is C++, BASIC, Java, SQL, or assembly language. For a quick introduction to the way different programming languages solve the same problem, visit the Hello World! Web site at www.latech.edu/~acm/ HelloWorld.shtml. This Web site provides sample programs, written in a variety of programming languages, which tell the computer to display the words \u201cHello World!\u201d on-screen. 35 Chapter 2: All about Programming Languages 36 Part I: Programming a Computer Chapter 3 How to Write a Program In This Chapter \u0001 Designing your program \u0001 Understanding the technical details \u0001 Choosing a programming language \u0001 Defining how the program should work \u0001 Knowing the life cycle of a typical program A lthough you can sit down at your computer and start writing a program right now without any planning whatsoever, the result would likely to prove as messy as trying to bake a cake by throwing all the ingredients together without following a recipe. You can write a simple program that displays your cat\u2019s name on-screen with- out much planning, but for anything more complex, you want to take time to design your program on paper before you even touch a computer. After you\u2019re sure that you know what you want your program to do and how you want it to look on-screen, you can worry about writing a program that actually accomplishes this task. Before You Write Your Program If you design your program before writing it, you don\u2019t waste time writing a program that doesn\u2019t work or that solves the wrong problem and isn\u2019t worth trying to salvage afterward. By planning ahead of time, you increase the odds that your program actually works and performs the task that you want. The following three items are crucial to consider in designing a program: \u0002 The user: Who\u2019s going to use your program? \u0002 The target computer: Which computer do people need to run your pro- gram? Is it a Windows 98/Me/NT/2000/XP computer, a Macintosh, a main- frame, a computer running Linux, a handheld Palm or PocketPC, or a supercomputer? \u0002 You: Are you going to write the entire thing yourself or get help from others? If you\u2019re going to get others to help you, which parts of the pro- gram are they going to write? When you\u2019re designing a program, you don\u2019t need to worry about which pro- gramming language you\u2019re going to use. Once you know exactly what you want your program to do, then you can choose which programming language might be easiest to use. The program\u2019s users If you\u2019re the only person who\u2019s going to use your program, you can pretty much make your program look and act any way you want, just as long as you know how to make it work. But if you plan to give or sell your program to others, you need to know"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "going to write? When you\u2019re designing a program, you don\u2019t need to worry about which pro- gramming language you\u2019re going to use. Once you know exactly what you want your program to do, then you can choose which programming language might be easiest to use. The program\u2019s users If you\u2019re the only person who\u2019s going to use your program, you can pretty much make your program look and act any way you want, just as long as you know how to make it work. But if you plan to give or sell your program to others, you need to know who\u2019s going to use your program. Knowing your program\u2019s typical user is critical. If users don\u2019t like your pro- gram for any reason, they\u2019re unlikely to use it. Whether the program actually works is often irrelevant. By designing your program with the user in mind, you increase the odds that people use your program and (you hope) buy a copy for themselves. Even if you write a program that works perfectly, users still may ignore it because they don\u2019t like the way it looks, they don\u2019t understand how to give it commands, it doesn\u2019t work the same way as the old program they currently use, the colors don\u2019t look right to them, and so on. The goal is to make your program meet your users\u2019 needs, no matter how weird, bizarre, or illogical they may seem. (The needs \u2014 not the users.) The target computer After you identify the user, you need to know what type of computer the user intends to run the program on. The type of computer that your program runs on can determine which computer languages you can use, the hardware that your program can expect to find, and even the maximum size of your program. If you\u2019re writing a program to run on a Macintosh, for example, your program can take advantage of sound, color graphics, a large hard disk, and plenty of memory. You need to rewrite that same program drastically, however, to run it on a Palm handheld computer, with its limited sound capability, much sim- pler color graphics, and limited amount of memory and storage space. 38 Part I: Programming a Computer If you can copy and run your program on another computer with little or no modification, your program is considered portable. The computer language that you use to write your program can affect its portability. That\u2019s why so many people use C/C++ \u2014 C and C++ programs tend to be more portable than other programming languages. Your own programming skill When designing any program, consider your own programming skill. You may get a great idea for a program, but if you\u2019re a beginner with little experience, writing your program may take a long time \u2014 if you don\u2019t give up out of frus- tration first. 39 Chapter 3: How to Write a Program Portability and cross-platform issues Rather than pick a single computer, many pro- grammers try to write programs"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "program can affect its portability. That\u2019s why so many people use C/C++ \u2014 C and C++ programs tend to be more portable than other programming languages. Your own programming skill When designing any program, consider your own programming skill. You may get a great idea for a program, but if you\u2019re a beginner with little experience, writing your program may take a long time \u2014 if you don\u2019t give up out of frus- tration first. 39 Chapter 3: How to Write a Program Portability and cross-platform issues Rather than pick a single computer, many pro- grammers try to write programs that can run on a variety of computers, such as the Macintosh and Windows 98/Me/NT/2000/XP. Any program that can run on two or more different types of computers is cross-platform. Microsoft Word is a cross-platform program because you can buy separate versions that run in the Macintosh and Windows environments. A program that can run on multiple computers increases your number of potential customers, but also increases the number of potential problems that you must face. Some of the prob- lems include offering customer support for each version of your program and trying to make each program version work the same although they may run on completely different operating systems and computers with totally different capabilities. At one time, WordPerfect offered versions of its word processor that ran on MS-DOS, Windows, the Macintosh, the Amiga, and the Atari ST. So besides hiring enough programmers to work on each word-processor version, the makers of WordPerfect also needed to hire technical sup- port people who knew how to answer questions for each computer type. Needless to say, this situation cost the company a bundle every month. Developing and supporting so many dif- ferent versions of WordPerfect cut into the company\u2019s profits, so WordPerfect dropped support for the Amiga, Macintosh, and Atari ST because keeping them wasn\u2019t worth the cost. Currently, two of the most popular cross-platform compilers include Real Basic and Delphi/Kylix. Real Basic lets you write programs that can run on Macintosh, Linux, and Windows with minor modifications, while Delphi and Kylix let you write programs that can run on both Windows and Linux. If you want your program to run on different operating systems, you\u2019ll need to use a cross-platform compiler. As another alterna- tive, you can always write your program in C/C++ and then compile it on different operating systems and tweak each version to make it run under specific operating systems. Your programming skill and experience also determine the programming lan- guage that you choose. Experienced programmers may think nothing about writing entire programs in C or C++. But novices may need to spend a long time studying C and C++ before writing their programs, or they may choose an easier programming language, such as BASIC. Some novices take the time to learn difficult languages, such as C/C++, and then go off and write their program. Others take an easier approach and choose a simpler language such as"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "systems and tweak each version to make it run under specific operating systems. Your programming skill and experience also determine the programming lan- guage that you choose. Experienced programmers may think nothing about writing entire programs in C or C++. But novices may need to spend a long time studying C and C++ before writing their programs, or they may choose an easier programming language, such as BASIC. Some novices take the time to learn difficult languages, such as C/C++, and then go off and write their program. Others take an easier approach and choose a simpler language such as Visual Basic so they can create (and market) their programs right away. Don\u2019t be afraid to tackle a heavy-duty lan- guage such as C/C++, but don\u2019t be afraid to use a simpler language such as Visual Basic either. The important goal is to finish your program so you can start using it and (possibly) start selling it to others. Many programmers create their program by using a language such as Visual Basic and then later hire more experienced programmers to rewrite their pro- grams in a more complex language such as C/C++, which can make the pro- gram faster and more efficient. The Technical Details of Writing a Program Few people create a program overnight. Instead, most programs evolve over time. Because the process of actually typing programming commands can 40 Part I: Programming a Computer Beware of the golden handcuffs Rather than learn programming themselves, many people hire someone to write programs for them. But take care! Freelance program- mers sometimes live by a rule known as the \u201cgolden handcuffs,\u201d which means that they get the gold and you get the handcuffs. Here\u2019s how the golden handcuffs work: You hire someone to write your program, and the pro- grammer takes your money. Then that person writes a program that doesn\u2019t work quite the way that you want. Rather than lose the money you already invested in developing the program, you pay the programmer more money, and then this programmer develops a new version of your program that doesn\u2019t quite work either. At this point, you\u2019re handcuffed. Do you keep paying money to a programmer who never com- pletely finishes the job, or do you give up alto- gether? What\u2019s worse, you can\u2019t hire a new programmer to work on the same program because the original programmer owns your program\u2019s source code, so nobody else can modify it. Thus the only way that you can modify the program is to hire the original programmer again and again and again and. . . . prove so tedious, time-consuming, and error-prone, programmers try to avoid actually writing their programs until they\u2019re absolutely sure that they know what they\u2019re doing. Prototyping To make sure that they don\u2019t spend months (or years) writing a program that doesn\u2019t work right or that solves the wrong problem, programmers often pro- totype their programs first. Just as architects often build cardboard or plastic models of skyscrapers before"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "source code, so nobody else can modify it. Thus the only way that you can modify the program is to hire the original programmer again and again and again and. . . . prove so tedious, time-consuming, and error-prone, programmers try to avoid actually writing their programs until they\u2019re absolutely sure that they know what they\u2019re doing. Prototyping To make sure that they don\u2019t spend months (or years) writing a program that doesn\u2019t work right or that solves the wrong problem, programmers often pro- totype their programs first. Just as architects often build cardboard or plastic models of skyscrapers before a construction crew starts welding I-beams together, programmers create mock-ups (prototypes) of their programs first. A prototype usually shows the user interface of the program, such as win- dows, pull-down menus, and dialog boxes. The prototype may look like an actual program, but clicking menus doesn\u2019t do anything. The whole idea of the prototype is to show what the program looks like and how it acts, without taking the time to write commands to make the program actually work. After the programmer is happy with the way the prototype looks, she can pro- ceed, using the prototype as a guideline toward completing the final program. 41 Chapter 3: How to Write a Program General purpose versus specialized programming languages General purpose programming languages, such as C/C++, BASIC, Pascal, assembly language, and so on, give you the ability to create practi- cally anything you want, but it may take a long time to do so. To make programming faster and easier, many people have developed special- ized programming languages for solving spe- cific types of problems. For example, SNOBOL is a little known language specifically designed for manipulating text. If that\u2019s what you need, then writing a program in SNOBOL can be much quicker than using C/C++. Of course, if you want to do something else besides text manipulation, programming in SNOBOL will likely be a horrible choice. Similarly, programmers often use LISP and Prolog to create artificially intelligent programs as both LISP and Prolog include commands for decision-making. While you could create an artificially intelligent program using COBOL or BASIC, you would have to write at least twice as many instructions in either FORTRAN, C/C++, or COBOL to accomplish what a single LISP or Prolog command could accomplish. So the moral of the story is that you can make programming a lot easier if you just choose the right programming language to help you solve the right problem. Many programmers use Visual Basic because it\u2019s easy for creating prototypes quickly. After you use Visual Basic to create a prototype that shows how your user interface works, you can start adding actual commands to later turn your prototype into an honest-to-goodness working program. Choosing a programming language After you refine your prototype until it shows you exactly how your program is to look and act, the next step is choosing a programming language to use. You can write any program by"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "a lot easier if you just choose the right programming language to help you solve the right problem. Many programmers use Visual Basic because it\u2019s easy for creating prototypes quickly. After you use Visual Basic to create a prototype that shows how your user interface works, you can start adding actual commands to later turn your prototype into an honest-to-goodness working program. Choosing a programming language After you refine your prototype until it shows you exactly how your program is to look and act, the next step is choosing a programming language to use. You can write any program by using any programming language. The trick is that some languages make writing certain types of programs easier. The choice of a programming language to use can pit people against one another in much the same way that religion and politics do. Although you can\u2019t find a single \u201cperfect\u201d programming language to use for all occasions, you may want to consider a variety of programming languages. Ultimately, no one cares what language you use as long as your program works. 42 Part I: Programming a Computer Using multiple programming languages Instead of writing an entire program using one programming language (such as C++), some compilers can convert source code into a spe- cial file known as an object file. The purpose of object files is that one programmer can write a program in C++, another in assembly language, and still a third in Pascal. Each programmer writes his portion of the program in his favorite language and stores it in a separate object file. Then the programmers connect (or link) all these object files together to create one big program. The program that converts multiple object files into an executable program is known as a linker. In the world of Microsoft Windows, another way to write a program using multiple lan- guages is to use dynamic link libraries (DLLs), which are special programs that don\u2019t have a user interface. One programmer can use C, another can use Java, and a third can use COBOL to create three separate DLL files. Then a fourth programmer can write a program using another language such as Visual Basic, which creates the user interface and uses the com- mands that each separate DLL file stores. A third way to write a program is to use your favorite language (such as Pascal) and then write assembly language instructions directly in parts of your program. (Just be aware that not all compilers enable you to switch between dif- ferent languages within the same program.) Finally, Microsoft offers a programming frame- work dubbed .NET. By using the .NET frame- work, one programmer can program in C#, another can program in FORTRAN, and still another can program in BASIC. Then their dif- ferent programs can share data and communi- cate with other programs through the .NET framework and create a single user interface that unifies these separate programs. The whole point to all of these different methods is that"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "language instructions directly in parts of your program. (Just be aware that not all compilers enable you to switch between dif- ferent languages within the same program.) Finally, Microsoft offers a programming frame- work dubbed .NET. By using the .NET frame- work, one programmer can program in C#, another can program in FORTRAN, and still another can program in BASIC. Then their dif- ferent programs can share data and communi- cate with other programs through the .NET framework and create a single user interface that unifies these separate programs. The whole point to all of these different methods is that by using different programming languages, you can take advantage of each language\u2019s strengths, while minimizing its weaknesses. Defining how the program should work After choosing a specific programming language, don\u2019t start typing commands into your computer just yet. Just as programmers create mock- ups (prototypes) of their program\u2019s user interface, they often create mock-up instructions that describe exactly how a program works. These mock-up instructions are known as pseudocode. If you need to write a program that guides a nuclear missile to another city to wipe out all signs of life within a 100-mile radius, your pseudocode may look as follows: 1. Get the target\u2019s coordinates. 2. Get the missile\u2019s current coordinates. 3. Calculate a trajectory so the missile hits the target. 4. Detonate the nuclear warhead. By using pseudocode, you can detect flaws in your logic before you start writing your program \u2014 places where the logic behind your program gets buried beneath the complexity of a specific programming language\u2019s syntax. In the preceding example, you can see that each pseudocode instruction needs further refining before you can start writing your program. You can\u2019t just tell a computer, \u201cGet the target\u2019s coordinates\u201d because the computer wants to know, \u201cExactly how do I get the target\u2019s coordinates?\u201d So rewriting the preceding pseudocode may look as follows: 1. Get the target\u2019s coordinates. a. Have a missile technician type the target coordinates. b. Make sure that the target coordinates are valid. c. Store the target coordinates in memory. 2. Get the missile\u2019s current coordinates. 3. Calculate a trajectory so the missile hits the target. 4. Detonate the nuclear warhead. You can refine the instructions even further to specify how the computer works in more detail, as follows: 1. Get the target\u2019s coordinates. a. Have a missile technician type the target coordinates. b. Make sure that the target coordinates are valid. 1) Make sure that the target coordinates are complete. (continued) 43 Chapter 3: How to Write a Program 2) Check to make sure that the target coordinates are within the missile\u2019s range. 3) Make sure that the target coordinates don\u2019t accidentally aim the missile at friendly territories. c. Store the target coordinates in memory. 2. Get the missile\u2019s current coordinates. 3. Calculate a trajectory so the missile hits the target. 4. Detonate the nuclear warhead. When programmers define the general tasks that a program needs to accom- plish and then refine each"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Make sure that the target coordinates are valid. 1) Make sure that the target coordinates are complete. (continued) 43 Chapter 3: How to Write a Program 2) Check to make sure that the target coordinates are within the missile\u2019s range. 3) Make sure that the target coordinates don\u2019t accidentally aim the missile at friendly territories. c. Store the target coordinates in memory. 2. Get the missile\u2019s current coordinates. 3. Calculate a trajectory so the missile hits the target. 4. Detonate the nuclear warhead. When programmers define the general tasks that a program needs to accom- plish and then refine each step in greater detail, they say that they\u2019re doing a top-down design. In other words, they start at the top (with the general tasks that the program needs to do) and then work their way down, defining each task in greater detail until the pseudocode describes every possible step that the computer must go through. Writing pseudocode can prove time-consuming. But the alternative is to start writing a program with no planning whatsoever, which is like hopping in your car and driving north and then wondering why you never seem to wind up in Florida. Pseudocode is a tool that you can use to outline the structure of your pro- gram so that you can see all the possible data that the computer needs to accomplish a given task. The idea is to use English (or whatever language you understand best) to describe the computer\u2019s step-by-step actions so that you can use the pseudocode as a map for writing the actual program in whatever language (C/C++, FORTRAN, Pascal, Java, and so on) that you choose. The Life Cycle of a Typical Program Few programs are written, released, and left alone. Instead, programs tend to go through various cycles where they get updated continuously until they\u2019re no longer useful. (That\u2019s why many people buy a new word processor every few years even though the alphabet hasn\u2019t changed in centuries.) Generally, a typical program goes through a development cycle (where you first create and release it), a maintenance cycle (where you eliminate any glaring bugs as quickly as possible), and an upgrade cycle (where you give the program new features to justify selling the same thing all over again). The development cycle Every program begins as a blank screen on somebody\u2019s computer. During the development cycle, you nurture a program from an idea to an actual working program. The following steps make up the development cycle: 44 Part I: Programming a Computer 1. Come up with an idea for a program. 2. Decide the probable identity of the typical user of the program. 3. Decide which computer the program is to run on. 4. Pick one or more computer languages to use. 5. Design the program by using pseudocode or any other tool to outline the structure of the program. 6. Write the program. 7. Test the program. This step is known as alpha testing. 8. Fix any problems that you discover"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "idea to an actual working program. The following steps make up the development cycle: 44 Part I: Programming a Computer 1. Come up with an idea for a program. 2. Decide the probable identity of the typical user of the program. 3. Decide which computer the program is to run on. 4. Pick one or more computer languages to use. 5. Design the program by using pseudocode or any other tool to outline the structure of the program. 6. Write the program. 7. Test the program. This step is known as alpha testing. 8. Fix any problems that you discover during alpha testing. Repeat Steps 7 and 8 as often as necessary. 9. Give out copies of the program to other people to test. This step is known as beta testing. 10. Fix any problems that people discover during beta testing. Repeat Steps 9 and 10 as often as necessary. 11. Release the program to the unsuspecting public and pray that it works as advertised. The maintenance cycle Most programmers prefer to create new programs than maintain and modify existing ones, which can prove as unappealing as cleaning up somebody else\u2019s mess in an apartment. But the number of new programs that program- mers create every year is far less than the number of existing programs, so at some point in your life, you\u2019re likely to maintain and update a program that either you or somebody else wrote. The following list describes typical steps that you may need to follow to maintain an existing program: 1. Verify all reports of problems (or bugs) and determine what part of the program may be causing the bug to appear. 2. Fix the bug. 3. Test the program to make sure that the bug is really gone and that any changes you make to the program don\u2019t introduce any new bugs. 4. Fix any problems that may occur during testing. 45 Chapter 3: How to Write a Program 5. Repeat Steps 1 through 4 for each bug that someone reports in the program. Given the buggy nature of software, these steps may go on continuously for years. 6. Release a software patch, which users can add to an existing version of the program to incorporate corrections that you make to \u201cpatch up\u201d the problems. The upgrade cycle Companies don\u2019t make money fixing software and making it more stable, reli- able, and dependable. Instead, companies make money by selling new ver- sions of their programs that offer additional features and options that most people probably don\u2019t use or need in the first place. Still, because so many programs undergo modification to take advantage of new hardware or software, you may find yourself occasionally upgrading a program by adding new features to it. The following steps make up the upgrade cycle: 1. Determine what new feature you want to add to the program. 2. Plan how this new feature is to work (by using pseudocode or another tool to help structure your ideas). 3. Modify"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "companies make money by selling new ver- sions of their programs that offer additional features and options that most people probably don\u2019t use or need in the first place. Still, because so many programs undergo modification to take advantage of new hardware or software, you may find yourself occasionally upgrading a program by adding new features to it. The following steps make up the upgrade cycle: 1. Determine what new feature you want to add to the program. 2. Plan how this new feature is to work (by using pseudocode or another tool to help structure your ideas). 3. Modify the program to add this new feature. 4. Test this new feature (by using alpha testing) to make sure that it works and doesn\u2019t introduce new bugs into the program. 5. Fix any problems that may occur during alpha testing. 6. Give out copies of the program to other people to beta test. 7. Fix any problems that the beta testers report. 8. Repeat Steps 1 through 7 for each new feature that you need to add to the program. 9. Release the program as a new version and wait for the public to start reporting bugs that keep the program from working correctly so that you can start the maintenance cycle all over again. Despite all the university courses and such important-sounding titles as \u201csoftware engineer,\u201d programming is still less of a science and more of an art. Writing, modifying, and updating software doesn\u2019t require a high IQ or an advanced mathematics degree as much as it requires creativity, determina- tion, and plenty of imagination. You can write a program any way that you want, but the best way to prevent possible problems later on is to be orga- nized and methodical in your approach. 46 Part I: Programming a Computer Chapter 4 The Tools of a Computer Programmer In This Chapter \u0001 Writing programs in an editor \u0001 Using a compiler or an interpreter \u0001 Squashing bugs with a debugger \u0001 Writing a Help file \u0001 Creating an installation program T o help make computer programming easier, programmers use a variety of tools that perform a specific purpose. After you know what each tool does and how to use it, you can start writing your own programs in no time. You need the following two crucial tools to write a program: \u0002 An editor (so that you can write your instructions to the computer). \u0002 A compiler which converts your instructions into machine language so that the computer knows what you want it to do. Instead of using a com- piler, many programming languages use an interpreter. The main differ- ence between the two is that an interpreter converts your instructions into machine language and stores them in memory each time you run the program, whereas a compiler converts your instructions into machine language once and saves those instructions in a file often called an EXE or executable file. You may want to use the following additional tools"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "write your instructions to the computer). \u0002 A compiler which converts your instructions into machine language so that the computer knows what you want it to do. Instead of using a com- piler, many programming languages use an interpreter. The main differ- ence between the two is that an interpreter converts your instructions into machine language and stores them in memory each time you run the program, whereas a compiler converts your instructions into machine language once and saves those instructions in a file often called an EXE or executable file. You may want to use the following additional tools in writing a program: \u0002 A debugger (which helps identify problems or bugs in your program). \u0002 A Help file authoring program (so that your program can provide Help on-screen instead of needing to supply the user with a decent manual). \u0002 An installation program (to copy your program to the user\u2019s computer). If you buy a specific programming language, such as Visual Basic, Delphi, or Real Basic, you usually get an editor, compiler, and a debugger, which means you just need to buy a separate Help file authoring program and an installa- tion program. Writing Programs in an Editor As you write a program, you must type your instructions in a text (or ASCII) file. Although you can use a word processor to create a text file, a word processor offers fancy formatting features (such as changing fonts or under- lining text), which you don\u2019t need to write a program. 48 Part I: Programming a Computer Linux and the open source movement In the early days of computers, programmers freely created and shared the source code for their programs. The idea was that, if enough people voluntarily worked together on a single program, the chances were good that the pro- gram would actually work. Then programmers decided that they should get paid for their hard work, so they started keep- ing the source code for their programs to them- selves, which helped to spawn the software industry as we know it today (with all its missed deadlines, unreliable programs, and horribly written software manuals). But now the idea of sharing the source code (often known as the open source movement) has resurfaced with the emergence of the Linux operating system. Users can again peek at the source code without paying for it. Having access to the source code gives you the option of modifying the program if you want or (more likely) hiring someone else to modify it for you. In any event, access to the source code prevents you from being at the mercy of com- panies that refuse to reveal their source code so that they can force you to pay for program upgrades that still may not fix or add the fea- tures that you want. An ASCII file consists of nothing but characters that you can type from a key- board. ASCII stands for American Standard Code for Information Interchange, which is simply a universal"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "you the option of modifying the program if you want or (more likely) hiring someone else to modify it for you. In any event, access to the source code prevents you from being at the mercy of com- panies that refuse to reveal their source code so that they can force you to pay for program upgrades that still may not fix or add the fea- tures that you want. An ASCII file consists of nothing but characters that you can type from a key- board. ASCII stands for American Standard Code for Information Interchange, which is simply a universal file format that any computer can use. A program consists of one or more instructions that tell the computer what to do. The instructions that make up a program are known as the program\u2019s source code. Rather than struggle with a word processor, programmers created special programs for writing, editing, and printing the source code of a program. Almost no one writes a program correctly the first time, so the majority of a programmer\u2019s time is spent editing the source code. As a result, the program that enables you to write, edit, and print a program is known as an editor. An editor looks like a word processor but may offer special features to make programming easier, such as automatically formatting your source code, offering shortcuts for editing your source code, or providing pop-up Help as you\u2019re typing program commands. An example of an editor\u2019s pop-up Help is shown in Figure 4-1. Anytime that you need to write or modify the source code of a program, you must use an editor. Figure 4-1: The Visual Basic editor displays a pop-up window that shows you the correct syntax for a particular command. 49 Chapter 4: The Tools of a Computer Programmer Using a Compiler or an Interpreter After you type your instructions in an editor by using a programming lan- guage such as C++ or Java, guess what? The computer doesn\u2019t have the slightest idea what you just created. Computers understand only machine language, so you need to use another special program to convert your source code (the instructions that you write in C++ or Java) into machine language. You can use either of the following two types of programs to convert source code into machine language: \u0002 A compiler \u0002 An interpreter Compilers A compiler takes your source code, converts the entire thing into machine language, and then stores these equivalent machine language instructions in a separate file, often known as an executable file. The process is like having a translator study an entire novel written in Spanish and then translate it into Arabic. Whenever a compiler converts source code into machine language, it\u2019s com- piling a program. After you compile a program, you can just give away copies of the executable (machine-language) version of your program without giving away your source code version. As a result, most commercial programs (such as Microsoft PowerPoint and Quicken) are compiled. After you"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the entire thing into machine language, and then stores these equivalent machine language instructions in a separate file, often known as an executable file. The process is like having a translator study an entire novel written in Spanish and then translate it into Arabic. Whenever a compiler converts source code into machine language, it\u2019s com- piling a program. After you compile a program, you can just give away copies of the executable (machine-language) version of your program without giving away your source code version. As a result, most commercial programs (such as Microsoft PowerPoint and Quicken) are compiled. After you use a compiler to convert source code into machine language, you never need to use the compiler again (unless you make changes to your source code). A compiler creates machine language for a specific microprocessor, such as the PowerPC (which the Macintosh uses) or the Intel Pentium family of microprocessors (including clone microprocessors, such as the AMD Athlon). If you write a program in BASIC and want to run it on a Macintosh and a Windows computer, you need to compile your program twice: once for the Macintosh and once for the Windows environment. Not all compilers are equal, although two different compilers may convert the same language into machine language. Given identical C++ source code, for example, one C++ compiler may create a program that runs quickly, whereas a second C++ compiler may create a smaller file that runs much slower. 50 Part I: Programming a Computer Interpreters A second, but less popular, way to convert source code into machine lan- guage is to use an interpreter. An interpreter converts each line of your source code into machine language, one line at a time. The process is like giving a speech in English and having someone translate your sentences, one at a time, into another language (such as French). Unlike what a compiler does, an interpreter converts source code into machine language but stores the machine-language instructions in the com- puter\u2019s memory. Every time that you turn off the computer, you lose the machine-language version of your program. To run the program again, you must feed the source code into the interpreter again. If anyone wants to run your program, that person needs both an interpreter and the source code for your program. Because your source code enables everyone to see how you wrote your program (and gives others a chance to copy or modify your program without your permission), very few commercial programs use an interpreter. Most Web-page programming languages use interpreters, such as JavaScript and VBScript. Because different computers can view Web pages, you can\u2019t compile programs that you write in JavaScript or VBScript into machine lan- guage. Instead, your computer\u2019s browser uses an interpreter to run a JavaScript or VBScript program. In the old days, when computers were slow and lacking in sufficient memory and storage space, interpreters were popular because they gave you instant feedback. The moment you typed an instruction into the computer, the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "a chance to copy or modify your program without your permission), very few commercial programs use an interpreter. Most Web-page programming languages use interpreters, such as JavaScript and VBScript. Because different computers can view Web pages, you can\u2019t compile programs that you write in JavaScript or VBScript into machine lan- guage. Instead, your computer\u2019s browser uses an interpreter to run a JavaScript or VBScript program. In the old days, when computers were slow and lacking in sufficient memory and storage space, interpreters were popular because they gave you instant feedback. The moment you typed an instruction into the computer, the inter- preter told you whether that instruction would work and even showed you the results. With an interpreter, you could write and test your program at the same time. Now, computers are so fast that programmers find using a com- piler easier than using an interpreter. P-code: A combination compiler and interpreter Getting a program to run on different types of computers is often a big pain in the neck. Both Macintosh and Windows programs, for example, use pull-down menus and dialog boxes. You need to write one set of commands to create pull-down menus on the Macintosh, however, and a second set of commands to create the identical menus in Windows. 51 Chapter 4: The Tools of a Computer Programmer Because one program almost never runs on multiple computers without extensive modification, programmers combined the features of a compiler with an interpreter to create something called p-code. Instead of compiling source code directly into machine language, p-code com- piles source code into a special intermediate file format. To run a program compiled into p-code, you use an interpreter. This two-step process means that after you compile your program into p-code, you can run your p-code interpreted program on any computer that has the right p-code interpreter. Java is the most popular programming language that uses p-code. After you compile a Java program into p-code, you can copy that p-code to a Macintosh, a Windows computer, or a Linux computer. As long as that computer uses a Java p-code interpreter, you can run the Java program on that computer with- out modification. Best of all, programs that you compile into p-code can run without the origi- nal source code, which means that you can protect your source code and still give your program away to others. Just in case you\u2019re wondering, Liberty BASIC, which comes with this book, takes BASIC instructions and saves them in a separate file that uses p-code. If you distribute any compiled programs that you create using Liberty BASIC, you need to also distribute a special run-time file that can translate your Liberty BASIC p-code on another computer. Naturally, p-code has its own disadvantages. Programs that you create by using p-code tend to run much slower than programs that you compile directly into machine language. Although p-code programs can run without a copy of the original source code that you use to create them, you can"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "wondering, Liberty BASIC, which comes with this book, takes BASIC instructions and saves them in a separate file that uses p-code. If you distribute any compiled programs that you create using Liberty BASIC, you need to also distribute a special run-time file that can translate your Liberty BASIC p-code on another computer. Naturally, p-code has its own disadvantages. Programs that you create by using p-code tend to run much slower than programs that you compile directly into machine language. Although p-code programs can run without a copy of the original source code that you use to create them, you can also decompile p-code programs. Decompiling a p-code program can reveal the original source code that the programmer used to create the program. So if you write a program in Java and compile it into p-code, a rival can decompile your p-code program and see your original Java source code. Your rival then ends up with a nearly identical copy of your source code, essentially stealing your program. You can actually decompile any program, including programs that you com- pile into machine language. But unlike with decompiling p-code programs, decompiling a machine-language version of a program never gets you the original high-level language source code that the programmer used to write the program. If you compile a program into machine language, the original source code can be written in C++, COBOL, FORTRAN, BASIC, Ada, LISP, Pascal, or any other programming language in the world. Because the decompiler has no idea what language the original source code was written in, it can only decompile a machine-language version of a program into equivalent assembly 52 Part I: Programming a Computer language. After you decompile a program into assembly language source code, you can rewrite or modify that source code. Decompiling effectively allows you to steal the ideas of others. So what do I use? If you want to write programs to sell, use a compiler, which protects your original source code. If you want to write a program to run on your Web page, you can use either an interpreter or p-code. If you want to write a program that can run on different types of computers, p-code may prove your only choice. As a safer but more cumbersome alternative, you can also use multi- ple compilers and modify your program to run on each different computer. The language that you choose can determine whether you can use a com- piler, an interpreter, or p-code. You often convert Java programs into p-code, for example, although you can compile them directly into machine language. On the other hand, you usually compile C++ and rarely interpret or convert it into p-code. Squashing Bugs with a Debugger Few computer programs work 100 percent correctly, which explains why computers crash, lose airline reservations, or just act erratically at times. Mathematically, writing a program that works 100 percent correctly every time is impossible because testing a program for all possible types of com- puters, hardware, and additional software"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "determine whether you can use a com- piler, an interpreter, or p-code. You often convert Java programs into p-code, for example, although you can compile them directly into machine language. On the other hand, you usually compile C++ and rarely interpret or convert it into p-code. Squashing Bugs with a Debugger Few computer programs work 100 percent correctly, which explains why computers crash, lose airline reservations, or just act erratically at times. Mathematically, writing a program that works 100 percent correctly every time is impossible because testing a program for all possible types of com- puters, hardware, and additional software that may interfere with the way your program runs is impossible. A problem that keeps a program from working correctly is known as a bug. In the early days, computers used mechanical relays and vacuum tubes instead of circuit boards and microprocessors. One day, the computer failed to work correctly. The scientists examined their program; it should have worked. So they next examined the computer itself and found that a moth had gotten smashed in a mechanical relay, preventing it from closing and thus keeping the computer from working correctly. From that point on, prob- lems in computers have been known as bugs, even though real bugs are much less annoying and dangerous than computer bugs. Because writing a program that works 100 percent correctly all the time is virtually impossible, operating systems (such as Windows XP) unavoidably contain bugs that keep them from working correctly. When you convert your source code into machine language, you must use a compiler or interpreter, 53 Chapter 4: The Tools of a Computer Programmer which is another program that contains its share of bugs. Finally, your own program may contain bugs of its own. With so many places for bugs to creep in, you shouldn\u2019t be surprised that bugs infest computers like cockroaches infest a cheap apartment complex. Although you can do little about bugs in other people\u2019s programs (except not buy the programs), you can reduce (but not completely eliminate) bugs in your own program by using a debugger. A debugger is a special program (which may also contain bugs) that can help you track down and wipe out bugs in programs that you write. A debugger provides several ways to track down bugs in your program: \u0002 Stepping: The debugger runs your program, line-by-line, so that you can see exactly which line may contain the bug. This process is like reread- ing written instructions to get to another person\u2019s house if you\u2019re lost. By going over these instructions, one by one, you can find out where you made a wrong turn. \u0002 Breakpoints: Rather than force you to step through an entire program, line-by-line, breakpoints enable you to specify where you want to start examining your program line-by-line. So if you were lost, instead of rereading the instructions to get to another person\u2019s house from start to finish, you skip those instructions that you know you followed correctly and examine only"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "line may contain the bug. This process is like reread- ing written instructions to get to another person\u2019s house if you\u2019re lost. By going over these instructions, one by one, you can find out where you made a wrong turn. \u0002 Breakpoints: Rather than force you to step through an entire program, line-by-line, breakpoints enable you to specify where you want to start examining your program line-by-line. So if you were lost, instead of rereading the instructions to get to another person\u2019s house from start to finish, you skip those instructions that you know you followed correctly and examine only the remaining instructions that you aren\u2019t sure that you followed correctly. Similarly, by using breakpoints, you can selec- tively examine only parts of your program, line-by-line, and skip over the parts that you know already work. \u0002 Watching: Watching enables you to see your program storing data in memory and to determine what that data may be. If your program stores incorrect data (such as saving a name instead of a telephone number), you know exactly where in your program the bug is occurring. Figure 4-2 shows a sample debugger at work that highlights a specific instruction in your program and displays a window that shows the value of specific data. Each time you examine a line in your program, the debugger shows you how that particular line affects the value you\u2019re watching. As soon as you see the value change, the debugger shows you exactly which line in your program caused that change. This process is like having some- one to tell you to drive 10 miles south down a certain road after turning right. The moment that you exceed 10 miles, a watchpoint alerts you so that you know exactly where you almost made a mistake and got lost. A debugger essentially shows you exactly how a computer is going to interpret the instructions in your program. Of course, if you fix one bug, you may intro- duce several new ones. That\u2019s why writing bug-free programs is impossible. 54 Part I: Programming a Computer Writing a Help File Nobody has trouble using a doorknob, a toaster, or a microwave oven, but people still complain that computers and VCRs are too hard to use. The problem with VCRs lies in the cryptic controls that aren\u2019t easy to figure out just by looking at them. Similarly, the problem with computer programs is that programs are too complex to use at first glance. If you can make a pro- gram that\u2019s actually easy to use, people can actually use it. Because computer programs are still being designed for programmers by other programmers, computers still mystify the average user. To help the poor befuddled user, most programs now offer Help files. A Help file provides instructions and explanations on-screen. Theoretically, if the user experiences trouble with the program, he can browse through the Help file, find an explanation or step-by-step instructions, and continue using the program. Figure 4-3 shows Microsoft PowerPoint ,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "programs is that programs are too complex to use at first glance. If you can make a pro- gram that\u2019s actually easy to use, people can actually use it. Because computer programs are still being designed for programmers by other programmers, computers still mystify the average user. To help the poor befuddled user, most programs now offer Help files. A Help file provides instructions and explanations on-screen. Theoretically, if the user experiences trouble with the program, he can browse through the Help file, find an explanation or step-by-step instructions, and continue using the program. Figure 4-3 shows Microsoft PowerPoint , which desperately tries to guide users through its complicated maze of commands by providing a Help file and a cartoon Office Assistant. Figure 4-2: One window displays the source code, and a second window shows all the values you\u2019re watching. 55 Chapter 4: The Tools of a Computer Programmer Although Help files still can\u2019t substitute for designing a program that\u2019s easy to use in the first place, most programs offer Help files anyway. To keep your program modern and up-to-date, include a Help file with your program. To create a Help file, you can use a special Help file-authoring program, which simplifies the process of creating and organizing topics for your Help file, as shown in Figure 4-4. Creating an Installation Program After you write your program, test it, debug it, and write a Help file for it, the final step is to give or sell copies of your program to others. Although you can copy your program onto a floppy disk or CD and force buyers to manu- ally copy your program to their hard drive, doing so can cause problems. Users may not copy all the files correctly, for example. And forcing users to manually copy your program to their hard drive may prove such a nuisance that most people don\u2019t bother even trying to use your program. Figure 4-3: Many programs provide online Help screens in a desperate attempt to give you the information that you need. 56 Part I: Programming a Computer To make copying a program to a user\u2019s hard drive as easy as possible, most commercial programs include a special installation program. Users run this installation program, which automatically copies a program and all necessary files to the appropriate location on the user\u2019s hard drive. By making the installation of a program practically foolproof, software publishers make sure that users install the programs correctly. So the final step to distributing your program to others is to use a special installation program, which can smash all your program files into a single file that can automatically install itself on another computer. Installation programs offer the following features for distributing programs to others: \u0002 File compression: Most programs are fairly large, which means that they can\u2019t fit on a single floppy disk. Rather than force users to insert a series of floppy disks or compact discs (CDs) into their computer to install your program, an installation"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "software publishers make sure that users install the programs correctly. So the final step to distributing your program to others is to use a special installation program, which can smash all your program files into a single file that can automatically install itself on another computer. Installation programs offer the following features for distributing programs to others: \u0002 File compression: Most programs are fairly large, which means that they can\u2019t fit on a single floppy disk. Rather than force users to insert a series of floppy disks or compact discs (CDs) into their computer to install your program, an installation program smashes your files so that they can fit on as few floppy disks or compact discs as possible. Figure 4-4: Help file- creation programs, such as Visual Help Pro, simplify the process of making an online Help file for your program. 57 Chapter 4: The Tools of a Computer Programmer \u0002 Display graphics and play sounds: Installing a program usually takes a few minutes while the computer copies files from the floppy or CD to its hard drive. Rather than force the user to stare into space, an installation program can display advertisements or messages to make the installa- tion process mildly interesting. Other uses for graphics include display- ing an hourglass icon or a status bar that shows how far the installation is complete, such as 54 percent complete. That way, users know how much longer they need to wait. \u0002 Simplify the copying process: Most important, an installation program simplifies copying your program to the user\u2019s hard drive, making the entire process accurate, fast, and foolproof. The first impression that people get from your program is through its installa- tion process, so an installation program helps give your program a profes- sional appearance. Of course, you need to make sure that your installation program installs your program correctly or the first impression that users get from your program will be a highly negative one. 58 Part I: Programming a Computer Part II Learning Programming with Liberty BASIC In this part . . . N o matter what programming language you use (C/C++, BASIC, Prolog, COBOL, C#, Perl, Ada, Pascal, Java, and so on), all computer programs tend to follow the same general principles. If you understand how to write a program by using one language (such as BASIC), you \ufb01nd that understanding a second or third programming lan- guage (such as C/C++ and Java) is much easier. To give you a chance for hands-on programming, this book explains how to use Liberty BASIC, which is a real Windows compiler that enables you to write and create real Windows programs that you can sell or give away. Just load the Liberty BASIC compiler, type the sample Liberty BASIC programs into your computer, and run them to see how they work. Occasionally in this part, you see a Liberty BASIC program along with an equivalent program in another language (such as C/C++, Pascal, or Java), so you can understand"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "lan- guage (such as C/C++ and Java) is much easier. To give you a chance for hands-on programming, this book explains how to use Liberty BASIC, which is a real Windows compiler that enables you to write and create real Windows programs that you can sell or give away. Just load the Liberty BASIC compiler, type the sample Liberty BASIC programs into your computer, and run them to see how they work. Occasionally in this part, you see a Liberty BASIC program along with an equivalent program in another language (such as C/C++, Pascal, or Java), so you can understand how other programming languages may work. You can look at these programs to see how other programming languages accomplish the same tasks while looking entirely different from an equivalent Liberty BASIC program. Chapter 5 Getting Your Hands on a Real Language: Liberty BASIC In This Chapter \u0001 Understanding why you should learn Liberty BASIC \u0001 Putting Liberty BASIC on your computer \u0001 Writing a Liberty BASIC program \u0001 Using the Liberty BASIC editor \u0001 Using the Liberty BASIC online help \u0001 Exiting Liberty BASIC T he best way to learn anything is to start practicing it. If you want to learn computer programming, you should start writing programs on your com- puter as soon as possible. You can learn to program by starting out with one of hundreds of program- ming languages designed for novices, such as Pascal, LOGO, and SmallTalk. But the most popular beginner\u2019s programming language is still BASIC. BASIC is simple enough to help you understand the concepts behind programming yet powerful enough to enable you to create commercial-quality programs. To help you in your quest to learn programming, this book comes with a shareware copy of Liberty BASIC. As long as you\u2019re running Windows 95/98/ Me/NT/2000/XP, you can run and use Liberty BASIC on your computer. Most of this book provides examples in Liberty BASIC that you can type yourself. If you have a Macintosh, you can\u2019t run Liberty BASIC unless you buy a special Windows emulation program such as VirtualPC from Microsoft (at www.microsoft.com). As an alternative, you can use either True Basic (www.truebasic.com) or Future Basic (www.stazsoftware.com). True Basic, Future Basic, and Liberty BASIC all use BASIC language, so the sample programs in this book designed for Liberty BASIC should run under both True Basic and Future Basic with only minor modifications. If for some odd reason you\u2019re both technically knowledgeable enough to use Linux, yet still want to learn how to program, you can download a free BASIC interpreter, YABASIC (which stands for Yet Another BASIC), by visiting www. yabasic.de. Why Learn Liberty BASIC? If you\u2019re interested in learning to program, you may wonder, \u201cWhy not jump right in and start learning C++ or Java?\u201d (Then again, if you want to learn how to swim, why not jump right into the ocean and start swimming with the sharks?) Although you can start learning to program by using any language, Liberty BASIC offers several"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "some odd reason you\u2019re both technically knowledgeable enough to use Linux, yet still want to learn how to program, you can download a free BASIC interpreter, YABASIC (which stands for Yet Another BASIC), by visiting www. yabasic.de. Why Learn Liberty BASIC? If you\u2019re interested in learning to program, you may wonder, \u201cWhy not jump right in and start learning C++ or Java?\u201d (Then again, if you want to learn how to swim, why not jump right into the ocean and start swimming with the sharks?) Although you can start learning to program by using any language, Liberty BASIC offers several advantages that you won\u2019t find in other language compilers. Liberty BASIC is (almost) free Liberty BASIC is a shareware program that you can evaluate for free until you decide whether it\u2019s worth paying for. That way, you can experiment with com- puter programming without spending any money buying programs, such as Visual C++ or JBuilder only to realize they may be too complicated and con- fusing for you. Liberty BASIC is easy Liberty BASIC can teach you the fundamentals of programming so that you can get real-life experience programming your own computer. Other program- ming languages, such as C++ or Java, can force you to master needlessly com- plicated topics, such as pointers, object-orientation, and memory allocation. Rather than let these other programming languages bury you under an addi- tional layer of complexity that only gets in your way, learn Liberty BASIC. Best of all, the BASIC programming language was specially designed to teach novices how to program, so learning BASIC can teach you how programming works. Once you learn the fundamentals of programming with Liberty BASIC, you can apply your programming knowledge to help you better learn another programming language, such as C++ or Java. Liberty BASIC runs on Windows When computers used to run the ancient operating system of MS-DOS, Microsoft tossed in a free BASIC interpreter called QBASIC. Although you can 62 Part II: Learning Programming with Liberty BASIC still run QBASIC in most versions of Windows (such as Windows 98 but not Windows 2000), people have been screaming for a Windows-based version of BASIC that they can use to teach themselves programming. Because Microsoft has no intention of creating a Windows-based version of QBASIC, the next alternative is to use Liberty BASIC. You can not only write BASIC programs in Liberty BASIC on any computer that runs Microsoft Windows, but you can also create real, honest-to-goodness Windows applica- tions using Liberty BASIC that you can sell or give away as well. If you pay for the full version of Liberty BASIC, you can create real Windows programs that you can sell to others. The shareware version of Liberty BASIC (which comes with this book) allows you to write programs, but won\u2019t allow you to compile and distribute them to others. You can start using Liberty BASIC today Liberty BASIC comes with this book, so everyone reading this book can start using it right away (unless, of"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "runs Microsoft Windows, but you can also create real, honest-to-goodness Windows applica- tions using Liberty BASIC that you can sell or give away as well. If you pay for the full version of Liberty BASIC, you can create real Windows programs that you can sell to others. The shareware version of Liberty BASIC (which comes with this book) allows you to write programs, but won\u2019t allow you to compile and distribute them to others. You can start using Liberty BASIC today Liberty BASIC comes with this book, so everyone reading this book can start using it right away (unless, of course, you\u2019re not using Windows). That makes Liberty BASIC a natural learning tool to complement this book. If trying to understand certain programming concepts confuses you, you can quickly type a sample Liberty BASIC program and see for yourself exactly how certain programming features work. By combining theory with hands-on experience, this book and Liberty BASIC can help you pick up computer pro- gramming in no time. Installing Liberty BASIC To install Liberty BASIC by using the CD that comes with this book, refer to the installation instructions in the Appendix. Because software changes so rapidly, a newer version of Liberty BASIC may be available by the time you read this book. If you download a newer version from the Liberty BASIC Web site (at www.libertybasic.com), you may need to go through some extra steps to install Liberty BASIC on your computer. If you download Liberty BASIC from the Liberty BASIC Web site, the file is compressed in a self-extracting EXE file. To decompress this file, you need to download and save this file somewhere on your hard disk, and then double- click on the Liberty Basic EXE file (which has a cryptic name such as lb400win. exe). When you double-click on the Liberty Basic EXE file, the Liberty Basic installation program guides you, step-by-step, into installing Liberty Basic on your computer. 63 Chapter 5: Getting Your Hands on a Real Language: Liberty BASIC Loading Liberty BASIC As you install Liberty BASIC, the program creates its own directory and adds Liberty BASIC to your Program menu. To load Liberty BASIC, follow these steps: 1. Click the Start button on the Windows taskbar. The Start menu opens. 2. Choose Programs\u27aaLiberty BASIC\u27aaLiberty BASIC. The Liberty BASIC program appears. To make loading Liberty BASIC easier and faster, you can place a Liberty BASIC icon on the Windows desktop. To place a Liberty BASIC icon on your Windows desktop, follow these steps: 1. Right-click the Windows desktop. A pop-up menu appears. 2. Choose New\u27aaShortcut. A Create Shortcut dialog box appears. 3. Click Browse. A Browse dialog box appears. 4. Find and click the Liberty BASIC program and then click Open. You may need to change directories or drives to find the Liberty BASIC program if it isn\u2019t stored in the C:\\Program Files\\Liberty Basic directory. After you click Open, the Create Shortcut dialog box appears again. 5. Click Next. The Select a Title for the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "icon on the Windows desktop. To place a Liberty BASIC icon on your Windows desktop, follow these steps: 1. Right-click the Windows desktop. A pop-up menu appears. 2. Choose New\u27aaShortcut. A Create Shortcut dialog box appears. 3. Click Browse. A Browse dialog box appears. 4. Find and click the Liberty BASIC program and then click Open. You may need to change directories or drives to find the Liberty BASIC program if it isn\u2019t stored in the C:\\Program Files\\Liberty Basic directory. After you click Open, the Create Shortcut dialog box appears again. 5. Click Next. The Select a Title for the Program dialog box appears. 6. Type a name, such as Liberty BASIC, in the Select a Name for the Shortcut text box and click Finish. The Liberty BASIC icon appears on your desktop. The next time that you want to load Liberty BASIC, just double-click this icon. Your First Liberty BASIC Program The Liberty BASIC editor is where you write, edit, and run your BASIC pro- gram. To see the power of Liberty BASIC, type the following into the Liberty BASIC editor: 64 Part II: Learning Programming with Liberty BASIC PRINT \u201cThis BASIC program mimics a really bad boss.\u201d PRINT PRINT \u201cWhat is your name?\u201d INPUT Name$ PRINT \u201cHello \u201c + Name$ + \u201c. You\u2019re fired! Have a nice day.\u201d END Liberty BASIC, like most versions of BASIC, doesn\u2019t care whether you type commands in uppercase, lowercase, or a mixture of both. Most programmers, however, like to use all uppercase to identify all the BASIC commands that they use in a program. Unlike a word processor, the Liberty BASIC editor doesn\u2019t wrap words from one line to the other, which means that you can keep typing all the way to the far right until your text scrolls out of view. This program tells the computer to perform the following tasks: 1. The first line prints the message This BASIC program mimics a really bad boss. on-screen. 2. The second line prints (adds) a blank line directly underneath the message. 3. The third line prints What is your name? on-screen. 4. The fourth line displays a question mark (?) as a prompt and waits for the user to type a name. As soon as the user presses the Enter key, the BASIC program stores whatever the user types into a temporary memory location that it identifies as Name$. 5. The fifth line prints the message \u201cHello (following it by the name that the user types in the fourth line). You\u2019re fired! Have a nice day.\u201d The plus sign (+) tells Liberty BASIC to add the word \u201cHello\u201d with the words that it stores in Name$. 6. The sixth line tells the computer that this is the end of the program. Running a Liberty BASIC program After you finish typing a BASIC program, press Shift+F5 or choose Run\u27aaRun from the Liberty BASIC menu bar to run the program. Figure 5-1 shows what the BASIC program from the preceding section looks like when"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "line prints the message \u201cHello (following it by the name that the user types in the fourth line). You\u2019re fired! Have a nice day.\u201d The plus sign (+) tells Liberty BASIC to add the word \u201cHello\u201d with the words that it stores in Name$. 6. The sixth line tells the computer that this is the end of the program. Running a Liberty BASIC program After you finish typing a BASIC program, press Shift+F5 or choose Run\u27aaRun from the Liberty BASIC menu bar to run the program. Figure 5-1 shows what the BASIC program from the preceding section looks like when run on Liberty BASIC. As you run this program, Liberty BASIC displays the text in a window that it calls the main window. You can use the menu bar in the main window to print or save any text that appears in the main window. 65 Chapter 5: Getting Your Hands on a Real Language: Liberty BASIC Saving a Liberty BASIC program Although you can type your Liberty BASIC programs over and over whenever you want to run them, saving your program to a hard drive or floppy disk is much easier. Then you can load and edit the program later. To save a program, follow these steps: 1. Choose File\u27aaSave from the Liberty BASIC menu bar, or click the Save File icon on the Liberty Basic toolbar as shown in Figure 5-2. The Save As dialog box appears. 2. Type a name for your file in the Filename text box. You may want to change folders or drives to store your Liberty BASIC file. 3. Click OK. Liberty BASIC automatically adds a BAS file extension to Liberty BASIC pro- grams that you save. Unless you have a good reason to change this file exten- sion, use the BAS extension to help you identify your Liberty BASIC programs from any other files stored on your computer. Main window Figure 5-1: Running your first Liberty BASIC program. 66 Part II: Learning Programming with Liberty BASIC Loading or starting a Liberty BASIC program Liberty BASIC can display only one BASIC program on-screen at a time. Any time that you want to view another BASIC program, you must get rid of the BASIC program that you currently have on-screen. To create a brand new program, follow these steps: 1. Choose File\u27aaNew File from the Liberty BASIC menu bar, or click the New File icon on the Liberty BASIC toolbar. If you haven\u2019t saved the BASIC program you\u2019re currently displaying, a Please Confirm dialog box appears. New file Open file Save file Figure 5-2: The Liberty BASIC toolbar provides shortcuts for accessing the most common Liberty Basic commands. 67 Chapter 5: Getting Your Hands on a Real Language: Liberty BASIC 2. Click Yes to save the current file or click No if you don\u2019t want to save your changes. Liberty BASIC displays a blank screen, ready for you to type a new BASIC program. To load a previously saved program, follow these steps: 1."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "icon on the Liberty BASIC toolbar. If you haven\u2019t saved the BASIC program you\u2019re currently displaying, a Please Confirm dialog box appears. New file Open file Save file Figure 5-2: The Liberty BASIC toolbar provides shortcuts for accessing the most common Liberty Basic commands. 67 Chapter 5: Getting Your Hands on a Real Language: Liberty BASIC 2. Click Yes to save the current file or click No if you don\u2019t want to save your changes. Liberty BASIC displays a blank screen, ready for you to type a new BASIC program. To load a previously saved program, follow these steps: 1. Choose File\u27aaOpen from the Liberty BASIC menu bar, or click the Open File icon on the Liberty BASIC toolbar. If you haven\u2019t saved the BASIC program you\u2019re currently displaying, a Please Confirm dialog box appears. Liberty BASIC automatically remembers the last seven files you opened, so for a quick way to load a recently opened file, just click the File menu followed by the name of the file you want to open, which appears at the bottom of the File menu. 2. Click Yes to save the current file or click No if you don\u2019t want to save your changes. The Open a BAS File dialog box appears. You may need to change direc- tories or drives to find where you saved the file. 3. Click the file that you want to open and then click OK. Your chosen program appears. Using Keystroke Commands in Liberty BASIC The Liberty BASIC editor works like a simple word processor. You can use the mouse or the keyboard to navigate a BASIC program. Table 5-1 shows the dif- ferent keys that you can press and what they do. Table 5-1 Commands for the Liberty BASIC Editor Keystroke Command What It Does Home Moves the cursor to the front of the line End Moves the cursor to the end of the line Shift+Arrow key Highlights text in the direction of the arrow Delete Deletes the character directly above the cursor or deletes an entire highlighted block of text 68 Part II: Learning Programming with Liberty BASIC Keystroke Command What It Does Backspace Deletes the character to the left of the cursor Ctrl+F Finds and replaces text in your program Ctrl+A Selects your entire program Ctrl+Z Takes back the effects of the last command you chose (the Undo command) Getting Help Using Liberty BASIC As do most programs, Liberty BASIC provides an online Help system. To access Help, follow these steps: 1. Choose Help\u27aaLiberty BASIC Help. The Help Contents window appears, listing various Help topics, as shown in Figure 5-3. Figure 5-3: The Liberty BASIC Help window provides lists various topics that can answer any questions you might have using Liberty BASIC. 69 Chapter 5: Getting Your Hands on a Real Language: Liberty BASIC 2. Click a Help topic that you want to read. Depending on the topic you choose, the Help window displays different information about using Liberty BASIC. 3. Click the Close box"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "do most programs, Liberty BASIC provides an online Help system. To access Help, follow these steps: 1. Choose Help\u27aaLiberty BASIC Help. The Help Contents window appears, listing various Help topics, as shown in Figure 5-3. Figure 5-3: The Liberty BASIC Help window provides lists various topics that can answer any questions you might have using Liberty BASIC. 69 Chapter 5: Getting Your Hands on a Real Language: Liberty BASIC 2. Click a Help topic that you want to read. Depending on the topic you choose, the Help window displays different information about using Liberty BASIC. 3. Click the Close box of the Help window after you finish. Exiting Liberty BASIC Eventually, you may need to exit Liberty BASIC so that you can do something else with your computer. To exit Liberty BASIC, follow these steps: 1. Choose File\u27aaExit from the menu bar, or click the close box (which appears in the upper right-hand corner) of the Liberty Basic window. If you haven\u2019t saved the Liberty BASIC program you\u2019re currently display- ing, a dialog box asks whether or not you want to save the file. 2. Click Yes to save the current file or click No if you don\u2019t want to save your changes. Another dialog box appears, asking whether you\u2019re sure you want to exit Liberty BASIC. 3. Click Yes to exit (or No to return to Liberty BASIC). Liberty BASIC gracefully exits. 70 Part II: Learning Programming with Liberty BASIC Chapter 6 Handling Input and Output In This Chapter \u0001 Getting input and output the primitive way \u0001 Getting input and output the modern way \u0001 Printing stuff out E very program takes in data (input), manipulates that data in some way, and spits the data back out in some form (output). In the old days, programmers gave input to the computer by using a variety of methods, ranging from physically rearranging switches on the computer to using paper tape, punch cards, teletype machines (which resembled typewrit- ers), and finally keyboards and touch-screen monitors. As computers spit back some form of output, it usually appears on paper or on-screen on a monitor. Despite the fact that today\u2019s computers include pop-up windows, dialog boxes, command buttons, and scroll bars, most of today\u2019s programming lan- guages are still rooted in the past, when programs waited for the user to type a name or a number. Then the program shoved that information up a line and printed the resulting output directly below it. That\u2019s why most programming languages such as BASIC (and even C/C++) contain built-in commands for reading and displaying data one line at a time on-screen. Naturally, such programs look fairly primitive, especially if you compare them with today\u2019s modern programs, but be patient. As you\u2019re learning programming for the first time, understanding how programs can accept input and spit data back out is much more important (at this time) than worrying about how a program actually looks on-screen. Inputting and Outputting Data: The Old-Fashioned Way Input occurs whenever a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "up a line and printed the resulting output directly below it. That\u2019s why most programming languages such as BASIC (and even C/C++) contain built-in commands for reading and displaying data one line at a time on-screen. Naturally, such programs look fairly primitive, especially if you compare them with today\u2019s modern programs, but be patient. As you\u2019re learning programming for the first time, understanding how programs can accept input and spit data back out is much more important (at this time) than worrying about how a program actually looks on-screen. Inputting and Outputting Data: The Old-Fashioned Way Input occurs whenever a program accepts data from an outside source. Some examples of where a program can get input include the following: \u0002 Anything the user types from the keyboard \u0002 The movement of the computer mouse \u0002 Data that someone previously stores in a file (such as a word processor document or the high score of a video game) \u0002 Data that feeds into the computer from an outside source (such as a Web page sent through a modem or an image captured through a scanner) Output occurs whenever a program displays data back, usually after it manip- ulates the data in some way. Some common examples of output include the following: \u0002 Data that appears on-screen (such as text, pictures, or video images) \u0002 Data that prints on paper through a printer \u0002 Sound that plays through a computer\u2019s speakers (such as audio files pre- viously downloaded off the Internet) In BASIC, the simplest way to output data is to use the PRINT command, which simply displays whatever appears inside double quotes. In the follow- ing example, the BASIC command does nothing but display the text What are you looking at? on-screen, as shown in Figure 6-1. PRINT \u201cWhat are you looking at?\u201d END The PRINT command in Liberty BASIC displays text in a window known as the main window. If you don\u2019t want the main window to appear, just use the com- mand NOMAINWIN. Later when you start writing programs that use a graphical user interface (as explained in Chapter 14), you won\u2019t need to display the main window to display data on-screen. As the PRINT command gives your program the capability to output data, the INPUT command gives your program the capability to accept data from the keyboard. To use the INPUT command, you simply type the word INPUT, fol- lowing it with a character or phrase that you want to represent whatever the user types at the keyboard, as in the following example: PRINT \u201cWhat is the name of your boss?\u201d INPUT Myboss$ PRINT Myboss$ + \u201c? That sounds like the name of a moron!\u201d END If you type the preceding example into Liberty BASIC, the program displays the text What is the name of your boss? If you type a name and press Enter, the program responds by displaying the name that you typed, follow- ing it with a question mark and the text That sounds like"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "fol- lowing it with a character or phrase that you want to represent whatever the user types at the keyboard, as in the following example: PRINT \u201cWhat is the name of your boss?\u201d INPUT Myboss$ PRINT Myboss$ + \u201c? That sounds like the name of a moron!\u201d END If you type the preceding example into Liberty BASIC, the program displays the text What is the name of your boss? If you type a name and press Enter, the program responds by displaying the name that you typed, follow- ing it with a question mark and the text That sounds like the name of a moron!, as shown in Figure 6-2. 72 Part II: Learning Programming with Liberty BASIC Figure 6-1: The main window is a special window for displaying text from the PRINT command. 73 Chapter 6: Handling Input and Output An equivalent C program Unlike BASIC, other programming languages force you to enclose instructions inside special words or symbols that act as parentheses (so to speak) that wrap around the beginning and ending of your program. In the C/C++ language, for example, the smallest program you can write consists of the word main, which you follow with parentheses and curly brackets, as in the following example: main () { } If you write instructions by using C/C++, you must enclose them inside these strange curly brackets. Just to show you how drastically dif- ferent identical programs can look if you write them in different programming languages, here\u2019s an equivalent C program that enables the user to type a name (as input) and displays on- screen whatever name the user types, follow- ing it with the words, That sounds like the name of a moron!: main () { char myboss[15]; printf (\u201cWhat is the name of your boss.\\n\u201d); scanf (\u201c%s\u201d, &myboss); printf (\u201c%s\u201d, myboss); printf (\u201c? That sounds like the name of a moron!\u201d); } Don\u2019t worry too much about the technical details in using the PRINT and INPUT commands because they represent the old way of getting input and displaying output on-screen. In Windows and other modern operating sys- tems, including the Mac OS, programs offer fancier ways of accepting input and displaying output through the use of a graphical user interface (GUI), often pronounced as goo-ey. Inputting and Outputting Data: The Modern Way Most computers now use a graphical user interface to display data. Because commands such as PRINT and INPUT were geared for ancient computers that few people use any more, most programming languages now include special commands for creating and displaying data by using windows and dialog boxes. Every programming language provides different types of commands to create and display data in windows, dialog boxes, and menus. The commands in this chapter are unique to Liberty BASIC and probably won\u2019t work in other versions of BASIC. Getting input One of the simplest ways to ask for input from the user is to use a special Prompt dialog box. To create a Prompt dialog box, you need"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "PRINT and INPUT were geared for ancient computers that few people use any more, most programming languages now include special commands for creating and displaying data by using windows and dialog boxes. Every programming language provides different types of commands to create and display data in windows, dialog boxes, and menus. The commands in this chapter are unique to Liberty BASIC and probably won\u2019t work in other versions of BASIC. Getting input One of the simplest ways to ask for input from the user is to use a special Prompt dialog box. To create a Prompt dialog box, you need to use the Figure 6-2: The INPUT command accepts data from a keyboard. 74 Part II: Learning Programming with Liberty BASIC PROMPT command, following it with the text that you want to display (such as asking the user to type a name or number) and a character or word that rep- resents whatever the user types in, as in the following example: NOMAINWIN PROMPT \u201cWhat is the name of your boss?\u201d; name$ The first command (NOMAINWIN) turns off the main window, as described earlier in the chapter. The next command (PROMPT) displays the Prompter dialog box, as shown in Figure 6-3. Displaying output The simplest way to display output to the user is to use a Notice dialog box. To create a Notice dialog box, you need to use the NOTICE command, follow- ing it with any text that you want to display. The following program uses the NOTICE command to display text along with the name that the user types into the Prompt dialog box. In this case, the NOTICE command displays a Notice dialog box, as shown in Figure 6-4. Figure 6-4: The NOTICE command creates a dialog box that displays information to the user. Figure 6-3: The PROMPT command displays a dialog box so that people can type data into your program. 75 Chapter 6: Handling Input and Output NOMAINWIN PROMPT \u201cWhat is the name of your boss?\u201d; name$ NOTICE name$ + \u201c? That sounds like the name of a moron!\u201d END Sending Data to the Printer One of the most popular ways to output data is to print it out on paper, also known as a hard copy. In Liberty BASIC, the commands for sending data to a printer are LPRINT and DUMP, as shown in the following example: LPRINT \u201cSave the dolphins! Kill the tuna!\u201d DUMP END The LPRINT command sends data to your default printer. The DUMP command simply tells your printer to start printing right away. You can skip the DUMP command if you want, but then the LPRINT command may not start printing immediately. The LPRINT command starts printing in the upper-left corner of the page. If you want to start printing your data in a different location on a page, you may need to add extra lines or spaces to change the vertical and horizontal posi- tion where your text starts printing. To change the vertical position, just use the LPRINT"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "DUMP END The LPRINT command sends data to your default printer. The DUMP command simply tells your printer to start printing right away. You can skip the DUMP command if you want, but then the LPRINT command may not start printing immediately. The LPRINT command starts printing in the upper-left corner of the page. If you want to start printing your data in a different location on a page, you may need to add extra lines or spaces to change the vertical and horizontal posi- tion where your text starts printing. To change the vertical position, just use the LPRINT command by itself, as follows: LPRINT LPRINT \u201cSave the dolphins! Kill the tuna!\u201d DUMP END In the preceding example, the first LPRINT command prints a blank line, and the second LPRINT command prints the text Save the dolphins! Kill the tuna! To change the horizontal position, use the SPACE$(x) command where the letter x represents how many spaces you want to insert. If, for example, you want to insert five spaces before printing any text, you use the SPACE$(5) command, as in the following example: 76 Part II: Learning Programming with Liberty BASIC LPRINT \u201cSave the dolphins! Kill the tuna!\u201d LPRINT SPACE$(5); \u201cSave the dolphins! Kill the tuna!\u201d DUMP END The preceding program would make your printer print the following message: Save the dolphins! Kill the tuna! Save the dolphins! Kill the tuna! When using the SPACE$(x) command, you need to use the semicolon (;), fol- lowing it with the data that you want to print, which you surround with double quotation marks. This chapter provides a brief explanation for getting input and displaying output, just so you can understand the way a computer program gets data and spits it back out again for the user to see. For more details about creating a more modern user interface that offers windows, dialog boxes, and menus, skip to Chapter 14. 77 Chapter 6: Handling Input and Output 78 Part II: Learning Programming with Liberty BASIC Chapter 7 Variables, Constants, and Comments In This Chapter \u0001 Using variables \u0001 Creating and using constants \u0001 Adding comments to your code W hen a program accepts input, the first thing the computer needs to do is find a place to store any data that it gets from the user. Because computers are like one giant brain, they simply store data in memory. Of course, if you stuff enough data into a computer, it\u2019s likely to lose track of all the data in its memory (much like a person might do). So to help the com- puter find data that it already stored, computer programs use something called variables. A variable simply acts like a storage bin. You can stuff any type of data into a variable, such as numbers or words, and then retrieve them back out again so you can stuff different data into that variable all over again. Although vari- ables can only store one chunk of data at a time, they"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "if you stuff enough data into a computer, it\u2019s likely to lose track of all the data in its memory (much like a person might do). So to help the com- puter find data that it already stored, computer programs use something called variables. A variable simply acts like a storage bin. You can stuff any type of data into a variable, such as numbers or words, and then retrieve them back out again so you can stuff different data into that variable all over again. Although vari- ables can only store one chunk of data at a time, they can be reused over and over again to store different data. The contents of a variable may vary at any given time, hence the name variable. Besides storing data in variables, programs also use things known as con- stants and comments. Constants represent a fixed value that a program may need, and comments are explanations that programmers use to explain how a program works. Although the idea of using variables, constants, and comments may seem mysterious to you, relax. You\u2019ll see their purpose as soon as you start writing your own programs. Storing Data in Variables If you know your program will need to temporarily store data that it gets from the user, you must first create enough variables to hold that data. If you don\u2019t create enough variables to hold all the data that your program needs, your program will simply lose any data you give it, which effectively makes your program utterly useless. So before you write a program, you need to identify the following: \u0002 How many variables do I need to store all the data my program needs? \u0002 What names should I give each variable? \u0002 What type of data does each variable need to hold (numbers, text, and so on)? Each variable must have a distinct name to keep your computer from getting confused. The names can be anything from the name of your dog to varia- tions of four-letter words. However, it\u2019s a good idea to give variables names that describe the type of data that the variable holds, such as FirstName or FakeIDNumber. Variables have the following two uses: \u0002 For storing inputted data \u0002 For storing calculations that use inputted data or previous calculations Although you always want to give your variables descriptive names, keep in mind that every programming language uses slightly different rules for what\u2019s an acceptable name for a variable. In Liberty BASIC, for example, the rules for naming variables are as follows: \u0002 The first character of a variable name must be a letter, such as A or S. You can\u2019t create a variable in which the first character is a number, as in 7me. \u0002 Variables can contain a period, such as in My.Boss. You can\u2019t, however, use spaces in a variable\u2019s name, as in My Boss. \u0002 Upper and lowercase letters are significant in variable names, which means that Liberty BASIC considers the variable Phonenumber"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "uses slightly different rules for what\u2019s an acceptable name for a variable. In Liberty BASIC, for example, the rules for naming variables are as follows: \u0002 The first character of a variable name must be a letter, such as A or S. You can\u2019t create a variable in which the first character is a number, as in 7me. \u0002 Variables can contain a period, such as in My.Boss. You can\u2019t, however, use spaces in a variable\u2019s name, as in My Boss. \u0002 Upper and lowercase letters are significant in variable names, which means that Liberty BASIC considers the variable Phonenumber completely different from the variable PHONENUMBER. \u0002 The name of a variable can\u2019t be identical to a Liberty BASIC keyword, such as END or PRINT. If a programming language treats upper and lowercase variable names differ- ently, programmers say that the language is case-sensitive. C/C++, Java, and C# are case-sensitive, but Pascal and most versions of BASIC aren\u2019t. (Liberty BASIC is one of those rare exceptions that is case-sensitive.) 80 Part II: Learning Programming with Liberty BASIC Case-sensitive programs, such as C/C++, Java, and Liberty BASIC, make it really easy to make a mistake in your program by typing a variable name dif- ferently, such as MyAge and Myage. When you name your variables, be con- sistent, such as always using lowercase or always using uppercase. If you mix and match upper- and lowercase, you greatly increase the odds that you\u2019ll mistype a variable name. If you mistype a variable name, your program may not work correctly, and you may have a hard time figuring out why. Creating a variable In most programming languages such as C/C++ or Java, you have to go through three steps to create a variable: 1. Name all your variables and list your variables near the beginning of the program. 2. Define what type of data you want each variable to hold. 3. Assign data (numbers or a string) to your variable. In most versions of BASIC (including Liberty BASIC), you can name a variable and assign data to that variable all at the same time. In Liberty BASIC, the two types of data a variable can hold are limited to numbers and string. A string is just any text such as \u201cBob\u201d or \u201cI hate copycat book publishers.\u201d A number can be an integer (such as 54) or a real number (such as 54.903). Is this an advantage? Yes and no. The advantage of BASIC\u2019s simple way to create a variable is that you can create new variables any time you need them. However, if you write a large program, it can be really easy to lose track of all the variables that your program uses. So that\u2019s why more modern languages like C/C++ and many dialects of BASIC (including Visual BASIC and RealBASIC) have adopted the three-step method for creating variables. This three-step process offers the following advantages: \u0002 By naming all of your variables and listing them near the beginning of your"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Is this an advantage? Yes and no. The advantage of BASIC\u2019s simple way to create a variable is that you can create new variables any time you need them. However, if you write a large program, it can be really easy to lose track of all the variables that your program uses. So that\u2019s why more modern languages like C/C++ and many dialects of BASIC (including Visual BASIC and RealBASIC) have adopted the three-step method for creating variables. This three-step process offers the following advantages: \u0002 By naming all of your variables and listing them near the beginning of your program, anyone can see quickly, at a glance, all the variables that your program uses. \u0002 By defining the type of data a variable can hold, you can prevent a vari- able from holding the wrong type of data (such as a string instead of a number), which can prevent your program from trying to manipulate the wrong type of data. In the world of computer programming, defining what type of data your variable can hold is called declaring your variables. \u0002 When you finally assign data to a variable after you have declared what type of data your variable can hold, your compiler won\u2019t compile your program until it checks that the data you stuff into each variable matches each variable\u2019s declaration. So if you try to stuff a number into a variable 81 Chapter 7: Variables, Constants, and Comments that expects a string, your compiler won\u2019t compile your program, thus preventing you from releasing a program that doesn\u2019t work properly. (Of course, it\u2019s possible for a program to still run incorrectly, but at least it won\u2019t be because you stuffed the wrong type of data into a variable.) To show you how to create variables in Liberty BASIC, the following example uses two variables. One variable (Salary) stores data that represents a user\u2019s salary, and the second variable (TaxOwed) stores a calculation. NOMAINWIN Salary = 25000 TaxOwed = Salary * .95 NOTICE \u201cThis is how much tax you owe = $\u201d; TaxOwed END This Liberty BASIC program tells the computer to do the following: 1. The first line tells Liberty BASIC not to display the main window. 2. The second line tells the computer to store the number 25000 in the variable Salary. 3. The third line tells the computer, \u201cMultiply the number that the variable Salary stores by the number .95. Then store the value of this calcula- tion in another variable, TaxOwed.\u201d 4. The fourth line tells the computer, \u201cDisplay a NOTICE dialog box with the text, This is how much tax you owe = $\u201d and follow it by the number that the variable TaxOwed represents. 5. The fifth line tells the computer that the program is at an end. In a more modern dialect of BASIC that allows you to declare your variables ahead of time, such as Visual BASIC, the previous example might look like this: Dim Salary As Integer Dim TaxesOwed As"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "by the number .95. Then store the value of this calcula- tion in another variable, TaxOwed.\u201d 4. The fourth line tells the computer, \u201cDisplay a NOTICE dialog box with the text, This is how much tax you owe = $\u201d and follow it by the number that the variable TaxOwed represents. 5. The fifth line tells the computer that the program is at an end. In a more modern dialect of BASIC that allows you to declare your variables ahead of time, such as Visual BASIC, the previous example might look like this: Dim Salary As Integer Dim TaxesOwed As Single Salary = 25000 TaxesOwed = Salary * 0.95 TextBox1.Text() = CStr(TaxesOwed) This fragment of a Visual BASIC program tells the computer to do the following: 1. The first line tells Visual BASIC to create a variable called Salary and makes sure that it stores only integer data types. 2. The second line tells Visual BASIC to create a variable called TaxesOwed and make sure it stores only single data types, which are numbers such as 3.402 or \u2013193.8. 3. The third line tells Visual BASIC to stuff the value of 25000 into the Salary variable. 82 Part II: Learning Programming with Liberty BASIC 4. The fourth line tells Visual BASIC, \u201cMultiply the number that the variable Salary contains by the number .95. Then store the value of this calcu- lation in another variable, TaxOwed.\u201d 5. The fifth line tells Visual BASIC, \u201cTake the value stored in the TaxesOwed variable and display them on the screen.\u201d Don\u2019t worry too much about understanding the Visual BASIC example. Just get the idea that Visual BASIC uses a dialect of BASIC, and that declaring your variables near the top of your program can help you identify the number of variables used and the type of data each variable can hold. Assigning a value to a variable In Liberty BASIC, variables contain nothing until you assign values to them. Because the whole purpose of a variable is to store data, you can assign a value to a variable in the following three ways: \u0002 Assign a fixed value to a variable. \u0002 Assign the result of a calculation to a variable. \u0002 Use the PROMPT command to get data from the user and make that data the variable. Putting a fixed value in a variable The simplest way to assign a value to a variable is to use the equal sign. This method enables you to assign a number or a string to a variable, as in the fol- lowing example: CEOSalary = 9000000 Message2Workers$ = \u201cSo I make more than I\u2019m worth. So what?\u201d In the first line, you assign the number 9000000 to a variable by the name of CEOSalary. In the second line, you assign the string So I make more than I\u2019m worth. So what? to the variable Message2Workers$. If you assign a string to a variable, the variable name must include the dollar sign ($) at the end. If"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "variable is to use the equal sign. This method enables you to assign a number or a string to a variable, as in the fol- lowing example: CEOSalary = 9000000 Message2Workers$ = \u201cSo I make more than I\u2019m worth. So what?\u201d In the first line, you assign the number 9000000 to a variable by the name of CEOSalary. In the second line, you assign the string So I make more than I\u2019m worth. So what? to the variable Message2Workers$. If you assign a string to a variable, the variable name must include the dollar sign ($) at the end. If you assign a number to a variable, don\u2019t include a dollar sign in the variable name. Until you assign a value to a variable, its value is either zero (0) or a blank string (\u201c\u201d). 83 Chapter 7: Variables, Constants, and Comments Assigning a calculated value to a variable Because variables can represent numbers or strings that may change, you can assign calculations to a variable. If you want to store a numerical value in a variable, just assign it a mathematical calculation, as follows: DumbestPersonIQ = 6 BossIQ = DumbestPersonIQ / 3 In this example, Liberty BASIC creates a variable called BossIQ. Then it takes the value stored in the variable DumbestPersonIQ and divides it by three. It then assigns the result to the BossIQ variable. In this case, the value that it assigns to BossIQ is 2. You can also assign a string calculation to a variable, as follows: Cry$ = \u201cI want to eat\u201d NewCry$ = Cry$ + \u201c food that is really bad for me!\u201d In this example, the first line stores the string I want to eat in the variable Cry$. The second line creates a new variable, NewCry$. Then it combines the value of the Cry$ variable (I want to eat) with the string \u201c food that is really bad for me!\u201d Thus the NewCry$ variable now represents the string, \u201cI want to eat food that is really bad for me!\u201d To see how Liberty BASIC can assign numbers and strings to variables, type the following program: NOMAINWIN Parents = 2 Whacks = 20 MotherAxWhacks = Parents * Whacks FatherAxWhacks = MotherAxWhacks + 1 FirstName$ = \u201cLizzie\u201d LastName$ = \u201c Borden\u201d FullName$ = FirstName$ + LastName$ NOTICE FullName$ + \u201c had an ax, gave her mother \u201c _ + chr$(13) + str$(MotherAxWhacks) + \u201c whacks. When she saw what\u201d _ + chr$(13) + \u201cshe had done, gave her father \u201c _ + str$(FatherAxWhacks) + \u201c.\u201d END This Liberty BASIC program tells the computer to do the following: 1. The first line tells Liberty BASIC not to display the main window. 2. The second line creates the variable Parents and assigns it a value of 2. 3. The third line creates the variable Whacks and assigns it a value of 20. 84 Part II: Learning Programming with Liberty BASIC 4. The fourth line creates the variable MotherAxWhacks. Then it multiplies the value of the Parents"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "whacks. When she saw what\u201d _ + chr$(13) + \u201cshe had done, gave her father \u201c _ + str$(FatherAxWhacks) + \u201c.\u201d END This Liberty BASIC program tells the computer to do the following: 1. The first line tells Liberty BASIC not to display the main window. 2. The second line creates the variable Parents and assigns it a value of 2. 3. The third line creates the variable Whacks and assigns it a value of 20. 84 Part II: Learning Programming with Liberty BASIC 4. The fourth line creates the variable MotherAxWhacks. Then it multiplies the value of the Parents variable (which is 2) by the value of the Whacks variable (which is 20). Thus it assigns the value of the MotherAxWhacks variable the value of 2 * 20, or 40. 5. The fifth line creates the variable FatherAxWhacks. Then it adds 1 to the value of the MotherAxWhacks variable (which is 40). Thus it assigns the value of the FatherAxWhacks variable the value 40 + 1, or 41. 6. The sixth line creates the variable FirstName$ and assigns it the value of Lizzie. (Notice that the FirstName$ variable includes a dollar sign to tell the computer that you want this variable to hold only strings.) 7. The seventh line creates the variable LastName$ and assigns it the value of Borden. (Notice the leading space, so that the first character in LastName$ will be a space.) 8. The eighth line creates the variable FullName$ and assigns it the combi- nation of the FirstName$ variable and the LastName$ variable. Thus the value of the FullName$ variable is Lizzie plus \u201c Borden\u201d, or Lizzie Borden. 9. The ninth line creates a Notice dialog box that displays the value that you assign to the variable FullName$ (which is Lizzie Borden) along with the string \u201c had an ax, gave her mother \u201c. Notice that the end of this line ends with an underscore, which tells Liberty BASIC that the rest of the commands continue on the next line. 10. The tenth line inserts a Return character (which you represent by using the ASCII number 13), followed by the value of MotherAxWhacks (which is 40) and the string \u201c whacks. When she saw what\u201d. 11. The eleventh line inserts a Return character (which you represent by using the ASCII number 13), followed it by the string \u201c she had done, gave her father \u201c and the value you assign to the FatherAxWhacks variable (which is 41). The output of the program appears in Figure 7-1. 12. The twelfth line tells Liberty BASIC to add the number represented by the FatherAxWhacks variable (41), convert it to a string (using the str$ command), and add a period at the end of the string. 13. The thirteenth line tells Liberty BASIC that the program is at an end. Figure 7-1: A Liberty BASIC program displaying its output in a Notice dialog box. 85 Chapter 7: Variables, Constants, and Comments If you mistype a variable name, such as"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "and the value you assign to the FatherAxWhacks variable (which is 41). The output of the program appears in Figure 7-1. 12. The twelfth line tells Liberty BASIC to add the number represented by the FatherAxWhacks variable (41), convert it to a string (using the str$ command), and add a period at the end of the string. 13. The thirteenth line tells Liberty BASIC that the program is at an end. Figure 7-1: A Liberty BASIC program displaying its output in a Notice dialog box. 85 Chapter 7: Variables, Constants, and Comments If you mistype a variable name, such as typing FatherWhacks instead of FatherAxWhacks, Liberty BASIC assumes that you want to create a new vari- able and gives it a value of zero (0) or a blank (\u201c\u201d). If your program doesn\u2019t work right, make sure that you typed all variable names correctly. Stuffing a value into a variable with the PROMPT command The PROMPT command displays a dialog box for the user to type some data \u2014 either a string or a value. The following example uses the PROMPT command to ask the user for a value. As soon as the user types a value (such as the number 49) into the Prompt dialog box, the computer stores that value into the variable Salary. Then the program uses a second variable (TaxOwed) to store a calculation. NOMAINWIN PROMPT \u201cHow much money did you make last year?\u201d; Salary TaxOwed = Salary * .95 NOTICE \u201cThis is how much tax you owe = $\u201d; TaxOwed END This Liberty BASIC program tells the computer to do the following: 1. The first line tells Liberty BASIC not to display the main window. 2. The second line displays a Prompt dialog box that asks, \u201cHow much money did you make last year?\u201d After the user types a number, Liberty BASIC stores that number in the variable Salary. 3. The third line multiplies the value of Salary by .95. Whatever this value is, Liberty BASIC stores it in the variable TaxOwed. 4. The fourth line creates a Notice dialog box that reads, This is how much tax you owe = $, following it with the value that the TaxOwed variable represents. 5. The fifth line tells Liberty BASIC that the program is at an end. 86 Part II: Learning Programming with Liberty BASIC An equivalent C program Just so that you don\u2019t start thinking that all pro- grams look like Liberty BASIC, here\u2019s how a C program looks that\u2019s equivalent to the one in the previous section, \u201cStuffing a value into a vari- able with the PROMPT command\u201d: main () { float salary, taxowed; printf (\u201cHow much money did you make last year? \u201c); scanf (\u201c%f\u201d, &salary); taxowed = salary * .95; printf (\u201cThis is how much tax you owe = %8.2f\u201d, taxowed); } If you want the user to type a string (such as a name) into the Prompt dialog box, you need to add a dollar sign at the end of the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "that all pro- grams look like Liberty BASIC, here\u2019s how a C program looks that\u2019s equivalent to the one in the previous section, \u201cStuffing a value into a vari- able with the PROMPT command\u201d: main () { float salary, taxowed; printf (\u201cHow much money did you make last year? \u201c); scanf (\u201c%f\u201d, &salary); taxowed = salary * .95; printf (\u201cThis is how much tax you owe = %8.2f\u201d, taxowed); } If you want the user to type a string (such as a name) into the Prompt dialog box, you need to add a dollar sign at the end of the variable to hold the string, such as YourName$. The dollar sign just tells Liberty BASIC that this particular variable holds only a string, which can consist of a name, a ZIP Code, or a street address. In the following example, the Prompt dialog box stores a string: NOMAINWIN PROMPT \u201cWhat is your name?\u201d; YourName$ Message$ = YourName$ + \u201c, you deserve a raise!\u201d NOTICE Message$ END This Liberty BASIC program tells the computer to do the following: 1. The first line tells Liberty BASIC not to display the main window. 2. The second line displays a Prompt dialog box that asks, What is your name? Liberty BASIC stores whatever you type in the variable YourName$. 3. The third line adds the string , you deserve a raise! to the string that Libery BASIC stores in the YourName$ variable. This combination of \u201c, you deserve a raise!\u201d and the YourName variable Liberty BASIC stores in the variable Message$. 4. The fourth line creates a Notice dialog box that displays the string that Liberty BASIC stores in the Message$ variable. 5. The fifth line tells Liberty BASIC that the program is at an end. If the user types a number in the Prompt dialog box in Step 2, such as 45, Liberty BASIC treats that number as just a string of symbols, such as 45. Declaring your variables Variables enable a program to store and manipulate data. As a result, identify- ing all the variables that a program uses and what type of data it stores in them can help you understand how a specific program works. Unlike most programming languages, the BASIC programming language enables you to create and use variables anywhere in a program. Although this capability can prove convenient while you\u2019re writing a program, you may find it difficult to understand later while you\u2019re trying to modify that same program. Study, for example, the earlier Lizzie Borden program. Quick: How many vari- ables does this program use? If you can\u2019t tell right away, you must waste time 87 Chapter 7: Variables, Constants, and Comments going through the entire program, line by line, to find the answer. (The answer is seven variables: Parents, Whacks, MotherAxWhacks, FatherAxWhacks, FirstName$, LastName$, and FullName$.) To enable you (or anyone else) to more easily identify all the variables that a program uses, most programming languages, such as C/C++ and Pascal, force you to declare your"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "to understand later while you\u2019re trying to modify that same program. Study, for example, the earlier Lizzie Borden program. Quick: How many vari- ables does this program use? If you can\u2019t tell right away, you must waste time 87 Chapter 7: Variables, Constants, and Comments going through the entire program, line by line, to find the answer. (The answer is seven variables: Parents, Whacks, MotherAxWhacks, FatherAxWhacks, FirstName$, LastName$, and FullName$.) To enable you (or anyone else) to more easily identify all the variables that a program uses, most programming languages, such as C/C++ and Pascal, force you to declare your variables at the beginning of your program. Declaring your variables at the beginning has the following two purposes: \u0002 To identify the names of all variables that a program uses \u0002 To identify the total number of variables that a program uses Knowing the total number of variables that a program uses can help you better understand how a program works because you can determine all the places where the program may store data. Liberty BASIC supports the original (and some may claim a purer) dialect of the BASIC programming language, which lacks modern programming language constructs that have been added in later versions of the BASIC programming dialect, such as variable declarations and constants. To declare a variable ahead of time in some versions of BASIC, such as Visual Basic (but not Liberty BASIC), you use the DIM command, as follows: DIM Eyeballs The preceding command tells your computer to create a variable by the name of Eyeballs. You can define multiple variables at once, just by separating them with a comma, as the following example shows: DIM Eyeballs, Bullets, Logs The preceding command tells your computer to create three variables by the names of Eyeballs, Bullets, and Logs. Now if you rewrite the preceding Lizzie Borden program and declare all vari- ables at the start of the program, you can easily identify and count all variables that the program uses. As you can see in the following revised version, written in QBASIC (another BASIC dialect similar to Liberty BASIC), this program declares variables ahead of time so that you can easily count and identify all the variables that the program uses: 88 Part II: Learning Programming with Liberty BASIC DIM Parents, Whacks, MotherAxWhacks, FatherAxWhacks DIM FirstName$, LastName$, FullName$ Parents = 2 Whacks = 20 MotherAxWhacks = Parents * Whacks FatherAxWhacks = MotherAxWhacks + 1 FirstName$ = \u201cLizzie\u201d LastName$ = \u201c Borden\u201d FullName$ = FirstName$ + LastName$ PRINT FullName$ + \u201c had an ax, gave her mother \u201c; MotherAxWhacks; PRINT \u201c whacks. When she saw what she had done, gave her\u201d; PRINT \u201c father \u201c; FatherAxWhacks END In this example, you can quickly see that this program uses three variables to hold strings (FirstName$, LastName$, and FullName$) in addition to four variables to hold values (Parents, Whacks, MotherAxWhacks, FatherAxWhacks). 89 Chapter 7: Variables, Constants, and Comments An equivalent Java program Java closely resembles C/C++, so if you know C/C++,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Whacks FatherAxWhacks = MotherAxWhacks + 1 FirstName$ = \u201cLizzie\u201d LastName$ = \u201c Borden\u201d FullName$ = FirstName$ + LastName$ PRINT FullName$ + \u201c had an ax, gave her mother \u201c; MotherAxWhacks; PRINT \u201c whacks. When she saw what she had done, gave her\u201d; PRINT \u201c father \u201c; FatherAxWhacks END In this example, you can quickly see that this program uses three variables to hold strings (FirstName$, LastName$, and FullName$) in addition to four variables to hold values (Parents, Whacks, MotherAxWhacks, FatherAxWhacks). 89 Chapter 7: Variables, Constants, and Comments An equivalent Java program Java closely resembles C/C++, so if you know C/C++, you should little trouble learning Java. Just to give you some exposure to what a Java program looks like, study the following program to get a better idea how another programming language accomplishes the same task as the QBASIC program in the accompanying text: public class TrivialApplication { public static void main(String args[]) { int parents, whacks, mother- axwhacks, fatheraxwhacks; String firstname, lastname, fullname; parents = 2; whacks = 20; motheraxwhacks = parents * whacks; fatheraxwhacks = mother- axwhacks + 1; firstname = \u201cLizzie\u201d; lastname = \u201c Borden\u201d; fullname = firstname + last- name; System.out.println(fullname + \u201c had an ax, gave her mother \u201c + motheraxwhacks); System.out.println(\u201cwhacks. When she saw what she had done, gave her\u201d); System.out.println(\u201c father \u201c + fatheraxwhacks); } } If you run this Java program, it behaves just as the QBASIC version does. Declaring variables isn\u2019t just for the convenience of the computer; it\u2019s for the convenience of the programmer who must read, understand, and modify a program later. Using Constants The value stored in a variable can be changed while the program\u2019s running; that\u2019s why they\u2019re called variables (because their values can vary). Sometimes, however, you may want to use a fixed value throughout your pro- gram. Look, for example, at the following program. Can you figure out what the number .1975 stands for? Balance = 43090 OurProfit = Balance * .1975 Balance = Balance + OurProfit PRINT \u201cPay this amount, or we\u2019ll get you = \u201c; Balance PRINT \u201cToday\u2019s current loan sharking interest rate = \u201c; .1975 END 90 Part II: Learning Programming with Liberty BASIC Defining the type of data that variables can hold In addition to enabling you to create and name your variables at the beginning of a program, most programming languages (but not Liberty BASIC) also force you to define the type of data that each variable can hold. Defining your data types serves the following two purposes: \u0002 It identifies the type of data that each vari- able can hold. If you clearly identify what type of data a variable can hold, you (or another programmer) can better under- stand where a program may store data and what type of data it can store in each spe- cific variable. \u0002 It prevents bugs by keeping variables from storing the wrong types of data by mistake. Just so that you can see how other programming languages declare variables and the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the type of data that each variable can hold. Defining your data types serves the following two purposes: \u0002 It identifies the type of data that each vari- able can hold. If you clearly identify what type of data a variable can hold, you (or another programmer) can better under- stand where a program may store data and what type of data it can store in each spe- cific variable. \u0002 It prevents bugs by keeping variables from storing the wrong types of data by mistake. Just so that you can see how other programming languages declare variables and the data types that they can hold, the following example shows how the C programming language declares a variable by the name of IQ to hold an integer value: main () { int IQ } In the Pascal programming language, that same variable declaration may look as follows: Program Main; Var IQ : integer; End. And in certain BASIC dialects, such as Visual Basic, that same variable declaration looks like the following example: DIM IQ AS INTEGER A quick glance at the preceding program shows that the meaning of the number .1975 isn\u2019t obvious. Because the meaning of numbers isn\u2019t always clear without additional explanation, programmers use constants. By using a constant, you can use a descriptive name to represent a fixed value. Liberty BASIC supports an older version of the BASIC programming language that doesn\u2019t support constants. However, other versions of BASIC (such as Visual Basic and most other programming languages) do support constants. To see how constants work, study the following program written in the Pascal programming language: Program UnderstandingConstants; Const InterestRate = 0.1975; Var OurProfit : real; Balance : real; Begin Balance := 43090; OurProfit := Balance * InterestRate; Balance := Balance + OurProfit; Writeln (\u2018Pay this amount or we\u2019ll get you! = \u2018, Balance:6:2); Writeln (\u2018Today\u2019s current loan sharking interest rate = \u2018, InterestRate:1:4); End. If you run this program, you\u2019ll see the following output: Pay this amount or we\u2019ll get you = 51600.28 Today\u2019s current loan sharking rate = 0.1975 As you can see in the above program, the value of 0.1975 is used twice in the program (on lines 9 and 12). If the interest rate changed from 0.1975 to 0.2486 and your program did not use constants, you would have to exhaustively search through your entire program and change every line that uses the value of 0.1975 to 0.2486. For short programs like the above program, this is tolerable. In huge programs, however, this would be time-consuming and error-prone. So to save time and ensure accuracy, programmers use constants. By using constants in the above Pascal programming example, you only need to change the value of the constant InterestRate (in line 3) from 0.1975 to 0.2486. The computer automatically inserts this new value in lines 9 and 12, which also contain the constant InterestRate. 91 Chapter 7: Variables, Constants, and Comments Constants have the following two key advantages: \u0002 They identify numeric or string"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "value of 0.1975 to 0.2486. For short programs like the above program, this is tolerable. In huge programs, however, this would be time-consuming and error-prone. So to save time and ensure accuracy, programmers use constants. By using constants in the above Pascal programming example, you only need to change the value of the constant InterestRate (in line 3) from 0.1975 to 0.2486. The computer automatically inserts this new value in lines 9 and 12, which also contain the constant InterestRate. 91 Chapter 7: Variables, Constants, and Comments Constants have the following two key advantages: \u0002 They identify numeric or string values with a descriptive name. \u0002 Changing the value of a constant automatically modifies your entire pro- gram quickly and accurately. Commenting Your Code If you write a small program, anyone can readily understand how it works by following it line-by-line. But if you write a large program, understanding what the program does can prove difficult for others (and even for you) without spending a long time studying each line. To make understanding (and ultimately maintaining) a program easier (because programmers are a notoriously lazy bunch), every programming language enables you to insert comments into your source code. Comments enable you to store directly in your source code explanations to identify the following information: \u0002 Who wrote the program \u0002 The creation and last modification dates of the program \u0002 What the program does \u0002 How the program works \u0002 Where the program gets, saves, and outputs data \u0002 Any known problems with the program In Liberty BASIC, you can add comments in one of the following two ways: \u0002 By using the REM (short for REMark) statement. \u0002 By using the apostrophe (\u2018). The following program shows how to use both the REM statement and the apostrophe to insert comments into a program. Although you can use both types of comments in a single program, you want to use only one or the other for consistency\u2019s sake. \u2018 Created on March 29, 2005 \u2018 Written by John Doe \u2018 This program displays a not-so-subtle \u2018 message to potential copycats to 92 Part II: Learning Programming with Liberty BASIC \u2018 come up with their own ideas rather \u2018 than steal mine. REM This program does nothing more than REM print a message on-screen to REM insult any potential authors browsing REM through this book in hopes of stealing REM ideas to use in a competing book. NOMAINWIN \u2018 Keeps the main window from appearing NOTICE \u201cDon\u2019t steal ideas from this book!\u201d END \u2018 This last line ends the program Because comments are for the benefit of humans only, the computer looks at the preceding Liberty BASIC program as follows: NOMAINWIN NOTICE \u201cDon\u2019t steal ideas from this book!\u201d END The apostrophe is more versatile than the REM statement for making a com- ment because the apostrophe can create a comment that appears as a sepa- rate line or as part of an existing line. The REM statement can create only a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "to use in a competing book. NOMAINWIN \u2018 Keeps the main window from appearing NOTICE \u201cDon\u2019t steal ideas from this book!\u201d END \u2018 This last line ends the program Because comments are for the benefit of humans only, the computer looks at the preceding Liberty BASIC program as follows: NOMAINWIN NOTICE \u201cDon\u2019t steal ideas from this book!\u201d END The apostrophe is more versatile than the REM statement for making a com- ment because the apostrophe can create a comment that appears as a sepa- rate line or as part of an existing line. The REM statement can create only a comment that appears on a separate line. Comments exist solely for your benefit. The computer completely ignores any comments that you insert in a program. So make your comments useful but not too wordy; otherwise, they become more of a nuisance than an aid. Comments can prove valuable for telling Liberty BASIC to temporarily ignore one or more lines of code. Rather than delete an entire line, test to see whether the program works, and then retype the previously deleted line; for example, you can just comment out the line, as follows: NOMAINWIN \u2018 A = SQR((B * B) + (C + C)) END If you run this program, Liberty BASIC sees only the following: NOMAINWIN END To restore the commented line, just remove the apostrophe so that Liberty BASIC sees the program as follows: NOMAINWIN A = SQR((B * B) + (C + C)) END 93 Chapter 7: Variables, Constants, and Comments 94 Part II: Learning Programming with Liberty BASIC Chapter 8 Crunching Numbers and Playing with Strings In This Chapter \u0001 Performing mathematical operations \u0001 Using Liberty BASIC\u2019s built-in math functions \u0001 Pulling strings with your data \u0001 Converting strings into numbers O ne of the most important parts of a computer program is its capability to manipulate any data that it receives and to spit out a useful answer that people are willing to pay for (so that you can make money). The two types of data that your program must manipulate are numbers and words (known as strings by the programming community). Some common number-manipulating programs include spreadsheets, account- ing programs, and even video games (because they need to calculate the cor- rect way to display jet fighters or dragons popping on-screen to enable you to mow them down with a machine gun). Common string-manipulating programs include databases (which store, sort, and rearrange such data as names), word processors, and foreign-language translation programs. Adding, Subtracting, Dividing, and Multiplying The four basic ways to manipulate numbers are adding, subtracting, dividing, and multiplying. By using these four mathematical operations, you can create any type of complicated mathematical formula. To add, subtract, divide, or multiply two numbers (or two variables that rep- resent numbers), you use the symbols shown in Table 8-1. Table 8-1 Mathematical Operators Mathematical Operation Symbol to Use Example Result Addition + 2 + 5 7 Subtraction \u2013 77 \u2013 43 34 Division / (forward slash)"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "include databases (which store, sort, and rearrange such data as names), word processors, and foreign-language translation programs. Adding, Subtracting, Dividing, and Multiplying The four basic ways to manipulate numbers are adding, subtracting, dividing, and multiplying. By using these four mathematical operations, you can create any type of complicated mathematical formula. To add, subtract, divide, or multiply two numbers (or two variables that rep- resent numbers), you use the symbols shown in Table 8-1. Table 8-1 Mathematical Operators Mathematical Operation Symbol to Use Example Result Addition + 2 + 5 7 Subtraction \u2013 77 \u2013 43 34 Division / (forward slash) 20 / 4 5 Multiplication * 4 * 7 28 Exponentiation ^ 2 ^ 3 8 The division symbol (/) usually appears in two places on your keyboard: on the same key as the question mark (?) and on the numeric keypad. The expo- nentiation symbol (^) appears on the 6 key. You can also use the subtraction symbol (\u2013) to indicate negative numbers, such as \u201334.5 or \u201390. Although you already understand how addition, subtraction, division, and multiplication work, you may be less familiar with exponentiation. Exponentiation simply multiplies one number by itself several times. The for- mula 4 ^ 3, for example, tells Liberty BASIC take the number 4 and multiply it by itself three times. So 4 ^ 3 really means 4 * 4 * 4, or 64. Using variables Any mathematical calculation (addition, subtraction, division, or multiplica- tion) creates a single value, which you can store in a variable as follows: TaxYouOwe = 12500 * 1.01 Rather than use specific numbers to create mathematical formulas (such as 12,500 * 1.01), however, you can substitute variables in the following way: PROMPT \u201cHow much money did you make last year\u201d; NetIncome TaxYouOwe = NetIncome * 1.01 NOTICE \u201cYou owe this much in taxes = \u201c; TaxYouOwe END To make your mathematical calculations easier to understand, always use variables or constants rather than actual numbers. In the preceding example, you can\u2019t tell what the number 1.01 represents. Rather than use an actual number, substitute a descriptive constant in the formula, as follows: 96 Part II: Learning Programming with Liberty BASIC TaxRate = 1.01 PROMPT \u201cHow much money did you make last year\u201d; NetIncome TaxYouOwe = NetIncome * TaxRate NOTICE \u201cYou owe this much in taxes = \u201c; TaxYouOwe END If you use a constant (in this case, making TaxRate represent the number 1.01), you can quickly understand what the number 1.01 means and why to use it in the mathematical formula. You can use variables in the following two ways in mathematical formulas: \u0002 To represent numbers that the mathematical formula uses \u0002 To store the value that the mathematical formula calculates Be careful when naming variables. If you mistype a variable name or mix uppercase with lowercase letters, Liberty BASIC assumes that you\u2019re creating a new variable, and it assigns a value of zero or a blank to the \u201cnew\u201d variable. If your program isn\u2019t working right, check"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "represent the number 1.01), you can quickly understand what the number 1.01 means and why to use it in the mathematical formula. You can use variables in the following two ways in mathematical formulas: \u0002 To represent numbers that the mathematical formula uses \u0002 To store the value that the mathematical formula calculates Be careful when naming variables. If you mistype a variable name or mix uppercase with lowercase letters, Liberty BASIC assumes that you\u2019re creating a new variable, and it assigns a value of zero or a blank to the \u201cnew\u201d variable. If your program isn\u2019t working right, check to make sure that you spelled the variables correctly and used exactly the same upper- and lowercase letters. Working with precedence Simple formulas such as NetIncome * TaxRate are easy to understand; you just multiply the values that both variables represent. You can create more powerful mathematical formulas, however, by combining addition, subtrac- tion, division, or multiplication, as in the following example: TaxYouOwe = PastTaxes + NetIncome * TaxRate If the value of NetIncome is 50,000, the value of TaxRate is 1.01, and the value of PastTaxes is 2,500, the computer looks at the formula as follows: TaxYouOwe = 2500 + 50000 * 1.01 So now the question is whether Liberty BASIC adds 2,500 to 50,000 and then multiplies the whole thing by 1.01 (in which case the answer is 53,025) or multiplies 50,000 by 1.01 first and then adds 2,500 (in which case the answer is 53,000). Because the result of combining addition, subtraction, division, and multipli- cation in a single formula can confuse the living daylights out of people, pro- gramming languages create something mysterious known as precedence that 97 Chapter 8: Crunching Numbers and Playing with Strings tells the computer which mathematical operations to calculate first. Liberty BASIC calculates mathematical operators in the following order, from top (first) to bottom (last): \u0002 Exponentiation (^) \u0002 Multiplication (*) and (^); division (/) \u0002 Addition (+) and subtraction (\u2013) Before running the following Liberty BASIC program, try to figure out how the computer calculates a result: MyMoney = 3 + 4 ^ 5 - 8 / 5 * 7 PRINT MyMoney END This Liberty BASIC program tells the computer to do the following: 1. The first line tells the computer to create the variable MyMoney. Because the computer calculates exponential values first, Liberty BASIC calculates the value of 4 ^ 5, which is 1,024. The formula now looks as follows: MyMoney = 3 + 1024 - 8 / 5 * 7 Next, the computer calculates all multiplication and division (/). Because multiplication and division have equal precedence, the computer starts calculating with the first multiplication or division (/) operator that it finds, moving from left to right. The computer calculates the value of 8 / 5 first (1.6) and then multiplies it by 7. So the formula now looks as follows: MyMoney = 3 + 1024 - 11.2 Finally, the computer calculates all addition and subtraction, moving from left"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "^ 5, which is 1,024. The formula now looks as follows: MyMoney = 3 + 1024 - 8 / 5 * 7 Next, the computer calculates all multiplication and division (/). Because multiplication and division have equal precedence, the computer starts calculating with the first multiplication or division (/) operator that it finds, moving from left to right. The computer calculates the value of 8 / 5 first (1.6) and then multiplies it by 7. So the formula now looks as follows: MyMoney = 3 + 1024 - 11.2 Finally, the computer calculates all addition and subtraction, moving from left to right. First it calculates the value of 3 + 1,024 (which is 1,027); it then subtracts 11.2 from it. Thus the final answer looks as follows: MyMoney = 1015.8 2. The second line tells the computer to print the value that the MyMoney variable stores, which is 1015.8. 3. The third line tells the computer that the program is at an end. The computer always calculates operators from left to right if operators are equal in precedence, such as multiplication and division or addition and subtraction. 98 Part II: Learning Programming with Liberty BASIC Using parentheses Trying to remember the precedence of different mathematical operators can prove confusing. Even worse is that the ordinary precedence of mathematical operators can mess up the way that you want the computer to calculate a result. Suppose, for example, that you type the following: BigValue = 3 + 4 ^ 5 PRINT BigValue END With this program, the computer first calculates the exponential value of 4 ^ 5 (which is 1,024), and then it adds 3 to it, for a total of 1,027. But what if you really want the computer to add 3 to 4 and then perform the exponential? In this case, you must use parentheses to tell the computer, \u201cHey, add 3 to 4 first and then calculate the exponential,\u201d as in the following example: BigValue = (3 + 4) ^ 5 PRINT BigValue END This program adds 3 and 4 to get 7, so the formula becomes BigValue = 7 ^ 5, or 16,807. Anytime that the computer sees something trapped within parentheses, it calculates those values first. Then it uses its normal rules of precedence to figure out how to calculate the rest of the formula. Use parentheses to enclose only one mathematical operator at a time, such as (3 + 4). Although you can use parentheses to enclose multiple mathemati- cal operators, such as (3 + 4 ^ 5), doing so essentially defeats the purpose of using parentheses to make clear what the computer is to calculate first. You can, of course, use multiple parentheses to create fairly complex formulas, such as in the following formula: EasyTaxCode = ((3 + 4) ^ 5 / 3 - 8) / 5 * -7 (Without the parentheses in the preceding formula, Liberty BASIC calculates an entirely different result.) 99 Chapter 8: Crunching Numbers and Playing with Strings Using Liberty BASIC\u2019s"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "as (3 + 4). Although you can use parentheses to enclose multiple mathemati- cal operators, such as (3 + 4 ^ 5), doing so essentially defeats the purpose of using parentheses to make clear what the computer is to calculate first. You can, of course, use multiple parentheses to create fairly complex formulas, such as in the following formula: EasyTaxCode = ((3 + 4) ^ 5 / 3 - 8) / 5 * -7 (Without the parentheses in the preceding formula, Liberty BASIC calculates an entirely different result.) 99 Chapter 8: Crunching Numbers and Playing with Strings Using Liberty BASIC\u2019s Built-In Math Functions By combining mathematical operators, you can create practically any type of mathematical formula. But creating some mathematical formulas may prove too cumbersome, so as a shortcut, Liberty BASIC (and many other program- ming languages) provides built-in mathematical functions that you can use, as shown in Table 8-2. Table 8-2 Liberty BASIC\u2019s Built-in Mathematical Functions Function What It Does ABS (x) Returns the absolute value of x ACS (x) Returns the arccosine of x ASN (x) Returns the arcsine of x ATN (x) Returns the arctangent of x COS (x) Returns the cosine of x EXP (x) Returns a number raised to a specified power (x) INT (x) Returns the largest integer less than or equal to a specific number or expression LOG (x) Returns the natural logarithm of x (Note: The value of x must be a positive, nonzero number.) SIN (x) Returns the sine of x SQR (x) Returns the square root of x TAN (x) Returns the tangent of x If you don\u2019t understand terms like arcsine or logarithm, you probably don\u2019t need to use them anyway. The important point to remember is that all pro- gramming languages, such as Liberty BASIC, include built-in mathematical functions that you can use if you need them. The preceding equation calculates the square root of nine (9), which is three (3). To see how the Liberty BASIC mathematical functions work, run the following program and type different numbers (negative, positive, decimal, and so on) between 0 and 1.0 to see how the program works: 100 Part II: Learning Programming with Liberty BASIC PROMPT \u201cType in a number\u201d; AnyNumber PRINT \u201cThe ABS value = \u201c; ABS(AnyNumber) PRINT \u201cThe ACS value = \u201c; ACS(AnyNumber) PRINT \u201cThe ASN value = \u201c; ASN(AnyNumber) PRINT \u201cThe ATN value = \u201c; ATN(AnyNumber) PRINT \u201cThe COS value = \u201c; COS(AnyNumber) PRINT \u201cThe EXP value = \u201c; EXP(AnyNumber) PRINT \u201cThe INT value = \u201c; INT(AnyNumber) PRINT \u201cThe LOG value = \u201c; LOG(ABS(AnyNumber)) PRINT \u201cThe SIN value = \u201c; SIN(AnyNumber) PRINT \u201cThe SQR value = \u201c; SQR(AnyNumber) PRINT \u201cThe TAN value = \u201c; TAN(AnyNumber) PRINT END You can use only positive numbers with the LOG function or in calculating a square root. The arcsine and arccosine functions can accept only a number between 0 and 1.0. If you choose a higher or lower number, neither function works, and Liberty BASIC displays an error message. Manipulating Strings Besides"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "COS value = \u201c; COS(AnyNumber) PRINT \u201cThe EXP value = \u201c; EXP(AnyNumber) PRINT \u201cThe INT value = \u201c; INT(AnyNumber) PRINT \u201cThe LOG value = \u201c; LOG(ABS(AnyNumber)) PRINT \u201cThe SIN value = \u201c; SIN(AnyNumber) PRINT \u201cThe SQR value = \u201c; SQR(AnyNumber) PRINT \u201cThe TAN value = \u201c; TAN(AnyNumber) PRINT END You can use only positive numbers with the LOG function or in calculating a square root. The arcsine and arccosine functions can accept only a number between 0 and 1.0. If you choose a higher or lower number, neither function works, and Liberty BASIC displays an error message. Manipulating Strings Besides manipulating numbers, computers can also manipulate strings. A string is anything that you can type from the keyboard, including letters, symbols (such as #, &, and +), and numbers. In Liberty BASIC, a string is anything that appears inside quotation marks, as in the following example: PRINT \u201cEverything enclosed in quotation marks\u201d PRINT \u201cis a string, including the numbers below:\u201d PRINT \u201c72 = 9 * 8\u201d PRINT \u201cYou can even mix letters and numbers like this:\u201d PRINT \u201cI made $4,500 last month and still feel broke.\u201d END In the preceding program, the formula 72 = 9 * 8 is actually a string, even though it consists of numbers. That\u2019s because Liberty BASIC treats anything inside quotation marks as a string, including any numbers inside of quotation marks. 101 Chapter 8: Crunching Numbers and Playing with Strings Declaring variables as strings As with numbers, you can use strings directly in your program, as follows: PRINT \u201cPrint me.\u201d PRINT 54 END Just as with numbers, you may want to store strings in variables so you can reuse that particular string over and over again by typing just the variable rather than the entire string. That way, your program can receive a string, store the string in a variable, and then manipulate the string to create a useful result, such as displaying a message to the user on-screen. As you create a variable, you must tell Liberty BASIC, \u201cHey, I want this vari- able to hold only strings!\u201d In technical terms, you\u2019re declaring a string as a string data type. To create a variable to hold a string, Liberty BASIC enables you to create a variable and add the dollar sign ($) to the end of the variable name, as in the following example: StringVariable$ = \u201cThis variable can hold only strings.\u201d 102 Part II: Learning Programming with Liberty BASIC How C/C++ handles strings Unlike BASIC (and many other languages such as Pascal and Java), the C/C++ language doesn\u2019t use a string data type. Instead, C/C++ programs use a more primitive data type known as a char- acter (abbreviated char). A character data type can hold only one char- acter (such as a letter, symbol, or number), so to manipulate strings, C/C++ programs must use an array of characters. (Don\u2019t worry. Read more about arrays in Chapter 16. The important thing right now is to realize that C/C++ programs must handle strings differently"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Part II: Learning Programming with Liberty BASIC How C/C++ handles strings Unlike BASIC (and many other languages such as Pascal and Java), the C/C++ language doesn\u2019t use a string data type. Instead, C/C++ programs use a more primitive data type known as a char- acter (abbreviated char). A character data type can hold only one char- acter (such as a letter, symbol, or number), so to manipulate strings, C/C++ programs must use an array of characters. (Don\u2019t worry. Read more about arrays in Chapter 16. The important thing right now is to realize that C/C++ programs must handle strings differently from BASIC.) Just to give you an idea of how C/C++ programs handle strings, look at the following program. In this example, this C program defines the vari- able myrelative and defines it as an array that can hold 10 characters: main () { char myrelative[10]; printf (\u201cType the name of a male relative you hate.\\n\u201d); scanf (\u201c%s\u201d, &myrelative); printf (\u201c%s\u201d, myrelative); printf (\u201c says he doesn\u2019t like you either!\u201d); } If you fail to declare a variable as a string data type, but you still try to stuff a string into the variable, Liberty BASIC displays an error message and pre- vents your program from running. By ensuring that you store the correct data in variables, compilers such as Liberty BASIC try to make sure that you write programs that won\u2019t have any unexpected bugs. Smashing strings together Unlike with numbers, you can\u2019t subtract, divide, or multiply strings. But you can add strings (which is technically known as concatenating strings). To con- catenate two strings, you use the plus sign (+) to essentially smash two strings into a single string, as the following example shows: PROMPT \u201cWhat is your name?\u201d; MyName$ PRINT \u201cHello, \u201c + MyName$ + \u201c. Isn\u2019t it time to take\u201d PRINT \u201can early lunch from your job now?\u201d END This Liberty BASIC program tells the computer to do the following: 1. The first line tells the computer to print the message What is your name? on-screen and then wait for the user to type something. Liberty BASIC stuffs whatever the user types into the string variable MyName$. 2. The second line tells the computer to create one big string that uses the string it\u2019s storing in the MyName$ variable. If it\u2019s storing the name \u201cTasha\u201d in the MyName$ variable, the third line prints, Hello, Tasha. Isn\u2019t it time to take. 3. The third line prints, an early lunch from your job now?. 4. The fourth line tells the computer that the program is at an end. If you concatenate strings, make sure that you leave a space between the two strings so that they don\u2019t appear smashed together (likethis). In the previ- ous example, notice the space in the second line following the word Hello and the comma. Playing with Liberty BASIC\u2019s String Functions If just storing and concatenating strings were all that you could do, Liberty BASIC may seem pretty boring to you. That\u2019s why"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "it time to take. 3. The third line prints, an early lunch from your job now?. 4. The fourth line tells the computer that the program is at an end. If you concatenate strings, make sure that you leave a space between the two strings so that they don\u2019t appear smashed together (likethis). In the previ- ous example, notice the space in the second line following the word Hello and the comma. Playing with Liberty BASIC\u2019s String Functions If just storing and concatenating strings were all that you could do, Liberty BASIC may seem pretty boring to you. That\u2019s why Liberty BASIC includes a bunch of built-in functions to give you all sorts of fun ways to manipulate strings. 103 Chapter 8: Crunching Numbers and Playing with Strings Playing with UPPERCASE and lowercase If strings consist of letters, they can appear in the following three ways: \u0002 in all lowercase, like this \u0002 IN ALL UPPERCASE, LIKE THIS (WHICH CAN LOOK ANNOYING AFTER A WHILE) \u0002 As a mix of UPPERCASE and lowercase letters, Like This To convert every character in a string to lowercase, you can use the special function LOWER$. To convert every character in a string to uppercase, you can use another function \u2014 UPPER$. Both functions take a string and convert it to either uppercase or lowercase, as in the following example: UPPER$(\u201chello\u201d) \u2018 HELLO LOWER$(\u201cGOOD-BYE\u201d) \u2018 good-bye Run the following program to see how these two functions work: PROMPT \u201cWhat would you like to convert\u201d; ThisString$ PRINT \u201cThis is what happens when you use LOWER$:\u201d PRINT LOWER$(ThisString$) PRINT PRINT \u201cThis is what happens when you use UPPER$:\u201d PRINT UPPER$(ThisString$) END If you run this program and type in the string I Don\u2019t Like Anyone Who Copies My Work, the program displays the following: This is what happens when you use LOWER$: i don\u2019t like anyone who copies my work This is what happens when you use UPPER$: I DON\u2019T LIKE ANYONE WHO COPIES MY WORK Both the LOWER$ and UPPER$ functions work only with letters. They don\u2019t do anything with symbols (such as $, %, or @) or numbers. Counting the length of a string If you need to manipulate strings, you may want to know the actual length of a string. To count the number of characters in a string, you can use the LEN function, which looks as follows: 104 Part II: Learning Programming with Liberty BASIC LEN(\u201cGreetings from Mars!\u201d) In this example, the length of the string is 20 characters, including spaces and the exclamation point. Run the following program to see how the LEN func- tion works: PROMPT \u201cType a string:\u201d; CountMe$ TotalLength = LEN(CountMe$) PRINT \u201cThe total number of characters in your string is:\u201d PRINT TotalLength END So if you run this program and type in the string Beware of copycat publishers, you\u2019ll see the following: The total number of characters in your string is: 28 In calculating the total length of a string, the LEN function removes any spaces"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Programming with Liberty BASIC LEN(\u201cGreetings from Mars!\u201d) In this example, the length of the string is 20 characters, including spaces and the exclamation point. Run the following program to see how the LEN func- tion works: PROMPT \u201cType a string:\u201d; CountMe$ TotalLength = LEN(CountMe$) PRINT \u201cThe total number of characters in your string is:\u201d PRINT TotalLength END So if you run this program and type in the string Beware of copycat publishers, you\u2019ll see the following: The total number of characters in your string is: 28 In calculating the total length of a string, the LEN function removes any spaces before or after any visible characters, as shown in Table 8-3. Table 8-3 How the LEN Function Counts Spaces in a String String String Length \u201c Hello!\u201d 6 characters (eliminates the five spaces in front of the string) \u201cWhat are you looking at? \u201c 24 characters (eliminates the five spaces at the end of the string) \u201cBoo! Go away!\u201d 13 characters (counts the spaces between the words) Trimming the front and back of a string Because strings can have spaces before (known as leading spaces) or after (known as trailing spaces) any visible character, you may want to eliminate these leading or trailing spaces before counting the length of a string. Fortunately, Liberty BASIC includes a special function to do just that, as the following example shows: TRIM$(\u201c Hello, there!\u201d) \u2018 \u201cHello, there!\u201d TRIM$(\u201cGood-bye! \u201c) \u2018 \u201cGood-bye\u201d 105 Chapter 8: Crunching Numbers and Playing with Strings To see how the TRIM$ function can strip away leading and trailing spaces, try the following program: AString$ = \u201c Hello, there!\u201d PRINT \u201cThe original length of the string = \u201c; LEN(AString$) TempString$ = TRIM$(AString$) PRINT TempString$ PRINT \u201cThe new length is now = \u201c; LEN (TempString$) END If you run this program, this is what you see: The original length of the string = 14 Hello, there! The new length is now = 13 Inserting spaces Sometimes you may want to create spaces without pressing the spacebar multiple times to do so. For an easy way to create spaces, Liberty BASIC pro- vides the SPACE$ function, which looks as follows: SPACE$(X) In this example, X represents the number of spaces that you want to insert. The SPACE$ function in the following program simply inserts five spaces between the string Hello and the string Bo the Cat.: AString$ = \u201cBo the Cat.\u201d PRINT \u201cHello\u201d + SPACE$(5) + AString$ END Yanking characters out of a string If you have a long string, you may want only part of that string. You may have a string consisting of somebody\u2019s first and last name, for example, but you want only the last name. You can use one of the following Liberty BASIC func- tions to rip away one or more characters from a string: \u0002 LEFT$ (string, X) rips away X number of characters starting from the left of the string. \u0002 RIGHT$ (string, X) rips away X number of characters starting from the right of the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "+ SPACE$(5) + AString$ END Yanking characters out of a string If you have a long string, you may want only part of that string. You may have a string consisting of somebody\u2019s first and last name, for example, but you want only the last name. You can use one of the following Liberty BASIC func- tions to rip away one or more characters from a string: \u0002 LEFT$ (string, X) rips away X number of characters starting from the left of the string. \u0002 RIGHT$ (string, X) rips away X number of characters starting from the right of the string. \u0002 MID$ (string, X, Y) rips away Y number of characters, starting at the Xth character from the left. 106 Part II: Learning Programming with Liberty BASIC To see how these three functions work, run the following program and see what happens: FakeName$ = \u201cJohn Barkley Doe\u201d FirstName$ = LEFT$(FakeName$, 4) PRINT \u201cThis is the first name = \u201c; FirstName$ LastName$ = RIGHT$(FakeName$, 3) PRINT \u201cThis is the last name = \u201c; LastName$ MiddleName$ = MID$(FakeName$, 6, 7) PRINT \u201cThis is the middle name = \u201c; MiddleName$ END This program does nothing more than strip out the first, last, and middle names from the longer string John Barkley Doe. Looking for a string inside another string If you have a long string, you may want to know the location of another word or phrase inside the longer string. Suppose, for example, that you had a string containing a list of names, as in the following example: \u201cJohn, Julia, Matt, Mike, Sam, Chris, Karen\u201d If you want to know in what position the name \u201cMatt\u201d appears in the preced- ing string, you can use the magical INSTR command, as follows: Names$ = \u201cJohn, Julia, Matt, Mike, Sam, Chris, Karen\u201d Position = INSTR(Names$, \u201cMatt\u201d, 1) PRINT \u201cThe name Matt is located in position = \u201c; Position END This Liberty BASIC program tells the computer to do the following: 1. The first line creates the string variable Names$ that stores the string John, Julia, Matt, Mike, Sam, Chris, Karen. 2. The second line tells the computer to set the value of the Position vari- able to the value that the INSTR function returns. The INSTR function tells the computer, \u201cStarting at position 1, look at the string that the variable Names$ represents and look for the string Matt.\u201d In this case, the string Matt appears in position 14 in the Names$ string. 3. The third line prints The name Matt is located in position = 14. 4. The fourth line tells the computer that the program is at an end. 107 Chapter 8: Crunching Numbers and Playing with Strings To use the INSTR function, you need to specify the following three items: \u0002 The position where you want to start searching. In the preceding example, the position is 1, which represents the start of the string. You can, however, tell the computer to start looking from any position. If you tell the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "string Matt appears in position 14 in the Names$ string. 3. The third line prints The name Matt is located in position = 14. 4. The fourth line tells the computer that the program is at an end. 107 Chapter 8: Crunching Numbers and Playing with Strings To use the INSTR function, you need to specify the following three items: \u0002 The position where you want to start searching. In the preceding example, the position is 1, which represents the start of the string. You can, however, tell the computer to start looking from any position. If you tell the computer to start looking from position 20, it can never find the name \u201cMatt\u201d in the Names$ variable. \u0002 The string that you want to search. \u0002 The string that you want to locate. Strings are case-sensitive, which means that, to the computer, the strings \u201cMATT\u201d and \u201cMatt\u201d are two completely different strings. In the following pro- gram, INSTR can\u2019t find the string \u201cMATT\u201d because it thinks the strings \u201cMATT\u201d and \u201cMatt\u201d aren\u2019t the same: Names$ = \u201cJohn, Julia, Matt, Mike, Sam, Chris, Karen\u201d Position = INSTR(Names$, \u201cMATT\u201d, 1) PRINT \u201cThe name Matt is located in position = \u201c; Position END If the INSTR function can\u2019t find the string that you\u2019re looking for, the value of the INSTR function is zero. Converting strings into numbers (and vice versa) A string can consist of letters, symbols, and numbers. The most common use for storing numbers as a string is if the numbers represent something special, such as a telephone number or address. If you want the computer to print a telephone number, you must store that number as a string, as follows: PRINT \u201c555-1212\u201d This command prints the string 555-1212 on-screen. The quotation marks tell the computer, \u201cAnything inside the quotation marks is a string.\u201d What happens if you try the following command? PRINT 555-1212 Liberty BASIC interprets this command to mean, \u201cSubtract the number 1,212 from the number 555 and print the result (which is \u2013657) on-screen.\u201d If you have a number but you want to treat it as a string, you can use Liberty BASIC\u2019s STR$ function, which works as follows: 108 Part II: Learning Programming with Liberty BASIC STR$(Number) The STR$ function tells Liberty BASIC, \u201cTake a number (such as 45) and turn it into a string.\u201d If you have a number 34 and use the STR$ function, Liberty BASIC converts that number 34 into a string \u201c34\u201d. To print both a string and a number, for example, you normally need to use the PRINT command with a semicolon, as in the following example: BossIQ = 12 PRINT \u201cThis is the IQ of your boss =\u201d; BossIQ END You can, however, use the STR$ function to convert the BossIQ variable into a string, as follows: BossIQ = 12 NewString$ = \u201cThis is the IQ of your boss = \u201c + STR$(BossIQ) PRINT NewString$ END The main difference between the first example and the second example is that the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Liberty BASIC converts that number 34 into a string \u201c34\u201d. To print both a string and a number, for example, you normally need to use the PRINT command with a semicolon, as in the following example: BossIQ = 12 PRINT \u201cThis is the IQ of your boss =\u201d; BossIQ END You can, however, use the STR$ function to convert the BossIQ variable into a string, as follows: BossIQ = 12 NewString$ = \u201cThis is the IQ of your boss = \u201c + STR$(BossIQ) PRINT NewString$ END The main difference between the first example and the second example is that the number BossIQ is now part of the string NewString$. Naturally, Liberty BASIC enables you to convert strings into numbers as well. If you have a string (such as \u201c46\u201d), you can\u2019t perform any mathematical oper- ations on it. You can, however, convert that string into a number by using Liberty BASIC\u2019s VAL function, which works as follows: VAL(\u201cString\u201d) The VAL function tells Liberty BASIC, \u201cTake a string (such as \u201c45\u201d) and turn it into a number.\u201d If you have a string \u201c45\u201d and use the VAL function, Liberty BASIC converts that string \u201c45\u201d into the number 45. If you use the VAL function on a string that doesn\u2019t represent a number, such as the string \u201cHello!\u201d, the VAL function returns a zero value. To see how the VAL function works, run the following program: YearBorn$ = \u201c1964\u201d PROMPT \u201cYou were born in \u201c; YearBorn$ Year = 2005 \u2013 VAL(YearBorn$) NOTICE \u201cIn 2005, you were this old = \u201c; Year END If you run this program, the program displays a Prompt dialog box that says, You were born in 1964. Then it displays a Notice dialog box that says, In 2005, you were this old = 35. 109 Chapter 8: Crunching Numbers and Playing with Strings 110 Part II: Learning Programming with Liberty BASIC Chapter 9 Making Decisions with Control Statements In This Chapter \u0001 Understanding Boolean expressions \u0001 Using IF THEN statements \u0001 Using Select Case statements T he whole purpose of a program is to make the computer behave in a cer- tain way. The most primitive programs act exactly the same way each time that you run them, such as displaying, \u201cHello, world!\u201d or the name of your cat on-screen. Such primitive programs may work fine for learning to program, but they\u2019re relatively useless otherwise, because most programs need to accept data and modify their behavior based on any data that they receive. Many banks, for example, use a computer to analyze risks before they loan money. If you have an income over a certain amount and don\u2019t have a history of declaring bankruptcy every two years, the bank\u2019s computer may approve your loan before it approves a loan for someone who has no income or assets. In this case, the bank\u2019s computer program must accept data and decide what to do based on that data. Each time that you feed the program different data, the program may"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "need to accept data and modify their behavior based on any data that they receive. Many banks, for example, use a computer to analyze risks before they loan money. If you have an income over a certain amount and don\u2019t have a history of declaring bankruptcy every two years, the bank\u2019s computer may approve your loan before it approves a loan for someone who has no income or assets. In this case, the bank\u2019s computer program must accept data and decide what to do based on that data. Each time that you feed the program different data, the program may spit out a different answer. To find out how to give your program the capability to make decisions, you must use something mysterious known as control statements. Using Boolean Expressions Whenever you make a decision, such as what to eat for dinner, you ask your- self a question such as, \u201cDo I feel like eating a hamburger?\u201d If the answer is yes, you go to a restaurant that serves hamburgers. Computers work in a similar way. Although people can ask questions, com- puters check a Boolean expression. A Boolean expression is anything that represents one of two values, such as true/false or zero/nonzero. Boolean expressions are part of Boolean algebra, which was named after a man by the name of George Boole. (If you study hard and create your own branch of mathematics, someone may name it after you, too.) The simplest Boolean expression is one that compares two values, as shown in Table 9-1. Table 9-1 Evaluating Boolean Expressions Boolean Expression What It Means Boolean Value 4 < 54 4 is less than 54 True 4 > 54 4 is greater than 54 False 4 = 54 4 is equal to 54 False 4 <= 54 4 is less than or equal to 54 True 4 >= 54 4 is greater than or equal to 54 False 4 <> 54 4 is not equal to 54 True Symbols such as <, >, =, <=, >=, and <> are known as relational operators. Try running the following program to guess which sentence the program prints out: IF (4 < 54) THEN PRINT \u201cThis prints out on-screen.\u201d ELSE PRINT \u201cWhy did you pick this sentence?\u201d END IF END This BASIC program tells the computer to do the following: 1. The first line tells the computer to evaluate the Boolean expression (4 < 54). Because this is true, the computer can proceed to the second line. 2. The second line tells the computer to print the message, This prints out on-screen. Then the computer skips over the third and fourth lines to the fifth line of the program. 3. The third line tells the computer, \u201cIn case the Boolean expression (4 < 54) happens to prove false, proceed to the fourth line of the program.\u201d 112 Part II: Learning Programming with Liberty BASIC 4. The fourth line tells the computer to print the message, Why did you pick this sentence? Because the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "< 54). Because this is true, the computer can proceed to the second line. 2. The second line tells the computer to print the message, This prints out on-screen. Then the computer skips over the third and fourth lines to the fifth line of the program. 3. The third line tells the computer, \u201cIn case the Boolean expression (4 < 54) happens to prove false, proceed to the fourth line of the program.\u201d 112 Part II: Learning Programming with Liberty BASIC 4. The fourth line tells the computer to print the message, Why did you pick this sentence? Because the Boolean expression (4 < 54) is never false, the third and fourth lines never run. 5. The fifth line simply identifies the end of the IF THEN ELSE statement (which you find out more about in the section \u201cIF THEN ELSE statements,\u201d later in this chapter). 6. The sixth line tells the computer that the program is at an end. You can assign a variable to a Boolean expression in the following way: Guilty = (4 < 54) This example assigns the value of true to the variable Guilty. The preced- ing statement tells the computer, \u201cThe Boolean expression of (4 < 54) is true. Thus the value of the Guilty variable is true.\u201d Liberty BASIC doesn\u2019t really know the difference between true and false. Because Liberty BASIC can\u2019t assign a true value to a Boolean expression, Liberty BASIC just assigns the number \u20131 to the Boolean expression, which represents the value true. If Liberty BASIC wants to assign a false value to a Boolean expression, it assigns the number 0 to the Boolean expression. Try running the following program: Guilty = (4 < 54) IF Guilty THEN PRINT \u201cSlap him on the wrist and let him go.\u201d ELSE PRINT \u201cThis sentence never prints out.\u201d END IF END Each time that you run the preceding program, it prints only the message, \u201cSlap him on the wrist and let him go.\u201d Using variables in Boolean expressions The sample program in the preceding section uses a Boolean expression (4 < 54) that\u2019s fairly useless because it\u2019s always true. Every time that you run the program, it just prints out the message, \u201cSlap him on the wrist and let him go.\u201d For greater flexibility, Boolean expressions usually compare two variables or one variable to a fixed value, as in the following examples: (MyIQ < AnotherIQ) (Taxes < 100000) 113 Chapter 9: Making Decisions with Control Statements The value of the first Boolean expression (MyIQ < AnotherIQ) depends on the value of the two variables MyIQ and AnotherIQ. Run the following pro- gram to see how it follows a different set of instructions, depending on the value of the MyIQ and AnotherIQ variables: PROMPT \u201cWhat is your IQ\u201d; MyIQ PROMPT \u201cWhat is the IQ of another person\u201d; AnotherIQ IF (MyIQ > AnotherIQ) THEN PRINT \u201cI\u2019m smarter than you are.\u201d ELSE PRINT \u201cYou have a higher IQ to make up for your lack of common"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "< AnotherIQ) (Taxes < 100000) 113 Chapter 9: Making Decisions with Control Statements The value of the first Boolean expression (MyIQ < AnotherIQ) depends on the value of the two variables MyIQ and AnotherIQ. Run the following pro- gram to see how it follows a different set of instructions, depending on the value of the MyIQ and AnotherIQ variables: PROMPT \u201cWhat is your IQ\u201d; MyIQ PROMPT \u201cWhat is the IQ of another person\u201d; AnotherIQ IF (MyIQ > AnotherIQ) THEN PRINT \u201cI\u2019m smarter than you are.\u201d ELSE PRINT \u201cYou have a higher IQ to make up for your lack of common sense.\u201d END IF END If you run this program and type different values for MyIQ and AnotherIQ, the program behaves in two possible ways, printing on-screen either I\u2019m smarter than you are. or You have a higher IQ to make up for your lack of common sense. If you use variables in Boolean expressions, you give the computer more flex- ibility in making decisions on its own. Using Boolean operators Examining a single Boolean expression at a time can prove a bit cumbersome, as the following example shows: PROMPT \u201cHow much money did you make\u201d; Salary PROMPT \u201cHow much money did you donate to political candidates\u201d; Bribes IF (Salary > 500) THEN IF (Bribes > 700) THEN PRINT \u201cYou don\u2019t need to pay any taxes.\u201d END IF END IF END The only time that this program prints the message, You don\u2019t need to pay any taxes on-screen is if both Boolean expressions (Salary > 500) and (Bribes > 700) are true. Rather than force the computer to evaluate Boolean expressions one at a time, you can get the computer to evaluate multiple Boolean expressions by 114 Part II: Learning Programming with Liberty BASIC using Boolean operators. A Boolean operator does nothing more than connect two or more Boolean expressions to represent a true or a false value. Every programming language uses the following four Boolean operators: \u0002 AND \u0002 OR \u0002 XOR \u0002 NOT The AND operator The AND operator links two Boolean expressions. You can, for example, rewrite the program in the preceding section as follows by using the Boolean operator AND: PROMPT \u201cHow much money did you make\u201d; Salary PROMPT \u201cHow much money did you donate to political candidates\u201d; Bribes IF (Salary > 500) AND (Bribes > 700) THEN PRINT \u201cYou don\u2019t need to pay any taxes.\u201d END IF END In this case, the program prints out the message, You don\u2019t need to pay any taxes only if both (Salary > 500) is true and (Bribes > 700) is true. If either Boolean expression is false, this program doesn\u2019t print anything. Run the preceding program and use the values in Table 9-2 to see what happens. Table 9-2 Different Values Determine How the AND Operator Works Value of Salary Value of Bribes What the Program Does 100 100 Nothing 900 100 Nothing 100 900 Nothing 900 900 Prints the message 115 Chapter 9: Making Decisions with Control Statements"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "IF END In this case, the program prints out the message, You don\u2019t need to pay any taxes only if both (Salary > 500) is true and (Bribes > 700) is true. If either Boolean expression is false, this program doesn\u2019t print anything. Run the preceding program and use the values in Table 9-2 to see what happens. Table 9-2 Different Values Determine How the AND Operator Works Value of Salary Value of Bribes What the Program Does 100 100 Nothing 900 100 Nothing 100 900 Nothing 900 900 Prints the message 115 Chapter 9: Making Decisions with Control Statements The AND operator can represent a true value only if both Boolean expressions that it connects also are true. To show how the AND operator works, programmers like to draw some- thing known as a truth table, which tells you whether two Boolean expres- sions that the AND operator connects represent a true or a false value. Table 9-3 is a truth table listing the values for the following two Boolean expressions: (Boolean expression 1) AND (Boolean expression 2) Table 9-3 The Truth Table for the AND Operator Value of Value of Value of the Entire (Boolean Expression 1) (Boolean Expression 2) (Boolean Expression 1) AND (Boolean Expression 2) False False False True False False False True False True True True The OR operator The OR operator links two Boolean expressions but produces a true value if either Boolean expression represents a true value. For an example of how this operator works, run the following program: PROMPT \u201cHow far can you throw a football\u201d; Football PROMPT \u201cWhat is your IQ\u201d; IQ IF (Football > 50) OR (IQ <= 45) THEN PRINT \u201cYou have what it takes to become a professional athlete!\u201d END IF END In this case, the program prints the message, You have what it takes to become a professional athlete! if either (Football > 50) is true or (IQ <= 45) is true. Only if both Boolean expressions are false does the pro- gram refuse to print anything. Run the preceding program and use the values in Table 9-4 to see what happens. 116 Part II: Learning Programming with Liberty BASIC Table 9-4 Different Values Determine How the OR Operator Works Value of Football Value of IQ What the Program Does 5 70 Nothing 70 70 Prints the message 5 5 Prints the message 70 5 Prints the message The OR operator can represent a false value only if both Boolean expressions that it connects are also false. Table 9-5 is a truth table to show how the OR operator works for Boolean expressions such as the following examples: (Boolean expression 1) OR (Boolean expression 2) Table 9-5 The Truth Table for the OR Operator Value of Value of Value of the Entire (Boolean Expression 1) (Boolean Expression 2) (Boolean Expression 1) OR (Boolean Expression 2) False False False True False True False True True True True True The XOR operator The XOR operator links two Boolean expressions"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "message The OR operator can represent a false value only if both Boolean expressions that it connects are also false. Table 9-5 is a truth table to show how the OR operator works for Boolean expressions such as the following examples: (Boolean expression 1) OR (Boolean expression 2) Table 9-5 The Truth Table for the OR Operator Value of Value of Value of the Entire (Boolean Expression 1) (Boolean Expression 2) (Boolean Expression 1) OR (Boolean Expression 2) False False False True False True False True True True True True The XOR operator The XOR operator links two Boolean expressions but produces a true value only if one Boolean expression represents a true value and the other Boolean expression represents a false value. For an example of how this operator works, run the following program: PROMPT \u201cIs your spouse around (Type 1 for Yes or 0 for No)\u201d; SpouseHere PROMPT \u201cIs your best friend around (Type 1 for Yes or 0 for No)\u201d; BestfriendHere IF (SpouseHere = 0) XOR (BestfriendHere = 0) THEN PRINT \u201cYou won\u2019t be lonely tonight!\u201d END IF END 117 Chapter 9: Making Decisions with Control Statements The only two times that this program prints the message, You won\u2019t be lonely tonight! is if your spouse is around (SpouseHere = 1) but your best friend isn\u2019t (BestfriendHere = 0) or if your best friend is around (Bestfriendhere = 1) but your spouse isn\u2019t (SpouseHere = 0). If your spouse is around (SpouseHere = 1) and your best friend is around (BestfriendHere = 1), nothing happens. Similarly, if your spouse is gone (SpouseHere = 0) and your best friend is gone (BestfriendHere = 0), nothing happens. Run the preceding program and use the values in Table 9-6 to see what happens: Table 9-6 Different Values Determine How the XOR Operator Works Value of SpouseHere Value of BestfriendHere What the Program Does 0 0 Nothing 1 0 Prints the message 0 1 Prints the message 1 1 Nothing The XOR operator can represent a false value only if both Boolean expressions that it connects are false or if both Boolean expressions are true. Table 9-7 is the truth table to show how the XOR operator works for the following Boolean expressions: (Boolean expression 1) XOR (Boolean expression 2) Table 9-7 The Truth Table for the XOR Operator Value of Value of Value of the Entire (Boolean Expression 1) (Boolean Expression 2) (Boolean Expression 1) XOR (Boolean Expression 2) False False False True False True False True True True True False 118 Part II: Learning Programming with Liberty BASIC The NOT operator The NOT operator affects a single Boolean expression. If the Boolean expres- sion is true, the NOT operator makes it false. If the Boolean expression is false, the NOT operator makes it true. Essentially, the NOT operator converts a Boolean expression to its opposite value. The following Boolean expression, for example, is true: (4 < 54) But this Boolean expression is false: NOT(4 < 54) If you want"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Expression 2) (Boolean Expression 1) XOR (Boolean Expression 2) False False False True False True False True True True True False 118 Part II: Learning Programming with Liberty BASIC The NOT operator The NOT operator affects a single Boolean expression. If the Boolean expres- sion is true, the NOT operator makes it false. If the Boolean expression is false, the NOT operator makes it true. Essentially, the NOT operator converts a Boolean expression to its opposite value. The following Boolean expression, for example, is true: (4 < 54) But this Boolean expression is false: NOT(4 < 54) If you want to assign a value of false to the Guilty variable, use the NOT operator as follows: Guilty = NOT(4 < 54) This statement tells the computer, \u201cThe Boolean expression of (4 < 54) is true. But the NOT operator turns a true value to false, so the value of the Guilty variable is false.\u201d To get a better idea how this works, run the follow- ing program: Guilty = NOT(4 < 54) \u2018 The value of Guilty is false IF Guilty THEN PRINT \u201cThis sentence never prints out.\u201d ELSE PRINT \u201cThe defendant is not guilty because he\u2019s rich.\u201d END IF END Each time that you run the preceding program, it prints the message, The defendant is not guilty because he\u2019s rich. Exploring IF THEN Statements The most common way to control which instruction the computer follows next is to use the IF THEN statement. This statement checks whether or not a certain condition is true. If so, it tells the computer to follow one or more instructions. 119 Chapter 9: Making Decisions with Control Statements The IF THEN statement looks as follows: IF (Boolean expression) THEN \u2018 Follow one or more instructions listed here END IF For an example of how this statement works, type and run the following program: PROMPT \u201cDo you eat cow lips? (Type Y for Yes or N for No)\u201d; Answer$ IF (Answer$ = \u201cY\u201d) THEN PRINT \u201cI have a nice hot dog you might like then.\u201d END IF END Only if you type Y (using uppercase) does the program print the message, I have a nice hot dog you might like then. If you want the computer to follow exactly one instruction following an IF THEN statement (such as the PRINT instruction in the preceding example), you can shorten the IF THEN statement to the following: PROMPT \u201cDo you eat cow lips? (Type Y for Yes or N for No)\u201d; Answer$ IF (Answer$ = \u201cY\u201d) THEN PRINT \u201cI have a nice hot dog you might like then.\u201d END If you want the computer to follow two or more instructions following an IF THEN statement, you must enclose them with the END IF line, as follows: PROMPT \u201cHow many cats do you own\u201d; Answer IF (Answer >= 1) THEN PRINT \u201cYou have my sympathies.\u201d PRINT \u201cHave you ever thought of getting\u201d PRINT \u201cyour head examined real soon?\u201d END IF END IF THEN ELSE statements The IF"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "following: PROMPT \u201cDo you eat cow lips? (Type Y for Yes or N for No)\u201d; Answer$ IF (Answer$ = \u201cY\u201d) THEN PRINT \u201cI have a nice hot dog you might like then.\u201d END If you want the computer to follow two or more instructions following an IF THEN statement, you must enclose them with the END IF line, as follows: PROMPT \u201cHow many cats do you own\u201d; Answer IF (Answer >= 1) THEN PRINT \u201cYou have my sympathies.\u201d PRINT \u201cHave you ever thought of getting\u201d PRINT \u201cyour head examined real soon?\u201d END IF END IF THEN ELSE statements The IF THEN statement tells the computer to follow one or more instructions only if a certain condition is true. If that condition is not true, the computer ignores all the instructions trapped inside the IF THEN statement. 120 Part II: Learning Programming with Liberty BASIC The IF THEN ELSE statement is slightly different because it tells the computer to follow one set of instructions in case a condition is true and a different set of instructions if the condition is false. The IF THEN ELSE statement looks as follows: IF (Boolean expression) THEN \u2018 Follow one or more instructions listed here ELSE \u2018 If the condition is false, then follow these \u2018 instructions instead END IF For an example of how this statement works, run the following program and see what happens: PROMPT \u201cHow long were you in medical school\u201d; Answer IF (Answer > 4) THEN PRINT \u201cCongratulations! You should be able to\u201d PRINT \u201cplay a good game of golf in no time.\u201d ELSE PRINT \u201cYou may not have been in medical school for\u201d PRINT \u201cvery long, but at least you should know\u201d PRINT \u201chow to put on a white lab coat.\u201d END IF END Unlike the IF THEN statement, the IF THEN ELSE statement always forces the computer to follow one set of instructions no matter what. In this program, if the answer is greater than four, the computer prints out, Congratulations! You should be able to play a good game of golf in no time. If the answer isn\u2019t greater than four, the computer prints out, You may not have been in medical school for very long, but at least you should know how to put on a white lab coat. The IF THEN ELSE statement always makes the computer follow one set of instructions. If you use the ordinary IF THEN statement, the computer may or may not follow one set of instructions. Working with SELECT CASE Statements Listing multiple conditions in an IF THEN ELSE statements can prove tedious and messy, as the following example shows: 121 Chapter 9: Making Decisions with Control Statements PROMPT \u201cHow old are you\u201d; Answer IF (Answer = 21) THEN PRINT \u201cCongratulations! You may be able to rent a\u201d PRINT \u201ccar in some states.\u201d END IF IF (Answer = 20) THEN PRINT \u201cYou can\u2019t rent a car, but you\u2019re pre-approved\u201d PRINT \u201cfor 20 different credit cards.\u201d END IF IF (Answer = 19)"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "ordinary IF THEN statement, the computer may or may not follow one set of instructions. Working with SELECT CASE Statements Listing multiple conditions in an IF THEN ELSE statements can prove tedious and messy, as the following example shows: 121 Chapter 9: Making Decisions with Control Statements PROMPT \u201cHow old are you\u201d; Answer IF (Answer = 21) THEN PRINT \u201cCongratulations! You may be able to rent a\u201d PRINT \u201ccar in some states.\u201d END IF IF (Answer = 20) THEN PRINT \u201cYou can\u2019t rent a car, but you\u2019re pre-approved\u201d PRINT \u201cfor 20 different credit cards.\u201d END IF IF (Answer = 19) THEN PRINT \u201cYou\u2019re still officially a teenager.\u201d END IF IF (Answer = 18) THEN PRINT \u201cYou\u2019re old enough to join the military and\u201d PRINT \u201cfire an automatic rifle, but you still can\u2019t\u201d PRINT \u201cbuy beer legally. Figure that one out.\u201d END IF IF (Answer = 17) THEN PRINT \u201cYou can see R-rated movies on\u201d PRINT \u201cyour own (but you\u2019ve probably done that for years).\u201d END IF END As an alternative to multiple IF THEN ELSE statements, many programming languages offer a SELECT CASE statement, which looks as follows: SELECT CASE Variable CASE Value1 \u2018 Follow these instructions if the Variable = Value1 CASE Value2 \u2018 Follow these instructions if the Variable = Value2 END SELECT The SELECT CASE statement provides different instructions depending on the value of a particular variable. If you rewrite the preceding IF THEN ELSE statement, the program looks as follows: PROMPT \u201cHow old are you\u201d; Answer SELECT CASE Answer CASE 21 PRINT \u201cCongratulations! You may be able to rent a\u201d PRINT \u201ccar in some states.\u201d CASE 20 PRINT \u201cYou can\u2019t rent a car, but you\u2019re pre-approved PRINT \u201cfor 20 different credit cards.\u201d 122 Part II: Learning Programming with Liberty BASIC CASE 19 PRINT \u201cYou\u2019re still officially a teenager.\u201d CASE 18 PRINT \u201cYou\u2019re old enough to join the military and\u201d PRINT \u201cfire an automatic rifle, but you still can\u2019t\u201d PRINT \u201cbuy beer legally. Figure that one out.\u201d CASE 17 PRINT \u201cYou can see R-rated movies on\u201d PRINT \u201cyour own (but you\u2019ve probably done that for years).\u201d END SELECT END If the user types 21, the program prints, Congratulations! You may be able to rent a car in some states. If the user types 19, the program prints, You\u2019re still officially a teenager. If the user types 17, the program prints, You can see R-rated movies on your own (but you\u2019ve probably done that for years). Of course, if the user types any value that the SELECT CASE statement doesn\u2019t list, such as 22 or 16, the SELECT CASE statement doesn\u2019t run any of the instructions within its structure. To make sure that the computer follows at least one set of instructions in a SELECT CASE statement, just add a CASE ELSE command at the very end, as follows: PROMPT \u201cHow old are you\u201d; Answer SELECT CASE Answer CASE 21 PRINT \u201cCongratulations! You may be able to rent a\u201d PRINT \u201ccar in some states.\u201d CASE 20 PRINT \u201cYou"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "own (but you\u2019ve probably done that for years). Of course, if the user types any value that the SELECT CASE statement doesn\u2019t list, such as 22 or 16, the SELECT CASE statement doesn\u2019t run any of the instructions within its structure. To make sure that the computer follows at least one set of instructions in a SELECT CASE statement, just add a CASE ELSE command at the very end, as follows: PROMPT \u201cHow old are you\u201d; Answer SELECT CASE Answer CASE 21 PRINT \u201cCongratulations! You may be able to rent a\u201d PRINT \u201ccar in some states.\u201d CASE 20 PRINT \u201cYou can\u2019t rent a car, but you\u2019re pre-approved\u201d PRINT \u201cfor 20 different credit cards.\u201d CASE 19 PRINT \u201cYou\u2019re still officially a teenager.\u201d CASE 18 PRINT \u201cYou\u2019re old enough to join the military and\u201d PRINT \u201cfire an automatic rifle, but you still can\u2019t\u201d PRINT \u201cbuy beer legally. Figure that one out.\u201d CASE 17 PRINT \u201cYou can see R-rated movies on\u201d PRINT \u201cyour own (but you\u2019ve probably done that for years).\u201d CASE ELSE PRINT \u201cThis sentence prints out if the user does NOT\u201d PRINT \u201ctype numbers 17, 18, 19, 20, or 21.\u201d END SELECT END 123 Chapter 9: Making Decisions with Control Statements If you run this program and type 21, the program prints out Congratulations! You may be able to rent a car in some states. If the user types 20, the program prints out, You can\u2019t rent a car, but you\u2019re pre- approved for 20 different credit cards. If the user types 19, the program prints out, You\u2019re still officially a teenager. If the user types 18, the program prints out, You\u2019re old enough to join the mili- tary and fire an automatic rifle, but you still can\u2019t buy beer legally. Figure that one out. If the user types 17, the program prints out, You can see R-rated movies on your own (but you\u2019ve probably done that for years). If the user types any other number (such as 54 or 97, the program prints out, This sentence prints out if the user does NOT type numbers 17, 18, 19, 20, or 21. Checking a range of values You often use the SELECT CASE statement to check whether a variable happens to exactly match a specific value, such as the number 21 or the string \u201cyes\u201d. But sometimes you may want to run a set of instructions if a variable falls within a range of values, such as any number between 3 and 18. In that case, you must list all the possible values on a single CASE statement, as in the following example: CASE 1, 2, 3, , 4 This checks whether a variable represents the number 1, 2, 3, or 4 as shown in the following program: PROMPT \u201cHow many water balloons do you have? \u201c; Answer SELECT CASE Answer CASE 1, 2, 3, 4 NOTICE \u201cYou need more water balloons.\u201d CASE 5, 6, 7, 8 NOTICE \u201cNow you need a target.\u201d CASE ELSE NOTICE \u201cWhat are you? A peace-loving"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "a range of values, such as any number between 3 and 18. In that case, you must list all the possible values on a single CASE statement, as in the following example: CASE 1, 2, 3, , 4 This checks whether a variable represents the number 1, 2, 3, or 4 as shown in the following program: PROMPT \u201cHow many water balloons do you have? \u201c; Answer SELECT CASE Answer CASE 1, 2, 3, 4 NOTICE \u201cYou need more water balloons.\u201d CASE 5, 6, 7, 8 NOTICE \u201cNow you need a target.\u201d CASE ELSE NOTICE \u201cWhat are you? A peace-loving hippie freak?\u201d END SELECT END In this example, if the user types a number from 1 to 4, the program prints, You need more water balloons. If the user types a number from 5 to 8, the program prints, Now you need a target. If the user types any number les than 1 or greater than 8, the program prints, What are you? A peace- loving hippie freak? 124 Part II: Learning Programming with Liberty BASIC Make sure that you don\u2019t use the same value on two separate CASE statements, as happens in the following example: PROMPT Type a number. \u201c; Answer SELECT CASE Answer CASE 1, 2 NOTICE \u201cThis always prints if you type a 2.\u201d CASE 2, 3 NOTICE \u201cThis never prints if you type a 2.\u201d END SELECT In the preceding SELECT CASE statement, the program prints This always prints if you type a 2 if the user types 2, but the program never prints the instructions under the second CASE statement (CASE 2, 3). That\u2019s because the first CASE statement runs first, preventing the second CASE state- ment from getting a chance to run at all. Checking a relational operator Sometimes, checking for an exact value or a range of values may still prove too limiting. You may, for example, compare a variable to another value by using one of those friendly symbols known as relational operators. A relational operator enables the SELECT CASE statement to determine whether a vari- able is greater than (>), less than (<), greater than or equal to (>=), less than or equal to (<=), or not equal to (<>) a specific value. To use a relational operator, you must use a slightly different version of the CASE statement as shown in the following example: INPUT \u201cHow many cats do you own\u201d; Answer SELECT CASE CASE (Answer <= 5) PRINT \u201cYou need more cats.\u201d CASE (Answer > 5) PRINT \u201cAre you out of your mind?\u201d END SELECT END If the user types any number equal to or less than 5, the program prints, You need more cats. If the user types any number greater than 5, the program prints, Are you out of your mind? 125 Chapter 9: Making Decisions with Control Statements The two crucial differences when using relational operators in a SELECT-CASE statement is: 126 Part II: Learning Programming with Liberty BASIC Beware of the SELECT CASE statement in"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "own\u201d; Answer SELECT CASE CASE (Answer <= 5) PRINT \u201cYou need more cats.\u201d CASE (Answer > 5) PRINT \u201cAre you out of your mind?\u201d END SELECT END If the user types any number equal to or less than 5, the program prints, You need more cats. If the user types any number greater than 5, the program prints, Are you out of your mind? 125 Chapter 9: Making Decisions with Control Statements The two crucial differences when using relational operators in a SELECT-CASE statement is: 126 Part II: Learning Programming with Liberty BASIC Beware of the SELECT CASE statement in C/C++ and Java In BASIC and many other programming lan- guages such as Pascal, the SELECT CASE statement runs only one set of instructions the moment that it finds a match, such as printing You\u2019re still officially a teenager. in the Liberty BASIC example in the section, \u201cWorking with SELECT CASE Statements,\u201d earlier in this chapter, if the user types the number 19. C/C++ and Java programs, however, behave much differently. If you use these languages, you must specifically tell the computer to stop following instructions in a SELECT CASE state- ment (technically known as a switch state- ment in C/C++ and Java) by using the command break. Consider, for example, the following C program: #include <stdio.h> main () { char akey; printf (\u201cType a lower case letter \u201c); scanf(\u201c \u201c); scanf (\u201c%c\u201d, &akey); switch (akey) { case \u2018a\u2019: printf (\u201cYou pressed the A key.\\n\u201d); case \u2018b\u2019: printf (\u201cYou pressed the B key.\\n\u201d); } } If you run this program and press the A key, this C program prints the following: You pressed the A key. You pressed the B key. In C/C++ and Java, the computer follows every set of instructions in the switch statement from the first match that it finds to the end. To make sure that a C/C++ or Java program stops following any instructions in a switch state- ment, you must insert the break command as follows: #include <stdio.h> main () { char akey; printf (\u201cType a lower case letter \u201c); scanf(\u201c \u201c); scanf (\u201c%c\u201d, &akey); switch (akey) { case \u2018a\u2019: printf (\u201cYou pressed the A key.\\n\u201d); break; case \u2018b\u2019: printf (\u201cYou pressed the B key.\\n\u201d); } } If you eventually plan to program in C/C++ or Java, you need to remember this subtle differ- ence or you may find your C/C++ or Java pro- grams acting different from similar BASIC programs. \u0002 The SELECT CASE variable (which is \u201cAnswer\u201d in the above example), does not appear directly after the SELECT CASE command. \u0002 The relational expression (such as \u201cAnswer <= 5\u201d) appears directly after each CASE statement. Make sure that your relational operators don\u2019t overlap another part of the SELECT CASE statement, as happens in the following example: SELECT CASE CASE (Answer < 10) PRINT \u201cThis always prints.\u201d CASE (Answer < 12) PRINT \u201cThis prints only if the user types 11.\u201d END SELECT In this SELECT CASE statement, the program prints This always prints"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "grams acting different from similar BASIC programs. \u0002 The SELECT CASE variable (which is \u201cAnswer\u201d in the above example), does not appear directly after the SELECT CASE command. \u0002 The relational expression (such as \u201cAnswer <= 5\u201d) appears directly after each CASE statement. Make sure that your relational operators don\u2019t overlap another part of the SELECT CASE statement, as happens in the following example: SELECT CASE CASE (Answer < 10) PRINT \u201cThis always prints.\u201d CASE (Answer < 12) PRINT \u201cThis prints only if the user types 11.\u201d END SELECT In this SELECT CASE statement, the program prints This always prints if the user types any number less than 10, but the program prints the instruc- tions under the second CASE statement (CASE IS < 12) only if the user types 11. 127 Chapter 9: Making Decisions with Control Statements 128 Part II: Learning Programming with Liberty BASIC Chapter 10 Repeating Yourself with Loops In This Chapter \u0001 Looping with the WHILE-WEND commands \u0001 Looping a fixed number of times with the FOR-NEXT loop I n general, programmers try to get the computer to do as much as possible so that they can do as little as possible. Ideally, you want to write the smallest programs possible, not only because small programs are easier to debug and modify, but also because smaller programs require less typing. One way that programmers write as little as possible is by using programming structures known as loops. The idea behind a loop is to make the computer repeat one or more instructions. Consider, for example, the following program that prints the numbers 1 through 5 on-screen: PRINT 1 PRINT 2 PRINT 3 PRINT 4 PRINT 5 END If you want to expand this program to print out five million numbers, guess what? You must type five million instructions. Because you really don\u2019t want to type that many instructions, you can use loops to make the computer repeat the same instructions multiple times. The computer does the hard work. Consider the following, which in programming lingo is called a FOR-NEXT loop: FOR I = 1 TO 5 PRINT I NEXT I END This program just prints out the following: 1 2 3 4 5 As you can see, when you use a loop, you can write shorter programs. If you run this program, it does exactly the same thing as the first BASIC pro- gram. The loop version of this program, however, can print out five numbers or five million numbers (by changing the number 5 in the program to 5000000). Loops make the computer do more without forcing you to type additional instructions. Although loops can help create shorter programs, the tradeoff is that loops are also harder to read and understand than a straightforward list of instructions. If you create a loop, make sure that you write a comment in the program to explain exactly what you expect the loop to do. (See Chapter 7 for more infor- mation about comments.) A loop forces"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "loop version of this program, however, can print out five numbers or five million numbers (by changing the number 5 in the program to 5000000). Loops make the computer do more without forcing you to type additional instructions. Although loops can help create shorter programs, the tradeoff is that loops are also harder to read and understand than a straightforward list of instructions. If you create a loop, make sure that you write a comment in the program to explain exactly what you expect the loop to do. (See Chapter 7 for more infor- mation about comments.) A loop forces the computer to run the same instructions over and over, but eventually the computer needs to know when to stop. To tell the computer when to stop looping, you use a condition that represents either true or false. In the world of mathematics and programming, anything that represents a true or false value is known as a Boolean expression; see Chapter 9. Some examples of Boolean expressions are 4 > 9.48 (which in Boolean arithmetic represents as a false value). Using the WHILE-WEND Loop Loops are handy for repeating one or more instructions. Of course, whenever you create a loop, you need to make the loop stop eventually. One of the most common problems with loops is something known as an end- less loop, which means that the computer follows a set of instructions but never stops. If a program gets caught in an endless loop, the program may appear to freeze on-screen. Usually, the only way to get out of an endless loop is to turn the computer off and then on again. One way to make a loop eventually stop is to check if a certain condition is true. To do this in Liberty BASIC, you can create a special loop called a WHILE-WEND loop that looks as follows: 130 Part II: Learning Programming with Liberty BASIC WHILE (Boolean expression is true) \u2018 One or more instructions WEND To repeat one or more instructions, you just sandwich them between the WHILE and WEND commands, as shown in the following example: I = 1 WHILE I < 5 PRINT \u201cThe square of \u201c; I; \u201c is \u201c; I * I I = I + 1 WEND END This program does the following: 1. The first line creates the variable I and sets its value to 1. 2. The second line tells the computer that a loop is starting and that the computer is to run the instructions between the WHILE and WEND com- mands as long as the Boolean expression I < 5 is true. 3. The third line tells the computer to print The square of 1 is 1 the first time that the WHILE-WEND loops runs and The square of 2 is 4 the second time that the WHILE-WEND loop runs, and so on. 4. The fourth line tells the computer to add one to the value of the variable I, so now I represents the number"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "line tells the computer that a loop is starting and that the computer is to run the instructions between the WHILE and WEND com- mands as long as the Boolean expression I < 5 is true. 3. The third line tells the computer to print The square of 1 is 1 the first time that the WHILE-WEND loops runs and The square of 2 is 4 the second time that the WHILE-WEND loop runs, and so on. 4. The fourth line tells the computer to add one to the value of the variable I, so now I represents the number 1 + 1, or 2. 5. The fifth line tells the computer to check whether the Boolean expres- sion I < 5 is true. If it\u2019s true, the program skips to the sixth line. If it\u2019s not true (if I represents the number 1, 2, 3, or 4), the program returns to the top of the loop on the second line. The computer repeats the loop four times to print out the following: The square of 1 is 1 The square of 2 is 4 The square of 3 is 9 The square of 4 is 16 6. The sixth line tells the computer that the program is at an end. Exiting a WHILE-WEND loop prematurely Normally the only way to exit out of a WHILE-WEND loop is to wait until a cer- tain condition becomes true. However, Liberty BASIC (like many other pro- gramming languages) also allows you to exit out of a loop prematurely using the magic EXIT WHILE command as follows: 131 Chapter 10: Repeating Yourself with Loops I = 1 WHILE I <= 10 PRINT \u201cThis is I = \u201c; I IF I = 5 THEN EXIT WHILE I = I + 1 WEND END Normally this WHILE-WEND loop would repeat ten (10) times but the IF I = 5 THEN EXIT WHILE command tells the program to stop after the program has looped only five (5) times. The EXIT WHILE command can be useful to make sure a WHILE-WEND loop eventually stops running, but make sure that you don\u2019t exit out of a loop sooner than you really want to. Endless loops #1: Failing to modify the Boolean expression inside the loop One of the trickiest parts of using a loop is avoiding an endless loop. An end- less loop occurs whenever the Boolean expression of a loop never changes to tell the computer to stop running the instructions inside the loop as in the following program: I = 1 WHILE I < 5 PRINT \u201cThis loop never ends.\u201d WEND END This loop never stops because the value of I never changes. Thus the Boolean expression I < 5 always remains true, so the WHILE-WEND loop keeps running the instructions between the WHILE and WEND commands. In this case, the program just keeps printing, This loop never ends. To fix this problem, you need to insert a command inside the WHILE-WEND loop that changes the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "of a loop never changes to tell the computer to stop running the instructions inside the loop as in the following program: I = 1 WHILE I < 5 PRINT \u201cThis loop never ends.\u201d WEND END This loop never stops because the value of I never changes. Thus the Boolean expression I < 5 always remains true, so the WHILE-WEND loop keeps running the instructions between the WHILE and WEND commands. In this case, the program just keeps printing, This loop never ends. To fix this problem, you need to insert a command inside the WHILE-WEND loop that changes the variable in the Boolean expression such as inserting the command I = I + 1, as shown in the following example: I = 1 WHILE I < 5 PRINT \u201cThis loop eventually ends.\u201d I = I + 1 WEND END 132 Part II: Learning Programming with Liberty BASIC Endless loops are a common bug that keeps a program from working correctly. You can often recognize an endless loop if a program never responds to any- thing you try to do and you can\u2019t do anything except shut your computer off and start all over again. Endless loops #2: Failing to initialize a Boolean expression outside the loop Another variation of the endless loop occurs if you forget to define the value of a variable outside the WHILE-WEND loop, as in the following program: WHILE I < 5 I = 1 PRINT \u201cThis loop never ends.\u201d I = I + 1 WEND END In this example, the value of variable I is always set to one (1) at the begin- ning of the WHILE-WEND loop and then gets incremented to two (2) at the end of the WHILE-WEND loop. But each time the WHILE-WEND loop runs, the value of I is reset to one (1) so the Boolean expression I < 5 always remains true, and thus the loop never ends. The correct way to use the preceding WHILE-WEND loop is to place the state- ment I = 1 right in front of the WHILE-WEND loop, as in the following example: I = 1 WHILE I < 5 PRINT \u201cThis loop will eventually end.\u201d I = I + 1 WEND END In this example, the value of the I variable is set to one (1) before the com- puter runs the WHILE-WEND loop. Once inside the WHILE-WEND loop, the value of I steadily increases until the value of I is equal to 5, which makes the Boolean expression I < 5 false; therefore, the WHILE-WEND loop ends. To avoid endless loops in your program, always remember the following two points: \u0002 Initialize all variables that make up a Boolean expression right before a WHILE-WEND loop. This makes sure that your variable starts out with a value that you intended. \u0002 Make sure that the variable of the Boolean expression changes inside the WHILE-WEND loop.This makes sure that your loop eventually ends. 133 Chapter 10: Repeating Yourself with Loops Looping a Fixed"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "I steadily increases until the value of I is equal to 5, which makes the Boolean expression I < 5 false; therefore, the WHILE-WEND loop ends. To avoid endless loops in your program, always remember the following two points: \u0002 Initialize all variables that make up a Boolean expression right before a WHILE-WEND loop. This makes sure that your variable starts out with a value that you intended. \u0002 Make sure that the variable of the Boolean expression changes inside the WHILE-WEND loop.This makes sure that your loop eventually ends. 133 Chapter 10: Repeating Yourself with Loops Looping a Fixed Number of Times A conditional loop, such as the WHILE-WEND loop, stops repeating itself only if a certain condition becomes true or false. So the number of times that a loop repeats can vary from one moment to the next. Sometimes, however, you may need to loop a specific number of times. Although you can still use a conditional loop, you may prefer to use another type of loop known as the FOR-NEXT loop, which in Liberty BASIC looks as follows: FOR counter = start TO end \u2018 One or more instructions NEXT This loop tells the computer to repeat a fixed number of times the instructions between the FOR and NEXT commands. The start and end values determine the number of repeats. A typical FOR-NEXT loop looks as follows: FOR I = 1 TO 10 PRINT \u201cThe square of \u201c; I; \u201c is \u201c; I * I NEXT END If you run this program, here\u2019s what happens: 1. The first line creates the variable I and tells the computer to keep repeating the command 10 times. 2. The second line tells the computer to print The square of 1 is 1. Each time that this line runs, the value of I is different, so the final output from the program looks as follows: The square of 1 is 1 The square of 2 is 4 The square of 3 is 9 The square of 4 is 16 The square of 5 is 25 The square of 6 is 36 The square of 7 is 49 The square of 8 is 64 The square of 9 is 81 The square of 10 is 100 3. The third line tells the computer to go back to the second line. 4. The fourth line tells the computer that the program is at an end. 134 Part II: Learning Programming with Liberty BASIC If the start value is less than the end value, the FOR-NEXT loop doesn\u2019t run at all, as in the following example: FOR counter = 8 TO 2 \u2018 This doesn\u2019t work at all NEXT Counting with different numbers Most FOR-NEXT loops count from 1 to another fixed value, such as 10. The FOR-NEXT, however, loop can count from any number to any other number, as in the following example: FOR I = 8 TO 14 PRINT \u201cThe value of I =\u201d; I NEXT END This loop repeats seven times"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "an end. 134 Part II: Learning Programming with Liberty BASIC If the start value is less than the end value, the FOR-NEXT loop doesn\u2019t run at all, as in the following example: FOR counter = 8 TO 2 \u2018 This doesn\u2019t work at all NEXT Counting with different numbers Most FOR-NEXT loops count from 1 to another fixed value, such as 10. The FOR-NEXT, however, loop can count from any number to any other number, as in the following example: FOR I = 8 TO 14 PRINT \u201cThe value of I =\u201d; I NEXT END This loop repeats seven times and prints the following: The value of I = 8 The value of I = 9 The value of I = 10 The value of I = 11 The value of I = 12 The value of I = 13 The value of I = 14 You can also use negative numbers for the start and end values, as follows: FOR counter = -5 TO 3 \u2018 One or more instructions NEXT Unless you have a good reason for choosing different numbers to start and end, a good idea is to always start at number 1. Using 1 as the starting point simply makes determining how many times the FOR-NEXT loop repeats easier for you or someone else. Counting in increments A FOR-NEXT loop counts by one. In the following example, the loop runs four times: FOR counter = 1 TO 4 \u2018 One or more instructions NEXT 135 Chapter 10: Repeating Yourself with Loops If you like, you can use the following STEP command to make the FOR-NEXT loop count in any increments other than one: FOR counter = 1 TO 4 STEP increment \u2018 One or more instructions NEXT If, for example, you want to count by twos, you can use the following FOR- NEXT loop: FOR I = 1 TO 8 STEP 2 PRINT \u201cThe value of I = \u201c; I NEXT If you run this program, the FOR-NEXT loop doesn\u2019t repeat eight times, but rather four times and prints this: The value of I = 1 The value of I = 3 The value of I = 5 The value of I = 7 You can make a FOR-NEXT loop count backward by using a negative number for the increment value, which is the only time that you can have the start value greater than the end value, as shown in the following example: FOR I = 6 TO -8 STEP -3 PRINT \u201cThe value of I = \u201c; I NEXT If you run this program, the FOR-NEXT loop repeats five times, printing the following results: The value of I = 6 The value of I = 3 The value of I = 0 The value of I = -3 The value of I = -6 136 Part II: Learning Programming with Liberty BASIC Exiting a FOR-NEXT loop prematurely The FOR-NEXT loop repeats a fixed number of times. However, there may be times when you want"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "end value, as shown in the following example: FOR I = 6 TO -8 STEP -3 PRINT \u201cThe value of I = \u201c; I NEXT If you run this program, the FOR-NEXT loop repeats five times, printing the following results: The value of I = 6 The value of I = 3 The value of I = 0 The value of I = -3 The value of I = -6 136 Part II: Learning Programming with Liberty BASIC Exiting a FOR-NEXT loop prematurely The FOR-NEXT loop repeats a fixed number of times. However, there may be times when you want to exit out of the FOR-NEXT prematurely. To do this, you can use the magic EXIT FOR command as follows: FOR I = 1 to 10 PRINT \u201cThis is I = \u201c; I IF I = 5 THEN EXIT FOR NEXT END Normally this FOR-NEXT loop would repeat ten (10) times but the IF I = 5 THEN EXIT FOR command tells the program to stop after the program has looped only five (5) times. 137 Chapter 10: Repeating Yourself with Loops How the FOR-NEXT loop looks in a C program Because many people eventually graduate to programming in C, here\u2019s a glimpse at how a FOR-NEXT loop looks in a C program: main () { int counter; for (counter = 1; counter <= 5; counter++) { printf (\u201cThe square of %d is %d\\n\u201d, counter, counter * counter); } } This FOR-NEXT loop tells the computer, \u201cCreate an integer variable, counter, and set its value to 1 (counter = 1). Then keep incre- menting the value of counter by 1 (counter++) until the Boolean expression (counter <= 5) becomes false. Then stop looping.\u201d (This FOR-NEXT loop repeats itself exactly five times.) If the C version of the FOR-NEXT loop looks a bit cryptic, that\u2019s because it is. Now you know why learning the fundamentals of programming is much easier if you learn BASIC rather than C. 138 Part II: Learning Programming with Liberty BASIC Part III Advanced Programming with Liberty BASIC In this part . . . I n this part you \ufb01nd all the fancy things you can do with Liberty BASIC \u2014 create graphics, make sounds, save data on a \ufb02oppy disk or hard drive, create a real Windows user interface, and much more. After you understand these more advanced features of Liberty BASIC, you can create useful and interesting programs that rival the features that you \ufb01nd in commercial-quality software. To maximize your programming skills, make sure that you type and run the many Liberty BASIC programs that sprin- kled throughout each chapter. And keep your eyes open for all the different ways to write the same program in both Liberty BASIC and other languages such as C/C++, Pascal, or Java. The more that you use Liberty BASIC to help you master general programming principles now, the easier you can migrate to another language such as C/C++ later. Chapter 11 Writing Large Programs by Using Subprograms In"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "and interesting programs that rival the features that you \ufb01nd in commercial-quality software. To maximize your programming skills, make sure that you type and run the many Liberty BASIC programs that sprin- kled throughout each chapter. And keep your eyes open for all the different ways to write the same program in both Liberty BASIC and other languages such as C/C++, Pascal, or Java. The more that you use Liberty BASIC to help you master general programming principles now, the easier you can migrate to another language such as C/C++ later. Chapter 11 Writing Large Programs by Using Subprograms In This Chapter \u0001 Understanding structured programming \u0001 Dividing a program into modules \u0001 Creating subroutines \u0001 Creating functions P rogramming is not so much a hard science as it is a creative art form. The ultimate goal of programming is to write the smallest possible pro- gram that uses the least amount of computer resources (memory, hard drive space, and so on) while accomplishing as much as possible. Although some people are naturally talented at writing small, tight, fast code (to use the lingo of the programming community), most people need guide- lines to help them write programs. Small programs are easy to write and read. But if you\u2019re writing a large program that consists of several thousand lines of instructions, guess what? You\u2019d better organize your program carefully from the start, or you may waste lots of time writing a large program that doesn\u2019t work. Breaking the Bad Programming Habits of the Past In the old days, people wrote programs without any advance planning, which is like trying to write a novel by sitting down at a word processor and typing continuously until you\u2019re done. You can possibly write a decent novel that way, but you\u2019re more likely to create an unreadable mess. Similarly, programmers used to write programs by typing commands into the computer just to get something to work. After they had a simple program that worked, they started adding new instructions into the program. Unfortunately, programmers often didn\u2019t add new instructions with any plan- ning or organization. Some programmers added new instructions in the begin- ning of a program; others put new instructions at the end; and still others sprinkled new instructions throughout the program\u2019s existing instructions so that determining where the new instructions began and the old ones ended was nearly impossible. One reason programmers used to write programs that were hard to read is because they could use a special programming command, the GOTO command. The GOTO command tells the computer to jump to another part of the program. GOTO LabelOne, for example, tells the computer to suddenly jump to the part of the program that LabelOne identifies. The GOTO command encouraged programmers to write programs that told the computer to jump from one place in the program to another to find instructions. Programs that use the GOTO command are like a novel in which page 2 tells you to jump to page 349,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "used to write programs that were hard to read is because they could use a special programming command, the GOTO command. The GOTO command tells the computer to jump to another part of the program. GOTO LabelOne, for example, tells the computer to suddenly jump to the part of the program that LabelOne identifies. The GOTO command encouraged programmers to write programs that told the computer to jump from one place in the program to another to find instructions. Programs that use the GOTO command are like a novel in which page 2 tells you to jump to page 349, page 349 tells you to jump to page 34, page 34 tells you to jump to page 125, and so on. Because bouncing from one part of a program to another can prove as confus- ing as trying to untangle strands of spaghetti, writing programs in this manner became known as spaghetti coding. Consider, for example, the following Liberty BASIC program: GOTO [LabelOne] [LabelFour] PROMPT \u201cHow much money do you have\u201d; MyCash GOTO [LabelThree] [LabelTwo] END [LabelOne] GOTO [LabelFour] [LabelThree] PRINT \u201cYou owe me = \u201c; MyCash * .95 GOTO [LabelTwo] Trying to figure out what this program does is confusing because the instruc- tions are jumbled. But the following breakdown shows you how the program works: 142 Part III: Advanced Programming with Liberty BASIC 1. The first line tells the computer to jump to the part of the program that the label [LabelOne] (which happens to be on the seventh line of the program) identifies. 2. The computer jumps to the seventh line in the program, which contains the label [LabelOne]. 3. The eighth line in the program tells the computer to jump to the part of the program that the label [LabelFour] (which happens to be the second line of the program) identifies. 4. The computer jumps to the second line in the program, which contains the label [LabelFour]. 5. The third line displays a Prompt dialog box that asks, How much money do you have? on-screen and waits for the user to type a number, which the program stores in the variable MyCash. 6. The fourth line tells the computer to jump to the part of the program that the label [LabelThree] (which happens to be the ninth line in the program) identifies. 7. The computer jumps to the ninth line in the program, which contains the label [LabelThree]. 8. The tenth line prints, You owe me = and follows it with the value of MyCash multiplied by .95. 9. The eleventh line tells the computer to jump to the part of the program that the label [LabelTwo] (which happens to be the fifth line of the pro- gram) identifies. 10. The computer jumps to the fifth line of the program, which contains the label [LabelTwo]. 11. The sixth line tells the computer that the program is at an end. The preceding GOTO program is equivalent to the following simple program: PROMPT \u201cHow much money do you"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "label [LabelThree]. 8. The tenth line prints, You owe me = and follows it with the value of MyCash multiplied by .95. 9. The eleventh line tells the computer to jump to the part of the program that the label [LabelTwo] (which happens to be the fifth line of the pro- gram) identifies. 10. The computer jumps to the fifth line of the program, which contains the label [LabelTwo]. 11. The sixth line tells the computer that the program is at an end. The preceding GOTO program is equivalent to the following simple program: PROMPT \u201cHow much money do you have:\u201d; MyCash PRINT \u201cYou owe me =\u201d; MyCash * .95 END In the early days of computer programming, structures such as IF THEN and SELECT CASE statements didn\u2019t exist. (See Chapter 9 for more information about IF THEN statements.) For many years, the GOTO command was the only way programmers had to tell the computer to skip over certain instructions or follow a different set of instructions. Although you can still use the GOTO command, you should avoid using GOTO commands whenever possible. 143 Chapter 11: Writing Large Programs by Using Subprograms Introducing Structured Programming You never find one \u201cright\u201d way to write a program, but programmers have created different ways to write programs that are at least well organized. One popular way to write a program is known as structured programming, and its main idea is to organize your program by using only three types of instructions (none of which resembles the GOTO command). If you use only the following three instructions, you ensure that you and other people can easily read and understand your program: \u0002 Sequential instructions \u0002 Branching instructions \u0002 Looping instructions The following sections describe each of these types of instructions. Sequential instructions The simplest way to organize instructions in a program is to place them sequentially, or one after another, as in the following example: PROMPT \u201cHow much stuff did you steal last year\u201d; Amount TaxesOwed = Amount * .95 PRINT \u201cThis is how much tax you owe =\u201d; TaxesOwed END Unfortunately, you can\u2019t write every program as one big list of instructions. If the computer needs to make a decision, your program may need to choose between two or more different sets of instructions. Programs that must make a choice are said to branch. Branching instructions Branching instructions (such as the IF THEN statement) provide two or more different instructions for the computer to follow, based on a certain condition. (For more information about IF THEN statements and other types of branching statements, see Chapter 9.) The following program, for example, calculates two different taxes owed, depending on whether you\u2019re a politician: 144 Part III: Advanced Programming with Liberty BASIC PROMPT \u201cHow much stuff did you steal last year\u201d; Amount TaxesOwed = Amount * .95 PROMPT \u201cAre you a professional criminal (Y or N)\u201d; Answer$ IF (Answer$ = \u201cN\u201d) THEN PRINT \u201cThis is how much tax you owe =\u201d; TaxesOwed ELSE PRINT \u201cLawyers"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "statement) provide two or more different instructions for the computer to follow, based on a certain condition. (For more information about IF THEN statements and other types of branching statements, see Chapter 9.) The following program, for example, calculates two different taxes owed, depending on whether you\u2019re a politician: 144 Part III: Advanced Programming with Liberty BASIC PROMPT \u201cHow much stuff did you steal last year\u201d; Amount TaxesOwed = Amount * .95 PROMPT \u201cAre you a professional criminal (Y or N)\u201d; Answer$ IF (Answer$ = \u201cN\u201d) THEN PRINT \u201cThis is how much tax you owe =\u201d; TaxesOwed ELSE PRINT \u201cLawyers and politicians don\u2019t need to pay taxes.\u201d END Branching instructions offer two or more alternative sets of instructions for the computer to follow. As a result, branching instructions are harder to read than instructions that you organize sequentially because you must determine which set of instructions the computer may follow at any given time. Looping instructions Sometimes the computer may need to repeat certain instructions. Rather than type the same instructions over and over, you can use a loop, such as a FOR-NEXT or a WHILE-WEND loop. A FOR-NEXT loop repeats a fixed number of times. A WHILE-WEND loop repeats itself while a certain condition remains true. Thus the number of times that a WHILE-WEND loop repeats itself can range from zero to infinity. (See Chapter 10 for more information about looping.) The following program, for example, asks for a password, checks to see whether the user types the correct password (which is the string \u201copen\u201d), and repeats these instructions until the user types the correct password: PROMPT \u201cWhat is the password\u201d; Password$ WHILE Password$ <> \u201copen\u201d PRINT \u201cWrong password, moron. Try again.\u201d PROMPT \u201cWhat is the password\u201d; Password$ WEND PRINT \u201cYou typed the correct password!\u201d END Loops can prove harder to read than sequential instructions and branching instructions because you can\u2019t always tell how many times a loop repeats itself. Essentially, a loop is a shortcut so that you don\u2019t need to type a long series of sequential instructions in your program. (For more information about loops, see Chapter 10.) 145 Chapter 11: Writing Large Programs by Using Subprograms Putting structured programming into practice The reason for organizing your program in chunks of sequential, branching, and looping instructions is to make how your program works easier for others to understand. If they can understand how your program works, they can modify and improve on it later. Just because you write a program, don\u2019t be so sure that you can understand it later. If you write a program consisting of several thousand lines of instructions, you\u2019re likely to forget how certain parts of the program work \u2014 especially if you put the program aside and work on another project for awhile. So writing programs that are easy to understand is crucial for your own benefit and for the benefit of any other programmer whose job is to fix or modify programs that you write. To see how structured programming can"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "can modify and improve on it later. Just because you write a program, don\u2019t be so sure that you can understand it later. If you write a program consisting of several thousand lines of instructions, you\u2019re likely to forget how certain parts of the program work \u2014 especially if you put the program aside and work on another project for awhile. So writing programs that are easy to understand is crucial for your own benefit and for the benefit of any other programmer whose job is to fix or modify programs that you write. To see how structured programming can make a program easier to read, look at the following program, which consists of sequential, branching, and looping instructions: \u2018Sequential instructions PRINT \u201cThis program prints a message, of your\u201d PRINT \u201cchoosing, on the screen.\u201d PROMPT \u201cWhat message do you want to appear\u201d; Message$ PROMPT \u201cDisplay message in all UPPERCASE (type U) or lowercase (type l)?\u201d; WhatCase$ \u2018Branching instructions IF WhatCase$ = \u201cU\u201d THEN Message$ = UPPER$(Message$) END IF IF WhatCase$ = \u201cl\u201d THEN Message$ = LOWER$(Message$) END IF \u2018Looping instructions FOR I = 1 TO 15 PRINT SPACE$(I + 4); Message$ NEXT END Think of sequential, branching, or looping instructions as the building blocks of any program. If you write a program that uses only sequential, branching, and looping instructions, your program will be easier for you (or anyone else) to read and edit at a later date. 146 Part III: Advanced Programming with Liberty BASIC Writing Modular Programs If you\u2019re really ambitious, you can write a large program as one huge list of instructions. The larger your program is, however, the harder reading, writ- ing, and understanding the program become. Writing a large program as one set of instructions is like trying to build a house out of sand. Most likely, one part of the structure (such as a wall) is weaker than the rest of the structure and will eventually cause the whole thing to collapse. Rather than create one huge program, programmers create a bunch of smaller programs and paste them together (sort of like using bricks to build a house). That way, if one part of the program doesn\u2019t work, you can unplug that portion, rewrite or replace it, and leave the rest of your program unaffected. In the computer world, little programs that make up part of a larger program are known as subprograms. Subprograms are also known as modules, hence the term modular programming. Every modular program contains at least one subprogram, known as the main program. The main program usually does nothing more than tell the computer which subprograms to use next to accomplish a specific task. A subprogram typically solves a single task, such as multiplying two numbers or verifying that the user types a correct password. For really complicated programs, you may have several subprograms that themselves break down into several smaller subprograms. Suppose, for example, that you want to write a program to break into another computer. The overall task"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "are also known as modules, hence the term modular programming. Every modular program contains at least one subprogram, known as the main program. The main program usually does nothing more than tell the computer which subprograms to use next to accomplish a specific task. A subprogram typically solves a single task, such as multiplying two numbers or verifying that the user types a correct password. For really complicated programs, you may have several subprograms that themselves break down into several smaller subprograms. Suppose, for example, that you want to write a program to break into another computer. The overall task is simply as follows: Break into another computer. Of course, you can\u2019t tell the computer just to break into another computer because it doesn\u2019t know how to do it. You must tell the computer, in specific detail, exactly how to do what you want it to do. This task means defining the overall goal of the program by using smaller tasks, as follows: 1. Find the phone number of the target computer. 2. Guess a password to access the system. 3. After gaining access, beep to notify the user. Ideally, you can solve each task by using a separate subprogram that\u2019s com- pletely independent of any other part of the program. After you get each sub- program to work correctly, you can paste all the subprograms together to create a larger working program. 147 Chapter 11: Writing Large Programs by Using Subprograms Programmers use subprograms for the following two reasons: \u0002 To make writing large programs easier: By writing a bunch of small programs that perform a specific task, you can paste together a bunch of subprograms to make a much larger program. \u0002 To store repetitive instructions in a single location: Sometimes you need to run the same set of instructions over and over again. Rather than write these instructions each time that you need them, you can write them just once and store them in a subprogram that any other part of your program can run at any time. The main advantage of breaking a large program into subprograms is so that you can easily modify a large program just by modifying one or more of its smaller subprograms. Because small programs are easier to understand and modify than large ones, subprograms can help make your program more reliable. To create a subprogram in Liberty BASIC, you need to perform the following tasks: \u0002 Write any subprogram instructions after the END command in your main program. \u0002 Identify the start of your subprogram with a unique name, enclosing it in square brackets [like this]. \u0002 Identify the end of your subprogram by using the RETURN command, which tells the computer to return back to the part of the program that was running before the subprogram ran. You can choose any name for your subprogram, but a good idea is to choose a descriptive name. If your subprogram prints a warning message to the user, for example, you may"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "to perform the following tasks: \u0002 Write any subprogram instructions after the END command in your main program. \u0002 Identify the start of your subprogram with a unique name, enclosing it in square brackets [like this]. \u0002 Identify the end of your subprogram by using the RETURN command, which tells the computer to return back to the part of the program that was running before the subprogram ran. You can choose any name for your subprogram, but a good idea is to choose a descriptive name. If your subprogram prints a warning message to the user, for example, you may want to name your subprogram [warning]. The RETURN command identifies the end of your subprogram and tells the computer to return back to the main program. So a typical subprogram may look as follows in Liberty BASIC: Main program instructions Main program instructions END [subprogram] Subprogram instructions Subprogram instructions RETURN At this point, the computer totally ignores your subprogram because the computer starts at the top, beginning with the first instruction, and follows 148 Part III: Advanced Programming with Liberty BASIC each succeeding instruction until it reaches the END command, which tells the computer to stop running the program before it can reach any of the instructions that your subprogram stores. So if you want the computer to run your subprogram instructions, you must use the GOSUB command, such as in the following line: GOSUB [Subprogram name] This command does nothing more than tell the program to jump to the sub- program that the label in brackets identifies. If you want your subprogram to run, you must insert a GOSUB command somewhere in your main program as follows: Main program instructions1 GOSUB [subprogram] Main program instructions2 END [subprogram] Subprogram instructions Subprogram instructions RETURN In the above example, the Main program instructions1 run and then the GOSUB command starts the subprogram running. After the subprogram instructions run, the RETURN command returns the computer to the line immediately fol- lowing the GOSUB command. This makes the computer run the Main program instructions2 until it stops at the END command. To see a real program that you can type and try yourself, take a look at the following example: NOMAINWIN PROMPT \u201cWhat is your password?\u201d; password$ IF password$ = \u201copen\u201d THEN NOTICE \u201cYou typed a valid password.\u201d ELSE NOTICE \u201cInvalid password.\u201d GOSUB [hackeralert] END IF END [hackeralert] PROMPT \u201cAre you a hacker? (Y or N)?\u201d; answer$ IF answer$ = \u201cY\u201d THEN NOTICE \u201cThe police are on their way to pick you up now.\u201d ELSE NOTICE \u201cThen you must just be incompetent.\u201d END IF RETURN 149 Chapter 11: Writing Large Programs by Using Subprograms In this example, the main program instructions start with line one (NOMAINWIN) and stop with line nine (END). The subprogram, [hackeralert], starts on line 11 ([hacker alert]) and stops on line 18 (RETURN). The only time that the [hackeralert] subprogram runs is if you type an incorrect password in the first Prompt dialog box that asks, What is your password?"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "or N)?\u201d; answer$ IF answer$ = \u201cY\u201d THEN NOTICE \u201cThe police are on their way to pick you up now.\u201d ELSE NOTICE \u201cThen you must just be incompetent.\u201d END IF RETURN 149 Chapter 11: Writing Large Programs by Using Subprograms In this example, the main program instructions start with line one (NOMAINWIN) and stop with line nine (END). The subprogram, [hackeralert], starts on line 11 ([hacker alert]) and stops on line 18 (RETURN). The only time that the [hackeralert] subprogram runs is if you type an incorrect password in the first Prompt dialog box that asks, What is your password? Ideally, you want to make all your subprograms small enough to fit on a single screen. The smaller your subprograms are, the easier they are to understand, debug, and modify. If you use subprograms in a Liberty BASIC program, you\u2019re essentially dividing a larger program into smaller parts, although you still save everything into a single file with a name such as PACMAN.BAS or BLACKJACK.BAS. Be aware that programming languages often use similar terms to represent different items. If you divide a large program into smaller parts, for example, BASIC calls these smaller parts subprograms. But what BASIC calls a subpro- gram, the C language calls a function. So if you use a different language, make sure that you use the correct terms for that particular language; otherwise, you may get confused in talking to other programmers. Using Subroutines In Liberty BASIC, you can create subprograms, which are miniature programs that perform a specific task. Unfortunately, subprograms work exactly the same every time that they run. For more flexibility, you may want to create subprograms that can accept data and calculate a new result, basing it on the data that it receives. You may, for example, want to create a subprogram that multiplies two numbers together. In most cases, you don\u2019t want to multiply the same two numbers every time that the subprogram runs. Instead, the subprogram is more useful if you can feed it a different number each time and have the subprogram spit back an answer based on the number that it receives. In most programming languages such as C/C++, Java, or Pascal, you can create the following two different types of subprograms: \u0002 Subroutines: These types of subprograms contain instructions that accept data and use that data for performing certain tasks, such as veri- fying that the user types a correct password or moving the cursor as the user moves the mouse. 150 Part III: Advanced Programming with Liberty BASIC \u0002 Functions: These types of subprograms calculate and return a single value, such as calculating the cube of a number or counting the number of words in a sentence. In Liberty BASIC, the COS(x) and SIN(x) commands are examples of a function. Defining a subroutine A subroutine consists of the following two or three parts: \u0002 The subroutine\u2019s name \u0002 One or more instructions that you want the subroutine to follow \u0002 Any data that you want"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "user types a correct password or moving the cursor as the user moves the mouse. 150 Part III: Advanced Programming with Liberty BASIC \u0002 Functions: These types of subprograms calculate and return a single value, such as calculating the cube of a number or counting the number of words in a sentence. In Liberty BASIC, the COS(x) and SIN(x) commands are examples of a function. Defining a subroutine A subroutine consists of the following two or three parts: \u0002 The subroutine\u2019s name \u0002 One or more instructions that you want the subroutine to follow \u0002 Any data that you want the subroutine to use (optional) In Liberty BASIC, a subroutine looks as follows: SUB SubroutineName Data \u2018 One or more instructions END SUB If a subroutine doesn\u2019t need to accept data from the main program or another subprogram, you can omit the Data portion of the subroutine, as in the follow- ing example: SUB SubroutineName \u2018 One or more instructions END SUB Passing data to a subroutine A subroutine acts like a miniature program that performs one or more tasks. Although a subroutine is part of a bigger program, some subroutines can act independently from the rest of the program. You may, for example, have a subroutine that does nothing but display a message on-screen. If a subroutine can act independently from the rest of the program, you need to define only a name for your subroutine and any instructions that you want the subroutine to follow, as in the following example: SUB SubroutineName PRINT \u201cThis subroutine doesn\u2019t use any data.\u201d END SUB 151 Chapter 11: Writing Large Programs by Using Subprograms The preceding example of a subroutine is similar to a subprogram in Liberty BASIC. As a program runs the preceding subroutine, the subroutine merrily follows its instructions without using any data from any other part of the program. But in many cases, a subroutine requires outside data to accomplish a given task, such as checking to see whether the user types a valid password. If your subroutine needs data from another part of your program, you need to create a variable to store this data, as in the following example: SUB SubroutineName Variable \u2018 One or more instructions here END SUB As another part of the program tells this subroutine to run, it \u201cpasses\u201d data to this subroutine, in much the same way that a person may pass a baton to another person. After a subroutine receives data that another part of the pro- gram passes to it, the subroutine uses variables (which it traps inside paren- theses) to \u201chold\u201d any data that another part of the program sends to it. The list of variables, which accepts outside data for a subroutine, is known as a parameter list. Each variable inside a subroutine\u2019s parameter list specifies one chunk of data, such as a number or string. If another part of the program passes your subroutine two chunks of data, the subroutine\u2019s parameter list must contain exactly two variables"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "a baton to another person. After a subroutine receives data that another part of the pro- gram passes to it, the subroutine uses variables (which it traps inside paren- theses) to \u201chold\u201d any data that another part of the program sends to it. The list of variables, which accepts outside data for a subroutine, is known as a parameter list. Each variable inside a subroutine\u2019s parameter list specifies one chunk of data, such as a number or string. If another part of the program passes your subroutine two chunks of data, the subroutine\u2019s parameter list must contain exactly two variables to hold this data. The following subroutine example uses three variables in its parameter list: SUB SubroutineName Variable1, Variable2, Variable3 \u2018 One or more instructions here END SUB Make sure that you declare string variables by using the dollar sign ($) and number variables without the dollar sign. The following example uses a string and a number variable in its parameter list: SUB SubroutineName Name$, Age \u2018 One or more instructions here END SUB The first line of the preceding subroutine defines the name of the subroutine (which is SubroutineName) and creates two variables, Name$ and Age. The Name$ variable represents a string, and the Age variable represents an integer. 152 Part III: Advanced Programming with Liberty BASIC Calling a subroutine After you create a subroutine, the final step is to actually run the instructions inside the subroutine. Normally, the subroutine sits around and does absolutely nothing (much like a politician) until the computer specifically tells the sub- routine to run its instructions. In technical terms, as you tell the subroutine to run its instructions, you\u2019re calling a subroutine. Essentially, you\u2019re saying, \u201cHey, stupid subroutine! Start running your instructions now!\u201d If you want to run the subroutine BurnOutMonitor, you must use the CALL command. Many versions of BASIC enable you to use one of the following two methods: CALL BurnOutMonitor If the BurnOutMonitor subroutine needs you to pass data to it for it to run, you just tack on the data to pass to the subroutine as follows: CALL BurnOutMonitor 45 If you use the CALL command, make sure that you spell your subroutine cor- rectly, including upper and lowercase letters. Liberty BASIC assumes that a subroutine by the name of DisplayMessage is completely different from a subroutine with the name displaymessage. To help you understand subroutines better, try the following Liberty BASIC program. Notice that the subroutine appears after the END command. This pro- gram asks for a name (such as Bill McPherson) and then displays that name to a Notice dialog box by using either the string Bill McPherson must be a moron or Bill McPherson sounds like an idiot to me. NOMAINWIN PROMPT \u201cGive me the name of someone you hate:\u201d; enemy$ CALL DisplayMessage enemy$ END SUB DisplayMessage stuff$ X = INT(RND(1) * 2) + 1 IF X = 1 THEN NOTICE stuff$ + \u201c must be a moron.\u201d ELSE NOTICE stuff$ + \u201c sounds like an"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "following Liberty BASIC program. Notice that the subroutine appears after the END command. This pro- gram asks for a name (such as Bill McPherson) and then displays that name to a Notice dialog box by using either the string Bill McPherson must be a moron or Bill McPherson sounds like an idiot to me. NOMAINWIN PROMPT \u201cGive me the name of someone you hate:\u201d; enemy$ CALL DisplayMessage enemy$ END SUB DisplayMessage stuff$ X = INT(RND(1) * 2) + 1 IF X = 1 THEN NOTICE stuff$ + \u201c must be a moron.\u201d ELSE NOTICE stuff$ + \u201c sounds like an idiot to me.\u201d END IF END SUB 153 Chapter 11: Writing Large Programs by Using Subprograms Liberty BASIC interprets the preceding program as follows: 1. The first line prevents the main window from appearing. 2. The second line displays a Prompt dialog box that reads, Give me the name of someone you hate:. After the user types a name, the enemy$ variable stores this name. 3. The third line calls the subroutine DisplayMessage and \u201cpasses\u201d it the data that the variable enemy$ stores. When the subroutine Display Message runs, it runs all the lines of the program starting from line five (SUB DisplayMessage stuff$) to line 12 (END SUB). 4. The fourth line ends the program. 5. The fifth line is the start of the DisplayMessage subroutine that accepts a string and stores it in the variable stuff$. 6. The sixth line creates a random number, either 1 or 2, and stores this value into the variable X. 7. The seventh through eleventh lines display two different Notice dialog boxes, using the name that the stuff$ variable stores. 8. The twelfth line marks the end of the subroutine. When the computer reaches this line, it returns back to the main program starting with the line immediately following the CALL DisplayMessage command. In this case, it returns the computer back to line four, where the program ends. Exiting prematurely from a subroutine Normally a subroutine runs from start to finish. However, you may want to exit a subroutine before it finishes running. To do this, you just need to insert the magic EXIT SUB command such as: NOMAINWIN PROMPT \u201cGive me the name of someone you hate:\u201d; enemy$ CALL DisplayMessage enemy$ END SUB DisplayMessage stuff$ X = INT(RND(1) * 2) + 1 IF X = 1 THEN EXIT SUB ELSE NOTICE stuff$ + \u201c must be a moron.\u201d END IF END SUB 154 Part III: Advanced Programming with Liberty BASIC Note that the EXIT SUB command simply tells Liberty BASIC to stop running the function and ignore any commands that come after the EXIT SUB com- mand. In the above example, the EXIT SUB command has a 50 percent chance of running. Using Functions A function is a specialized subprogram that does nothing but calculate and return a single value. If you want to calculate the cube of a number (which is the same number multiplied by itself three times), for"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "stuff$ + \u201c must be a moron.\u201d END IF END SUB 154 Part III: Advanced Programming with Liberty BASIC Note that the EXIT SUB command simply tells Liberty BASIC to stop running the function and ignore any commands that come after the EXIT SUB com- mand. In the above example, the EXIT SUB command has a 50 percent chance of running. Using Functions A function is a specialized subprogram that does nothing but calculate and return a single value. If you want to calculate the cube of a number (which is the same number multiplied by itself three times), for example, you can use the following instructions: Cube = Number * Number * Number But if you must calculate the cube of a number in several places throughout your program, you must type the formula Number * Number * Number in each place in your program. As you know, this practice is tedious and likely to create errors, especially if you want to modify the program later. Defining a function Rather than type similar instructions multiple times (using slightly different numbers), you can store instructions in a function. Then you pass data to the function, and the function spits back a single value. A function consists of the following four parts: \u0002 A name \u0002 One or more instructions for the function to calculate a single value \u0002 One line that assigns a value (or an expression that represents a value) to the function name \u0002 Any data that you want the function to use A typical function in Liberty BASIC looks as follows: FUNCTION FunctionName(Data) \u2018 One or more instructions FunctionName = value END FUNCTION Don\u2019t leave a space between the function name and the left parenthesis, or Liberty BASIC doesn\u2019t run your program. 155 Chapter 11: Writing Large Programs by Using Subprograms Passing data to a function Nearly all functions need to receive data from another part of your program. As another part of a program runs (or calls) a function, it needs to send (or pass) data to that function. To make sure that the function receives any data that another part of the program passes to it, you need to specify one or more variables in parentheses, as in the following example: FUNCTION FunctionName(Variable) \u2018 One or more instructions here FunctionName = value END FUNCTION The preceding function can receive one chunk of data (such as a string or number) that another part of the program passes to it. If your function needs to receive two or more chunks of data that another part of the program passes to it, just separate the variable names with commas, as in the following example: FUNCTION FunctionName(Variable1, Variable2, Variable3) \u2018 One or more instructions here FunctionName = value END FUNCTION Don\u2019t forget to define the type of data that the function accepts \u2014 for example, strings or numbers. (See Chapter 8 for more information about strings.) A complete declaration of variables may look as follows: FUNCTION FunctionName(Note$, Salary) \u2018"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "a string or number) that another part of the program passes to it. If your function needs to receive two or more chunks of data that another part of the program passes to it, just separate the variable names with commas, as in the following example: FUNCTION FunctionName(Variable1, Variable2, Variable3) \u2018 One or more instructions here FunctionName = value END FUNCTION Don\u2019t forget to define the type of data that the function accepts \u2014 for example, strings or numbers. (See Chapter 8 for more information about strings.) A complete declaration of variables may look as follows: FUNCTION FunctionName(Note$, Salary) \u2018 One or more instructions here FunctionName = value END FUNCTION The first line of the preceding function defines the name of the function (which is FunctionName) and creates two variables, Note$ and Salary. The Note variable represents a string, and the Salary variable represents a single-precision value such as 3.14. Calling a function Of course, you want to use the function that you create in your program. A function represents a single value, such as an integer or a double-precision number, so you can treat the function name as a variable. Suppose, for example, that you have a function that you call Cube, as in the following example: 156 Part III: Advanced Programming with Liberty BASIC FUNCTION Cube(Number) Cube = Number * Number * Number END FUNCTION You can treat this function as you do any other variable, as the following examples show: PRINT Cube(3) or MyValue = Cube(3) The following breakdown shows how the computer interprets the first example, PRINT Cube (3): 1. The PRINT Cube(3) line tells the computer to run the function named Cube and \u201cpass\u201d it the number 3 as data. Print on-screen whatever value the Cube function calculates using the number 3. 2. Right away, the computer searches for the function Cube. The first line in the Cube function tells the computer that the function\u2019s name is Cube and it needs an integer, which the variable Number represents \u2014 and in this case, it represents the number 3. 3. The second line in the Cube function tells the computer to multiply the value that the Number variable represents three times and to assign this value to the function name of Cube. In this case, the value that the Number variable represents is 3, so the value of Cube is 3 * 3 * 3, or 27. 4. The third line in the Cube function tells the computer it\u2019s the end of the function, so go back to the part of the program that originally called the Cube function. In this case, the computer goes back to the instruction PRINT Cube(3). 5. Because the value of Cube(3) is actually 27, the computer reinterprets the instruction PRINT Cube(3) to actually mean PRINT 27. Thus the number 27 appears on-screen. The complete Liberty BASIC program that calls the Cube function might look like this: NOMAINWIN PROMPT \u201cType a number:\u201d; mynumber NOTICE \u201cThis is the cube = \u201c; Cube(mynumber)"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "27. 4. The third line in the Cube function tells the computer it\u2019s the end of the function, so go back to the part of the program that originally called the Cube function. In this case, the computer goes back to the instruction PRINT Cube(3). 5. Because the value of Cube(3) is actually 27, the computer reinterprets the instruction PRINT Cube(3) to actually mean PRINT 27. Thus the number 27 appears on-screen. The complete Liberty BASIC program that calls the Cube function might look like this: NOMAINWIN PROMPT \u201cType a number:\u201d; mynumber NOTICE \u201cThis is the cube = \u201c; Cube(mynumber) END FUNCTION Cube(Number) Cube = Number * Number * Number END FUNCTION 157 Chapter 11: Writing Large Programs by Using Subprograms Exiting prematurely from a function A function acts like a miniature program that runs from start to finish. However, there may be some cases when you want to exit a function before it finishes running. To do this, you just need to insert the magic EXIT FUNCTION com- mand such as: NOMAINWIN PROMPT \u201cType a number:\u201d; mynumber NOTICE \u201cThis is the cube = \u201c; Cube(mynumber) END FUNCTION Cube(Number) EXIT FUNCTION Cube = Number * Number * Number END FUNCTION Note that the EXIT FUNCTION command simply tells Liberty BASIC to stop running the function and ignore any commands that come after the EXIT FUNCTION command. For more flexibility, you may want to use an IF-THEN statement to determine if a function should stop prematurely, such as: FUNCTION Cube(Number) IF (Condition = TRUE) THEN EXIT FUNCTION Cube = Number * Number * Number END FUNCTION The above example simply checks to see if a certain condition is true; then it exits the function prematurely, which means that sometimes the entire func- tion may run and sometimes it may exit prematurely. Passing Data by Value or by Reference When a subroutine or function needs data, your main program can pass it data in one of two ways: \u0002 By value \u0002 By reference Obviously these two terms mean nothing to most people, so the plain-English translation means that if you pass data to a subroutine or function by value, your program actually creates two separate copies of the same data; one copy stays with the main program and a second copy gets used by the subroutine or function itself. Anything the subroutine or function does to the data remains isolated within that subroutine or function. 158 Part III: Advanced Programming with Liberty BASIC In the following code, the main program passes the data enemy$ to the MakeMessage subroutine function by value (which is the default method that Liberty BASIC passes data to a subroutine or function). If you type the name Bobby Lee at the Prompt dialog box, the main program stores the string Bobby Lee into the enemy$ variable. When the main program passes the data by value to the MakeMessage subroutine, the MakeMessage subroutine creates a second copy of that same data, but stores it in a new variable"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "that subroutine or function. 158 Part III: Advanced Programming with Liberty BASIC In the following code, the main program passes the data enemy$ to the MakeMessage subroutine function by value (which is the default method that Liberty BASIC passes data to a subroutine or function). If you type the name Bobby Lee at the Prompt dialog box, the main program stores the string Bobby Lee into the enemy$ variable. When the main program passes the data by value to the MakeMessage subroutine, the MakeMessage subroutine creates a second copy of that same data, but stores it in a new variable called stuff$. At this time, both the enemy$ and stuff$ variable contain the string Bobby Lee. The MakeMessage subroutine then modifies the value of the stuff$ variable. But because the main program originally passed the data by value, these changes never get returned back to the main program, so when the main pro- gram displays the value of the enemy$ variable, it\u2019s just the original string of Bobby Lee as shown, in Figure 11-1. NOMAINWIN PROMPT \u201cGive me the name of someone you hate:\u201d; enemy$ CALL MakeMessage enemy$ NOTICE enemy$ END SUB MakeMessage stuff$ stuff$ = \u201cBo the Cat hates \u201c + stuff$ + \u201c too!\u201d END SUB Figure 11-1: When you pass data by value, a subroutine or function can alter data as much as it wants, but that altered data will never be returned back to the main program. 159 Chapter 11: Writing Large Programs by Using Subprograms If you pass data from the main program to the subroutine by reference, how- ever, any changes made to the data within the subroutine or function will get passed back to the main program. To specify that you want a subroutine or function to get data passed to it by reference instead of by value, you have to use the magic BYREF command, such as: SUB MakeMessage BYREF stuff$ Adding this single BYREF command to the DisplayMessage subroutine lets the subroutine pass any changes made to the data back to the main program, as shown in Figure 11-2. NOMAINWIN PROMPT \u201cGive me the name of someone you hate:\u201d; enemy$ CALL MakeMessage enemy$ NOTICE enemy$ END SUB MakeMessage BYREF stuff$ stuff$ = \u201cBo the Cat hates \u201c + stuff$ + \u201c too!\u201d END SUB Figure 11-2: When you pass data by reference using the BYREF command, any changes that the subroutine or function makes to the data get passed back to the main program. 160 Part III: Advanced Programming with Liberty BASIC Chapter 12 Drawing Pictures and Making Noise In This Chapter \u0001 Making a graphics control \u0001 Toying with turtle graphics \u0001 Drawing circles and boxes \u0001 Adding sound I n the old days, computer programs printed data on a single strip of paper that consisted of one long scroll. So after computers eventually got moni- tors, most programs still displayed information on-screen the same as if they were printing on a scrolling piece of paper. Only after monitors were"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "or function makes to the data get passed back to the main program. 160 Part III: Advanced Programming with Liberty BASIC Chapter 12 Drawing Pictures and Making Noise In This Chapter \u0001 Making a graphics control \u0001 Toying with turtle graphics \u0001 Drawing circles and boxes \u0001 Adding sound I n the old days, computer programs printed data on a single strip of paper that consisted of one long scroll. So after computers eventually got moni- tors, most programs still displayed information on-screen the same as if they were printing on a scrolling piece of paper. Only after monitors were around for a while did programmers realize that they could write programs that use fancy graphics, color, and sound. So in this chapter, you can learn different ways to make your Liberty BASIC programs more colorful and visually appealing. After you add graphics and sound to your program, people will naturally find your program more inter- esting and (sometimes) easier to use. Creating a Graphics Control Before you can create and display graphics, you must create a graphics control, which is any window or part of a window that can display graphics on the screen. You can create a graphics control in the following two ways: \u0002 Create a separate graphics window \u0002 Create a graphics box inside an existing window To create a separate graphics window, just use the OPEN command, as in the following example: OPEN \u201cMy Drawing Area\u201d FOR Graphics AS #graphWin The main difference between a graphics window and an ordinary window is that a graphics window displays graphics (hence its name) while an ordinary window displays text. If you don\u2019t want to create a separate graphics window, you can create a graphics box inside an ordinary window. To create a graphics box inside a window, you need to use the following two commands: GRAPHICBOX #main.graph, 10, 10, 150, 150 OPEN \u201cOrdinary Window\u201d FOR Window AS #main The GRAPHICBOX command works as follows: GRAPHICBOX #Windowhandle.boxname, xpos, ypos, width, height Here\u2019s what\u2019s happening in that command: 1. The GRAPHICBOX command tells the computer to create a box for displaying graphics. This box appears inside the window that the #Windowhandle name identifies. 2. The boxname portion identifies this graphic box with a unique name. 3. The xpos and ypos variables define the X and Y position of the graphic box, measuring from the upper-left corner of the window that #Windowhandle identifies. 4. The width and height variables measure the width and height of the graphics box. After you create a graphics window or graphic box, you\u2019re ready to start giving commands to display graphics on-screen. Using Turtle Graphics Turtle graphics get their name from the idea of putting an imaginary robotic turtle with a pen in the middle of your screen. To draw something, your pro- gram must tell the robotic turtle when to put its pen down and when to move in a certain direction to draw a line. To stop drawing, you must tell the robot"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "that #Windowhandle identifies. 4. The width and height variables measure the width and height of the graphics box. After you create a graphics window or graphic box, you\u2019re ready to start giving commands to display graphics on-screen. Using Turtle Graphics Turtle graphics get their name from the idea of putting an imaginary robotic turtle with a pen in the middle of your screen. To draw something, your pro- gram must tell the robotic turtle when to put its pen down and when to move in a certain direction to draw a line. To stop drawing, you must tell the robot to lift up its pen. 162 Part III: Advanced Programming with Liberty BASIC The LOGO programming language uses the idea of turtle graphics extensively to teach children the fundamentals of programming. The four basic commands for drawing pictures by using turtle graphics in Liberty BASIC (or any other programming language that allows turtle graph- ics) are as follows: 1. Lift up the pen from the paper (to stop drawing). 2. Lower the pen down to the paper (to start drawing). 3. Move forward a distance that you specify (which draws a line if the pen is down). 4. Turn a number of degrees that you specify in any direction. By stringing together a list of commands for moving, turning, lifting, and low- ering the pen, you can make the imaginary robotic turtle on-screen draw a variety of interesting designs ranging from single lines and rectangles to geo- metric patterns and shapes. Liberty BASIC includes special commands for creating turtle graphics, as follows: \u0002 UP: Lifts the pen up (don\u2019t draw). \u0002 DOWN: Lowers the pen down (draw). \u0002 HOME: Moves the turtle (pen) in the center of the graphics area. \u0002 GO: Moves forward in the current direction. \u0002 GOTO: Goes to a position that you specify. This draws a line if the pen is down. \u0002 PLACE: Goes to a position that you specify but without drawing, even if the pen is down. \u0002 TURN: Turns the turtle clockwise a specific number of degrees. \u0002 NORTH: Causes the turtle to point north (straight up). \u0002 POSXY: Returns the X and Y coordinates of the turtle\u2019s current location. To see how turtle graphics work, try the following program to draw a flag (or the number 4, depending on your perspective) in the middle of the screen, as shown in Figure 12-1: 163 Chapter 12: Drawing Pictures and Making Noise NOMAINWIN WindowHeight = 300 WindowWidth = 250 OPEN \u201cGraphics window\u201d FOR Graphics AS #main PRINT #main, \u201cHOME\u201d PRINT #main, \u201cDOWN\u201d PRINT #main, \u201cNORTH\u201d PRINT #main, \u201cGO 35\u201d PRINT #main, \u201cTURN 225\u201d PRINT #main, \u201cGO 25\u201d PRINT #main, \u201cTURN 225\u201d PRINT #main, \u201cGO 20\u201d PRINT #main, \u201cFLUSH\u201d PRINT #main, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END Here\u2019s what\u2019s happening in the preceding program: 1. The first line tells the computer not to display the main window. 2."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "12-1: 163 Chapter 12: Drawing Pictures and Making Noise NOMAINWIN WindowHeight = 300 WindowWidth = 250 OPEN \u201cGraphics window\u201d FOR Graphics AS #main PRINT #main, \u201cHOME\u201d PRINT #main, \u201cDOWN\u201d PRINT #main, \u201cNORTH\u201d PRINT #main, \u201cGO 35\u201d PRINT #main, \u201cTURN 225\u201d PRINT #main, \u201cGO 25\u201d PRINT #main, \u201cTURN 225\u201d PRINT #main, \u201cGO 20\u201d PRINT #main, \u201cFLUSH\u201d PRINT #main, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END Here\u2019s what\u2019s happening in the preceding program: 1. The first line tells the computer not to display the main window. 2. The second and third lines define the height (300) and width (250) of the window that the fourth line creates. Figure 12-1: Using turtle graphics to draw a simple design. 164 Part III: Advanced Programming with Liberty BASIC 3. The fourth line of code creates a graphics window containing the text Graphics window in the title bar. The window handle of #main identi- fies this window. 4. The fifth line of code moves the turtle to the home position, which is in the center of the window. 5. The sixth line tells the turtle to put the pen down and get ready to start drawing. 6. The seventh line tells the turtle to point north, which is up. 7. The eighth line tells the turtle to move 35 pixels in the direction the turtle is currently facing, which is north or up. 8. The ninth line tells the turtle to turn 225 degrees to the right. 9. The tenth line tells the turtle to go 25 pixels forward. 10. The eleventh line tells the turtle to turn 225 degrees to its right. 11. The twelfth line tells the turtle to go 20 pixels forward. 12. The thirteenth line gives the turtle the FLUSH command, which is a spe- cial command for making sure that the turtle graphics remain in the window even if the user resizes or moves the window. 13. The fourteenth line uses the trapclose command to tell the computer that after the user closes the program, the computer needs to find instructions to shut down at the [quit] label. 14. The fifteenth line tells the computer to wait for the user to do something. 15. The sixteenth (the one with [quit]) through nineteenth lines tell the computer what to do after the user closes the program. In this case, a Confirm dialog box appears to make sure that the user really wants to quit. If so, the program closes the window that the #main handle identifies. 16. The twentieth line marks the end of the program. If you don\u2019t use the flush command, your turtle graphics may disappear com- pletely if the user resizes the graphics window. Rather than type separate turtle graphics commands on each line, you can cram together multiple turtle graphics commands by separating them with a semicolon. Typing these commands takes up a lot of space, as the following example demonstrates: PRINT #main,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "this case, a Confirm dialog box appears to make sure that the user really wants to quit. If so, the program closes the window that the #main handle identifies. 16. The twentieth line marks the end of the program. If you don\u2019t use the flush command, your turtle graphics may disappear com- pletely if the user resizes the graphics window. Rather than type separate turtle graphics commands on each line, you can cram together multiple turtle graphics commands by separating them with a semicolon. Typing these commands takes up a lot of space, as the following example demonstrates: PRINT #main, \u201cHOME\u201d PRINT #main, \u201cDOWN\u201d PRINT #main, \u201cNORTH\u201d PRINT #main, \u201cGO 35\u201d PRINT #main, \u201cTURN 225\u201d 165 Chapter 12: Drawing Pictures and Making Noise To save space, you can cram all the preceding lines together, as follows: PRINT #main, \u201cHOME; DOWN; NORTH; GO 35; TURN 225\u201d Another way to break up one long line into smaller, easier-to-read short lines is to use the underscore (_) character, which tells Liberty BASIC, \u201cIf you see the underscore character, treat the following line as if it\u2019s tacked on to the end of the line containing the underscore character.\u201d So instead of writing the following: PRINT #main, \u201cHOME; DOWN; NORTH; go 35; TURN 225\u201d You can divide this line into smaller, separate lines, as in the following example: PRINT #main, \u201cHOME; DOWN; _ NORTH; GO 35; TURN 225\u201d For a faster way to draw a line, use the GOTO command following a DOWN com- mand, as follows: PRINT #MAIN, \u201cDOWN; GOTO x y\u201d This line tells the computer to put down the pen and draw a line from the current turtle (pen) position to the X and Y coordinates that x and y, respec- tively, define. Defining line thickness For variety, you can alter the thickness of your lines. To change line thick- ness, use the SIZE command, as follows: PRINT #Windowhandle, \u201csize X\u201d Here\u2019s what\u2019s happening in this example: 1. The #Windowhandle portion defines the graphics window to adjust the thickness of the next lines that turtle graphics draw. 2. The size X command defines line thickness, where X is a number such as 3 or 8. If you don\u2019t use the size command, the default thickness of a line is one (1). 166 Part III: Advanced Programming with Liberty BASIC To see how changing the thickness of a line works, try the following program, which creates two parallel lines of line thickness: five (5) and ten (10): NOMAINWIN WindowHeight = 300 WindowWidth = 250 OPEN \u201cGraphics window\u201d FOR Graphics AS #main PRINT #main, \u201cHOME; DOWN; NORTH\u201d PRINT #main, \u201cSIZE 5\u201d PRINT #main, \u201cGO 35; TURN 90; UP; GO 35; TURN 90\u201d PRINT #main, \u201cSIZE 10\u201d PRINT #main, \u201cDOWN; GO 35\u201d PRINT #main, \u201cFLUSH\u201d PRINT #main, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END Defining line colors Because drawing black lines can get tedious after a while, you may want"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "program, which creates two parallel lines of line thickness: five (5) and ten (10): NOMAINWIN WindowHeight = 300 WindowWidth = 250 OPEN \u201cGraphics window\u201d FOR Graphics AS #main PRINT #main, \u201cHOME; DOWN; NORTH\u201d PRINT #main, \u201cSIZE 5\u201d PRINT #main, \u201cGO 35; TURN 90; UP; GO 35; TURN 90\u201d PRINT #main, \u201cSIZE 10\u201d PRINT #main, \u201cDOWN; GO 35\u201d PRINT #main, \u201cFLUSH\u201d PRINT #main, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END Defining line colors Because drawing black lines can get tedious after a while, you may want to change the color of your lines. To change colors, you just need to use the COLOR command, as follows: PRINT #Windowhandle, \u201cCOLOR color\u201d Here\u2019s what\u2019s happening in this example: 1. The #Windowhandle portion defines the graphics window to change the color of lines that turtle graphics draw. 2. The COLOR color command defines the color of the line, where color is one of the following: black, blue, brown, cyan, darkblue, darkcyan, darkgray, darkgreen, darkpink, darkred, green, lightgray, palegray, pink, red, white, and yellow. To see how changing the color of a line works, try the following program, which adds color to two parallel lines: 167 Chapter 12: Drawing Pictures and Making Noise NOMAINWIN WindowHeight = 300 WindowWidth = 250 OPEN \u201cGraphics window\u201d FOR Graphics AS #main PRINT #main, \u201cHOME; DOWN; NORTH\u201d PRINT #main, \u201cCOLOR green\u201d PRINT #main, \u201cGO 35; TURN 90; UP; GO 35; TURN 90\u201d PRINT #main, \u201cCOLOR pink\u201d PRINT #main, \u201cDOWN; go 35\u201d PRINT #main, \u201cFLUSH\u201d PRINT #main, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END Drawing Circles Because drawing individual lines can become tiresome, you may want to tell Liberty BASIC to draw circles instead. To draw a circle, you can use the CIRCLE command as in the following example: PRINT #Windowhandle, \u201cCIRCLE R\u201d Here\u2019s what\u2019s happening in this example: 1. The #Windowhandle portion defines the graphics window in which the circle that turtle graphics draws appears. 2. The CIRCLE R command tells the computer to draw a circle, at the cur- rent position of the turtle (pen), with a radius that R defines, where R is a number such as 35 or 90. If you want to draw your circle in a specific color, you can use the COLOR command prior to the CIRCLE command, as follows: PRINT #Windowhandle, \u201cCOLOR darkpink; CIRCLE R\u201d 168 Part III: Advanced Programming with Liberty BASIC You can also fill in your circle with a specific color by using the BACKCOLOR command prior to using the CIRCLEFILLED command, as follows: PRINT #Windowhandle, \u201cBACKCOLOR yellow; CIRCLEFILLED R\u201d To see how turtle graphics can create circles, try the following program, which draws two circles, as shown in Figure 12-2: NOMAINWIN WindowHeight = 300 WindowWidth = 250 OPEN \u201cGraphics window\u201d FOR Graphics AS #main PRINT #main, \u201cHOME; DOWN\u201d PRINT #main, \u201cCOLOR red; CIRCLE 40\u201d PRINT #main, \u201cPLACE 45 50\u201d"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "to the CIRCLE command, as follows: PRINT #Windowhandle, \u201cCOLOR darkpink; CIRCLE R\u201d 168 Part III: Advanced Programming with Liberty BASIC You can also fill in your circle with a specific color by using the BACKCOLOR command prior to using the CIRCLEFILLED command, as follows: PRINT #Windowhandle, \u201cBACKCOLOR yellow; CIRCLEFILLED R\u201d To see how turtle graphics can create circles, try the following program, which draws two circles, as shown in Figure 12-2: NOMAINWIN WindowHeight = 300 WindowWidth = 250 OPEN \u201cGraphics window\u201d FOR Graphics AS #main PRINT #main, \u201cHOME; DOWN\u201d PRINT #main, \u201cCOLOR red; CIRCLE 40\u201d PRINT #main, \u201cPLACE 45 50\u201d PRINT #main, \u201cCOLOR darkblue; BACKCOLOR yellow; CIRCLEFILLED 40\u201d PRINT #main, \u201cFLUSH\u201d PRINT #main, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END Figure 12-2: Drawing two circles using turtle graphics. 169 Chapter 12: Drawing Pictures and Making Noise The seventh line in the preceding program uses the PLACE command, which moves the turtle (pen) position without drawing a line. Drawing Boxes Just as you can draw circles, Liberty BASIC also enables you to draw boxes. To draw a box, you can use the BOX command as in the following example: PRINT #Windowhandle, \u201cBOX x y\u201d Here\u2019s what\u2019s happening in this example: 1. The #Windowhandle portion defines the graphics window where turtle graphics draws the box. 2. The BOX x y command tells the computer to draw a box where the cur- rent turtle (pen) position defines one corner of the box and the x and y coordinates define the location of the opposite corner. If you want to draw your circle in a specific color, you can use the COLOR command prior to the BOX command, as follows: PRINT #Windowhandle, \u201cCOLOR red; BOX x y\u201d You can also fill in your circle with a specific color by using the BACKCOLOR command prior to using the BOXFILLED command, as in the following example: PRINT #Windowhandle, \u201cBACKCOLOR pink; BOXFILLED x y\u201d To see how turtle graphics can create boxes, try the following program, which draws two boxes. NOMAINWIN WindowHeight = 300 WindowWidth = 250 OPEN \u201cGraphics window\u201d FOR Graphics AS #main PRINT #main, \u201cHOME; DOWN\u201d PRINT #main, \u201cCOLOR red; BOX 190 190\u201d PRINT #main, \u201cPLACE 45 50\u201d PRINT #main, \u201cCOLOR darkblue; BACKCOLOR pink; BOXFILLED 80 80\u201d 170 Part III: Advanced Programming with Liberty BASIC PRINT #main, \u201cFLUSH\u201d PRINT #main, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END Displaying Text Besides drawing lines, circles, and boxes, you can also create text in a graph- ics window. To display text in a graphics control, you just need to move the turtle (pen) to the location where you want the text to appear and then print the text with a backslash in front, which the following program accomplishes: NOMAINWIN WindowHeight = 300 WindowWidth = 250 OPEN \u201cText graphics window\u201d FOR Graphics AS #main PRINT #main, \u201cHOME\u201d PRINT #main,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "\u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END Displaying Text Besides drawing lines, circles, and boxes, you can also create text in a graph- ics window. To display text in a graphics control, you just need to move the turtle (pen) to the location where you want the text to appear and then print the text with a backslash in front, which the following program accomplishes: NOMAINWIN WindowHeight = 300 WindowWidth = 250 OPEN \u201cText graphics window\u201d FOR Graphics AS #main PRINT #main, \u201cHOME\u201d PRINT #main, \u201c\\This is an\u201d PRINT #main, \u201c\\example of text\u201d PRINT #main, \u201cFLUSH\u201d PRINT #main, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END The backslash character (\\) displays the text and causes a new line to print, as shown in Figure 12-3. That way, you can display multiple lines of text with- out needing to move the turtle (pen) each time. For variety, you can add color to your text or to the background. To change the color of your text, use the COLOR command, as follows: 171 Chapter 12: Drawing Pictures and Making Noise PRINT #main, \u201cHOME\u201d PRINT #main, \u201cCOLOR red\u201d PRINT #main, \u201c\\This is an\u201d PRINT #main, \u201c\\example of text\u201d PRINT #main, \u201cFLUSH\u201d The second line in the preceding example tells the computer to display text in red. If you want to change the backdrop on which your text appears, use the BACKCOLOR command instead, as follows: PRINT #main, \u201cHOME\u201d PRINT #main, \u201cBACKCOLOR red\u201d PRINT #main, \u201c\\This is an\u201d PRINT #main, \u201c\\EXAMPLE OF TEXT\u201d PRINT #MAIN, \u201cFLUSH\u201d The second line in the preceding example displays text against a red background. Making Sounds Many programs use sound for a variety of reasons, such as alerting a user that something\u2019s gone wrong or playing soothing music in the background while the program\u2019s running. Sound can make your program more interesting to use. Figure 12-3: Displaying text in a graphics window by using turtle graphics. 172 Part III: Advanced Programming with Liberty BASIC Making a beeping noise At the most primitive level of sound-making, Liberty BASIC can make a simple (and annoying) beeping noise by using a special BEEP command as follows: PROMPT \u201cHow many beeps do you want to hear\u201d; Answer FOR I = 1 TO Answer BEEP NEXT END You often use the BEEP command as a warning message to the user, such as if the user presses the wrong key or tries to choose an invalid command. Playing WAV files Because the BEEP command is simplistic and relatively limited, Liberty BASIC also provides the PLAYWAVE command, which can play WAV files that you can download off the Internet or record on your own computer. Windows includes several WAV files in the C:\\Windows\\Media directory. To use the PLAYWAVE command, you need to specify which WAV file you want to play and how you want it to play."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "NEXT END You often use the BEEP command as a warning message to the user, such as if the user presses the wrong key or tries to choose an invalid command. Playing WAV files Because the BEEP command is simplistic and relatively limited, Liberty BASIC also provides the PLAYWAVE command, which can play WAV files that you can download off the Internet or record on your own computer. Windows includes several WAV files in the C:\\Windows\\Media directory. To use the PLAYWAVE command, you need to specify which WAV file you want to play and how you want it to play. The three choices for playing a WAV file are as follows: \u0002 SYNC: Temporarily halts your program until the WAV file finishes playing. \u0002 ASYNC: Enables your program to continue running while the WAV file continues playing. \u0002 LOOP: Plays the WAV file over and over again until your program gives the computer the PLAYWAVE \u201c\u201d command to shut the WAV file off. The PLAYWAVE command looks as follows: PLAYWAVE filename, mode So if you want to play the tada.wav file that you store in the C:\\Windows\\ Media directory, you can use the following command: PLAYWAVE \u201cC:\\Windows\\Media\\tada.wav\u201d, SYNC In this example, the tada.wav file plays, temporarily halting your program until the WAV file finishes playing. 173 Chapter 12: Drawing Pictures and Making Noise Make sure that you specify the correct directory where the PLAYWAVE com- mand can find your WAV file. To see how a real Liberty BASIC program may work, try the following on your own computer: NOMAINWIN FILEDIALOG \u201cPick a .WAV file to play.\u201d, \u201c*.wav\u201d, filename$ PLAYWAVE filename$, SYNC END The following steps tell you how the preceding program works: 1. The first line tells Liberty BASIC not to display the main window. 2. The second line displays a dialog box, enabling the user to choose a WAV file to play. 3. The third line plays the WAV file that the user chooses from the dialog box that appears as a result of Line 2 of the program. 4. The fourth line ends the program. 174 Part III: Advanced Programming with Liberty BASIC Chapter 13 Saving and Retrieving Stuff in Files In This Chapter \u0001 Storing text \u0001 Using random-access files \u0001 Using directories E very program needs to accept data from an outside source (such as from a person banging away on the keyboard) and then spit it back out again in some useful format (such as in a neatly printed report). To store data tem- porarily, programs use variables, which store data in the computer\u2019s memory. As soon as the program ends, the computer wipes out the data in memory to make room for another program. But what if you want to store data on a more permanent basis? Many computer games, for example, save the highest score to give future players a goal to beat. If a program stores data on a hard drive, the program saves the data in a file separate from the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "it back out again in some useful format (such as in a neatly printed report). To store data tem- porarily, programs use variables, which store data in the computer\u2019s memory. As soon as the program ends, the computer wipes out the data in memory to make room for another program. But what if you want to store data on a more permanent basis? Many computer games, for example, save the highest score to give future players a goal to beat. If a program stores data on a hard drive, the program saves the data in a file separate from the program file. Storing Stuff in Text Files The simplest data that a program can save is text, which consists of nothing more exciting than letters, numbers, and symbols (such as #, ~, <, or &) from the keyboard. Any file that contains only text is known as a text file. If you want to store, write, or retrieve data from a text file, you always must start reading the text file from the beginning. As a result, text files are sometimes known as sequential files. Because text files contain only letters, numbers, and symbols, you can share text files among different computers, such as any computer running Windows, Linux, or the Macintosh operating system. If you use the Save As command in your favorite word processor, you find an option to save your document as a text file. Just remember that saving a word-processing document as a text file removes all the document\u2019s formatting, such as underlining or special fonts. Creating a new text file Before you can store any data in a text file, you (obviously) must create that text file first. To create a text file, you use the following Liberty BASIC command: OPEN \u201cFilename\u201d FOR OUTPUT AS #Handle Here\u2019s what\u2019s happening in the preceding example: 1. The OPEN command tells the computer, \u201cCreate a new text file and give it the name that \u201cFilename\u201d specifies, which can represent a filename (such as STUFF.TXT) or a drive, directory, and filename (such as C:\\ WINDOWS\\STUFF.TXT).\u201d 2. The FOR OUTPUT portion of the command tells the computer, \u201cGet ready to start outputting data into the newly created text file that \u201cFilename\u201d identifies.\u201d 3. The #Handle is any nickname that you choose to represent the text file you just created. If you want to create a file that you call STUFF.TXT and save it on a floppy disk (the A drive), use the following command: OPEN \u201cA:\\STUFF.TXT\u201d FOR OUTPUT AS #Secrets This line tells Liberty BASIC to create the text file STUFF.TXT on the A drive and assign it the name #Secrets. Any time that you use the OPEN command to create a new text file or to open an existing text file, you must eventually use the CLOSE command to shut the text file. If you don\u2019t use the CLOSE command eventually, your program may cause the computer to crash. Putting stuff in a text file After you create a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "and save it on a floppy disk (the A drive), use the following command: OPEN \u201cA:\\STUFF.TXT\u201d FOR OUTPUT AS #Secrets This line tells Liberty BASIC to create the text file STUFF.TXT on the A drive and assign it the name #Secrets. Any time that you use the OPEN command to create a new text file or to open an existing text file, you must eventually use the CLOSE command to shut the text file. If you don\u2019t use the CLOSE command eventually, your program may cause the computer to crash. Putting stuff in a text file After you create a text file, you can use the PRINT command to stuff data into that text file. If you use the PRINT command, Liberty BASIC normally displays that data on-screen, so you must tell Liberty BASIC to store the data 176 Part III: Advanced Programming with Liberty BASIC in your text file instead by using the handle of the text file, as in the following command: PRINT #Secrets, \u201cThis line gets stored in the text file.\u201d This command tells Liberty BASIC, \u201cLook for a text file that the name #Secrets identifies and stuff that text file with the line, This line gets stored in the text file.\u201d Putting it all together, you have a program similar to the following example: OPEN \u201cA:\\STUFF.TXT\u201d FOR OUTPUT AS #Secrets PRINT #Secrets, \u201cThis line gets stored in the text file.\u201d CLOSE #Secrets END This Liberty BASIC program tells the computer to do the following: 1. The first line tells the computer, \u201cOpen a text file on the A drive and call this text file STUFF.TXT. Then give it the handle #Secrets.\u201d 2. The second line tells the computer, \u201cLook for a file that the #Secrets handle identifies and stuff it with the line, This line gets stored in the text file.\u201d 3. The third line tells the computer, \u201cClose the text file that the #Secrets handle identifies.\u201d 4. The fourth line tells the computer that the program is at an end. To see whether this program really stores the line This line gets stored in the text file. inside the text file STUFF.TXT, run the Windows Explorer program from within Windows and double-click the STUFF.TXT file to view its contents. Adding new stuff to an existing text file If you use the OPEN command, as in the following example, Liberty BASIC knows that you\u2019re ready to store data: OPEN \u201cA:\\STUFF.TXT\u201d FOR OUTPUT AS #Secrets This line of code tells Liberty BASIC, \u201cMake a new text file with the name STUFF.TXT on the A drive and get ready to store data in it.\u201d But what happens if the STUFF.TXT file already exists? Then the OPEN com- mand tells Liberty BASIC, \u201cWipe out any data that the STUFF.TXT text file currently contains and get ready to store new data in it.\u201d 177 Chapter 13: Saving and Retrieving Stuff in Files If you want to save any data that a text file currently stores but you still want to"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "store data: OPEN \u201cA:\\STUFF.TXT\u201d FOR OUTPUT AS #Secrets This line of code tells Liberty BASIC, \u201cMake a new text file with the name STUFF.TXT on the A drive and get ready to store data in it.\u201d But what happens if the STUFF.TXT file already exists? Then the OPEN com- mand tells Liberty BASIC, \u201cWipe out any data that the STUFF.TXT text file currently contains and get ready to store new data in it.\u201d 177 Chapter 13: Saving and Retrieving Stuff in Files If you want to save any data that a text file currently stores but you still want to add new data to the text file, you must use the APPEND command, as follows: OPEN \u201cA:\\STUFF.TXT\u201d FOR APPEND AS #Secrets If you\u2019ve already run the previous Liberty BASIC program that creates a STUFF. TXT file, try running the following program to see how you can add new data to a text file without wiping out any existing data: OPEN \u201cA:\\STUFF.TXT\u201d FOR OUTPUT AS #Secrets PRINT #Secrets, \u201cThis line gets stored in the text file.\u201d CLOSE #Secrets OPEN \u201cA:\\STUFF.TXT\u201d FOR APPEND AS #NewStuff PRINT #NewStuff, \u201cNew data gets appended to existing data.\u201d CLOSE #NewStuff END Retrieving data from a text file Of course, storing data inside a text file is nice just as long as you need to use that data again. Fortunately, Liberty BASIC includes a command to retrieve any data that you store in a text file. That way, you can display it on-screen again. To retrieve data from a text file, you use the INPUT command with the OPEN command, as follows: OPEN \u201cA:\\STUFF.TXT\u201d FOR INPUT AS #Retrieve Then you use the INPUT command to read each line that the text file stores, as follows: INPUT #FileHandle, Variable$ In this example, #FileHandle represents the file handle that you previously used with the OPEN command, and Variable$ is the name of a string variable that temporarily stores the line that you\u2019re retrieving from the text file. If all this stuff sounds too complicated, just run the following program to see how this procedure works: OPEN \u201cA:\\STUFF.TXT\u201d FOR OUTPUT AS #myfile INPUT \u201cWhat is your name? \u201c; Name$ PRINT #myfile, Name$ CLOSE #myfile OPEN \u201cA:\\STUFF.TXT\u201d FOR INPUT AS #file2 LINE INPUT #file2, YourName$ 178 Part III: Advanced Programming with Liberty BASIC PRINT \u201cThis is the name you stored in the text file = \u201c; YourName$ CLOSE #file2 END The INPUT command retrieves only one line at a time, starting from the first line that the text file contains. Because text files usually have two or more lines of data, you use a loop and a special EOF (which stands for End Of File) com- mand to retrieve every line that you store inside a text file. To see how this procedure works, try running the following program, which stuffs three lines of text in a text file and then retrieves it: OPEN \u201cA:\\STUFF.TXT\u201d FOR OUTPUT AS #ufo PRINT #ufo, \u201cIsn\u2019t this exciting?\u201d PRINT #ufo, \u201cAnother line bites the dust.\u201d"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "INPUT command retrieves only one line at a time, starting from the first line that the text file contains. Because text files usually have two or more lines of data, you use a loop and a special EOF (which stands for End Of File) com- mand to retrieve every line that you store inside a text file. To see how this procedure works, try running the following program, which stuffs three lines of text in a text file and then retrieves it: OPEN \u201cA:\\STUFF.TXT\u201d FOR OUTPUT AS #ufo PRINT #ufo, \u201cIsn\u2019t this exciting?\u201d PRINT #ufo, \u201cAnother line bites the dust.\u201d PRINT #ufo, \u201cThe last line in the text file.\u201d CLOSE #ufo OPEN \u201cA:\\STUFF.TXT\u201d FOR INPUT AS #bigfoot I = 1 WHILE EOF(#bigfoot) = 0 LINE INPUT #bigfoot, OneLine$ PRINT \u201cLine #\u201d + STR$(I) + \u201c: \u201c + OneLine$ I = I + 1 WEND CLOSE #bigfoot END The WHILE WEND loop may look a bit strange to you; for more information on loops, refer to Chapter 10. Take a closer look to see how it works in the follow- ing example: OPEN \u201cA:\\STUFF.TXT\u201d FOR INPUT AS #bigfoot I = 1 WHILE EOF(#bigfoot) = 0 INPUT #bigfoot, OneLine$ PRINT \u201cLine #\u201d + STR$(I) + \u201c: \u201c + OneLine$ I = I + 1 WEND CLOSE #bigfoot Here\u2019s what\u2019s happening in the preceding example: 1. The first line of the preceding code tells the computer, \u201cOpen up the text file STUFF.TXT, assign it a file handle of #bigfoot, and get ready to read data from it.\u201d 2. The second line tells the computer, \u201cCreate the variable I and set its value to 1.\u201d 179 Chapter 13: Saving and Retrieving Stuff in Files 3. The third line tells the computer, \u201cA WHILE-WEND loop starts here,\u201d which tells the computer to keep looping until it reaches the end of the file (EOF) for a file with the nickname #bigfoot (which is the STUFF.TXT file that the first line identifies as file #bigfoot). The moment that it reaches the end of the file, the program sets the value of EOF(#bigfoot) to a nonzero value. 4. The fourth line tells the computer, \u201cRead a line from a file that I\u2019m identi- fying as file #bigfoot and store this line in the variable OneLine$.\u201d After the INPUT command, the computer automatically jumps to the next line in the text file. 5. The fifth line tells the computer, \u201cPrint the line that the OneLine$ variable stores.\u201d To make the printed output look nice, this fifth line prints the text Line #: following it with the value of I and the text that the OneLine$ variable stores. 6. The sixth line tells the computer, \u201cTake the value that the I variable stores and add 1 to it.\u201d 7. The seventh line tells the computer, \u201cThe WHILE-WEND loop is at an end.\u201d 8. The eighth line tells the computer, \u201cClose the file with the nickname #bigfoot.\u201d Storing Stuff in Random-Access Files Text files are handy for storing and retrieving one"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "\u201cPrint the line that the OneLine$ variable stores.\u201d To make the printed output look nice, this fifth line prints the text Line #: following it with the value of I and the text that the OneLine$ variable stores. 6. The sixth line tells the computer, \u201cTake the value that the I variable stores and add 1 to it.\u201d 7. The seventh line tells the computer, \u201cThe WHILE-WEND loop is at an end.\u201d 8. The eighth line tells the computer, \u201cClose the file with the nickname #bigfoot.\u201d Storing Stuff in Random-Access Files Text files are handy for storing and retrieving one line of text at a time, but if you want to retrieve just the last line in a text file, the computer must read each line of text from the start of the text file to the end just to find the last line. To solve this problem, programmers created something known as random- access files. Unlike text files, which cram data in one huge file, random-access files divide a large file into smaller parts (known as records), each of which holds a single chunk of data. Each chunk of data is known as a field. That way, if you want to retrieve a chunk of data from the end of a random-access file, you can just jump to the last part of the random-access file directly without needing to read the entire file as you\u2019d need to do if you store the data in a text file. Figure 13-1 shows the difference between the way a computer stores data in a text file versus a random-access file. The main advantage of a random-access file is that it can retrieve data more efficiently than a text file. 180 Part III: Advanced Programming with Liberty BASIC Creating a new random-access file You often use random-access files to store one or more related chunks of data, such as a person\u2019s name, address, employee ID, and phone number. To store this data in a random-access file, you need to define the following items: \u0002 How many different categories of information you want to store, such as a person\u2019s name, address, and age. \u0002 How many characters you want to allocate for each chunk of data. You may, for example, want to allocate up to 15 characters for a person\u2019s name but only 2 characters for a person\u2019s age. Joe Smith 38 555-1234 Carol Hanson 27 555-6000 Doug Bentley 45 555-0001 June Davidson 23 555-1002 Donald Soons 32 555-5533 Jan Davis 31 555-4444 Joe Smith 38 555-1234 Carol Hanson 27 555-6000 Doug Bentley 45 555-0001 June Davidson 23 555-1002 Donald Soons 32 555-5533 Jan Davis 31 555-4444 Field 1 Field 2 Field 3 Field 4 Field 5 Field 6 Text files can't tell where one chunk of data ends and another begins. Random access files store data in separate fields for easy retrieval later. Figure 13-1: Text files store data sequentially from start to finish, whereas random- access files store data in discrete chunks."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Hanson 27 555-6000 Doug Bentley 45 555-0001 June Davidson 23 555-1002 Donald Soons 32 555-5533 Jan Davis 31 555-4444 Joe Smith 38 555-1234 Carol Hanson 27 555-6000 Doug Bentley 45 555-0001 June Davidson 23 555-1002 Donald Soons 32 555-5533 Jan Davis 31 555-4444 Field 1 Field 2 Field 3 Field 4 Field 5 Field 6 Text files can't tell where one chunk of data ends and another begins. Random access files store data in separate fields for easy retrieval later. Figure 13-1: Text files store data sequentially from start to finish, whereas random- access files store data in discrete chunks. 181 Chapter 13: Saving and Retrieving Stuff in Files After you define how many characters to allocate for each chunk of data, you need to total this number to define the total length of all this data by using the FIELD command, as in the following example: FIELD #filehandle, X AS name$, Y AS age This line tells Liberty BASIC, \u201cEach field contains one person\u2019s name and age, where the name can run up to X characters in length and the age can run up to Y characters in length.\u201d Because the FIELD command also specifies the file handle to store this data in, you must use the FIELD command immediately following an OPEN command, as in the following example: OPEN \u201cFilename\u201d FOR RANDOM AS #FileHandle LEN = Size Here\u2019s what\u2019s happening in the preceding example: 1. The OPEN command tells the computer, \u201cCreate a new random-access file and give it the name that \u201cFilename\u201d specifies, which can represent a filename (such as TRASH.DAT) or a drive, directory, and filename (such as C:\\WINDOWS\\TRASH.DAT).\u201d 2. The FOR RANDOM command tells the computer, \u201cGet ready to start shov- ing data into the newly created random-access file that \u201cFilename\u201d identifies.\u201d 3. The #FileHandle can be any nickname that you use to identify the actual file in which to store the data. Although you just defined a name for your random-access file, Liberty BASIC needs to identify the file by a nickname or handle as well. 4. The LEN = Size command tells the computer, \u201cThis is the total length of each record.\u201d (If the computer knows the exact length of each record, it knows how many bytes to skip over in trying to retrieve information from the middle of a random-access file.) To create the file TRASH.DAT, which stores a name (15 characters long) and an age (2 characters long), you can use the following command: OPEN \u201cA:\\TRASH.DAT\u201d FOR RANDOM AS #garbage LEN = 17 This command tells the computer to create the random-access file TRASH. DAT on the A drive, assign it a file handle of #garbage, and define each record as exactly 17 characters in length. If you use the OPEN command to create a new random-access file or open an existing random-access file, you must eventually use the CLOSE command to shut the text file. If you don\u2019t use the CLOSE command after using an OPEN command, your program may"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "long) and an age (2 characters long), you can use the following command: OPEN \u201cA:\\TRASH.DAT\u201d FOR RANDOM AS #garbage LEN = 17 This command tells the computer to create the random-access file TRASH. DAT on the A drive, assign it a file handle of #garbage, and define each record as exactly 17 characters in length. If you use the OPEN command to create a new random-access file or open an existing random-access file, you must eventually use the CLOSE command to shut the text file. If you don\u2019t use the CLOSE command after using an OPEN command, your program may cause the computer to crash. 182 Part III: Advanced Programming with Liberty BASIC Saving data into a random-access file After you go through the hassle of creating a random-access file, the next step is knowing how to stuff data into that random-access file. To put something inside a random-access file, use the following command: PUT #Filehandle, Recordnumber In this example, #Filehandle represents the number that you assign to the random-access file by using the OPEN command, and Recordnumber is the order in which you want to store the data in the random-access file. (Record number 1 is the first chunk of data in the file; record number 2 is the second; and so on.) Putting it all together, you have a program similar to the following example: OPEN \u201ca:\\stuff.dat\u201d FOR random AS #losers LEN = 25 FIELD #losers, 15 AS name$, 2 AS age$, 8 AS phone$ FOR I = 1 TO 3 PROMPT \u201cType a name:\u201d; name$ PROMPT \u201cWhat is this person\u2019s age?\u201d; age$ PROMPT \u201cWhat is this person\u2019s phone number:\u201d; phone$ PUT #losers, I NEXT I CLOSE #losers END This Liberty BASIC program tells the computer to do the following: 1. The first line tells the computer, \u201cOpen the random-access file STUFF.DAT on the A drive, identify it by a nickname as #losers, and get ready to store records that are a total of 25 characters in length.\u201d 2. The second line tells the computer, \u201cCreate a record for the random- access file that the #losers nickname identifies. Each record consists of a name (which takes up 15 characters), an age (which takes up 2 char- acters) and a phone number (which takes up to 8 characters). The total of 15 plus 2 plus 8 equals 25, which is why the first line allocates record lengths of 25 characters.\u201d 3. The third line starts a FOR-NEXT loop to ask the user for data three times. 4. The fourth through sixth lines display a Prompt dialog box and ask for a person\u2019s name, age, and phone number. 183 Chapter 13: Saving and Retrieving Stuff in Files 5. The seventh line uses the PUT command to store the person\u2019s name, age, and phone number into the random access file that the #losers handle identifies. The first time the FOR-NEXT loop runs, the value of I equals one, so the program stores the first name, age, and phone number in record"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "characters.\u201d 3. The third line starts a FOR-NEXT loop to ask the user for data three times. 4. The fourth through sixth lines display a Prompt dialog box and ask for a person\u2019s name, age, and phone number. 183 Chapter 13: Saving and Retrieving Stuff in Files 5. The seventh line uses the PUT command to store the person\u2019s name, age, and phone number into the random access file that the #losers handle identifies. The first time the FOR-NEXT loop runs, the value of I equals one, so the program stores the first name, age, and phone number in record number one. The second time the FOR-NEXT loop runs, the value of I equals two, so it stores the second batch of data in record number two, and so on. 6. The eighth line marks the end of the FOR-NEXT loop. 7. The ninth line tells the computer, \u201cClose the file that the handle #losers identifies.\u201d 8. The tenth line tells the computer, \u201cThis line ends the program.\u201d If you run this program, nothing appears on-screen. To see whether this pro- gram really stores any data into the random-access file STUFF.DAT, you need to eventually retrieve the data from the random-access file, which you find out how to do in the following section. Retrieving data from a random-access file After storing data in a random-access file, you can yank it back out again by using the following command: GET #Filehandle, Recordnumber In this command, #Filehandle represents the file number that you previously used with the OPEN command; Recordnumber represents the record that you want to retrieve (which can be 1 to retrieve the first record in the random- access file, 2 to retrieve the second record, and so on). The previous statements make sense after you run the following program and see for yourself how to yank out data that a random-access file stores. Add commands near the bottom of the previous Liberty BASIC program as follows: OPEN \u201ca:\\stuff.dat\u201d FOR random AS #losers LEN = 25 FIELD #losers, 15 AS name$, 2 AS age$, 8 AS phone$ FOR I = 1 TO 3 GET #losers, I PRINT \u201cName = \u201c; name$ PRINT \u201cAge = \u201c; age$ PRINT \u201cPhone = \u201c; phone$ PRINT NEXT I CLOSE #losers END 184 Part III: Advanced Programming with Liberty BASIC If you ran the previous Liberty BASIC program, in the section \u201cSaving data into a random access file,\u201d to store three names, ages, and phone numbers into the file STUFF.DAT, you can use the above Liberty BASIC commands to retrieve data out of the STUFF.DAT file: 1. The first line tells the computer, \u201cOpen the random-access file STUFF.DAT on the A drive, identify it by a nickname as #losers, and get ready to store fields that are a total of 25 characters in length.\u201d 2. The second line tells the computer, \u201cCreate a field for the random-access file that the #losers nickname identifies. Each field consists of a name (which takes up 15 characters), an"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "random access file,\u201d to store three names, ages, and phone numbers into the file STUFF.DAT, you can use the above Liberty BASIC commands to retrieve data out of the STUFF.DAT file: 1. The first line tells the computer, \u201cOpen the random-access file STUFF.DAT on the A drive, identify it by a nickname as #losers, and get ready to store fields that are a total of 25 characters in length.\u201d 2. The second line tells the computer, \u201cCreate a field for the random-access file that the #losers nickname identifies. Each field consists of a name (which takes up 15 characters), an age (which takes up 2 characters) and a phone number (which takes up 8 characters). The total of 15 plus 2 plus 8 equals 25, which is why the first line allocates field lengths of 25 characters.\u201d 3. The third line starts a FOR-NEXT loop to retrieve three fields out of a random-access file. 4. The fourth line uses the GET command to retrieve records from the random-access file that the handle #losers identifies. The first time that the GET command runs, the value of I is one, so the GET command retrieves data from the first record. The second time the GET command runs, the value of I is two, so the GET command retrieves data from the second record, and so on. 5. The fifth through eighth lines print the data that the GET command retrieves out of each field. 6. The ninth line marks the end of the FOR-NEXT loop. 7. The tenth line tells the computer, \u201cClose the file that the handle #losers identifies.\u201d 8. The eleventh line tells the computer, \u201cThis line is the end of the program.\u201d One main advantage of random-access files is the capability to selectively retrieve information from specific records. Try the following Liberty BASIC program, which asks you which record to retrieve data from (1, 2, or 3) and then retrieves and prints data from that record on-screen: OPEN \u201ca:\\stuff.dat\u201d FOR random AS #losers LEN = 25 FIELD #losers, 15 AS name$, 2 AS age$, 8 AS phone$ PROMPT \u201cWhat record do you want to retrieve data from?\u201d; fieldnum GET #losers, fieldnum PRINT \u201cName = \u201c; name$ PRINT \u201cAge = \u201c; age$ PRINT \u201cPhone = \u201c; phone$ PRINT CLOSE #losers END 185 Chapter 13: Saving and Retrieving Stuff in Files Saving and Retrieving Data in a Binary File Text files can be convenient for storing long strings of information, but they can be painfully cumbersome in retrieving data. Random-access files make retrieving data simple but at the expense of having to organize every chunk of data into records. In case you want to store long bits of information with the convenience of retrieving them quickly, you can save data in a binary file. Creating a new binary file Before you can store any data in a binary file, you must first create that binary file. To create a binary file, you use the following Liberty BASIC command: OPEN \u201cFilename\u201d FOR"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "can be convenient for storing long strings of information, but they can be painfully cumbersome in retrieving data. Random-access files make retrieving data simple but at the expense of having to organize every chunk of data into records. In case you want to store long bits of information with the convenience of retrieving them quickly, you can save data in a binary file. Creating a new binary file Before you can store any data in a binary file, you must first create that binary file. To create a binary file, you use the following Liberty BASIC command: OPEN \u201cFilename\u201d FOR BINARY AS #Handle This is what the above Liberty BASIC command tells the computer: 1. The OPEN command tells the computer, \u201cCreate a new file and give it the name that \u201cFilename\u201d specifies, which can represent a filename (such as STUFF.BIN) or a drive, directory, and filename (such as C:\\WINDOWS\\ STUFF.BIN).\u201d 2. The FOR BINARY portion of the command tells the computer, \u201cGet ready to start outputting data into the newly created binary file that \u201cFilename\u201d identifies.\u201d 3. The #Handle is any nickname that you choose to represent the binary file you just created. If you want to create a file called STUFF.BIN and save it on a floppy disk (the A drive), use the following command: OPEN \u201cA:\\STUFF.BIN\u201d FOR BINARY AS #Secrets This line tells Liberty BASIC to create the binary file STUFF.BIN on the A drive and assign it the name #Secrets. Any time that you use the OPEN command to create a new binary file or to open an existing binary file, make sure you use the CLOSE command to shut the binary file. If you don\u2019t use the CLOSE command eventually, your program may cause the computer to crash. 186 Part III: Advanced Programming with Liberty BASIC Saving stuff in a binary file After you create a binary file, you can stuff it with data by using the PRINT command. If you use the PRINT command, Liberty BASIC normally displays that data on-screen, so you must tell Liberty BASIC to store the data in your binary file instead by using the handle of that binary file, as in the following command: PRINT #Secrets, \u201cThis line gets stored in the binary file.\u201d This command tells Liberty BASIC, \u201cLook for a binary file that the name #Secrets identifies and stuff that binary file with the line, This line gets stored in the binary file.\u201d Putting it all together, you can create a program similar to the following example: OPEN \u201cA:\\STUFF.BIN\u201d FOR BINARY AS #Secrets PRINT #Secrets, \u201cThis line gets stored in the binary file.\u201d CLOSE #Secrets END This Liberty BASIC program tells the computer to do the following: 1. The first line tells the computer, \u201cOpen a binary file on the A drive and call this binary file STUFF.BIN. Then give it the handle #Secrets.\u201d 2. The second line tells the computer, \u201cLook for a file that the #Secrets handle identifies and stuff it with the line, This"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "gets stored in the binary file.\u201d Putting it all together, you can create a program similar to the following example: OPEN \u201cA:\\STUFF.BIN\u201d FOR BINARY AS #Secrets PRINT #Secrets, \u201cThis line gets stored in the binary file.\u201d CLOSE #Secrets END This Liberty BASIC program tells the computer to do the following: 1. The first line tells the computer, \u201cOpen a binary file on the A drive and call this binary file STUFF.BIN. Then give it the handle #Secrets.\u201d 2. The second line tells the computer, \u201cLook for a file that the #Secrets handle identifies and stuff it with the line, This line gets stored in the binary file.\u201d 3. The third line tells the computer, \u201cClose the binary file that the #Secrets handle identifies.\u201d 4. The fourth line tells the computer that the program is at an end. If you run this program, it simply creates a binary file on your disk but you won\u2019t see anything on the screen. Changing stuff in a binary file When you store data in a binary file, you can overwrite that data at any time by using something magical called a file pointer. Because binary files store data as a continuous stream of bytes, the file pointer lets you point at the part of the file that contains the data you want to overwrite. 187 Chapter 13: Saving and Retrieving Stuff in Files To find the current location of the file pointer, you have to create a variable and assign it the value of the file pointer\u2019s position with the LOC command such as: FilePointer = LOC(#Filename) So if #Filename represents a binary file that contains the string, \u201cI love pro- gramming with Liberty BASIC,\u201d the value of the FilePointer variable initially would be 38 (the total number of characters in the \u201cI love programming with Liberty BASIC\u201d string). To move the file pointer, you have to use the SEEK command, such as: SEEK(#Filename), NewPosition This command tells Liberty BASIC, \u201cMove the file pointer to the location speci- fied by NewPosition.\u201d So if the value of NewPosition is 3, the file pointer will now point to the third character stored in the binary file. If you stored the string \u201cI hate copycat publishers,\u201d in a binary file, the third position would point to the letter h, which is the first letter of the word \u201chate\u201d. To overwrite data in a binary file, you just have to move the file pointer to the location where you want to overwrite the data and then use the ordinary PRINT command such as: SEEK(#MyStuff), 3 PRINT #MyStuff, \u201cdespise copycat publishers.\u201d If the #MyStuff handle represented a binary file that contained the string, \u201cI hate copycat publishers,\u201d then the above two commands would first move the file pointer to the third position and then overwrite the third posi- tion and the rest of the file with the string \u201cdespise copycat publishers.\u201d Be careful when overwriting data in a binary file. Say you have the following string stored in a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "have to move the file pointer to the location where you want to overwrite the data and then use the ordinary PRINT command such as: SEEK(#MyStuff), 3 PRINT #MyStuff, \u201cdespise copycat publishers.\u201d If the #MyStuff handle represented a binary file that contained the string, \u201cI hate copycat publishers,\u201d then the above two commands would first move the file pointer to the third position and then overwrite the third posi- tion and the rest of the file with the string \u201cdespise copycat publishers.\u201d Be careful when overwriting data in a binary file. Say you have the following string stored in a binary file, \u201cI like cats,\u201d and use the following code: SEEK(#MyStuff), 1 PRINT #MyStuff, \u201c\u2018m tired.\u201d This is what your original binary file contains: I like cats. And this is what the overwritten binary file contents now look like: I\u2019m tired.s. 188 Part III: Advanced Programming with Liberty BASIC Note that the extra s and period remain because the new string doesn\u2019t completely overwrite the old data in the binary file. Retrieving stuff from a binary file Storing data in a binary file is nice, but eventually you may want to retrieve that data out again. To retrieve data from a binary file, you have to move the file pointer to anywhere in the file where you want to start retrieving data, then use the INPUT command such as: SEEK #MyFile, 0 INPUT #MyFile, RetrieveMe$ In this example, the SEEK #MyFile, 0 command simply moves the file pointer to the beginning of the binary file. If you only wanted to retrieve part of the data in a binary file, you could move the file pointer to a different location such as 8 or 12. #MyFile represents the file handle that you previously used with the OPEN command and RetrieveMe$ is the name of a string variable that temporarily stores the string you stored in that binary file. If you\u2019re retrieving numeric data stored in a binary file, you would use a numeric variable name that doesn\u2019t have the dollar sign ($) after it, such as: INPUT #MyFile, RetrieveMe To see how to store, overwrite and retrieve data in a binary file, take a look at this example: OPEN \u201cSTUFF.BIN\u201d FOR BINARY AS #myfile PRINT #myfile, \u201cWelcome back home!\u201d SEEK #myfile, 0 INPUT #myfile, txt$ PRINT \u201cCurrent Data in binary file: \u201c; txt$ SEEK #myfile, 8 PRINT #myfile, \u201cto my world!\u201d SEEK #myfile, 0 INPUT #myfile, txt$ PRINT \u201cNew Data in binary file: \u201c;txt$ CLOSE #myfile END Here\u2019s what\u2019s happening in the preceding example: 1. The first line tells the computer, \u201cOpen up the binary file STUFF.BIN, assign it a file handle of #myfile.\u201d 189 Chapter 13: Saving and Retrieving Stuff in Files 2. The second line tells the computer to store the string, \u201cWelcome back home!\u201d in the binary file. 3. The third line tells the computer to move the file pointer to the beginning of the binary file. 4. The fourth line tells the computer, \u201cRead all the data"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "SEEK #myfile, 0 INPUT #myfile, txt$ PRINT \u201cNew Data in binary file: \u201c;txt$ CLOSE #myfile END Here\u2019s what\u2019s happening in the preceding example: 1. The first line tells the computer, \u201cOpen up the binary file STUFF.BIN, assign it a file handle of #myfile.\u201d 189 Chapter 13: Saving and Retrieving Stuff in Files 2. The second line tells the computer to store the string, \u201cWelcome back home!\u201d in the binary file. 3. The third line tells the computer to move the file pointer to the beginning of the binary file. 4. The fourth line tells the computer, \u201cRead all the data out of the binary file represented by the #myfile handle and store the result in a vari- able called txt$.\u201d 5. The fifth line tells the computer, \u201cPrint the current contents of the binary file in the main window, which means Liberty BASIC prints the string, \u201cWelcome back home!\u201d\u201d 6. The sixth line tells the computer, \u201cMove the file pointer to the eight posi- tion in the binary file.\u201d 7. The seventh line tells the computer, \u201cStarting with the eighth position in the binary file, overwrite the data and replace it with the string, \u201cto my world!\u201d\u201d 8. The eighth line tells the computer, \u201cMove the file pointer back to the front of the binary file.\u201d 9. The ninth line tells the computer, \u201cRead all the data from the binary file represented by the handle #myfile, and store it in a variable called txt$.\u201d 10. The tenth line tells the computer, \u201cPrint the contents of the binary file in the main window.\u201d 11. The eleventh line tells the computer, \u201cClose the binary file represented by the #myfile handle.\u201d 12. The twelfth line tells the computer, \u201cThis is the end of the program. Now it\u2019s safe for Microsoft Windows to crash without losing any of my valu- able data.\u201d 190 Part III: Advanced Programming with Liberty BASIC Chapter 14 Creating a User Interface In This Chapter \u0001 Creating a window \u0001 Adding menus to a window \u0001 Placing controls in a window \u0001 Using dialog boxes A s the name implies, a user interface acts as the middleman between the user and your program. A user gives commands through your program\u2019s user interface, which passes those commands to the part of your program that actually does the work. Then your program passes data back to the user interface to display on-screen for the user to see. Designing a Window The most common element of a Windows program is a window, which is noth- ing more than a rectangle that appears on-screen. A window has the following two purposes: \u0002 To display your program\u2019s commands, such as pull-down menus or com- mand buttons, so that the user can use them to make selections or input information into the program \u0002 To display information on-screen for the user to see, such as a graph of a stock price or text that the user types Creating a new window To create a window, you"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "for the user to see. Designing a Window The most common element of a Windows program is a window, which is noth- ing more than a rectangle that appears on-screen. A window has the following two purposes: \u0002 To display your program\u2019s commands, such as pull-down menus or com- mand buttons, so that the user can use them to make selections or input information into the program \u0002 To display information on-screen for the user to see, such as a graph of a stock price or text that the user types Creating a new window To create a window, you need to use the OPEN command and define the text that you want to appear in the window titlebar, as the following example shows: NOMAINWIN OPEN \u201cTitlebar text\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure that you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END This program tells Liberty BASIC to do the following: 1. The first line tells Liberty BASIC not to display the main window. 2. The second line uses the OPEN command to create a new window, display the Titlebar text string in the title bar of the window, and assign the nickname #1 to represent the window that you just created. 3. The third line tells the computer to follow the instructions following the [quit] label if the user tries to close the program. This line uses the PRINT command to detect when the user tries to close the window identified by the #1 nickname, but doesn\u2019t actually print anything on the screen. 4. The fourth line uses the WAIT command to tell your program to wait for the user to do something. 5. The fifth line is the [quit] label. 6. The sixth line displays a Confirm dialog box that asks, Are you sure that you want to quit? The CONFIRM command automatically dis- plays a Yes and No command button in the dialog box. If the user clicks the Yes button, the program stores a value of \u201cyes\u201d in the quit$ variable. If the user clicks the No button, it stores a value of \u201cno\u201d in the quit$ variable. 7. The seventh line checks to see whether the value of the quit$ variable equals \u201dno.\u201d If so, it runs the WAIT command to wait for the user to do something. 8. The eighth line closes the window that the nickname #1 identifies. This line runs only if the user clicks the Yes button in the Confirm dialog box that the sixth line displays. 9. The ninth line marks the end of the program. When you run this program, a window appears on-screen and waits for you to click its close box before the program stops running. 192 Part III: Advanced Programming with Liberty BASIC Any time that you use the OPEN command to create a new window, you must eventually use the CLOSE command to shut the window. If you don\u2019t use"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "eighth line closes the window that the nickname #1 identifies. This line runs only if the user clicks the Yes button in the Confirm dialog box that the sixth line displays. 9. The ninth line marks the end of the program. When you run this program, a window appears on-screen and waits for you to click its close box before the program stops running. 192 Part III: Advanced Programming with Liberty BASIC Any time that you use the OPEN command to create a new window, you must eventually use the CLOSE command to shut the window. If you don\u2019t use the CLOSE command eventually, your program may cause the computer to crash. Defining the size and location of a window Each time that you create a window, Liberty BASIC may display that window on a different part of the screen. If you want to specify the exact location where you want your window to appear, you can use the UpperLeftX and UpperLeftY commands, which define how far from the left (the X coordi- nate) and the top edge (the Y coordinate) the upper-left corner of your window appears on-screen, as shown in Figure 14-1. If you want your window to appear exactly 225 pixels from the top and 139 pixels from the left edge of the screen, for example, you can use the following program: NOMAINWIN UpperLeftX = 139 UpperLeftY = 225 OPEN \u201cTitlebar\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END The UpperLeftX and UpperLeftY commands define how far the window appears from the left and top edges, respectively. If you want to define the exact size of your window, you can use the WindowHeight and WindowWidth commands to define a size measured in pixels, as follows: NOMAINWIN UpperLeftX = 139 UpperLeftY = 225 WindowWidth = 550 WindowHeight = 275 OPEN \u201cTitlebar\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END 193 Chapter 14: Creating a User Interface You must define the size and location of a window before using the OPEN command that actually creates the window on-screen. Adding color to a window Liberty BASIC also enables you to choose the background color for your window by using the BackgroundColor$ command and to set its value to one of the following colors: White Darkblue Black Red Lightgray (or Palegray) Darkred Darkgray Pink Yellow Darkpink Brown Green Blue Darkgreen Cyan Darkcyan Title bar Figure 14-1: After you create a window, you can define text to appear in that window\u2019s title bar, location on-screen, and the window size. 194 Part III: Advanced Programming with Liberty BASIC If you want to create a window with a pink background, you can use the follow- ing commands: NOMAINWIN UpperLeftX = 139 UpperLeftY = 225 WindowWidth = 550 WindowHeight = 275 BackgroundColor$ = \u201cPink\u201d OPEN"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "BackgroundColor$ command and to set its value to one of the following colors: White Darkblue Black Red Lightgray (or Palegray) Darkred Darkgray Pink Yellow Darkpink Brown Green Blue Darkgreen Cyan Darkcyan Title bar Figure 14-1: After you create a window, you can define text to appear in that window\u2019s title bar, location on-screen, and the window size. 194 Part III: Advanced Programming with Liberty BASIC If you want to create a window with a pink background, you can use the follow- ing commands: NOMAINWIN UpperLeftX = 139 UpperLeftY = 225 WindowWidth = 550 WindowHeight = 275 BackgroundColor$ = \u201cPink\u201d OPEN \u201cTitlebar\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END Putting Pull-Down Menus in a Window Most windows provide pull-down menus so that users can pick a command. To create a pull-down menu, you need to use the MENU command to define the following: \u0002 Menu title (typical menu titles are File, Edit, and Help) \u0002 Menu commands that appear on the menu, under the menu title (such as Edit, Print, or Cut) \u0002 A label to tell your program which instructions to follow after a user chooses a particular menu command A typical menu command may look as follows: MENU #WindowHandle, \u201cMenu Title\u201d, \u201cCommand1\u201d, [command1] In this example, #WindowHandle refers to the nickname of the window where you want the menu to appear, Menu Title appears at the top of the window, and Command1 appears after the user clicks the title of the pull-down menu. To show you a real-life example, take a look at the following program: NOMAINWIN MENU #1, \u201c&File\u201d, \u201c&Open\u201d, [asOpen], \u201c&Print\u201d, [asPrint], \u201cE&xit\u201d, [quit] OPEN \u201cMenu Example\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [quit] 195 Chapter 14: Creating a User Interface CONFIRM \u201cAre you sure that you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END [asOpen] NOTICE \u201cOpen command chosen\u201d WAIT [asPrint] NOTICE \u201cPrint command chosen\u201d WAIT This program works as follows: 1. The first line tells Liberty BASIC not to display the main window. 2. The second line defines a pull-down menu that appears in the window that the file handle #1 designates. The menu title is File and the com- mands that appear underneath are Open, Print, and Exit. If you want a letter in a menu title or command to appear underlined, put an ampersand character (&) in front of that letter, such as &Print. Any underlined letter acts as a shortcut or accelerator key so that the user can choose that menu title by pressing Alt plus the underlined letter, such as Alt+F for the File menu. After selecting a menu, the user can then type the underlined letter in a command, such as X, to choose that menu command \u2014 for example, Exit. 3. The third line tells the computer, \u201cCreate a window with the text Menu Example in the title bar and"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "menu title or command to appear underlined, put an ampersand character (&) in front of that letter, such as &Print. Any underlined letter acts as a shortcut or accelerator key so that the user can choose that menu title by pressing Alt plus the underlined letter, such as Alt+F for the File menu. After selecting a menu, the user can then type the underlined letter in a command, such as X, to choose that menu command \u2014 for example, Exit. 3. The third line tells the computer, \u201cCreate a window with the text Menu Example in the title bar and identify this window by its file handle of #1.\u201d 4. The fourth line tells the computer to follow the instructions following the [quit] label if the user tries to close the program. 5. The fifth line tells the computer to wait for the user to choose a command. 6. The sixth line is the [quit] label. 7. The seventh line displays a Confirm dialog box that asks, \u201cAre you sure that you want to quit?\u201d If the user clicks the Yes button, the program stores a value of \u201cyes\u201d in the quit$ variable. If the user clicks the No button, it stores a value of \u201cno\u201d in the quit$ variable. 8. The eighth line checks to see whether the value of the quit$ variable equals \u201cno\u201d. If so, it runs the WAIT command to wait for the user to do something. 9. The ninth line closes the window that the nickname #1 identifies. This line runs only if the user clicks the Yes button in the Confirm dialog box that the seventh line displays. 196 Part III: Advanced Programming with Liberty BASIC 10. The tenth line marks the end of the program. 11. The eleventh line identifies the label [asOpen]. After the user chooses the Open command from the File menu, the computer jumps to this line to look for further instructions to follow. 12. The twelfth and thirteenth lines tell the computer, \u201cDisplay a Notice dialog box with the message, Open command chosen. Then wait for the user to do something else.\u201d 13. The fourteenth line identifies the label [asPrint]. After the user chooses the Print command from the File menu, the computer jumps to this line to look for further instructions to follow. 14. The fifteenth and sixteenth lines tell the computer, \u201cDisplay a Notice dialog box with the message, Print command chosen. Then wait for the user to do something else.\u201d To define additional menus for a window, as shown in Figure 14-2, just use multiple MENU commands, as in the following example: NOMAINWIN MENU #1, \u201c&File\u201d, \u201c&Open\u201d, [asOpen], \u201c&Print\u201d, [asPrint], \u201cE&xit\u201d, [quit] MENU #1, \u201c&Help\u201d, \u201c&Contents\u201d, [asContents], \u201c&About\u201d, [asAbout] OPEN \u201cMenu Example\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure that you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END [asOpen] NOTICE \u201cOpen command chosen\u201d WAIT [asPrint] NOTICE \u201cPrint command chosen\u201d WAIT [asContents] NOTICE \u201cContents"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the message, Print command chosen. Then wait for the user to do something else.\u201d To define additional menus for a window, as shown in Figure 14-2, just use multiple MENU commands, as in the following example: NOMAINWIN MENU #1, \u201c&File\u201d, \u201c&Open\u201d, [asOpen], \u201c&Print\u201d, [asPrint], \u201cE&xit\u201d, [quit] MENU #1, \u201c&Help\u201d, \u201c&Contents\u201d, [asContents], \u201c&About\u201d, [asAbout] OPEN \u201cMenu Example\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure that you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END [asOpen] NOTICE \u201cOpen command chosen\u201d WAIT [asPrint] NOTICE \u201cPrint command chosen\u201d WAIT [asContents] NOTICE \u201cContents command chosen\u201d WAIT [asAbout] NOTICE \u201cAbout command chosen\u201d WAIT 197 Chapter 14: Creating a User Interface Each time that you create additional menu commands, you need to create instructions (which a [label] identifies) for the computer to follow when- ever the user chooses those commands. Making Pop-Up Menus In addition to pull-down menus, many programs also offer pop-up menus that appear next to the mouse pointer when you right-click the mouse. To create a pop-up menu in Liberty BASIC, you need to use the POPUPMENU command, as follows: POPUPMENU \u201ccommand1\u201d, [label1], \u201ccommand2\u201d, [label2] To make the POPUPMENU easier to understand, place each command and label on a separate line and use the underscore character (_) at the end of each line. The underscore character tells Liberty BASIC that additional instructions appear on the following line. You can use the underscore character to divide long lines of commands into shorter, separate lines, such as you see in the following example: POPUPMENU _ \u201ccommand1\u201d, [label1], _ \u201ccommand2\u201d, [label2], _ \u201ccommand3\u201d, [label3] Figure 14-2: Liberty BASIC can create pull-down menus. 198 Part III: Advanced Programming with Liberty BASIC Here\u2019s what the preceding commands do: 1. The POPUPMENU command tells the computer, \u201cCreate a pop-up menu next to the current position of the mouse pointer.\u201d 2. The \u201ccommand1\u201d and \u201ccommand2\u201c text are the actual commands that appear on the pop-up menu. You can add additional commands so that your pop-up menus can display 5, 7, or 15 different commands. 3. The [label1] and [label2] labels identify instructions for the computer to follow if the user chooses a particular menu command. So if the user chose \u201ccommand1\u201d, the computer immediately follows the instructions that the [label1] label identifies. If you want to add a horizontal line to separate commands on your pop-up menu, just use the vertical line character (|) in place of a command and omit any label following the | character, as shown in the example below. POPUPMENU _ \u201ccommand1\u201d, [label1], _ |, _ \u201ccommand3\u201d, [label3] To see how pop-up menus work, try the following program, as shown in Figure 14-3. Notice how the vertical line character creates a horizontal line to separate commands on the pop-up menu. NOMAINWIN POPUPMENU _ \u201cDestroy the planet\u201d, [one], _ \u201cPoison the environment\u201d, [two], _ | ,_ \u201cGet elected to political office\u201d, [three] NOTICE \u201cNothing selected.\u201d END [one] NOTICE \u201cLaunching missiles now.\u201d END [two] NOTICE \u201cSpilling oil"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the vertical line character (|) in place of a command and omit any label following the | character, as shown in the example below. POPUPMENU _ \u201ccommand1\u201d, [label1], _ |, _ \u201ccommand3\u201d, [label3] To see how pop-up menus work, try the following program, as shown in Figure 14-3. Notice how the vertical line character creates a horizontal line to separate commands on the pop-up menu. NOMAINWIN POPUPMENU _ \u201cDestroy the planet\u201d, [one], _ \u201cPoison the environment\u201d, [two], _ | ,_ \u201cGet elected to political office\u201d, [three] NOTICE \u201cNothing selected.\u201d END [one] NOTICE \u201cLaunching missiles now.\u201d END [two] NOTICE \u201cSpilling oil into the oceans.\u201d END [three] NOTICE \u201cFooled the public once more.\u201d END 199 Chapter 14: Creating a User Interface Putting Controls in a Window Although you commonly use pull-down menus to get commands from the user, you may also want to add command buttons, check boxes, radio buttons, and text boxes to a window. In placing such controls as command buttons on a window, you need to define the following: \u0002 A name to identify the control \u0002 Text to appear on the control \u0002 A label to identify instructions for the computer to follow after the user chooses that particular control \u0002 The width and height of the control \u0002 The position of the control Creating a command button A command button usually appears on-screen as a gray rectangle containing a label such as OK or Cancel. To create a command button, you need to use the BUTTON command, as follows: Figure 14-3: Pop-up menus can provide additional options for users to choose. 200 Part III: Advanced Programming with Liberty BASIC BUTTON #Windowhandle.buttonname, \u201cButton text\u201d, [branchLabel], UL, xpos, ypos, width, height If you omit the width and height, the button automatically adjusts to the size of the text that you want to appear on the button. Here\u2019s how the following command works: 1. The BUTTON command tells the computer, \u201cCreate a command button inside the window that the nickname #Windowhandle identifies.\u201d 2. The buttonname portion tells the computer, \u201cIdentify this button by this unique name.\u201d 3. The Button text portion is the text that actually appears on the button. 4. The [branchLabel] portion identifies a label to which the computer jumps to find instructions to follow after the user clicks the button. 5. The UL portion tells the computer, \u201cPosition the command button by using the upper-left corner of the window.\u201d Instead of using UL, you can also use UR (upper-right), LL (lower-left), or LR (lower-right). 6. The xpos and ypos portions represent the X and Y position of the button\u2019s location, which you measure in pixels from the upper-left (UL), upper-right (UR), lower-left (LL), or lower-right (LR) edge of the window. 7. The width and height portions define the width and height of the button. To see how this button works in a real-life example, run the following program, the results of which are shown in Figure 14-4: NOMAINWIN WindowHeight = 200 WindowWidth = 250 BUTTON #main.mybutton, \u201cE&xit\u201d,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the window.\u201d Instead of using UL, you can also use UR (upper-right), LL (lower-left), or LR (lower-right). 6. The xpos and ypos portions represent the X and Y position of the button\u2019s location, which you measure in pixels from the upper-left (UL), upper-right (UR), lower-left (LL), or lower-right (LR) edge of the window. 7. The width and height portions define the width and height of the button. To see how this button works in a real-life example, run the following program, the results of which are shown in Figure 14-4: NOMAINWIN WindowHeight = 200 WindowWidth = 250 BUTTON #main.mybutton, \u201cE&xit\u201d, [quit], LL, 10, 10, 45, 25 OPEN \u201cCommand button example\u201d FOR WINDOW AS #main PRINT #main, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END As an alternative to creating a command button, Liberty BASIC also enables you to use a bitmap image as a button. To turn a bitmap image into a button, you need to use the BMPBUTTON command, as follows: BMPBUTTON #Windowhandle.buttonname, \u201cbitmap filename\u201d, [branchLabel], UL, xpos, ypos 201 Chapter 14: Creating a User Interface Here\u2019s what the preceding command does: 1. The BMPBUTTON command tells the computer, \u201cCreate a button out of a bitmap image and display this image inside the window that the nickname #Windowhandle identifies.\u201d 2. The buttonname portion tells the computer, \u201cIdentify this bitmap button by this unique name.\u201d 3. The \u201cbitmap filename\u201d portion defines the directory and filename of the bitmap image that you want to use, such as C:\\Liberty\\face.bmp. 4. The [branchLabel] portion identifies a label to which the computer jumps to find instructions to follow after the user clicks the bitmap button. 5. The UL portion tells the computer, \u201cPosition the bitmap button by using the upper-left corner of the window.\u201d Instead of using UL, you can also use UR (upper-right), LL (lower-left), or LR (lower-right). 6. The xpos and ypos portions represent the X and Y position of the bitmap button\u2019s location, which you measure in pixels from the upper-left (UL), upper-right (UR), lower-left (LL), or lower-right (LR) edge of the window. To see how this button works in a real-life example, try running the following program: NOMAINWIN WindowWidth = 400 BMPBUTTON #main.picturebtn, \u201cvwsignon.bmp\u201d, [Exit], UL, 10, 40 OPEN \u201cBitmap Button Example\u201d FOR WINDOW AS #main PRINT #main, \u201ctrapclose [quit]\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END Command button Figure 14-4: If you create a command button, define its size and position. 202 Part III: Advanced Programming with Liberty BASIC Displaying text Sometimes you may want to display text inside a window to display a mes- sage or give instructions to the user. In Liberty BASIC, text that the user can\u2019t change is known as static text, which you can create by using the STATICTEXT command, as follows: STATICTEXT #Windowhandle.staticname, \u201cStatic text\u201d, xpos, ypos, width, height Here\u2019s what the preceding command does: 1."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END Command button Figure 14-4: If you create a command button, define its size and position. 202 Part III: Advanced Programming with Liberty BASIC Displaying text Sometimes you may want to display text inside a window to display a mes- sage or give instructions to the user. In Liberty BASIC, text that the user can\u2019t change is known as static text, which you can create by using the STATICTEXT command, as follows: STATICTEXT #Windowhandle.staticname, \u201cStatic text\u201d, xpos, ypos, width, height Here\u2019s what the preceding command does: 1. The STATICTEXT command tells the computer, \u201cDisplay text inside a window that the nickname #Windowhandle identifies. Identify the static text by the name staticname.\u201d 2. The \u201cStatic text\u201d portion tells the computer, \u201cDisplay inside the window whatever text appears inside double quotes.\u201d 3. The xpos and ypos portions represent the X and Y position of the static text\u2019s location, which you measure in pixels from the upper-left edge of the window. 4. The width and height portions represent the width and height of the static text, which you also measure in pixels. You can change text inside static text by using the PRINT command, as follows: PRINT #Windowhandle.staticname, \u201cNew text\u201d To try out a real program, try the following example: NOMAINWIN STATICTEXT #main.static, \u201cOld text\u201d, 10, 10, 75, 25 BUTTON #main.mybutton, \u201cChange\u201d, [change], LL, 10, 10, 45, 25 OPEN \u201cReal-life example\u201d FOR Window AS #main PRINT #main, \u201ctrapclose [quit]\u201d WAIT [change] PRINT #main.static, \u201cNew text\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #main END This program displays static text in a window that reads Old text. After you click the Change command button, the static text changes and displays New text. 203 Chapter 14: Creating a User Interface Creating a check box Sometimes you may want to give the user several options to choose. To do so, you can create check boxes that display a box for the user to click, along with a label to describe the option, as shown in Figure 14-5. To create a check box, you need to use the CHECKBOX command, as follows: CHECKBOX #Windowhandle.boxname, \u201cCheck box text\u201d, [set], [reset], xpos, ypos, width, height Here\u2019s what the preceding command does: 1. The CHECKBOX command tells the computer, \u201cCreate a check box inside the window that the nickname #Windowhandle identifies.\u201d 2. The boxname portion tells the computer, \u201cIdentify this check box by this unique name.\u201d 3. The \u201cCheck box text\u201d portion defines the text that appears next to the check box. 4. The [set] label defines instructions to follow if the user chooses the check box. The [reset] label defines instructions to follow if the user clears the check box. 5. The xpos and ypos portions represent the X and Y positions of the check box\u2019s location, which you measure in pixels from the upper-left edge of the window. 6. The width and height portions"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "that the nickname #Windowhandle identifies.\u201d 2. The boxname portion tells the computer, \u201cIdentify this check box by this unique name.\u201d 3. The \u201cCheck box text\u201d portion defines the text that appears next to the check box. 4. The [set] label defines instructions to follow if the user chooses the check box. The [reset] label defines instructions to follow if the user clears the check box. 5. The xpos and ypos portions represent the X and Y positions of the check box\u2019s location, which you measure in pixels from the upper-left edge of the window. 6. The width and height portions represent the width and height of the check box, which you also measure in pixels. To see how a check box works in a real-life example, try running the following program (which appears in Figure 14-4): Check boxes Figure 14-5: Check boxes offer multiple choices. 204 Part III: Advanced Programming with Liberty BASIC NOMAINWIN WindowWidth = 250 WindowHeight = 200 CHECKBOX #1.check1, \u201cIntolerant conservatism\u201d, [set], [reset], 10, 10, 250, 25 CHECKBOX #1.check2, \u201cRadical liberalism\u201d, [set], [reset], 10, 40, 250, 25 CHECKBOX #1.check3, \u201cThe status quo\u201d, [set], [reset], 10, 70, 250, 25 CHECKBOX #1.check4, \u201cAnything to benefit the rich\u201d, [set], [reset], 10, 100, 250, 25 OPEN \u201cVote for one or more\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [set] NOTICE \u201cAre you sure you live in a democracy?\u201d WAIT [reset] NOTICE \u201cGood move!\u201d WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END The value of a check box is either set (if the check box contains a check mark) or reset (if the check box is empty). To determine the value of a check box, you can use the following two commands: PRINT #1.cboxname, \u201cvalue?\u201d INPUT #1.cboxname, result$ The PRINT command retrieves the value from the check box that cboxname identifies, and the INPUT command stores the value (either set or reset) in the variable result$. Creating a radio button Unlike check boxes, which enable you to choose multiple options that the check boxes list, radio buttons enable you to choose only one option at a time. To create a radio button, you need to use the RADIOBUTTON command, which works nearly identically as the CHECKBOX command, as follows: RADIOBUTTON #Windowhandle.radioname, \u201cRadio button text\u201d, [set], [reset], xpos, ypos, width, height 205 Chapter 14: Creating a User Interface To see how radio buttons work, try running the following program, as shown in Figure 14-6. After you click the command button containing the label Check radio button 1, an Information dialog box pops up to tell you the value of the first radio button. NOMAINWIN WindowWidth = 250 WindowHeight = 200 RADIOBUTTON #1.radio1, \u201cIntolerant conservatism\u201d, [set], [reset], 10, 10, 250, 25 RADIOBUTTON #1.radio2, \u201cRadical liberalism\u201d, [set], [reset], 10, 40, 250, 25 RADIOBUTTON #1.radio3, \u201cThe status quo\u201d, [set], [reset], 10, 70, 250, 25 RADIOBUTTON #1.radio4, \u201cAnything to benefit the rich\u201d, [set], [reset], 10, 100, 250, 25 BUTTON #1.button1, \u201cCheck radio button"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "see how radio buttons work, try running the following program, as shown in Figure 14-6. After you click the command button containing the label Check radio button 1, an Information dialog box pops up to tell you the value of the first radio button. NOMAINWIN WindowWidth = 250 WindowHeight = 200 RADIOBUTTON #1.radio1, \u201cIntolerant conservatism\u201d, [set], [reset], 10, 10, 250, 25 RADIOBUTTON #1.radio2, \u201cRadical liberalism\u201d, [set], [reset], 10, 40, 250, 25 RADIOBUTTON #1.radio3, \u201cThe status quo\u201d, [set], [reset], 10, 70, 250, 25 RADIOBUTTON #1.radio4, \u201cAnything to benefit the rich\u201d, [set], [reset], 10, 100, 250, 25 BUTTON #1.button1, \u201cCheck radio button 1\u201d, [test], LL, 50, 3 OPEN \u201cVote for one or more\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [test] PRINT #1.radio1, \u201cvalue?\u201d INPUT #1.radio1, test$ NOTICE \u201cThe value of radio button 1 is \u201c; test$ WAIT [set] WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END The value of a radio button is either set (if you choose the radio button) or reset (if the radio button is empty). To determine the value of a radio button, you can use the following two commands: PRINT #1.radiobuttonname, \u201cvalue?\u201d INPUT #1.radiobuttonname, result$ The PRINT command retrieves the value from the radio button that the radio buttonname identifies, and the INPUT command stores the value (either set or reset) in the variable result$. 206 Part III: Advanced Programming with Liberty BASIC Creating text boxes Text boxes provide a box that can both display text and enable the user to type text. To create a text box, you need to use the TEXTBOX command, as follows: TEXTBOX #Windowhandle.textboxname, xpos, ypos, width, height Here\u2019s what the preceding command does: 1. The TEXTBOX command tells the computer, \u201cCreate a text box inside the window that the nickname #Windowhandle identifies.\u201d 2. The textboxname portion tells the computer, \u201cIdentify this text box by this unique name.\u201d Radio buttons Figure 14-6: Radio buttons force a user to choose one option out of many. 207 Chapter 14: Creating a User Interface 3. The xpos and ypos portions represent the X and Y positions of the text box\u2019s location, which you measure in pixels from the upper-left edge of the window. 4. The width and height portions represent the width and height of the text box, which you also measure in pixels. If you want to insert text into a text box, you need to use the PRINT command and identify the window handle, the name of the text box, and the text that you want to insert, as follows: PRINT #1.text1, \u201cThis text appears in the text1 text box.\u201d To retrieve the text from a text box, you need to use the following two commands: PRINT #1.text1, \u201c!contents?\u201d INPUT #1.text1, stuff$ To show you how text boxes work, try the following program, which displays a text box and a menu that gives you the option of clearing the text box and displaying the contents of the text"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "into a text box, you need to use the PRINT command and identify the window handle, the name of the text box, and the text that you want to insert, as follows: PRINT #1.text1, \u201cThis text appears in the text1 text box.\u201d To retrieve the text from a text box, you need to use the following two commands: PRINT #1.text1, \u201c!contents?\u201d INPUT #1.text1, stuff$ To show you how text boxes work, try the following program, which displays a text box and a menu that gives you the option of clearing the text box and displaying the contents of the text box in a Notice dialog box: NOMAINWIN WindowWidth = 250 WindowHeight = 200 TEXTBOX #1.text1, 25, 25, 200, 100 MENU #1, \u201c&Options\u201d, \u201c&Clear text box\u201d, [clear], _ \u201c&Display text from text box\u201d, [display], _ \u201cE&xit\u201d, [quit] OPEN \u201cText box example\u201d FOR Window AS #1 PRINT #1.text1, \u201cInitial text.\u201d PRINT #1, \u201ctrapclose [quit]\u201d WAIT [clear] PRINT #1.text1, \u201c\u201d WAIT [display] PRINT #1.text1, \u201c!contents?\u201d INPUT #1.text1, stuff$ NOTICE \u201cText in text box = \u201c + stuff$ WAIT [quit] CONFIRM \u201cAre you sure that you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END 208 Part III: Advanced Programming with Liberty BASIC Creating list boxes To offer users multiple choices, you can use either check boxes or radio but- tons. List boxes are especially handy for displaying numerous items that are cumbersome to list individually as multiple check boxes or radio buttons. In addition, list boxes help eliminate input errors because the user just clicks on a choice rather than typing something in (and risking misspelling a word). To create a list box, you need to use the LISTBOX command this way: LISTBOX #Windowhandle.listboxname, array$(), [action], xpos, ypos, width, height Here\u2019s what the preceding command does: 1. The LISTBOX command tells the computer, \u201cCreate a list box inside the window that the nickname #Windowhandle identifies.\u201d 2. The listboxname portion tells the computer, \u201cIdentify this list box by this unique name.\u201d 3. The array$ portion represents a string array that contains all the items that you want to display in the list box. To learn more about arrays, see Chapter 16. 4. The [action] portion represents the instructions for the computer to follow the moment that the user chooses an item from the list box. 5. The xpos and ypos portions represent the X and Y positions of the list box\u2019s location, which you measure in pixels from the upper-left edge of the window. 6. The width and height portions represent the width and height of the list box, which you also measure in pixels. To choose an item in a list box, users must double-click that item. If you want users to choose an item in a list box by single-clicking, however, you need to use the following command: PRINT #handle.listboxname, \u201csingleclickselect\u201d This command tells the computer, \u201cLet the user single click to choose any item that appears in the list box identified by listboxname.\u201d After the user selects"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "box\u2019s location, which you measure in pixels from the upper-left edge of the window. 6. The width and height portions represent the width and height of the list box, which you also measure in pixels. To choose an item in a list box, users must double-click that item. If you want users to choose an item in a list box by single-clicking, however, you need to use the following command: PRINT #handle.listboxname, \u201csingleclickselect\u201d This command tells the computer, \u201cLet the user single click to choose any item that appears in the list box identified by listboxname.\u201d After the user selects an item in a list box, you can use the following two commands to identify what the user chose: PRINT #1.listbox1, \u201cselection?\u201d INPUT #1.listbox1, selected$ 209 Chapter 14: Creating a User Interface To see how list boxes work, try the following program, which displays two list boxes, as shown in Figure 14-7. Because the top list box is smaller than the total number of items, this list box automatically adds a vertical scroll bar so that users can scroll through all the options. The top list box enables the user to single-click an item because of the following command: PRINT #1.list1, \u201csingleclickselect\u201d On the other hand, the bottom list box forces users to double-click to select an item. NOMAINWIN array$(0) = \u201cMystery meat\u201d array$(1) = \u201cCat food\u201d array$(2) = \u201cSomething pink and artificially preserved\u201d array$(3) = \u201cLiquid mush\u201d array$(4) = \u201cSugar and artificial coloring\u201d WindowWidth = 300 WindowHeight = 240 LISTBOX #1.list1, array$(), [Action1], 40, 10, 216, 40 LISTBOX #1.list2, array$(), [Action2], 40, 100, 216, 70 OPEN \u201cHere are your choices for dinner tonight\u201d FOR Window AS #1 PRINT #1.list1, \u201csingleclickselect\u201d PRINT #1, \u201ctrapclose [quit]\u201d WAIT [Action1] PRINT #1.list1, \u201cselection?\u201d INPUT #1.list1, selected$ NOTICE \u201cYou chose = \u201c + selected$ WAIT [Action2] PRINT #1.list2, \u201cselection?\u201d INPUT #1.list2, selected$ NOTICE \u201cYou chose = \u201c + selected$ WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END 210 Part III: Advanced Programming with Liberty BASIC Creating combo boxes Combo boxes act like list boxes but they take up even less room on-screen. After the user clicks a combo box, a drop-down list of options appears for the user to choose among, as shown in Figure 14-8. As a result, combo boxes are sometimes referred to as drop-down list boxes. To create a combo box, you need to use the COMBOBOX command, which is nearly identical to the LIST BOX command, as follows: COMBOBOX #Windowhandle.comboboxname, array$(), [action], xpos, ypos, width, height After the user selects an item in a combo box, you can use the following two commands to identify what the user chose: PRINT #1.combobox1, \u201cselection?\u201d INPUT #1.combobox1, selected$ Figure 14-7: List boxes can display multiple options to a user in a small amount of space. 211 Chapter 14: Creating a User Interface To see how combo boxes work, try the following program: NOMAINWIN array$(0) = \u201cMystery meat\u201d array$(1) = \u201cCat food\u201d"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "combo box, you need to use the COMBOBOX command, which is nearly identical to the LIST BOX command, as follows: COMBOBOX #Windowhandle.comboboxname, array$(), [action], xpos, ypos, width, height After the user selects an item in a combo box, you can use the following two commands to identify what the user chose: PRINT #1.combobox1, \u201cselection?\u201d INPUT #1.combobox1, selected$ Figure 14-7: List boxes can display multiple options to a user in a small amount of space. 211 Chapter 14: Creating a User Interface To see how combo boxes work, try the following program: NOMAINWIN array$(0) = \u201cMystery meat\u201d array$(1) = \u201cCat food\u201d array$(2) = \u201cSomething pink and artificially preserved\u201d array$(3) = \u201cLiquid mush\u201d array$(4) = \u201cSugar and artificial coloring\u201d WindowWidth = 300 WindowHeight = 240 COMBOBOX #1.combo1, array$(, [Action], 40, 50, 216, 100 OPEN \u201cHere are your choices for dinner tonight\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [Action] PRINT #1.combo1, \u201cselection?\u201d INPUT #1.combo1, selected$ Figure 14-8: Combo boxes display a drop- down list. 212 Part III: Advanced Programming with Liberty BASIC NOTICE \u201cYou chose = \u201c + selected$ WAIT [quit] CONFIRM \u201cAre you sure that you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END Creating group boxes Group boxes do nothing more than surround other controls, as shown in Figure 14-9. This can be especially useful when you want to separate groups of radio buttons or check boxes. To create a group box, use the following command: GROUPBOX #Windowhandle, \u201cGroupbox text\u201d, xpos, ypos, width, height To see how group boxes work, try the following program: NOMAINWIN WindowWidth = 250 WindowHeight = 200 GROUPBOX #1, \u201cYour choices are\u201d, 5, 5, 225, 120 RADIOBUTTON #1.radio2, \u201cRadical liberalism\u201d, [set], [reset], 10, 30, 150, 15 RADIOBUTTON #1.radio3, \u201cThe status quo\u201d, [set], [reset], 10, 60, 150, 15 RADIOBUTTON #1.radio4, \u201cAnything to benefit the rich\u201d, [set], [reset], 10, 90, 150, 15 BUTTON #1.button1, \u201cExit program\u201d, [quit], LL, 50, 1 OPEN \u201cVote for one or more\u201d FOR Window AS #1 PRINT #1, \u201ctrapclose [quit]\u201d WAIT [set] WAIT [quit] CONFIRM \u201cAre you sure you want to quit?\u201d; quit$ IF quit$ = \u201cno\u201d THEN WAIT CLOSE #1 END 213 Chapter 14: Creating a User Interface Figure 14-9: A group box organizes multiple controls such as radio buttons. 214 Part III: Advanced Programming with Liberty BASIC Chapter 15 Debugging Programs In This Chapter \u0001 Understanding computer bugs \u0001 Finding syntax errors \u0001 Discovering run-time errors \u0001 Figuring out logic errors N obody writes programs that work 100 percent correctly all the time. The problem is that programming means giving the computer extremely detailed instructions. Give the computer one wrong instruction or one mis- placed instruction, make one wrong assumption or omit one necessary instruc- tion, and the computer has no idea what to do next, which can cause your program to fail or, in programming lingo, to crash. If a program doesn\u2019t work correctly, programmers never say, \u201cMy program has a problem.\u201d Instead, programmers use their own lingo and say, \u201cMy program has a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "errors \u0001 Figuring out logic errors N obody writes programs that work 100 percent correctly all the time. The problem is that programming means giving the computer extremely detailed instructions. Give the computer one wrong instruction or one mis- placed instruction, make one wrong assumption or omit one necessary instruc- tion, and the computer has no idea what to do next, which can cause your program to fail or, in programming lingo, to crash. If a program doesn\u2019t work correctly, programmers never say, \u201cMy program has a problem.\u201d Instead, programmers use their own lingo and say, \u201cMy program has a bug.\u201d Although eliminating all bugs from a program is impossible, Liberty BASIC (and many other language compilers) provides special features to help you track down the obvious bugs and wipe them out so that your program works well enough for people to actually use it. Anatomy of a Computer Bug Computer bugs tend to fall into the following three categories: \u0002 Syntax errors: This type of error occurs if you spell something wrong or type a command incorrectly, such as misspelling PRINT as PRRINT or typing too many commas. \u0002 Run-time errors: These errors occur if your program runs into something unexpected, such as if you ask the user to input an age and the user types a negative number. \u0002 Logic errors: These bugs occur if your instructions don\u2019t work as you intend them to, but the computer performs these flawed instructions anyway, creating unpredictable results. Although bugs riddle every program, most bugs are relatively harmless or cause only minor problems, such as displaying a menu incorrectly at unpre- dictable times. Bugs that keep a program from working at all are more serious. Any bug that keeps a company from shipping (and selling) a program is known as a showstopper. Syntax Errors Syntax errors are often misspellings of valid commands or omissions (or misplacement) of crucial characters such as a comma or a left parenthesis. If you misspell a BASIC command such as PRINT, Liberty BASIC is usually smart enough to highlight the line where the syntax error occurs so that you can fix it later. If Liberty BASIC finds a syntax error, it highlights the line causing the problem and displays a message in the bottom left corner of the screen, as shown in Figure 15-1. Syntax error in code Error message Figure 15-1: Liberty BASIC high- lights lines containing syntax errors, such as misspelling a command as buttton instead of button. 216 Part III: Advanced Programming with Liberty BASIC Although syntax errors usually prevent a program from working at all, watch out for your own misspellings because the computer will assume that you know what you\u2019re doing, even if you make a mistake. Especially troublesome are those times that you misspell a variable name. Consider, for example, the following program: PROMPT \u201cHow many times do I need to tell you no\u201d; Answeer$ PRINT \u201cYour reply = \u201c; Answer$ END The preceding program asks the user, \u201cHow many"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "lines containing syntax errors, such as misspelling a command as buttton instead of button. 216 Part III: Advanced Programming with Liberty BASIC Although syntax errors usually prevent a program from working at all, watch out for your own misspellings because the computer will assume that you know what you\u2019re doing, even if you make a mistake. Especially troublesome are those times that you misspell a variable name. Consider, for example, the following program: PROMPT \u201cHow many times do I need to tell you no\u201d; Answeer$ PRINT \u201cYour reply = \u201c; Answer$ END The preceding program asks the user, \u201cHow many times do I need to tell you no?\u201d Then the program stores whatever the user types into the variable Answeer$ (the misspelling of Answer$). Because Liberty BASIC con- siders Answer$ and Answeer$ as two completely different variable names, the Answer$ variable doesn\u2019t contain any data. If you run this program, it doesn\u2019t print out what the user types, simply because of a single misspelling. Liberty BASIC can detect syntax errors in misspelled commands, but it cannot detect misspelled variable names. If you insert a space between a function or subroutine name and any parentheses that follow it, Liberty BASIC may treat that as a syntax error, too, although it won\u2019t necessarily tell you so. Besides misspelling a variable name, watch out for mixing upper- and lower- case letters in variable names. Liberty BASIC considers the variable Answer$ as completely different from the variable answer$ simply because one starts with an uppercase letter A and the second one doesn\u2019t. 217 Chapter 15: Debugging Programs The Destruction of Mariner 1 Syntax errors are usually caught because they give an invalid command to the computer, which immediately keeps the program from running at all. The worst syntax errors, however, are those that somehow give a valid but unintended com- mand to the computer. Thus, the program keeps working \u2014 but not the way you want it to. Back in 1962, NASA sent the Mariner 1 probe to study Venus, but before the rocket carrying the probe could make its way into outer space, it veered off course and NASA had to prematurely detonate the rocket. According to one story, the program was supposed to contain a FOR NEXT loop that told the computer to loop three times, as in the following example: FOR I = 1, 3 But instead of a comma, the programmer had accidentally typed in a period, as follows: FOR I = 1.3 So instead of telling the computer to loop three times, this command told the computer to set the value of the variable I to 1.3. The end result was that this error managed to give the com- puter a valid but incorrect command, causing NASA to lose a multimillion dollar rocket and payload as a result. Because a single misspelling of a variable name can mess up your program, many programmers take shortcuts and choose short, cryptic variable names. Don\u2019t take this route! The time that you"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "programmer had accidentally typed in a period, as follows: FOR I = 1.3 So instead of telling the computer to loop three times, this command told the computer to set the value of the variable I to 1.3. The end result was that this error managed to give the com- puter a valid but incorrect command, causing NASA to lose a multimillion dollar rocket and payload as a result. Because a single misspelling of a variable name can mess up your program, many programmers take shortcuts and choose short, cryptic variable names. Don\u2019t take this route! The time that you save in using short variable names is lost in comparison with the time that you need to decipher what those short variable names represent. Such errors can prove hard to detect because a misspelling can still enable the program to run, albeit incorrectly. Anytime that your program runs but doesn\u2019t seem to work right, start looking for misspellings or missing elements such as quotation marks, commas, upper and lowercase variable names, and parentheses, any of which may cause the program to fail. Run-Time Errors Run-time errors are sneaky little bugs that hide in programs. A program may work correctly right up until it receives data that the programmer never expected, such as a negative number that the user types for his year of birth. Unfortunately, the only time that you can find run-time errors is after they cause the program to crash. Because run-time errors occur only after your program receives data that it doesn\u2019t know how to handle, the best way to hunt down run-time errors is to run your program over and over, feeding the program extreme values of dif- ferent data each time. 218 Part III: Advanced Programming with Liberty BASIC Death from the Therac-25 The Therac-25 was a radiation-therapy machine designed to adminster radiation doses to patients. To prevent excessive doses of radia- tion, the Therac-25 included a safety mecha- nism that relied completely on its software to prevent any problems \u2014 but the software con- tained a fatal run-time error. The Therac-25 offered two modes of operation: X-ray and electron beam. If the technician acci- dentally selected the X-ray mode first, the Therac-25 would select a high-intensity energy level. If the technician then switched to electron- beam mode right away without completing the X-ray mode, the Therac-25 would maintain its higher energy intensity level for electron-mode operation, which meant delivering a fatal radi- ation burn to any unlucky patient lying under- neath. Only after several people suffered severe radi- ation burns at the hands of the Therac-25 did someone finally discover this hidden run-time error, but by then, it was too late for all the people who\u2019d already been irreparably burned by the Therac-25 and its supposedly fail-safe software safety mechanism. If your program asks the user to input an age, for example, type a huge number (such as 60,000). Then type zero. Finally, type a negative number such as \u20139,489. By testing extreme ranges"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "electron-mode operation, which meant delivering a fatal radi- ation burn to any unlucky patient lying under- neath. Only after several people suffered severe radi- ation burns at the hands of the Therac-25 did someone finally discover this hidden run-time error, but by then, it was too late for all the people who\u2019d already been irreparably burned by the Therac-25 and its supposedly fail-safe software safety mechanism. If your program asks the user to input an age, for example, type a huge number (such as 60,000). Then type zero. Finally, type a negative number such as \u20139,489. By testing extreme ranges of values, you can often smoke out run-time errors before you release your program for actual use. Fun with Logic Errors Of all the types of bugs that can infest your program, none is more insidious than a logic error. Syntax errors can prove fairly easy to find because you just need to look for misspellings or places where you may have forgotten to type a character, such as a closing parenthesis. Similarly, you can often find run-time errors by testing your program by using extreme values of data. Logic errors, however, occur even after you write your instructions perfectly \u2014 except for the fact that they\u2019re the wrong instructions. Because you assume that the instructions you write are correct, to find and correct a logic error, you must examine these instruction line by line to see whether they\u2019re miss- ing a step or simply solving the wrong problem altogether. Because logic errors can prove so difficult to find, Liberty BASIC provides special debugging features to help make this task a little easier. The two main ways to examine a program for logic errors are by stepping and tracing. 219 Chapter 15: Debugging Programs The Sinking of the H.M.S. Sheffield The trouble with eradicating all logic bugs from a program is that you must examine your entire program for mistaken assumptions. Although programs may work perfectly fine during test- ing, they may encounter unexpected situations in the real world, causing the programs to fail catastrophically. One prominent example of a logic bug occurred during the Falkland Islands War between Great Britain and Argentina. The British destroyer the H.M.S. Sheffield used an advanced computer air-defense system designed to protect the ship from air and missile attack. To prevent this air- defense system from shooting down its own missiles, the computers were programmed to allow certain \u201cfriendly\u201d missiles to fly unmo- lested through its defenses. These \u201cfriendly\u201d missiles included all the types of missiles that the British Navy used, which included the French-built Exocet antiship missile. Unfortunately for the British, Argentina had also bought Exocet anti-ship missiles from the French, so when the Sheffield\u2019s computers detected the incoming Exocet missiles, they assumed the missiles were \u201cfriendly\u201d and allowed them to pass uncontested through the Sheffield\u2019s air defense system \u2014 and right into the Sheffield, sinking the ship with several direct hits. Stepping line by line Stepping involves running through your program line"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "programmed to allow certain \u201cfriendly\u201d missiles to fly unmo- lested through its defenses. These \u201cfriendly\u201d missiles included all the types of missiles that the British Navy used, which included the French-built Exocet antiship missile. Unfortunately for the British, Argentina had also bought Exocet anti-ship missiles from the French, so when the Sheffield\u2019s computers detected the incoming Exocet missiles, they assumed the missiles were \u201cfriendly\u201d and allowed them to pass uncontested through the Sheffield\u2019s air defense system \u2014 and right into the Sheffield, sinking the ship with several direct hits. Stepping line by line Stepping involves running through your program line by line and watching to see how your program works. The moment that you spot the program doing something wrong, you know exactly which line in your program is making the mistake. To step through a Liberty BASIC program, follow these steps: 1. Load the program that you want to step through line by line. 2. Choose Run\u27aaDebug, press Alt+F5, or click the Debug icon on the toolbar. A Debugging window appears, as shown in Figure 15-2. If the main window also appears, you may need to close or move it out of the way to see the Debugging window. 3. Click one of the following: \u0002 Step Into: Runs your program line-by-line so you can see what it\u2019s doing at each instruction. \u0002 Step Over: Runs your program line-by-line but doesn\u2019t highlight any lines buried inside subroutines or functions. \u0002 Step Out: In case you used the Step Into command to view code inside a subroutine or function, the Step Out command lets you quickly jump out of a subroutine or function without having to go through every single line in that particular subroutine or function. \u0002 Animate: Runs your entire program, line by line, which you can halt at any time by clicking the Stop icon. To start running your program again, click the Resume icon. \u0002 Stop: Temporarily halts program execution so you can examine the current status of your program such as the value of the different variables. \u0002 Resume: Starts executing your program again after you have clicked the Stop icon. Liberty BASIC runs your program until it finds another TRACE command. To help you study how a small chunk of your program works, click the mouse on a line in your program and then choose Code \u27aaRun to Line. Liberty BASIC runs all the instructions up to the line that you clicked on and shows you the values of all of your variables in the top pane of the Debugging window. 220 Part III: Advanced Programming with Liberty BASIC Tracing through your program Stepping through an entire program line by line can prove tedious and time- consuming, especially if you already have an idea of which part of your pro- gram may hide a bug. Instead of stepping through your whole program, line by line from the beginning, you can use tracing instead. To use tracing in your program, follow these steps: 1. Open"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "instructions up to the line that you clicked on and shows you the values of all of your variables in the top pane of the Debugging window. 220 Part III: Advanced Programming with Liberty BASIC Tracing through your program Stepping through an entire program line by line can prove tedious and time- consuming, especially if you already have an idea of which part of your pro- gram may hide a bug. Instead of stepping through your whole program, line by line from the beginning, you can use tracing instead. To use tracing in your program, follow these steps: 1. Open the program that you want to debug. 2. Type the TRACE command at the point in your program where you want to start debugging. In using the TRACE command, you have the following three options: \u2022 TRACE 0 runs your program from start to finish and stops only if you\u2019re fast enough to click the Stop button in the Debugging window. \u2022 TRACE 1 runs your program line by line, giving you a chance to click the Stop button in the Debugging window at any time. \u2022 TRACE 2 runs your program line by line in the Debugging window. Animate Step Out Resume Stop Step Into Step Over Current value of program variables Figure 15-2: The Debugging window enables you to exam- ine your program for bugs. 221 Chapter 15: Debugging Programs 3. Choose Run\u27aaDebug, or press Alt+F5. The Debugging window appears. Depending on the TRACE command you typed in your program (such as TRACE 0 or TRACE 2), your program may run quickly or wait for you to click one of the Step icons to examine your program line by line. 4. When you\u2019re done studying your program, click the Run icon in the Debugging window. Liberty BASIC runs your program until it finds another TRACE command. You can add multiple TRACE commands anywhere you need to put them in your program. The TRACE commands have no effect on the running of your program. Use TRACE commands only if you\u2019re debugging a program. 222 Part III: Advanced Programming with Liberty BASIC Part IV Dealing with Data Structures In this part . . . A s you write a program, your program needs to store data in the computer\u2019s memory. Of course, your program can\u2019t just toss data anywhere in the computer\u2019s memory; if it did that, the memory would become as disor- ganized as a closet where you randomly throw clothes onto a heap. To help organize the computer\u2019s memory, programs store data in something known as a data structure. A data struc- ture is nothing more than a technical term that describes how computer programs organize data so that you can easily store and retrieve information. The simplest data structure is a simple variable that holds one chunk of infor- mation. A more complicated data structure comprises arrays, records, linked lists, and objects. You get to know all of them in this part of the book. Chapter 16"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "become as disor- ganized as a closet where you randomly throw clothes onto a heap. To help organize the computer\u2019s memory, programs store data in something known as a data structure. A data struc- ture is nothing more than a technical term that describes how computer programs organize data so that you can easily store and retrieve information. The simplest data structure is a simple variable that holds one chunk of infor- mation. A more complicated data structure comprises arrays, records, linked lists, and objects. You get to know all of them in this part of the book. Chapter 16 Storing Stuff in Arrays In This Chapter \u0001 Creating an array \u0001 Using an array to store data \u0001 Making a multidimensional array \u0001 Creating dynamic arrays I f you want to store data temporarily, you must use a variable with a descriptive name, such as PhoneNumber, MovieRating, or FirstName. After you create a variable name to hold data, you normally also need to define what type of data the variable can hold, such as a string, integer, or single-precision number. But sometimes you may want to store a list of nearly identical data. If you write a program to store the names of all the people in your class, for exam- ple, you may need to create a series of nearly identically named variables just to hold their names, as the following example shows: Name1$ = \u201cPatrick DeGuire\u201d Name2$ = \u201cJordan Preston Wang\u201d Name3$ = \u201cMichael Elizondo\u201d Name4$ = \u201cBo the Cat\u201d Naturally, this method is clumsy, and any time that programmers run into a problem that threatens to make programming harder than necessary, they come up with a solution to avoid the problem. In this case, the solution that programmers developed is known as an array. Think of an array as a list \u2014 something like the one shown in Figure 16-1. 226 Part IV: Dealing with Data Structures Making an Array An ordinary variable can hold only one chunk of data at a time, such as a number or a name. The moment that you try to store another chunk of data in a variable, the variable immediately erases the old data and saves the new data. Unlike ordinary variables, an array is a single variable name that can hold one or more chunks of data, as long as each chunk of data represents the same data type, such as string, integer, single-precision, and so on. To make an array, you must define it by using the DIM command, as follows: DIM ArrayName(Number) In this example, ArrayName is any valid variable name, and Number repre- sents the total number of items that you want to store in the array. As is true of other variables, an array can hold either numbers or strings. To define your array to hold strings, you need to add the dollar sign ($) symbol to the end of the array name, as follows: DIM ArrayName$(Number) An array consists of the following three"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "type, such as string, integer, single-precision, and so on. To make an array, you must define it by using the DIM command, as follows: DIM ArrayName(Number) In this example, ArrayName is any valid variable name, and Number repre- sents the total number of items that you want to store in the array. As is true of other variables, an array can hold either numbers or strings. To define your array to hold strings, you need to add the dollar sign ($) symbol to the end of the array name, as follows: DIM ArrayName$(Number) An array consists of the following three parts: \u0002 A name. \u0002 A data type that defines the only type of data that the array can hold, such as strings or numbers. \u0002 A number that defines how many elements the array can hold. (A single element can hold one chunk of data.) This number is sometimes known as the array index. MyArray(1) MyArray(2) MyArray(3) DIM MyArray(5) AS STRING MyArray(4) MyArray(5) Figure 16-1: An array stores items by the array\u2019s name and the item\u2019s position in the array. 227 Chapter 16: Storing Stuff in Arrays How C/C++, Java, and Visual Basic.NET define arrays If you define the size of an array in languages such as Liberty BASIC and Pascal, the program numbers the array locations starting with 1. You define an array in Liberty BASIC, for example, as follows: DIM AgeArray(3) In Liberty BASIC, the AgeArray consists of three locations: AgeArray(1), AgeArray(2), and AgeArray(3). But if you define the size of an array in C/C++, Java, or Visual Basic.NET, the program numbers the array locations starting with 0. Consider, for example, the following array as defined in C: int agearray(3) In C, this array consists of three locations: agearray(0), agearray(1), and agear- ray(2) but never has a location numbered 3. To make matters even more confusing, the com- mand DIM agearray(3) in Visual Basic.NET actu- ally creates an array with four elements: agearray(0), agearray(1), agearray(2), and agear- ray(3). So if you program in C/C++, Java, or Visual Basic.NET, you need to remain aware of these subtle difference so that your arrays in C/C++, Java, and Visual Basic.NET work the way that you expect. You can define the size of an array using a single number, as follows: DIM CatArray$(45) This creates an array that can hold 45 items, in locations starting with number 1, such as CatArray$(1), and ending with number 45, such as CatArray$(45). If you need to define several arrays, you can create them all on a single line like this: DIM CatArray$(45), DogArray$(12), BirdArray$(87) This line simply tells the computer to create three different arrays of size 45, 12, and 87. If you want, you can also define your arrays on separate lines, like this: DIM CatArray$(45) DIM DogArray$(12) DIM BirdArray$(87) 228 Part IV: Dealing with Data Structures Storing (and Retrieving) Data in an Array After you first create an array, it\u2019s completely empty. Because an array can hold multiple chunks of data, you"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "and ending with number 45, such as CatArray$(45). If you need to define several arrays, you can create them all on a single line like this: DIM CatArray$(45), DogArray$(12), BirdArray$(87) This line simply tells the computer to create three different arrays of size 45, 12, and 87. If you want, you can also define your arrays on separate lines, like this: DIM CatArray$(45) DIM DogArray$(12) DIM BirdArray$(87) 228 Part IV: Dealing with Data Structures Storing (and Retrieving) Data in an Array After you first create an array, it\u2019s completely empty. Because an array can hold multiple chunks of data, you need to specify the location in the array in which you want to store your data. Suppose, for example, that you create an array to hold five different integers, as follows: DIM IQArray(5) Normally, to stuff the number 93 into a variable, you just use a command such as the following: MyVariable = 93 But because an array can hold multiple chunks of data, you must specify the location in the array in which you want to store the data. If you want to store data in the first location in the array, you use the following command: IQArray(3) = 93 This command tells the computer to store the number 93 in the second ele- ment of the IQArray array. If you try to store data in a location in the array that already contains data, Liberty BASIC simply wipes out the old data and replaces it with the new data. To retrieve data out of an array, you assign a variable of the correct data type to a specific array location, as follows: YourIQ = IQArray(3) If you previously stored the number 93 in the third location of IQArray, the value of the YourIQ variable is 93 as well. Arrays can store multiple chunks of data, so programmers use loops to make storing and retrieving data from an array easy. Without a loop, you\u2019d need to specify the exact location in an array to store (or retrieve) data, as in the fol- lowing example: NameArray$(1) = \u201cMike Ross\u201d NameArray$(2) = \u201cBill McPherson\u201d NameArray$(3) = \u201cJohn Smith\u201d 229 Chapter 16: Storing Stuff in Arrays You can, however, specify the array location by using a variable within a WHILE-WEND or FOR-NEXT loop, as follows: FOR I = 1 TO 3 NumberArray(I) = 125 NEXT I The FOR-NEXT loop stores the number 125 in the first, second, and third loca- tions of NumberArray. To see how to store and retrieve data in an array, try the following program: DIM NameArray$(3) FOR I = 1 TO 3 PROMPT \u201cType the name of someone you hate:\u201d; Enemy$ NameArray$(I) = Enemy$ NEXT I FOR I = 1 TO 3 PRINT NameArray$(I) + \u201c sounds like the name of a moron.\u201d NEXT I END Here\u2019s how the computer runs the preceding program: 1. The first line creates the array NameArray, which can hold three differ- ent strings. 2. The second line starts a FOR-NEXT loop that"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "125 in the first, second, and third loca- tions of NumberArray. To see how to store and retrieve data in an array, try the following program: DIM NameArray$(3) FOR I = 1 TO 3 PROMPT \u201cType the name of someone you hate:\u201d; Enemy$ NameArray$(I) = Enemy$ NEXT I FOR I = 1 TO 3 PRINT NameArray$(I) + \u201c sounds like the name of a moron.\u201d NEXT I END Here\u2019s how the computer runs the preceding program: 1. The first line creates the array NameArray, which can hold three differ- ent strings. 2. The second line starts a FOR-NEXT loop that runs three times. 3. The third line displays a Prompt dialog box that tells the user, \u201cType the name of someone you hate.\u201d Whatever name the user types the program stores in the Enemy$ string variable. 4. The fourth line tells the computer, \u201cStore the value of the Enemy$ string variable into the NameArray. The first time that this FOR-NEXT loop runs, store the value of the Enemy$ string variable in NameArray$(1). The second time, store the Enemy$ string variable in NameArray$(2). The third time, store the Enemy$ string variable in NameArray$(3).\u201d 5. The fifth line marks the end of the FOR-NEXT loop. 6. The sixth line starts a second FOR-NEXT loop that runs three times. 7. The seventh line prints the value of NameArray plus the string \u201c sounds like the name of a moron.\u201d The first time, it prints the value that it\u2019s storing in NameArray$(1); the second time, it prints the value in NameArray$(2); and the third time, it prints it in NameArray$(3). 8. The eighth line marks the end of the FOR-NEXT loop. 9. The ninth line tells the computer that the program is at an end. Making a Multidimensional Array The simplest arrays are nothing more than a single list of items, as in the fol- lowing example: DIM PetArray$(5) This command creates an array that can hold five strings (refer to Figure 16-1). In programming lingo, any array that holds a single list of data is known as a one-dimensional array. A one-dimensional array uses a single number to define its size, as follows: DIM ArrayName(X) Liberty BASIC can also create two-dimensional arrays by defining two sizes. The code for a two-dimensional array looks as follows: DIM ArrayName(X, Y) This command creates a two-dimensional array, as shown in Figure 16-2. The following is an example of a two-dimensional array: DIM VictimArray(10, 9) AS STRING This command creates a two-dimensional array that can hold 90 (or 10 * 9) strings. TwoD (1, 1) DIM TwoD (2, 3) AS STRING TwoD (1, 2) TwoD (1, 3) TwoD (2, 1) TwoD (2, 2) TwoD (2, 3) Figure 16-2: A two- dimensional array uses two numbers to define the size of the array. 230 Part IV: Dealing with Data Structures Although Liberty BASIC supports only one- or two-dimensional arrays, other programming languages enable you to create multidimensional arrays. To create a three-dimensional array in other languages, such as"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "example of a two-dimensional array: DIM VictimArray(10, 9) AS STRING This command creates a two-dimensional array that can hold 90 (or 10 * 9) strings. TwoD (1, 1) DIM TwoD (2, 3) AS STRING TwoD (1, 2) TwoD (1, 3) TwoD (2, 1) TwoD (2, 2) TwoD (2, 3) Figure 16-2: A two- dimensional array uses two numbers to define the size of the array. 230 Part IV: Dealing with Data Structures Although Liberty BASIC supports only one- or two-dimensional arrays, other programming languages enable you to create multidimensional arrays. To create a three-dimensional array in other languages, such as Visual Basic, you must define three sizes, as in the following array (see also Figure 16-3): DIM ArrayName(X, Y, Z) Storing and retrieving data by using multidimensional arrays requires identi- fying the X, Y, and Z locations of the array in which you want to store your data. To see a two-dimensional array that can store up to six strings, try the follow- ing program: DIM VictimArray$(2, 3) AS STRING FOR I = 1 TO 2 FOR J = 1 TO 3 PROMPT \u201cWho do you want to hurt\u201d; Enemy$ VictimArray$(I, J) = Enemy$ NEXT J NEXT I PROMPT \u201cType X location of the array item that you want to print, such as 1\u201d; X PROMPT \u201cType Y location of the array item that you want to print, such as 1\u201d; Y PRINT VictimArray$(X, Y) + \u201c deserves to be hurt the most.\u201d END This program asks you to type six names. Suppose that you type the follow- ing six names, in this order: Y1 X1 Z1 Zn Yn Xn DIM ThreeD (X, Y, Z) AS INTEGER Figure 16-3: A three- dimensional array requires three numbers to define the size of the array. 231 Chapter 16: Storing Stuff in Arrays 232 Part IV: Dealing with Data Structures Mike Ross Bill McPherson Jon Markey Bobby Lee Tom Clark Roger Smith The following order is the one in which the program stores these names: VictimArray$(1, 1) = Mike Ross VictimArray$(1, 2) = Bill McPherson VictimArray$(1, 3) = Jon Markey VictimArray$(2, 1) = Bobby Lee VictimArray$(2, 2) = Tom Clark VictimArray$(2, 3) = Roger Smith If the program says, \u201cType X and Y locations of the array item that you want to print, such as 1, 3,\u201d and you type 2, 1, the program prints the following: \u201cBobby Lee deserves to be hurt the most.\u201d Because storing and retrieving data in a multidimensional array can become confusing, consider using multidimensional arrays only if absolutely necessary. Creating Dynamic Arrays In most programming languages, you can create only a static array. A static array is a fixed size and poses the following two potential problems: \u0002 After you define the array size, you can\u2019t change the array size later to make it smaller (if you make the array too big) or larger (if you make the array too small). \u0002 A static array always requires a certain amount of memory, regardless of whether the array"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the most.\u201d Because storing and retrieving data in a multidimensional array can become confusing, consider using multidimensional arrays only if absolutely necessary. Creating Dynamic Arrays In most programming languages, you can create only a static array. A static array is a fixed size and poses the following two potential problems: \u0002 After you define the array size, you can\u2019t change the array size later to make it smaller (if you make the array too big) or larger (if you make the array too small). \u0002 A static array always requires a certain amount of memory, regardless of whether the array contains any data or is empty. Despite these problems, static arrays are often suitable for most programs. If you want the capability to resize an array while your program is running, however, or to completely erase all data in an array to free up memory, you may want to consider creating something known as a dynamic array. The main advantage of a dynamic array is that you can resize it or completely erase it (thus freeing up memory) while the program is running. The disad- vantage is that you must write specific commands to do so. 233 Chapter 16: Storing Stuff in Arrays Unlike some programming languages (such as older versions of BASIC such as GW-BASIC), Liberty BASIC always creates dynamic arrays so that you can change the size of your array after you create it. To change the size of an array, just use the REDIM command, as in the following example: REDIM VictimArray$(44) This command tells the computer to take the existing array, VictimArray$, and change its size so that it can hold 44 items. If you change the size of an array, Liberty BASIC erases all the data stored in that array. Resizing a dynamic array enables you to change the size of the array but not the data type. If your original array held strings, your newly resized array must also hold strings. After you resize a dynamic array, you can stuff new data into it. To see how dynamic arrays can work, try the following program: DIM LoserArray$(3) FOR I = 1 TO 3 PROMPT \u201cWho is incompetent\u201d; MyBoss$ LoserArray$(I) = MyBoss$ NEXT I FOR J = 1 TO 3 PRINT LoserArray$(J) NEXT J REDIM LoserArray$(7) LoserArray$(7) = \u201cBobby Lee\u201d PRINT LoserArray$(7) + \u201c is a pathetic character.\u201d END Here\u2019s how the computer runs the preceding program: 1. The first line creates the array LoserArray, which can hold three differ- ent strings. 2. The second line starts a FOR-NEXT loop that runs three times. 3. The third line displays a Prompt dialog box that asks the user, \u201cWho is incompetent?\u201d Any name that the user types the program stores in the MyBoss$ string variable. 4. The fourth line tells the computer, \u201cStore the value of the MyBoss$ vari- able in LoserArray.\u201d 5. The fifth line marks the end of the FOR-NEXT loop. 6. The sixth line starts a FOR-NEXT loop that runs three times. 7."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "preceding program: 1. The first line creates the array LoserArray, which can hold three differ- ent strings. 2. The second line starts a FOR-NEXT loop that runs three times. 3. The third line displays a Prompt dialog box that asks the user, \u201cWho is incompetent?\u201d Any name that the user types the program stores in the MyBoss$ string variable. 4. The fourth line tells the computer, \u201cStore the value of the MyBoss$ vari- able in LoserArray.\u201d 5. The fifth line marks the end of the FOR-NEXT loop. 6. The sixth line starts a FOR-NEXT loop that runs three times. 7. The seventh line prints the contents of the LoserArray. The first time the FOR-NEXT loop runs, it prints the first name that you type; the second time, it prints the second name that you type; and the third time, it prints the third name that you type. At this point, the LoserArray holds only three items. 8. The eighth line marks the end of the FOR-NEXT loop. 9. The ninth line erases everything that you\u2019re currently storing in LoserArray and resizes LoserArray so that it can now hold seven (7) items. 10. The tenth line stores the string Bobby Lee in the seventh location in LoserArray. 11. The eleventh line prints the contents of LoserArray(7), which is the string Bobby Lee, and combines it with the string, \u201c is a pathetic character.\u201d The entire PRINT statement displays, Bobby Lee is a pathetic character. 12. The twelfth line tells the computer that the program is at an end. You can resize multidimensional arrays, but you can\u2019t change the number of dimensions. If you create a two-dimensional array, for example, you can\u2019t resize it to a one-dimensional array. Dynamic and multidimensional arrays may be nice, but they can still hold only one type of data, such as numbers or strings. To avoid this limitation, many other programming languages include an array-like structure called a collection. Essentially, a collection is an array that can hold any type of data. So one part of the collection may hold a number, another part of the collection may hold a string, and so on. Think of a collection as a super-flexible version of an array. 234 Part IV: Dealing with Data Structures Chapter 17 Lumping Related Data in Records In This Chapter \u0001 Making records \u0001 Adding data to and retrieving data from records \u0001 Combining records and arrays A n array can prove handy for storing data of the same type (such as strings or integers) in a list, but sometimes you may need to store a variety of related data that consists of both strings and numbers. Because you can\u2019t store different data types in an array \u2014 see Chapter 16 for more information about arrays \u2014 you must use a different data structure known as a record. Data structure is a fancy term for something that can hold information such as words or numbers. The simplest data structure is a variable, which can"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "records and arrays A n array can prove handy for storing data of the same type (such as strings or integers) in a list, but sometimes you may need to store a variety of related data that consists of both strings and numbers. Because you can\u2019t store different data types in an array \u2014 see Chapter 16 for more information about arrays \u2014 you must use a different data structure known as a record. Data structure is a fancy term for something that can hold information such as words or numbers. The simplest data structure is a variable, which can hold one chunk of data. A more complicated data structure is an array, which can hold a list of data as long as all the information shares the same data type (such as integers or strings). A record stores related data under a single variable name. If, for example, you want to store the names, addresses, and phone numbers of all your friends (and enemies), you create several different variables, as the following example shows: Name1$ = \u201cBo Katz\u201d Address1$ = \u201c123 Main Street\u201d Phone1$ = \u201c555-1234\u201d Salary1 = 55000 Name2$ = \u201cRoger Wilco\u201d Address2$ = \u201c948 Manchester Road\u201d Phone2$ = \u201c555-4587\u201d Salary2 = 29000 The more names, addresses, and phone numbers that you need to store, the more separate variables you must create. Because this process is confusing, programmers create records as a way to simplify storing related data under a 236 Part IV: Dealing with Data Structures single variable name. Essentially, records allow you to group related data together and manipulate that record instead of the individual chunks of data, such as names, addresses, phone numbers, and salary as separate variables. Liberty BASIC doesn\u2019t support records, so the program examples in this chapter are written in QBASIC, just so you can see how a different BASIC dialect implements records as data structures. Don\u2019t worry about running any of these sample programs. Just study them and try to understand the general principles behind them. Creating a Record A record consists of a name and one or more variables. If, for example, you want to create a record to store names, addresses, and phone numbers, you use the following code: TYPE RecordName FullName AS STRING * 15 Address AS STRING * 25 Phone AS STRING * 14 Salary AS SINGLE END TYPE This record definition tells the computer to do the following: 1. The first line tells the computer, \u201cThis is the beginning of the record RecordName.\u201d 2. The second line creates a FullName variable that can hold a string up to 15 characters long. 3. The third line creates an Address variable that can hold a string up to 25 characters long. 4. The fourth line creates a Phone variable that can hold a string up to 14 characters long. 5. The fifth line creates a Salary variable that can hold a single-precision number. 6. The sixth line tells the computer, \u201cThis is the end of the record RecordName.\u201d"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the following: 1. The first line tells the computer, \u201cThis is the beginning of the record RecordName.\u201d 2. The second line creates a FullName variable that can hold a string up to 15 characters long. 3. The third line creates an Address variable that can hold a string up to 25 characters long. 4. The fourth line creates a Phone variable that can hold a string up to 14 characters long. 5. The fifth line creates a Salary variable that can hold a single-precision number. 6. The sixth line tells the computer, \u201cThis is the end of the record RecordName.\u201d After you first create a record, you can\u2019t use it immediately. In technical terms, a record is a user-defined data type. Before you can use a record, you must create a variable to hold the information that you want to store in your record, in much the same way that you create a variable to hold an integer or string. The following bit of code shows that you must first define your record and then create a variable to represent your record: TYPE EmployeeRecord FullName AS STRING * 15 Address AS STRING * 25 Phone AS STRING * 14 Salary AS SINGLE END TYPE DIM Workers AS EmployeeRecord The DIM command in the preceding example tells the computer, \u201cCreate the variable Workers that can hold data that the record EmployeeRecord defines.\u201d Only after you define a variable to represent your record can you start stuffing data into the record. Manipulating Data in Records To add data to and retrieve data from a record, you need to specify the fol- lowing two items: \u0002 The variable name that represents the record \u0002 The variable name inside the record in which you want to store data or from which you want to take data Storing data in a record To store data in a record, you need to specify both the variable name (which represents a record) and the specific record variable to use, as in the following example: RecordVariable.Variable = Data Suppose that you had a record definition like the following example: TYPE BomberInfo NickName AS STRING * 16 MissionsFlown AS INTEGER Crew AS INTEGER END TYPE 237 Chapter 17: Lumping Related Data in Records 238 Part IV: Dealing with Data Structures You define a variable to represent this record as follows: DIM B17 AS BomberInfo Then, if you want to store a string in the NickName variable, you use the fol- lowing command: B17.NickName = \u201cBrennan\u2019s Circus\u201d This command tells the computer, \u201cLook for the variable B17 and store the string \u201cBrennan\u2019s Circus\u201d in the NickName variable.\u201d Retrieving data from a record You can retrieve stored data by specifying both the record\u2019s variable name and the specific variable that contains the data that you want to retrieve, as follows: Variable = RecordVariable.Variable Suppose, for example, that you have the following record definition and a variable to represent that record: TYPE BomberInfo NickName AS STRING * 15 MissionsFlown AS INTEGER Crew"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "store a string in the NickName variable, you use the fol- lowing command: B17.NickName = \u201cBrennan\u2019s Circus\u201d This command tells the computer, \u201cLook for the variable B17 and store the string \u201cBrennan\u2019s Circus\u201d in the NickName variable.\u201d Retrieving data from a record You can retrieve stored data by specifying both the record\u2019s variable name and the specific variable that contains the data that you want to retrieve, as follows: Variable = RecordVariable.Variable Suppose, for example, that you have the following record definition and a variable to represent that record: TYPE BomberInfo NickName AS STRING * 15 MissionsFlown AS INTEGER Crew AS INTEGER END TYPE DIM B24 AS BomberInfo See how C creates records Different languages use different ways to create identical data structures. The C pro- gramming language creates a record (known as a structure in the C language) as shown in the following example: struct bomberinfo { char nickname[15] int missionsflown int crew } B24; This bit of C code creates the structure (or record) bomberinfo. The bomberinfo struc- ture can store a nickname up to 15 characters, an integer in the variable missionsflown, and another integer in the variable crew. In addition, this code also creates the variable B24 that represents this structure. If you\u2019re already storing data in the B24 record, you can retrieve it by using the following commands: GetName = B24.NickName GetHistory = B24.MissionsFlown GetCrew = B24.Crew Using Records with Arrays Although a record can store several related chunks of data under a single variable name, records by themselves aren\u2019t very good at storing lists of related data, such as a list of names, addresses, and phone numbers. To solve this problem, you can create an array that contains a record by using the fol- lowing command: DIM ArrayName(Number) AS RecordType Refer to Chapter 16 for more information about arrays. Because an array is nothing more than a list representing a specific data type, you can define an array to represent a record as follows: TYPE GulliblePeople FullName AS STRING * 15 CashAvailable AS SINGLE END TYPE DIM PotentialVictims(3) AS GulliblePeople This chunk of code tells the computer to do the following: 1. The first line creates the record GulliblePeople. 2. The second line creates a FullName string variable that can hold up to 15 characters. 3. The third line creates a CashAvailable variable that can hold a single- precision number. 4. The fourth line marks the end of the GulliblePeople record. 5. The fifth line creates an array that can hold three records based on the GulliblePeople record. (You can refer to Figure 16-1, in Chapter 16, to see a representation of this array.) To see a real-life example of how records work, study the following QBASIC program: 239 Chapter 17: Lumping Related Data in Records 240 Part IV: Dealing with Data Structures TYPE GulliblePeople FullName AS STRING * 15 CashAvailable AS SINGLE END TYPE DIM PotentialVictims(2) AS GulliblePeople FOR I = 1 TO 2 PRINT \u201cType the name of someone you want to"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "marks the end of the GulliblePeople record. 5. The fifth line creates an array that can hold three records based on the GulliblePeople record. (You can refer to Figure 16-1, in Chapter 16, to see a representation of this array.) To see a real-life example of how records work, study the following QBASIC program: 239 Chapter 17: Lumping Related Data in Records 240 Part IV: Dealing with Data Structures TYPE GulliblePeople FullName AS STRING * 15 CashAvailable AS SINGLE END TYPE DIM PotentialVictims(2) AS GulliblePeople FOR I = 1 TO 2 PRINT \u201cType the name of someone you want to con:\u201d INPUT PotentialVictims(I).FullName PRINT \u201cHow much money do you think you can get?\u201d INPUT PotentialVictims(I).CashAvailable NEXT I PRINT PRINT \u201cHere is your list of future con victims:\u201d FOR I = 1 TO 2 PRINT PotentialVictims(I).FullName PRINT PotentialVictims(I).CashAvailable NEXT I END This program asks that you type in two names and two numbers. The first name you store in PotentialVictims(1).FullName, and the first number you store in PotentialVictims(1).CashAvailable. The second name you store in PotentialVictims(2).FullName, and the second number you store in PotentialVictims(2).CashAvailable. Liberty BASIC doesn\u2019t support records, so you won\u2019t be able to get the above BASIC program to run under Liberty BASIC. Chapter 18 Linked Lists and Pointers In This Chapter \u0001 Pointing at data \u0001 Understanding how linked lists work \u0001 Creating linked lists \u0001 Making data structures with linked lists W hen you create an array, you must specify a size for it. If you make your array too small, your program won\u2019t have enough room to store data unless you increase the array size. Make the array too large, however, and you waste your computer\u2019s valuable memory. As a compromise, programmers developed something known as a linked list. Like an array, a linked list can store a list of items. But unlike an array, a linked list can grow or shrink as you need it to, so you never need to decide how much space to allocate ahead of time. Some languages, such as BASIC, can\u2019t create a linked list. Although you can\u2019t make or use linked lists in Liberty BASIC, you still need to know about them. Linked lists are a common data structure that many other programming lan- guages use, such as Java and C/C++. Starting with a Pointer An array contains a fixed number of storage units for holding data. If you design an array to hold five numbers but it needs to hold only two numbers, you\u2019re wasting space in the computer\u2019s memory. For small arrays, this situa- tion isn\u2019t much of a problem. But if you\u2019re using a large, multidimensional array, the large amount of memory that the array consumes can actually keep your program from working on computers that don\u2019t contain enough memory. 242 Part IV: Dealing with Data Structures Another problem is that you can\u2019t easily rearrange data in an array. Suppose, for example, that you have an array containing a list of first names, like the array shown"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "an array to hold five numbers but it needs to hold only two numbers, you\u2019re wasting space in the computer\u2019s memory. For small arrays, this situa- tion isn\u2019t much of a problem. But if you\u2019re using a large, multidimensional array, the large amount of memory that the array consumes can actually keep your program from working on computers that don\u2019t contain enough memory. 242 Part IV: Dealing with Data Structures Another problem is that you can\u2019t easily rearrange data in an array. Suppose, for example, that you have an array containing a list of first names, like the array shown in Figure 18-1. If you want to rearrange the names alphabetically, you must take all the data out and put it back in the array in alphabetical order. To solve both these problems, programmers create linked lists. A linked list can grow and shrink depending on the amount of data that you store in it, so it uses memory more efficiently than an array does. In addition, although an array is like a box that you divide into sections so that it can hold data, a linked list is more like a collection of separate boxes (known as a node) that you can tie together, as shown in Figure 18-2. The pointer that the last node of a linked list stores points to a special value known as nil. A nil value represents the end of the linked list. Tom Dick Nodes Pointers Harry nil Figure 18-2: A linked list consists of nodes that contain data and a pointer to the next node in the list. Tom Dick Harry John Dick DIM NameArray(4) AS STRING Harry John Tom Figure 18-1: To rearrange data in an array, empty out the array and then put data back in. 243 Chapter 18: Linked Lists and Pointers Unlike in an array, you don\u2019t need to remove data just to rearrange it in a linked list. Instead, you can rearrange the data in a linked list by simply rear- ranging the order of the pointers, as shown in Figure 18-3. Although variables normally contain numbers or strings, a pointer contains a memory address, which works much like a mailing address. By reading the memory address, the computer can find its way to the next chunk of data that you\u2019re storing in a node. Pointers are a main part of C/C++ programming. Because a pointer represents a memory address, you can really mess up your C/C++ programs if even one pointer contains the wrong memory address. If this happens, your program can directly manipulate your computer\u2019s memory, which is like randomly probing your brain with a long, sharp needle. Using pointers incorrectly (like using brain surgery incorrectly) can mess up your computer\u2019s memory, caus- ing it to crash, freeze up, or simply act erratically. Defining the parts of a linked list A linked list consists of one or more nodes, where each node contains the following: \u0002 A pointer that points to the next node in"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "a memory address, you can really mess up your C/C++ programs if even one pointer contains the wrong memory address. If this happens, your program can directly manipulate your computer\u2019s memory, which is like randomly probing your brain with a long, sharp needle. Using pointers incorrectly (like using brain surgery incorrectly) can mess up your computer\u2019s memory, caus- ing it to crash, freeze up, or simply act erratically. Defining the parts of a linked list A linked list consists of one or more nodes, where each node contains the following: \u0002 A pointer that points to the next node in your linked list \u0002 A record for storing data in the linked list Tom Dick Harry nil Tom Dick Harry nil Figure 18-3: To rearrange data in a linked list, you just need to rearrange a pointer. Liberty BASIC doesn\u2019t offer commands for creating pointers, so the following code examples use the Pascal programming language, which looks enough like English that you can almost certainly understand how it works. If this subject looks too confusing, just browse over the Pascal programs in this chapter and look at the figures in this chapter to get a general idea of how linked lists work. To create a linked list in Pascal, you must first create a pointer, as follows: TYPE PointerName = ^RecordType; This code tells the computer, \u201cCreate the data type PointerName. This data type can hold the memory address that defines the location of the record type RecordType.\u201d After creating a pointer to a record, you create the actual record itself. The following record, for example, stores the string variable FullName; a second string variable, Address; and the pointer variable Next: TYPE PointerName = ^RecordType; RecordType = RECORD FullName : string[15]; Address : string[25]; Next : PointerName; END; After you define a pointer and a record, the third step is to define a variable to represent your record. This variable creates each node of your linked list, as follows: VAR Node : PointerName; By putting this code all together, you create a program that looks as follows: PROGRAM LinkedLists; TYPE PointerName = ^RecordType; RecordType = RECORD FullName : string[15]; Address : string[25]; Next : PointerName; END; VAR Node : PointerName; 244 Part IV: Dealing with Data Structures 245 Chapter 18: Linked Lists and Pointers The preceding Pascal program tells the computer to perform the following tasks: 1. The first line tells the computer, \u201cThis is the beginning of my program that I call LinkedLists.\u201d 2. The second line contains just the word TYPE, which tells the computer, \u201cGet ready to define a pointer and a record.\u201d 3. The third line defines the data type PointerName, which points to any record by the name of RecordType. 4. The fourth line defines the name of the record RecordType. 5. The fifth line tells the computer, \u201cCreate the variable FullName, which can hold up to 15 characters.\u201d 6. The sixth line tells the computer, \u201cCreate the variable Address, which can hold up to"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "tells the computer, \u201cThis is the beginning of my program that I call LinkedLists.\u201d 2. The second line contains just the word TYPE, which tells the computer, \u201cGet ready to define a pointer and a record.\u201d 3. The third line defines the data type PointerName, which points to any record by the name of RecordType. 4. The fourth line defines the name of the record RecordType. 5. The fifth line tells the computer, \u201cCreate the variable FullName, which can hold up to 15 characters.\u201d 6. The sixth line tells the computer, \u201cCreate the variable Address, which can hold up to 25 characters.\u201d 7. The seventh line tells the computer, \u201cCreate the variable Next, which can point to another record that RecordType defines.\u201d 8. The eighth line tells the computer, \u201cThis line is the end of the record def- inition RecordType.\u201d 9. The ninth line contains just the word VAR, which tells the computer, \u201cGet ready to define one or more variables.\u201d 10. The tenth line tells the computer, \u201cCreate the variable Node, which rep- resents a pointer to a record that RecordType defines.\u201d (This variable pointer defines a single node in your linked list.) Don\u2019t worry if linked lists look confusing at this point. The remaining figures in this chapter clarify how linked lists work. Creating a linked list After you define a record to hold your data, a pointer to point to each record, and a variable to represent each node in your linked list, you still need to create your linked list. You need to follow three additional steps to create a linked list. The following steps are as shown in Figure 18-4: 1. Create a node. 2. Store data in that node. 3. Rearrange pointer to insert a new node in the beginning, middle, or end of the linked list. 246 Part IV: Dealing with Data Structures To see how a Pascal program creates a node and stores data in it, take a look at the following bit of code: PROGRAM LinkedLists; TYPE PointerName = ^RecordType; RecordType = RECORD FullName : string[15]; Address : string[25]; Next : PointerName; END; VAR Node : PointerName; BEGIN New(Node); Node^.FullName := \u2018Jonathan Blake\u2019; Node^.Address := \u2018837 Dead-End Avenue\u2019; Node^.Next := nil; END. Tom Tom Dick Harry nil Step 1: Create a new node. Step 2: Stuff data into the new node. Step 3: Rearrange your pointers to insert the new node in the beginning, middle, or end of your linked list. Figure 18-4: The three steps to follow to create a linked list. 247 Chapter 18: Linked Lists and Pointers Starting from the word BEGIN, this program tells the computer to do the following: If you want to understand the code that appears before the line containing the BEGIN command, refer to the previous section \u201cDefining the parts of a linked list.\u201d 1. The BEGIN line tells the computer, \u201cThis line is the start of the instruc- tions to follow.\u201d 2. The second line creates a new node. At this point,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "in the beginning, middle, or end of your linked list. Figure 18-4: The three steps to follow to create a linked list. 247 Chapter 18: Linked Lists and Pointers Starting from the word BEGIN, this program tells the computer to do the following: If you want to understand the code that appears before the line containing the BEGIN command, refer to the previous section \u201cDefining the parts of a linked list.\u201d 1. The BEGIN line tells the computer, \u201cThis line is the start of the instruc- tions to follow.\u201d 2. The second line creates a new node. At this point, the node contains nothing. 3. The third line stores the name Jonathan Blake in the FullName variable of the node record. 4. The fourth line stores the address 837 Dead-End Avenue in the Address variable of the node record. 5. The fifth line stores the value nil in the Next pointer. A nil value means that the pointer doesn\u2019t point to anything. Using a nil value keeps the pointer from accidentally pointing to another part of the computer\u2019s memory. If you create a second node, you want the value of Node^.Next to point to this second node. Managing a linked list If you store data in an array and you delete a chunk of data in the middle of the array, you wind up with an empty spot in your array. Although that par- ticular location in the array stores nothing, the computer must still allocate memory for that empty part of the array. Even worse, now your array con- tains an empty gap that you must skip over to find the next chunk of data in the array, as shown in Figure 18-5. Tom Dick Harry John Tom Harry John Empty array location Figure 18-5: Deleting data in the middle of an array leaves an empty gap. Deleting data from a linked list is easy \u2014 just follow these two steps: 1. Rearrange the pointers of the nodes so that they ignore the node con- taining the data that you want to erase. 2. Delete the node containing the data that you want to erase. Figure 18-6 illustrates the process of deleting data in a linked list. Writing the actual instructions to tell the computer to rearrange pointers and delete a node is often fairly lengthy. So although arrays can prove inefficient in terms of memory storage, arrays are much simpler to use and manage. On the other hand, linked lists are more efficient in storing data in memory, but they can become really troublesome to manage because you must write many instructions just to accomplish something as seemingly simple as rearranging a pointer. Tom Dick Harry nil nil Tom Dick Harry nil Tom Dick Harry Figure 18-6: Deleting data in a linked list saves memory by avoiding empty gaps. 248 Part IV: Dealing with Data Structures Making Data Structures with Linked Lists The simplest linked list is a single-linked list, in which each node contains data and one"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "much simpler to use and manage. On the other hand, linked lists are more efficient in storing data in memory, but they can become really troublesome to manage because you must write many instructions just to accomplish something as seemingly simple as rearranging a pointer. Tom Dick Harry nil nil Tom Dick Harry nil Tom Dick Harry Figure 18-6: Deleting data in a linked list saves memory by avoiding empty gaps. 248 Part IV: Dealing with Data Structures Making Data Structures with Linked Lists The simplest linked list is a single-linked list, in which each node contains data and one pointer that points to another node in the linked list (refer to Figure 18-2). The trouble with a single-linked list is that each node points only to the next node. If you want to find the previous node, you can\u2019t. In Figure 18-2, for exam- ple, the middle node (containing the name Dick) points only to the node con- taining the name Harry. But you can\u2019t tell which name appears before Dick. In this case, an array is much simpler, because an array can identify which data appears before and which data appears after a specific array location. You can arrange linked lists in a variety of ways to create different types of data structures. Because data structures do nothing more than hold data, choosing the right data structure can make your program easier to write. (And choosing the wrong data structure can make your program harder to write.) A personal organizer program that stores names and addresses, for example, may use a linked list of records. The program can expand or shrink the linked list, depending on the number of names and addresses the user stores. The type of program that you\u2019re writing can determine the type of data structure you need (or should use). That\u2019s what makes linked lists so powerful \u2014 they can create a variety of different data structures. Don\u2019t worry about the details of creating different data structures with linked lists. Just remain aware that different data structures exist \u2014 and you usually run into these different data structures later on if you continue learning about computer programming. Double-linked lists The problem with a single-linked list is that each node can identify only the next node but not the preceding node. To solve this problem, you can create a double-linked list, in which each node contains data and two pointers. One pointer points to the next node in the linked list, and the second pointer points to the previous node in the linked list, as shown in Figure 18-7. 249 Chapter 18: Linked Lists and Pointers 250 Part IV: Dealing with Data Structures A personal-organizer program is likely to use a double-linked list to enable the user to scroll forward and backward through the linked list to view all the names and addresses that you store in the personal-organizer program. Creating a double-linked list means writing instructions to manage twice as many pointers, which essentially"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "contains data and two pointers. One pointer points to the next node in the linked list, and the second pointer points to the previous node in the linked list, as shown in Figure 18-7. 249 Chapter 18: Linked Lists and Pointers 250 Part IV: Dealing with Data Structures A personal-organizer program is likely to use a double-linked list to enable the user to scroll forward and backward through the linked list to view all the names and addresses that you store in the personal-organizer program. Creating a double-linked list means writing instructions to manage twice as many pointers, which essentially doubles the chances that you may leave a pointer dangling (that is, pointing to a nonexistent node) or pointing to the wrong node. In either case, incorrect pointers can cause subtle, yet serious bugs in your program, so use pointers sparingly. Circular-linked lists A typical double-linked list looks like a long rectangle with a beginning and an end (refer to Figure 18-7). But instead of creating an artificial end and begin- ning, you can link both ends of a single-linked list or a double-linked list to create a circular-linked list, as shown in Figure 18-8. A circular-linked list may prove useful for a presentation program that needs to display information continuously, such as a presentation in a museum kiosk. In this case, the presentation program may display information one screen at a time and then begin again after it reaches the end of the presentation. Tom Dick Harry Figure 18-8: A circular- linked list displays no beginning or ending. Tom Dick Harry nil nil Figure 18-7: A double- linked list uses two pointers to point at nodes that appear before and after each linked node. 251 Chapter 18: Linked Lists and Pointers Stacks A stack is a special single-linked list that enables you to add and remove nodes only at the beginning of the linked list (see Figure 18-9). In the real world, the most common implementation of a stack occurs as you stack plates. If you want to store a new plate, you simply add it to the top of the stack. If you want to remove a plate, you take it off the top of the stack as well. One common use for stacks is for calculating formulas by using a method known as Reverse Polish Notation (RPN), which is a method of calculation that many Hewlett-Packard calculators use. If you want to calculate the formula (1 + 2) * 3 by using RPN, you type the following: 1 2 + 3 * Figure 18-9 shows how a stack stores the five steps that you need to calculate the formula (1 + 2) * 3 by using Reverse Polish Notation. Here\u2019s how it works: 1. The first step pushes the number 1 to the top of the stack. 2. The second step pushes the number 2 to the top of the stack and pushes the number 1 underneath. 3. The third step pops the number 2 off the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "use. If you want to calculate the formula (1 + 2) * 3 by using RPN, you type the following: 1 2 + 3 * Figure 18-9 shows how a stack stores the five steps that you need to calculate the formula (1 + 2) * 3 by using Reverse Polish Notation. Here\u2019s how it works: 1. The first step pushes the number 1 to the top of the stack. 2. The second step pushes the number 2 to the top of the stack and pushes the number 1 underneath. 3. The third step pops the number 2 off the stack, pops the number 1 off the stack, and adds the two numbers together to get the number 3. Then it stores the number 3 back on top of the stack. 4. The fourth step pushes the number 3 (from the formula) to the top of the stack and pushes the calculated value of 3 farther down the stack. 1 2 1 3 3 3 9 Step 1 Formula: (1 + 2) * 3 Reverse Polish Notation: 1 2 + 3 * Step 2 Step 3 Step 4 Step 5 Figure 18-9: A stack adds data to and removes data from the top of a stack (linked list). 252 Part IV: Dealing with Data Structures 5. The fifth step pops the first number 3 off the stack, pops the second number 3 off the stack, and multiplies the two number 3s to get the number 9. Then it stores the number 9 back on top of the stack. Stacks are often referred to as LIFO (which stands for Last In, First Out) linked lists. This term means that the last data that you store in a stack is the first data that you remove from the stack (just as in stacking and removing plates). Don\u2019t worry if you don\u2019t understand the logic behind Reverse Polish Notation. Just understand how stacks work and leave Reverse Polish Notation for the engineers at Hewlett-Packard. Queues A queue is a special linked list that follows two rules. The first rule is that you can add nodes only to the end of the linked list. The second rule is that you can remove nodes only from the beginning of the linked list. You often refer to queues as FIFO (which stands for First In, First Out) linked lists. This term means that the first data that you store in the queue is the first data that you remove from the queue. A queue mimics a line of people waiting to board an airplane or see a science-fiction movie. In both cases, the first person (data) put in the queue is the first person (data) who leaves it, as shown in Figure 18-10. Tom Dick Harry Tom Dick Tom Dick Harry Mike Tom Dick John Step 1 Step 2 Step 3 Step 4 Front Figure 18-10: A queue stores new data at the end and removes the oldest data from the front. 253 Chapter 18: Linked"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "that you store in the queue is the first data that you remove from the queue. A queue mimics a line of people waiting to board an airplane or see a science-fiction movie. In both cases, the first person (data) put in the queue is the first person (data) who leaves it, as shown in Figure 18-10. Tom Dick Harry Tom Dick Tom Dick Harry Mike Tom Dick John Step 1 Step 2 Step 3 Step 4 Front Figure 18-10: A queue stores new data at the end and removes the oldest data from the front. 253 Chapter 18: Linked Lists and Pointers The following steps (along with Figure 18-10) explain how a queue stores and removes data: 1. The first step shows a queue in which the name John is first, the name Harry is second, the name Dick is third, and the name Tom is fourth and last. 2. The second step removes John from the queue. Now all the remaining names move closer to the front of the queue. 3. The third step removes Harry from the queue. All the remaining names move closer to the front of the queue. 4. The fourth step adds a new name, Mike, to the queue. Because Mike is the newest data adding itself to the queue, its place is at the back of the queue. Trees Linked lists don\u2019t always need to resemble a linear or circular shape. The most common nonlinear shape for a linked list is a tree, in which one node (the root) represents the top of the tree with the rest of the nodes (leaves) falling underneath the root, as shown in Figure 18-11. In a tree, a node can point to zero or more nodes. For simplicity, many pro- grammers use a special tree known as a binary tree, in which each node can link only to zero, one, or two other nodes. Root Level 0 Level 1 Level 2 Level 3 Figure 18-11: A tree is a nonlinear linked list. 254 Part IV: Dealing with Data Structures Programmers often use trees to mimic artificial intelligence in programs, such as in chess-playing programs. A chess-playing program may use a tree in which the root represents a possible move for the first player and the leaf nodes underneath (at level 1) represent potential moves that the second player can make. Then the leaf nodes at level 2 represent potential moves for the first player, and the leaf nodes at level 3 represent potential moves for the second player, and so on. Graphs A graph is a linked list in which each node can point to one or more nodes without regard to mimicking a certain shape, such as a list. Figure 18-12 shows what a typical graph looks like. Programmers often use graphs in something known as a neural network \u2014 a special program that can mimic the way the brain thinks. In a neural network, each node represents a neuron and the links between them"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "2 represent potential moves for the first player, and the leaf nodes at level 3 represent potential moves for the second player, and so on. Graphs A graph is a linked list in which each node can point to one or more nodes without regard to mimicking a certain shape, such as a list. Figure 18-12 shows what a typical graph looks like. Programmers often use graphs in something known as a neural network \u2014 a special program that can mimic the way the brain thinks. In a neural network, each node represents a neuron and the links between them represent the synapses linking the neurons. Graphs, trees, queues, stacks, circular-linked lists, and double-linked lists are just different ways to arrange and use a linked list. The more complicated your programs become, the more you\u2019re likely to need these advanced data structures. Figure 18-12: A graph enables nodes to link to one another any way that you choose. Chapter 19 Playing with Object-Oriented Programming In This Chapter \u0001 Understanding the problem with software \u0001 Making programming easier \u0001 Breaking programs into objects \u0001 Choosing an object-oriented language O bject-oriented programming is the latest fad (or, to use correct program- ming lingo, the latest methodology) for pursuing the following Holy Trinity of characteristics that programmers want for their software: \u0002 Simple and fast to create \u0002 Easy to understand and modify \u0002 Reliable and error-free People often abbreviate object-oriented programming as OOP, as in \u201cOops \u2014 I don\u2019t think that object-oriented programming alone can magically make pro- gramming any easier.\u201d Liberty BASIC isn\u2019t an object-oriented language, which means that you can\u2019t experiment with using objects in Liberty BASIC. Although most versions of BASIC don\u2019t support objects, Microsoft has tortured the BASIC dialect in Visual Basic into offering object-oriented programming features. If you want to find out more about object-oriented programming using BASIC, pick up a copy of Visual Basic and a copy of Visual Basic.NET For Dummies (written by yours truly and published by Wiley Publishing) today. To show how object- oriented programming works, the examples in this chapter use C++. The Problem with Software No matter how powerful a computer is, the software that controls it limits its power. The biggest problem with software is reliability. Reliability means that software works without crashing, freezing up, or acting erratically. Software reliability is especially critical with real-time systems, such as airplane navi- gation systems, computers that host corporate Web sites, and financial trad- ing programs, where losing a single number can mean the loss of billions of dollars. Of course, reliable software is useless if you can\u2019t write it in time. Because of the conflicting demands that companies and programmers finish software on time and make sure that it works reliably, most rush their software out before they can fully test it (which means that it probably doesn\u2019t work right), or they delay the software so long that people switch to a competing product. (And those who wait still have no guarantee"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "gation systems, computers that host corporate Web sites, and financial trad- ing programs, where losing a single number can mean the loss of billions of dollars. Of course, reliable software is useless if you can\u2019t write it in time. Because of the conflicting demands that companies and programmers finish software on time and make sure that it works reliably, most rush their software out before they can fully test it (which means that it probably doesn\u2019t work right), or they delay the software so long that people switch to a competing product. (And those who wait still have no guarantee that the software\u2019s going to work correctly, even if it\u2019s several years late.) Whatever fancy new technology, programming language, or programming style may appear, software always faces the twin challenge of working right while reaching users as quickly as possible. This situation means that all software is likely to contain bugs that keep it from working as efficiently as possible. Ways to Make Programming Easier In the early days of computers, most programs were fairly small. As a result, programmers often wrote programs with little planning and organization. After finishing the program, they\u2019d run it to see whether it worked. If it didn\u2019t work, they simply rewrote the program and tried again. Such a trial-and-error approach worked fine for writing small programs, but after programs became larger and more complex, rewriting the program over and over made programming tedious and error-prone. The larger the pro- gram, the more places bugs could hide, making the program more likely not to work at all. With today\u2019s programs often consisting of a million or more lines of code, the trial-and-error method of writing programs no longer works. Writing a large program without planning or organization is like trying to build a skyscraper without blueprints. 256 Part IV: Dealing with Data Structures 257 Chapter 19: Playing with Object-Oriented Programming Programmers adopted a new strategy. Instead of trying to write one huge pro- gram, they decided to write a bunch of little programs (known as subprograms). The idea was that small programs are easier to write and debug, so you just need to write a bunch of small programs, paste them together, and end up with a larger program that works reliably, as shown in Figure 19-1. Although the idea of writing small subprograms and pasting them together like building blocks was a sound idea, problems still existed. You may divide a large program into smaller subprograms, but the instructions that you store in one subprogram can still manipulate data that another subprogram uses, as shown in Figure 19-2. To solve this problem (and solving problems is something that programmers continually strive to do), programmers developed the idea of isolating sub- programs in separately compiled files. In this way, subprograms can\u2019t mess around with each other\u2019s data, and yet they can still work together to create one larger program. Taking the idea of isolating subprograms into separate and isolated parts (known as modules in programming"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "problems still existed. You may divide a large program into smaller subprograms, but the instructions that you store in one subprogram can still manipulate data that another subprogram uses, as shown in Figure 19-2. To solve this problem (and solving problems is something that programmers continually strive to do), programmers developed the idea of isolating sub- programs in separately compiled files. In this way, subprograms can\u2019t mess around with each other\u2019s data, and yet they can still work together to create one larger program. Taking the idea of isolating subprograms into separate and isolated parts (known as modules in programming lingo), programmers eventually devel- oped the idea for objects and, hence, the term object-oriented programming. One huge continuous program A large program divided into several subprograms Figure 19-1: Breaking a large program into smaller subpro- grams can make programs easier to write. 258 Part IV: Dealing with Data Structures Breaking Programs into Objects After programmers succeeded in breaking a large program into smaller sub- programs, the next logical step was to isolate both data and the instructions that manipulate that data into an individual unit \u2014 in other words, an object. A program consists of one or more objects in which each object is a self- contained unit that contains the following two items: \u0002 Data (also known as properties) \u0002 Instructions (also known as methods) for manipulating that data Because an object doesn\u2019t depend on any other part of your program, design- ing a program by using objects provides the following benefits: \u0002 Reliability: If your program doesn\u2019t work, you just need to isolate the bug in a single object and debug that one object instead of trying to debug an entire program that may contain a million lines of code. \u0002 Reusability: Because objects are self-contained units, you can (theoreti- cally) copy an object from one program and plug it into another pro- gram, much like making a structure by using building blocks. Reusing objects not only simplifies creating new programs, but also helps create new programs faster because you can reuse objects that already work. Subprogram A Subprogram A messes up data used by subprogram D Subprogram F messes up data used by subprogram B Subprogram B Subprogram D Subprogram F Figure 19-2: Instructions from one subprogram can accidentally modify data that another subprogram uses. 259 Chapter 19: Playing with Object-Oriented Programming In a traditionally designed program, you often store data in one location and the instructions that manipulate that data in another location. Figure 19-3 shows a traditional program divided into subprograms (represented by boxes). Each subprogram can access the data it needs, but can also access data used by another subprogram. In comparison, an object-oriented program (depicted as ovals in Figure 19-3) lumps data and the instructions that manipulate that data in a single location (known by its official programming term as encapsulation). Encapsulation simply keeps one part of a program from messing with data that another part of the program uses. How to use"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "you often store data in one location and the instructions that manipulate that data in another location. Figure 19-3 shows a traditional program divided into subprograms (represented by boxes). Each subprogram can access the data it needs, but can also access data used by another subprogram. In comparison, an object-oriented program (depicted as ovals in Figure 19-3) lumps data and the instructions that manipulate that data in a single location (known by its official programming term as encapsulation). Encapsulation simply keeps one part of a program from messing with data that another part of the program uses. How to use objects One of the biggest problems with programming is the need to constantly modify existing programs. People use most programs for years, if not decades. Rather than write a brand new program to replace an existing one, most companies prefer to modify the existing program. The theory is that modifying an existing program (that already works) takes less time and cre- ates a more reliable program than does creating a brand new program. Getting an inheritance from an object Objects encourage reliability and reusability through a concept known as inheritance. The main idea behind inheritance is to encourage programmers to reuse existing code. In the old days of programming, you could divide a large program into several subprograms. After studying one of your subprograms, you may real- ize that, with a little modification, you could adapt it to work in a second program. Unfortunately, any time that you modify a program, you take the risk of messing it up so that it doesn\u2019t work at all. To prevent the problem of modifying an existing subprogram and wrecking it by mistake, objects use inheritance. Inheritance enables you to copy an existing object and then add new code to this new copy without ever modifying any of the existing code inside. Thus the new copy of your object \u201cinherits\u201d all the old data and code, while still enabling you to tack on new code to modify the object for a slightly different purpose. Inheritance not only protects you from ruining a perfectly good chunk of code by mistake, but it also helps you create programs faster. Copying and modifying an existing object is easier than creating a brand new object from scratch. 260 Part IV: Dealing with Data Structures Unfortunately, constantly modifying an existing program can create a pro- gram as confusing to read as a novel written one page at a time by 300 differ- ent people. In both cases, the overall structure is patched together in so many different ways that it can prove hard to tell where one part ends and another part begins. That\u2019s why object-oriented programming looks so appealing. To modify an object-oriented program, just unplug the object containing the program fea- tures that you want to change, rewrite or replace it, and plug it back into the original program. Best of all, objects make easy work of identifying which part of the program you want to"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "to read as a novel written one page at a time by 300 differ- ent people. In both cases, the overall structure is patched together in so many different ways that it can prove hard to tell where one part ends and another part begins. That\u2019s why object-oriented programming looks so appealing. To modify an object-oriented program, just unplug the object containing the program fea- tures that you want to change, rewrite or replace it, and plug it back into the original program. Best of all, objects make easy work of identifying which part of the program you want to update. Suppose, for example, that a video game displays aliens that pop up on-screen so that you can shoot them in the head. Your job is to modify the way the aliens look and move on-screen. If the video game is written in the traditional way of programming (dividing the program into smaller subprograms), you must figure out which subpro- gram controls the way the alien looks and which subprogram controls the way the alien moves. Even if you manage to find which subprograms control the alien\u2019s appearance and movement, you still must worry whether these subprograms rely on other subprograms lurking somewhere deep within the bowels of your million-line program. Sound complicated? It is \u2014 especially if you\u2019re the one whose job relies on modifying a million-line video game pro- gram in less than two weeks. A typical program divided into subprograms The same program divided into multiple objects Subprogram A Data Object A Data Subprogram C Data Subprogram B Subprogram D Subprogram E Subprogram F Object B Data Object D Data Object C Data Object E Data Figure 19-3: In object- oriented programs, objects isolate data from other objects. 261 Chapter 19: Playing with Object-Oriented Programming But if the video game is written by using object-oriented programming tech- niques, your job is much easier. All you need to do is find the object that rep- resents the alien. Inside that object is all the subprograms you need to modify the way the alien looks and moves. Change this single object, plug it back into the original program, and you\u2019re done. How to create an object The first part to creating an object is to define a class, which is similar to a record. (See Chapter 17 for more information about records.) A class defines data and instructions to manipulate that data. After you create a class, you can create one or more objects based on that class to use in your program. Liberty BASIC doesn\u2019t offer commands for creating objects, so the following code examples use the C++ programming language. Don\u2019t worry about trying to understand the syntax of C++; just browse the code to get a general idea of how the whole thing works. The following example shows how to create a class in C++: class monster { public: int x_coordinate; int y_coordinate; void moveme(int, int); void initialize(int, int); }; Hiding and exposing data in an object"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "manipulate that data. After you create a class, you can create one or more objects based on that class to use in your program. Liberty BASIC doesn\u2019t offer commands for creating objects, so the following code examples use the C++ programming language. Don\u2019t worry about trying to understand the syntax of C++; just browse the code to get a general idea of how the whole thing works. The following example shows how to create a class in C++: class monster { public: int x_coordinate; int y_coordinate; void moveme(int, int); void initialize(int, int); }; Hiding and exposing data in an object Because objects need to communicate with one another, objects can classify their data and instructions into one of three categories: pri- vate, public, and protected. If an object defines data and instructions as pri- vate, only that particular object can use that data and instructions. No other object can ever use private data and instructions. (That\u2019s why you call them private.) On the other hand, other objects can use public data and instructions. Objects use public data and instructions to communicate and share data with other objects. Protected data and instructions work the same as private data and instructions, with one important exception: If you use inheritance to copy an existing object and create a new object, the new object inherits only public and protected data and instructions. Any private data and instructions remain with the old object. 262 Part IV: Dealing with Data Structures This simple C++ code tells the computer to perform the following tasks: 1. The first line tells the computer, \u201cThis line starts a new class, monster.\u201d 2. The second line tells the computer, \u201cThis line is the start of the class definition.\u201d 3. The third line tells the computer, \u201cAny things that appear on the follow- ing lines are public, which means that any part of the program can access them.\u201d 4. The fourth line creates the integer variable x_coordinate. 5. The fifth line creates the integer variable y_coordinate. 6. The sixth line tells the computer, \u201cThe object contains a subprogram (or method), moveme, that accepts two integer values.\u201d 7. The seventh line tells the computer, \u201cThe object contains a subprogram, initialize, that accepts two integer values.\u201d 8. The eighth line defines the end of the class definition. A class isn\u2019t an object. To create an object, you must define a variable that represents your defined class. Writing an object\u2019s methods After you declare the subprograms (or methods) that you want to store in a class, you still need to write the actual instructions that make that subpro- gram. Suppose you want to use the class definition defined in the preceding section in the following example: class monster { public: int x_coordinate; int y_coordinate; void moveme(int, int); void initialize(int, int); }; This class defines two subprograms (or methods), moveme and initialize. To make these methods actually do something, you must write the complete methods directly below the class definition, as follows: 263 Chapter 19: Playing"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "defined class. Writing an object\u2019s methods After you declare the subprograms (or methods) that you want to store in a class, you still need to write the actual instructions that make that subpro- gram. Suppose you want to use the class definition defined in the preceding section in the following example: class monster { public: int x_coordinate; int y_coordinate; void moveme(int, int); void initialize(int, int); }; This class defines two subprograms (or methods), moveme and initialize. To make these methods actually do something, you must write the complete methods directly below the class definition, as follows: 263 Chapter 19: Playing with Object-Oriented Programming void monster::moveme(int new_x, int new_y) { x_coordinate = x_coordinate + new_x; y_coordinate = y_coordinate + new_y; } void monster::initialize(int init_x, int init_y) { x_coordinate = init_x; y_coordinate = init_y; } The initialize method defines the X coordinate and Y coordinate of any object that you derive from the class monster. You use the moveme method to move an object\u2019s position a certain distance in the X (right and left) direction and Y (up and down) direction. Creating an object After you define a class and write any methods that you declare within that class, you still need to define a variable to represent that class. This variable represents the actual object in object-oriented programming. To create an object, you declare a variable to represent that object. The fol- lowing program defines an object named zombie to represent the monster class definition: #include <iostream.h> class monster { public: int x_coordinate; int y_coordinate; void moveme(int, int); void initialize(int, int); }; void monster::moveme(int new_x, int new_y) { x_coordinate = x_coordinate + new_x; y_coordinate = y_coordinate + new_y; } void monster::initialize(int init_x, int init_y) { x_coordinate = init_x; y_coordinate = init_y; } void main() { 264 Part IV: Dealing with Data Structures monster zombie; zombie.initialize(12, 15); cout << \u201cThe X-location of the zombie is \u201c << zombie.x_coordinate << \u201c\\n\u201d; cout << \u201cThe Y-location of the zombie is \u201c << zombie.y_coordinate << \u201c\\n\u201d; zombie.moveme (34, 9); cout << \u201cThe new X-location of the zombie is \u201c << zombie.x_coordinate << \u201c\\n\u201d; cout << \u201cThe new Y-location of the zombie is \u201c << zombie.y_coordinate << \u201c\\n\u201d; } The main C++ program starts with the void main() line. Just examining this portion, line by line, makes the computer do the following: 1. The first line tells the computer, \u201cThis line is the start of the C++ program.\u201d 2. The second line tells the computer, \u201cThis line is the start of all instruc- tions inside the main C++ program.\u201d 3. The third line tells the computer, \u201cCreate the object zombie and base it on the class definition monster.\u201d 4. The fourth line runs the method initialize, which defines the X coor- dinate (12) and Y coordinate (15) of the zombie object. 5. The fifth line prints the message, The X-location of the zombie is 12. 6. The sixth line prints the message, The Y-location of the zombie is 15. 7. The seventh line runs the moveme"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "C++ program.\u201d 2. The second line tells the computer, \u201cThis line is the start of all instruc- tions inside the main C++ program.\u201d 3. The third line tells the computer, \u201cCreate the object zombie and base it on the class definition monster.\u201d 4. The fourth line runs the method initialize, which defines the X coor- dinate (12) and Y coordinate (15) of the zombie object. 5. The fifth line prints the message, The X-location of the zombie is 12. 6. The sixth line prints the message, The Y-location of the zombie is 15. 7. The seventh line runs the moveme method, which moves the zombie object 34 units of measurement in the X direction and 9 units in the Y direction. 8. The eighth line prints the message, The new X-location of the zombie is 46. (That\u2019s 12, the original X-location of the zombie as Step 4 defines, plus 34 as Step 7 defines, which equals 46.) 9. The ninth line prints the message, The new Y-location of the zombie is 24. (That\u2019s 15, the original Y-location of the zombie as Step 4 defines, plus 9 as Step 7 defines, which equals 24.) 10. The tenth line tells the computer, \u201cThis line represents the end of the C++ main program.\u201d Although the C++ program may look confusing, just remember these impor- tant points and you\u2019re fine: \u0002 To create an object, you must define a class first. \u0002 A class contains data and instructions (methods) for manipulating the object\u2019s data. 265 Chapter 19: Playing with Object-Oriented Programming Choosing an Object-Oriented Language After you understand the general principles behind object-oriented program- ming, you may be eager to start trying it out on your own. Liberty BASIC doesn\u2019t support object-oriented programming, so you need to switch to a dif- ferent programming language. The two types of programming languages that you can choose from are as follows: \u0002 Hybrid object-oriented languages \u0002 True (or pure) object-oriented languages A hybrid object-oriented language simply takes an existing language and slaps object-oriented features on top of it. Some of the more popular hybrid lan- guages include Pascal (as implemented in Delphi), BASIC (as implemented in Visual Basic), and C++. The main advantage of using a hybrid language is that if you already know how to use a language such as Pascal, BASIC, or C++, you can quickly learn to use the object-oriented features of these languages with a minimum of train- ing, anguish, and experimentation. If you\u2019re not quite sure about the benefits Common terms associated with object-oriented programming Although you aren\u2019t likely to become an expert in object-oriented programming from this brief introduction, you can at least understand the purpose behind objects, which is to make mod- ifying and reusing programs easier. If you plan to continue studying computer pro- gramming, you\u2019re likely to run into object-ori- ented programming over and over (or at least until a new programming methodology pops up to make programming easier). To add to your limited knowledge of object-oriented program-"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "with a minimum of train- ing, anguish, and experimentation. If you\u2019re not quite sure about the benefits Common terms associated with object-oriented programming Although you aren\u2019t likely to become an expert in object-oriented programming from this brief introduction, you can at least understand the purpose behind objects, which is to make mod- ifying and reusing programs easier. If you plan to continue studying computer pro- gramming, you\u2019re likely to run into object-ori- ented programming over and over (or at least until a new programming methodology pops up to make programming easier). To add to your limited knowledge of object-oriented program- ming, remember the following common object- oriented terms that you\u2019re likely to see at one time or another: \u0002 Encapsulation means lumping all related data and instructions to manipulate that data in a single location. \u0002 Inheritance means passing data and instructions from one object to a second object that derives from the first object. \u0002 Message is a subprogram (also known as a method) that manipulates the data inside an object. \u0002 Object is a collection of data and instruc- tions for manipulating that data, grouped together in a self-contained unit. of object-oriented programming, you can write a small part of your program using objects and write the bulk of your program using old-fashioned pro- gramming methods. Of course, the main disadvantage of hybrid languages is that they enable pro- grammers to mix traditional and object-oriented programming techniques, which can become an untidy mess. Hybrid languages enable programmers to use none, some, or all object-oriented programming techniques, so using hybrid languages often creates programs that don\u2019t take full advantage of objects, destroying the advantage of using objects while making the program harder to read and understand. That\u2019s why many people prefer pure object-oriented languages that force you to use objects right from the start. Some popular pure object-oriented lan- guages include the following: \u0002 SmallTalk \u0002 Eiffel \u0002 C# \u0002 Java Whether you decide to stick to a conventional language (and use its object- oriented hybrid) or jump straight into a pure object-oriented language, get used to the idea behind breaking your program into objects. Object-oriented programming techniques alone don\u2019t make software easier to write and more reliable, but they can make you more aware of the problems in writing soft- ware and how object-oriented programming can solve those problems. In the long run, nobody really cares what language you use, whether you use any object-oriented programming techniques, or whether you write software while sitting in your underwear and listening to Barry Manilow albums at 3 a.m. The important point is to write software on time that works. If you can do that, you can focus on producing results and leave trivial details, such as wearing a tie, dealing with corporate politics, and fighting each other for a cubicle near a window, for your co-workers to worry about. 266 Part IV: Dealing with Data Structures Part V Algorithms: Telling the Computer What to Do In this part . ."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "you use, whether you use any object-oriented programming techniques, or whether you write software while sitting in your underwear and listening to Barry Manilow albums at 3 a.m. The important point is to write software on time that works. If you can do that, you can focus on producing results and leave trivial details, such as wearing a tie, dealing with corporate politics, and fighting each other for a cubicle near a window, for your co-workers to worry about. 266 Part IV: Dealing with Data Structures Part V Algorithms: Telling the Computer What to Do In this part . . . A program is nothing more than a list of instructions, but you can create instructions in various ways to tell the computer how to perform the same task. If you want to give directions to tell someone how to get from the airport to your house, for example, you probably can tell that person two or three different ways. Each way eventually gets the person to your house, but one way may prove easier, another way may prove faster during the day, and the third way may prove more scenic. In the world of computer programming, a speci\ufb01c way to accomplish a task is known as an algorithm. By choosing the fastest set of instructions (the algorithm), you can make your program faster and more ef\ufb01cient. This part of the book introduces you to several common algorithms for accomplishing different tasks so that you can under- stand the foundation on which you build most programs. Chapter 20 Sorting In This Chapter \u0001 Sorting data in many ways \u0001 Picking a sorting algorithm P rograms typically accept data from the outside world (such as from someone typing on the keyboard), manipulate that data somehow, and spit that data back out in a format that someone finds useful. A database is fairly useless if it enables you to store information without enabling you to do anything to rearrange that information. You may, for example, want to rearrange your data alphabetically by last name, numeri- cally by telephone area code, or by some other criterion, such as by those people who\u2019re single and earn $75,000 or more every year. Your program needs to know how to sort data. Although sorting may seem a fairly mundane topic, it can actually get rather complex. That\u2019s because whenever a program sorts data, it needs to sort the information as quickly as possible. After all, a program that sorts names and addresses is useless if it takes three hours just to sort 15 names. So part of computer science centers on studying and developing the most efficient sorting methods (known as sorting algorithms) possible. Because many types of programs need to sort data, nearly every programmer needs to know the different sorting algorithms available and how they work. Throughout this chapter, you can type various Liberty BASIC programs and see for yourself exactly how a particular sorting algorithm does its sorting magic. Computer scientists have created"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "sort the information as quickly as possible. After all, a program that sorts names and addresses is useless if it takes three hours just to sort 15 names. So part of computer science centers on studying and developing the most efficient sorting methods (known as sorting algorithms) possible. Because many types of programs need to sort data, nearly every programmer needs to know the different sorting algorithms available and how they work. Throughout this chapter, you can type various Liberty BASIC programs and see for yourself exactly how a particular sorting algorithm does its sorting magic. Computer scientists have created a variety of sorting algorithms \u2014 but no single, perfect algorithm that your program should use all the time. The most efficient algorithm depends partly on the data that you want to sort and partly on the data structures that your program uses to store data. 270 Part V: Algorithms: Telling the Computer What to Do Insertion Sort Imagine that you\u2019re playing cards and the dealer deals the cards to you. As soon as you get two cards, your first inclination is probably to sort those two cards in relation to one another (perhaps by suit or by number). After the dealer gives you a third card, you sort that card in relation to your previous two cards. You sort each additional card that you receive in relation to your previously sorted cards. This method is how an insertion sort works (see Figure 20-1). From the computer\u2019s point of view, the insertion sort algorithm works as follows: 1. It compares the first two items in the list and sorts those two items. 2. It looks at the next item in the list and sorts that item in relation to the previously sorted items. Measuring efficiency with Big-O notation To measure the efficiency of specific algo- rithms, computer scientists created something known as Big-O notation. Essentially, Big-O notation measures the speed of a particular algorithm (such as a sorting algorithm) based on the number of items it must manage. If you have an algorithm that sorts a list of names alphabetically, for example, the speed of that algorithm depends on the number of names to search. In Big-O notation, you express this relationship as O(N), where O stands for \u201corder of magnitude\u201d and N stands for the total number of items the algorithm must manage. The way that programmers determine the Big-O notation of a particular algorithm depends on that algorithm\u2019s speed of execution and the number of items it must handle. For example, if an algorithm\u2019s speed of execution and number of items (N) it can handle is expressed as N2 + N + 1, the Big-O notation for this algorithm is O(N2). In calculating the Big-O notation for an algo- rithm, you choose the fastest-growing item (in this case, N2) and ignore the rest of the expression. (Naturally, if you use the wrong expression to represent your algorithm, your Big-O notation is wrong as well.) Programmers often use Big-O"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Big-O notation of a particular algorithm depends on that algorithm\u2019s speed of execution and the number of items it must handle. For example, if an algorithm\u2019s speed of execution and number of items (N) it can handle is expressed as N2 + N + 1, the Big-O notation for this algorithm is O(N2). In calculating the Big-O notation for an algo- rithm, you choose the fastest-growing item (in this case, N2) and ignore the rest of the expression. (Naturally, if you use the wrong expression to represent your algorithm, your Big-O notation is wrong as well.) Programmers often use Big-O notation to mea- sure the average and worst-case scenarios as they study how an algorithm behaves while managing a typical number of items and how that same algorithm behaves while managing an extremely large number of items. Not surprisingly, some algorithms are fast at managing relatively small numbers of items but slow down rapidly if you force them to manage a large number of items. Curiously, other algo- rithms are very fast and efficient in sorting items that are almost correctly sorted initially but slow if sorting items that you randomly scatter in the list. Programmers study the average and worst- case scenarios of an algorithm by using Big-O notation to help them choose the algorithm that\u2019s best suited for their particular program. 271 Chapter 20: Sorting 3. It repeats Step 2 for each additional item in the list until it finishes sort- ing the entire list. To see for yourself how the insertion sort algorithm works, try the following program: MaxSize = 5 REDIM MyArray(MaxSize) FOR I = 1 TO MaxSize MyArray(I) = INT(RND(1) * 100) + 1 PRINT MyArray(I); SPACE$(1); NEXT I PRINT \u201c(Initial array)\u201d FOR ArrayPos = 2 TO MaxSize TempValue = MyArray(ArrayPos) StopNow = 0 Count = 1 Time2Stop = 0 WHILE (Time2Stop = 0) IF TempValue < MyArray(Count) THEN FOR J = ArrayPos TO Count STEP -1 MyArray(J) = MyArray(J - 1) NEXT J MyArray(Count) = TempValue StopNow = 1 FOR I = 1 TO MaxSize PRINT MyArray(I); SPACE$(1); NEXT I PRINT END IF 15 Initial list 4 78 29 16 78 29 16 29 16 16 4 15 4 15 78 4 15 29 78 4 15 16 29 78 Sorted portion of the list Unsorted portion of the list Figure 20-1: An insertion sort removes one item at a time and sorts it in relation to the previous sorted items in the list. 272 Part V: Algorithms: Telling the Computer What to Do Count = Count + 1 IF (StopNow = 1) OR (Count = ArrayPos) THEN Time2Stop = 1 END IF WEND NEXT ArrayPos FOR I = 1 TO MaxSize PRINT MyArray(I); SPACE$(1); NEXT I PRINT \u201c(Sorted array)\u201d END A typical output for this program appears as follows: 44 4 98 99 26 (Initial array) 4 44 98 99 26 4 26 44 98 99 4 26 44 98 99 )Sorted array) The insertion sort program works as follows: 1. The first"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "in relation to the previous sorted items in the list. 272 Part V: Algorithms: Telling the Computer What to Do Count = Count + 1 IF (StopNow = 1) OR (Count = ArrayPos) THEN Time2Stop = 1 END IF WEND NEXT ArrayPos FOR I = 1 TO MaxSize PRINT MyArray(I); SPACE$(1); NEXT I PRINT \u201c(Sorted array)\u201d END A typical output for this program appears as follows: 44 4 98 99 26 (Initial array) 4 44 98 99 26 4 26 44 98 99 4 26 44 98 99 )Sorted array) The insertion sort program works as follows: 1. The first through seventh lines create the variable MaxSize, which equals 5; create the array MyArray to hold five integers; generate a random number; create a random number between 1 and 100; store it in the array MyArray; and then print the array on-screen along with the string (Initial array). 2. The eighth line is the start of a FOR-NEXT loop that starts counting from the second item in the array, using the variable ArrayPos. 3. The ninth line creates the variable TempValue and stores the value in the array location that the ArrayPos variable designates. At the begin- ning of this FOR-NEXT loop, the value of TempValue is equal to the second item in the array. 4. The tenth line creates the variable StopNow and sets its value to zero. You use the StopNow variable later in the program to tell the computer that it\u2019s already moved a number to its correctly sorted position in the array. 5. The eleventh line creates the variable Count and sets its value to one. You use the Count variable to locate where in the array to move the number that the TempValue variable stores. 6. The twelfth line creates the variable Time2Stop and sets its value to zero. You use the Time2Stop variable to tell the program when the array is completely sorted. 7. The thirteenth line is the start of a WHILE-WEND statement that checks whether the value that the Time2Stop variable stores is still equal to zero. If so, all the instructions inside the WHILE-WEND statements run. 273 Chapter 20: Sorting 8. The fourteenth line is the start of an IF THEN statement that checks whether the value that the TempValue variable (which represents the number that you want to sort) stores is less than the value that the array position that the Count variable specifies stores. The first time that this line runs, it checks whether the second item in the list is less than the first item. 9. The fifteenth through seventeenth lines form a FOR-NEXT loop that moves each item in the array down (to the right) one position to make room for inserting the TempValue number in its sorted place in the array. 10. The eighteenth line moves the number that TempValue stores to its newly sorted position in the array location that the Count variable specifies. 11. The nineteenth line sets the value of the StopNow variable"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the Count variable specifies stores. The first time that this line runs, it checks whether the second item in the list is less than the first item. 9. The fifteenth through seventeenth lines form a FOR-NEXT loop that moves each item in the array down (to the right) one position to make room for inserting the TempValue number in its sorted place in the array. 10. The eighteenth line moves the number that TempValue stores to its newly sorted position in the array location that the Count variable specifies. 11. The nineteenth line sets the value of the StopNow variable to 1. This line tells the computer that it\u2019s correctly sorted the number that the TempValue variable stores. 12. The twentieth through twenty-third lines print the partially sorted array on-screen so that you can see its progress. 13. The twenty-fourth line is the end of the IF THEN statement that starts on the fourteenth line. 14. The twenty-fifth line increases the value of the Count variable. 15. The twenty-sixth through twenty-eighth lines check to see whether the StopNow variable is equal to one or whether the Count variable is equal to the value that the ArrayPos variable stores. If so, the Time2Stop vari- able is set to one. 16. The twenty-ninth line is the end of the WHILE loop that begins on the thirteenth line. 17. The thirtieth line is the end of the FOR loop that begins on the eighth line. 18. The thirty-first through thirty-fourth lines print the final sorted array on- screen, along with the message (Sorted array). 19. The thirty-fifth line tells the computer that the program is at an end. Bubble Sort The bubble-sort algorithm bears that name because individual items in a list appear to \u201cbubble up\u201d to their correct locations. The bubble-sort algorithm examines a list of items repeatedly and sorts adjacent items until it sorts the entire list, as shown in Figure 20-2. Your computer handles a bubble-sort algo- rithm as follows: 274 Part V: Algorithms: Telling the Computer What to Do 1. It compares the first two items in the list and sorts those two items. 2. It moves to the next item in the list and sorts that item with the last item of the previously sorted pair. 3. It repeats Step 2 for each additional item in the list until the entire list is examined. 4. It repeats Steps 1 through 3 until the entire list is sorted. One drawback to the bubble-sort algorithm is that it often must re-examine a list two or more times before it correctly sorts all items (refer to Figure 20-2). To see for yourself how the bubble-sort algorithm works, look at the follow- ing program: MaxSize = 5 REDIM MyArray(MaxSize) FOR I = 1 TO MaxSize MyArray(I) = INT(RND(1) * 100) + 1 PRINT MyArray(I); SPACE$(1); NEXT I PRINT \u201c(Initial array)\u201d Pass = 1 Time2Stop = 0 WHILE (Time2Stop = 0) NoSwaps = 1 FOR I = 1 TO (MaxSize - Pass) IF"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "1 through 3 until the entire list is sorted. One drawback to the bubble-sort algorithm is that it often must re-examine a list two or more times before it correctly sorts all items (refer to Figure 20-2). To see for yourself how the bubble-sort algorithm works, look at the follow- ing program: MaxSize = 5 REDIM MyArray(MaxSize) FOR I = 1 TO MaxSize MyArray(I) = INT(RND(1) * 100) + 1 PRINT MyArray(I); SPACE$(1); NEXT I PRINT \u201c(Initial array)\u201d Pass = 1 Time2Stop = 0 WHILE (Time2Stop = 0) NoSwaps = 1 FOR I = 1 TO (MaxSize - Pass) IF MyArray(I) > MyArray(I + 1) THEN TempValue = MyArray(I) MyArray(I) = MyArray(I + 1) 15 Initial list Sorted list 4 78 29 16 78 29 16 29 16 16 4 15 4 15 78 4 15 29 78 4 15 29 16 78 4 15 29 16 78 4 15 29 16 78 4 15 16 29 78 4 15 16 29 78 Sorts these two items Figure 20-2: The bubble sort examines each item in a list and sorts it in relation to its neighbor. 275 Chapter 20: Sorting MyArray(I + 1) = TempValue NoSwaps = 0 FOR J = 1 TO MaxSize PRINT MyArray(J); SPACE$(1); NEXT J PRINT END IF NEXT I IF NoSwaps = 1 THEN Time2Stop = 1 END IF WEND FOR I = 1 TO MaxSize PRINT MyArray(I); SPACE$(1); NEXT I PRINT \u201c(Sorted array)\u201d END A typical output for this program looks as follows: 5 19 61 26 27 (Initial array) 5 19 26 61 27 5 19 26 27 61 5 19 26 27 61 (Sorted array) The following list breaks down the workings of the bubble-sort program: 1. The first through seventh lines create the variable MaxSize equal to 5, create the array MyArray to hold five integers, create a random number between 1 and 100, store it in the array MyArray, and then print the array on-screen along with the string (Initial array). 2. The eighth line creates the variable Pass and sets its value to 1. 3. The ninth line creates the variable Time2Stop and sets its value to 0. 4. The tenth line starts a WHILE-WEND loop that continues while the value of the Time2Stop variable is equal to zero. 5. The eleventh line creates the variable NoSwaps and sets its value to 0. 6. The twelfth line creates a FOR-NEXT loop that repeats (5 - Pass) times. The first time that the FOR-NEXT loop runs, it repeats four times. The second time, it repeats three times, and so on. 7. The thirteenth line tells the computer, \u201cCheck the value of an array item with the item next to it.\u201d The first time that this IF THEN statement runs, it checks the first item with the second item in MyArray. 8. The fourteenth through sixteenth lines switch two numbers that MyArray stores next to each other. 9. The seventeenth line sets the value of NoSwaps to zero. This line tells"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "FOR-NEXT loop that repeats (5 - Pass) times. The first time that the FOR-NEXT loop runs, it repeats four times. The second time, it repeats three times, and so on. 7. The thirteenth line tells the computer, \u201cCheck the value of an array item with the item next to it.\u201d The first time that this IF THEN statement runs, it checks the first item with the second item in MyArray. 8. The fourteenth through sixteenth lines switch two numbers that MyArray stores next to each other. 9. The seventeenth line sets the value of NoSwaps to zero. This line tells the bubble-sort algorithm that a swap\u2019s occurring somewhere in the list, so it must repeat the WHILE-WEND loop again. 10. The eighteenth through twenty-first lines print the array on-screen so that you can see how the computer\u2019s sorted the array so far. 11. The twenty-second line marks the end of the IF THEN statement that starts on the twelfth line. 12. The twenty-third line marks the end of the FOR-NEXT loop. 13. The twenty-fourth through twenty-sixth lines use an IF THEN statement to check whether the value of NoSwaps is equal to 1. If so, it sets the value of Time2Stop to one. 14. The twenty-seventh line marks the end of the WHILE-WEND loop. This loop stops looping only after the value of Time2Stop equals 1. This situ- ation occurs only if the list is completely sorted. 15. The twenty-eighth through thirty-first lines print the final sorted array on-screen. 16. The thirty-second line tells the computer that the program is at an end. For sorting small lists, the bubble-sort algorithm is fairly fast, but it\u2019s extremely slow if you need to sort a large number of items. Even worse, the bubble-sort algorithm takes a long time to sort if one or more low values are near the end of the array, which means that the bubble-sort algorithm must run multiple times. Shell Sort One problem with insertion-sort and bubble-sort algorithms is that they often must move an item from the far end of a list to the front, an especially serious drawback for the bubble-sort algorithm. The shell-sort algorithm presents a simple solution to make sorting faster. The shell-sort algorithm works by the principle of \u201cdivide and conquer.\u201d Instead of trying to sort an entire list at a time, the shell-sort algorithm divides a larger list into multiple smaller lists. After it sorts these smaller lists, it combines them into a final sorted list. The shell-sort algorithm doesn\u2019t actually do any sorting; it works with an existing sorting algorithm (such as insert sort or bubble sort) to speed up the overall sorting process. 276 Part V: Algorithms: Telling the Computer What to Do 277 Chapter 20: Sorting Basically, the shell sort works as follows: 1. It divides a long list into multiple smaller lists. (Figure 20-3 shows a list divided into three smaller lists. In this case, the shell-sort algorithm is taking every third item in the list to create"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "After it sorts these smaller lists, it combines them into a final sorted list. The shell-sort algorithm doesn\u2019t actually do any sorting; it works with an existing sorting algorithm (such as insert sort or bubble sort) to speed up the overall sorting process. 276 Part V: Algorithms: Telling the Computer What to Do 277 Chapter 20: Sorting Basically, the shell sort works as follows: 1. It divides a long list into multiple smaller lists. (Figure 20-3 shows a list divided into three smaller lists. In this case, the shell-sort algorithm is taking every third item in the list to create three separate smaller lists.) 2. It sorts each smaller list by using an algorithm such as insertion sort or bubble sort. In the example shown in Figure 20-3, the first minilist con- tains the numbers 15 and 29, which don\u2019t need sorting. The second minilist contains the numbers 16 and 4, so it sorts their positions. The third minilist contains just the number 78. 3. It smashes all the smaller lists back into a large list. In Figure 20-3, notice that the numbers 4 and 16 are sorted. 4. It divides the long list into multiple smaller lists again but into fewer smaller lists than in Step 1. In Figure 20-3, the shell-sort algorithm divides the list into two small lists, taking every second item to create two smaller lists. 5. It repeats Steps 2 through 4 (if necessary) until a single sorted list remains. Notice that after it sorts the numbers 16 and 78, the entire list is completely sorted. To see how the shell-sort algorithm works, run the following program, which uses shell sort to initially sort items and then uses the bubble-sort method to actually sort the items in the list: 15 Initial list Sorted list Step 5 Step 4 Step 3 Step 1 and 2 16 78 29 4 4 15 16 78 15 4 78 29 16 15 78 16 4 29 15 4 16 29 78 4 15 16 29 78 Temporary list 29 Figure 20-3: The shell sort breaks a large list into smaller lists and then sorts those smaller lists. 278 Part V: Algorithms: Telling the Computer What to Do MaxSize = 5 REDIM MyArray(MaxSize) FOR I = 1 TO MaxSize MyArray(I) = INT(RND(1) * 100) + 1 PRINT MyArray(I); SPACE$(1); NEXT I PRINT \u201c(Initial array)\u201d X = INT(MaxSize / 2) WHILE X > 0 Time2Stop = 0 Limit = MaxSize - X WHILE (Time2Stop = 0) Switch = 0 FOR K = 1 TO Limit IF MyArray(K) > MyArray(K + X) THEN TempX = MyArray(K) MyArray(K) = MyArray(K + X) MyArray(K + X) = TempX Switch = K END IF NEXT K Limit = Switch - X IF Switch = 0 THEN Time2Stop = 1 END IF WEND FOR I = 1 TO MaxSize PRINT MyArray(I); SPACE$(1); NEXT I PRINT X = INT(X / 2) WEND FOR I = 1 TO MaxSize PRINT MyArray(I); SPACE$(1); NEXT I PRINT \u201c(Sorted array)\u201d END"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "X > 0 Time2Stop = 0 Limit = MaxSize - X WHILE (Time2Stop = 0) Switch = 0 FOR K = 1 TO Limit IF MyArray(K) > MyArray(K + X) THEN TempX = MyArray(K) MyArray(K) = MyArray(K + X) MyArray(K + X) = TempX Switch = K END IF NEXT K Limit = Switch - X IF Switch = 0 THEN Time2Stop = 1 END IF WEND FOR I = 1 TO MaxSize PRINT MyArray(I); SPACE$(1); NEXT I PRINT X = INT(X / 2) WEND FOR I = 1 TO MaxSize PRINT MyArray(I); SPACE$(1); NEXT I PRINT \u201c(Sorted array)\u201d END A typical output for this program looks like this: 94 17 70 90 62 (Initial array) 62 17 70 90 94 17 62 70 90 94 17 62 70 90 94 (Sorted array) 279 Chapter 20: Sorting The first time that the program runs, the shell-sort algorithm compares the numbers that locations 1, 3, and 5 of the array stores (94, 70, and 62, respec- tively). After sorting this list, it sorts the numbers in locations 2 and 4 of the array (17 and 90). Then it sorts the entire list. To see how the shell-sort program works in detail, examine the program line by line, as follows: 1. The first through seventh lines create the variable MaxSize equal to 5, create the array MyArray to hold five integers, create a random number between 1 and 100, store it in the array MyArray, and then print the array on-screen along with the string (Initial array). 2. The eighth line creates the variable X and divides the total size of the list by 2 and stores the integer value in the X variable. In this case, the value of X is 2 (MaxSize / 2 = 2), so X tells the shell-sort algorithm to divide the long list into two smaller lists. 3. The ninth line starts a WHILE-WEND loop that continues as long as the value of X is greater than 0. 4. The tenth line creates a Time2Stop variable and sets its value to zero. 5. The eleventh line creates the variable Limit and sets its value to MaxSize - X. The first time that this line runs, the value of Limit is 5 \u2013 2, or 3. 6. The twelfth line is the start of a WHILE-WEND loop that continues looping while the value of the Time2Stop variable is zero. 7. The thirteenth line creates the variable Switch and sets its value to zero. 8. The fourteenth line starts a FOR-NEXT loop. 9. The fifteenth line starts an IF THEN statement that checks to see whether neighboring items in the array are sorted. 10. The sixteenth through eighteenth lines compare two numbers that the array stores and switch their positions if necessary, which is the bubble- sort algorithm. 11. The nineteenth line sets the value of Switch to the value of K. 12. The twenty-first line marks the end of the IF THEN statement that starts on the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "is zero. 7. The thirteenth line creates the variable Switch and sets its value to zero. 8. The fourteenth line starts a FOR-NEXT loop. 9. The fifteenth line starts an IF THEN statement that checks to see whether neighboring items in the array are sorted. 10. The sixteenth through eighteenth lines compare two numbers that the array stores and switch their positions if necessary, which is the bubble- sort algorithm. 11. The nineteenth line sets the value of Switch to the value of K. 12. The twenty-first line marks the end of the IF THEN statement that starts on the fifteenth line. 13. The twenty-second line marks the end of the FOR-NEXT loop. 14. The twenty-third line sets the value of Limit to Switch - X. 15. The twenty-fourth through twenty-sixth lines check to see whether the value of Switch equals zero. If so, it then sets the value of Time2Stop to one. 16. The twenty-seventh line marks the end of the WHILE loop that starts on the twelfth line. 280 Part V: Algorithms: Telling the Computer What to Do 17. The twenty-eighth through thirty-first lines print the partially sorted array on-screen. 18. The thirty-second line divides X by 2 and stores the integer value into the X variable. This tells the shell-sort algorithm how many smaller lists into which to divide the larger list. 19. The thirty-third line marks the end of the WHILE-WEND loop. 20. The thirty-fourth through thirty-seventh lines print the final sorted array on-screen. 21. The thirty-eighth line tells the computer that the program is at an end. Quicksort One of the more popular sorting algorithms is known as Quicksort. The Quicksort method works by picking a number from the middle of the list and then sorting the remaining numbers to the left or right of the previously picked number, as shown in Figure 20-4. After dividing the initial list in half, the Quicksort algorithm repetitively divides each portion of the list in half again, randomly choosing a number from each list. After the Quicksort algorithm divides a long list into a bunch of smaller ones and sorts each small list, it then combines all the small lists back into a single long list that it sorts. The Quicksort method works as follows: 1. It picks a number from the middle of the list and uses that number to divide the long list in half. All numbers less than the randomly picked number appear to the left, and all numbers greater than the randomly picked number appear to the right. 73 Initial list Sorted list 89 26 6 62 62 73 26 6 89 6 26 62 73 89 List to be sorted again Sort by this number Sort by this number Figure 20-4: The Quicksort divides a larger list into small lists based on a number chosen from the middle of that list. 281 Chapter 20: Sorting 2. It repeats Step 1 for each half of the list that a randomly picked number divides until"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "numbers less than the randomly picked number appear to the left, and all numbers greater than the randomly picked number appear to the right. 73 Initial list Sorted list 89 26 6 62 62 73 26 6 89 6 26 62 73 89 List to be sorted again Sort by this number Sort by this number Figure 20-4: The Quicksort divides a larger list into small lists based on a number chosen from the middle of that list. 281 Chapter 20: Sorting 2. It repeats Step 1 for each half of the list that a randomly picked number divides until it sorts all items in a bunch of smaller lists. 3. It smashes all the smaller lists back into a large list. Because the Quicksort algorithm repeats the same steps for smaller and smaller lists, it uses a technique known as recursion. Recursion simply means that a subprogram repeatedly runs itself. Because the Quicksort algorithm needs to use recursion, you must store the actual Quicksort algorithm in a separate subprogram. Thus the complete Quicksort program consists of a main program and a subprogram, as in the following example: MaxSize = 5 REDIM NumArray(MaxSize) FOR I = 1 TO MaxSize NumArray(I) = INT(RND(1)*10) + 1 PRINT NumArray(I); \u201c \u201c; NEXT I PRINT \u201c(Initial array)\u201d CALL QSort 1, MaxSize FOR I = 1 TO MaxSize PRINT NumArray(I); \u201c \u201c; NEXT I PRINT \u201c(Sorted array)\u201d END The main portion of the Quicksort program works as follows: 1. The first through seventh lines create an array of five random integers and print the array on-screen for you to see. 2. The eighth line calls the QSort subprogram by giving it the front of the list (1) and the maximum size of the list (MaxSize). 3. The ninth through twelfth lines print the final sorted array on-screen. 4. The thirteenth line tells the computer that the program is at an end. The subprogram QSort looks as follows: SUB QSort Start, Finish I = Start J = Finish X = NumArray(INT((I+J)/2)) WHILE I <= J WHILE NumArray(I) < X I = I + 1 WEND WHILE NumArray(J) > X 282 Part V: Algorithms: Telling the Computer What to Do J = J - 1 WEND IF I <= J THEN A = NumArray(I) NumArray(I) = NumArray(J) NumArray(J) = A I = I + 1 J = J - 1 END IF WEND FOR K = 1 TO Finish PRINT NumArray(K); \u201c \u201c; NEXT K PRINT IF J > Start THEN CALL QSort Start, J IF I < Finish THEN CALL QSort I, Finish END SUB The QSort subprogram works as follows: 1. The first line defines the name of the subprogram (QSort) and the data that it needs, which includes two integers (Start and Finish). 2. The second and third lines create two variables (I and J) that they set to the same value as the Start and Finish variables. The subprogram needs the variables I and J because their values change as the subpro- gram"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "TO Finish PRINT NumArray(K); \u201c \u201c; NEXT K PRINT IF J > Start THEN CALL QSort Start, J IF I < Finish THEN CALL QSort I, Finish END SUB The QSort subprogram works as follows: 1. The first line defines the name of the subprogram (QSort) and the data that it needs, which includes two integers (Start and Finish). 2. The second and third lines create two variables (I and J) that they set to the same value as the Start and Finish variables. The subprogram needs the variables I and J because their values change as the subpro- gram runs, but values of Start and Finish remain the same. 3. The fourth line creates the variable X that divides the size of NumArray in half and stores this value as an integer. 4. The fifth line starts a WHILE WEND loop that runs while the value of I is less than or equal to the value of J. 5. The sixth through eighth lines increase the value of I by 1 as long as the number that NumArray stores is less than the value of X. 6. The ninth through eleventh lines decrease the value of J by 1 as long as the number that NumArray stores is greater than the value of X. Here, the program is trying to determine which numbers in the list are less than or greater than the number picked in the middle of the list in the fourth line. 7. The twelfth through eighteenth lines compare the numbers in the list and move them to the left or right of the number chosen in the fourth line. 8. The nineteenth line marks the end of the WHILE WEND loop that starts in the fifth line. 9. The twentieth through twenty-third lines print the partially sorted array on-screen. 283 Chapter 20: Sorting 10. The twenty-fourth and twenty-fifth lines run the QSort subprogram over and over (recursively), each time feeding it a smaller array of numbers. 11. The twenty-sixth line marks the end of the subprogram. A typical output for this program looks as follows: 27 62 5 79 14 (Initial array) 5 62 27 79 14 5 14 27 79 62 5 14 27 62 79 5 14 27 62 79 (Sorted array) The first time that the program runs, the Quicksort algorithm chooses the third number (5) in the array. Then it sorts the remaining numbers depend- ing on whether they\u2019re less than or greater than 5. Because they\u2019re all greater than 5, it stores them to the right of the array. Out of the four remaining num- bers to the right of 5, the program picks the number 27 and sorts this smaller list, depending on whether the numbers are less than or greater than 27. Now a third smaller list remains consisting of 79 and 62. The algorithm sorts this short list and then combines it with all the other small lists to make up the entire sorted list. Sorting Algorithms"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the remaining numbers depend- ing on whether they\u2019re less than or greater than 5. Because they\u2019re all greater than 5, it stores them to the right of the array. Out of the four remaining num- bers to the right of 5, the program picks the number 27 and sorts this smaller list, depending on whether the numbers are less than or greater than 27. Now a third smaller list remains consisting of 79 and 62. The algorithm sorts this short list and then combines it with all the other small lists to make up the entire sorted list. Sorting Algorithms The insertion-sort, bubble-sort, shell-sort, and Quicksort algorithms show you the variety of methods that programs can use to sort data. Naturally, computer scientists keep inventing additional sorting algorithms with their own advantages and disadvantages, so choose your sorting algorithms care- fully. Pick the right sorting algorithm, and your program can run quickly. Pick the wrong sorting algorithm, and your program may seem unbearably slow to the user. As a general rule, insertion sort is best for small lists, bubble sort is best for lists that are already almost sorted, and Quicksort is usually fastest for every- day use. To speed up either insertion sort or bubble sort, consider combin- ing the shell-sort algorithm with either insertion sort or bubble sort. No matter what sorting algorithm you choose, the biggest problem is taking the time to write all the instructions to implement a particular sorting algo- rithm. To save you time, many programming languages include built-in sort- ing commands. While built-in sorting commands may not necessarily be the fastest way to sort data, built-in sorting commands are much easier to use in comparison to writing your own sorting algorithm. In Liberty BASIC, the built-in sorting com- mand is simply SORT, which looks like this: SORT ArrayName, FirstArrayElement, LastArrayElement To use the SORT command, you just have to specify the name of the array you want to sort along with the FirstArrayElement and LastArrayElement to sort. If you want to sort an entire array, the value of FirstArrayElement would be 1, and the value of LastArrayElement would be the length of the array, such as 5. If you wanted to sort only part of an array, the value of FirstArrayElement would be any number other than 1, such as 4, and the value of LastArrayElement would be any number greater than FirstArrayElement but less than or equal to the total length of the array. The following example shows how to use the SORT command to sort an array that consists of five (5) elements, as shown in Figure 20-5: MaxSize = 5 REDIM MyArray(MaxSize) MyArray(1) = INT(RND(1) * 100) + 1 PRINT MyArray(1); SPACE$(1); FOR I = 2 TO MaxSize MyArray(I) = INT(RND(1) * 100) + 1 PRINT MyArray(I); SPACE$(1); NEXT I PRINT SORT MyArray() 1, MaxSize PRINT PRINT \u201cThis is the sorted list.\u201d FOR I = 1 TO MaxSize PRINT MyArray(I); SPACE$(1); NEXT END If your programming language offers a built-in"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "but less than or equal to the total length of the array. The following example shows how to use the SORT command to sort an array that consists of five (5) elements, as shown in Figure 20-5: MaxSize = 5 REDIM MyArray(MaxSize) MyArray(1) = INT(RND(1) * 100) + 1 PRINT MyArray(1); SPACE$(1); FOR I = 2 TO MaxSize MyArray(I) = INT(RND(1) * 100) + 1 PRINT MyArray(I); SPACE$(1); NEXT I PRINT SORT MyArray() 1, MaxSize PRINT PRINT \u201cThis is the sorted list.\u201d FOR I = 1 TO MaxSize PRINT MyArray(I); SPACE$(1); NEXT END If your programming language offers a built-in sorting command, use it. If it turns out to be way too slow for your particular data, take the time to write your own sorting algorithm. 284 Part V: Algorithms: Telling the Computer What to Do Figure 20-5: Liberty BASIC\u2019s built-in SORT command can sort an array quickly and easily with a minimum amount of extra code. 285 Chapter 20: Sorting 286 Part V: Algorithms: Telling the Computer What to Do Chapter 21 Searching In This Chapter \u0001 Performing a sequential search \u0001 Performing a binary search \u0001 Hashing \u0001 Picking a searching algorithm S earching for data is the second most common activity (after sorting data) necessary for creating many types of programs. A program that stores names and addresses, for example, needs to sort data and then use a search algorithm to find the data that you want (such as looking for all people who live in Los Angeles and whose last names begin with the letter M ). To make searching easier, programs usually sort the data first before trying to search it. For more information about sorting, see Chapter 20. An algorithm is just a fancy way of giving the computer specific types of instructions to accomplish a task. Choosing the right sorting and searching algorithms can make your program run quickly and efficiently. Choose the wrong sorting and searching algorithms and your program may run sluggishly, even for small amounts of data. Searching Sequentially A sequential search examines every possible item in a data structure (such as an array or linked list) until it finds what it\u2019s looking for. This type of search is like looking for your car keys in your apartment by going through room by room, looking in every conceivable location until you find your car keys. Although such a sequential search eventually turns up your car keys (assum- ing that they\u2019re in your apartment in the first place), it may take a long time. For small lists, a sequential search is simple to use and fast. But if you need to search large amounts of data, the sequential search bogs down rapidly. Imagine the futility of trying to find your car keys somewhere in the city of New York. That\u2019s the type of task that a sequential search must face in searching through huge amounts of data. A sequential search can start at either the beginning or the end of a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "eventually turns up your car keys (assum- ing that they\u2019re in your apartment in the first place), it may take a long time. For small lists, a sequential search is simple to use and fast. But if you need to search large amounts of data, the sequential search bogs down rapidly. Imagine the futility of trying to find your car keys somewhere in the city of New York. That\u2019s the type of task that a sequential search must face in searching through huge amounts of data. A sequential search can start at either the beginning or the end of a list. It then proceeds to examine every item in the list until it finds the one item that it\u2019s searching for. Then it stops. To see how a sequential search works, try running the following Liberty BASIC program: MaxSize = 5 REDIM MyArray(MaxSize) MyArray(1) = INT(RND(1) * 10) + 1 PRINT MyArray(1); SPACE$(1); FOR I = 2 TO MaxSize MyArray(I) = MyArray(I - 1) + INT(RND(1) * 10) + 1 PRINT MyArray(I); SPACE$(1); NEXT I PRINT INPUT \u201cWhich number do you want to find: \u201c; FindMe FoundIt = 0 FOR J = 1 TO MaxSize IF FoundIt = 0 THEN PRINT \u201cChecking array location \u201c; J IF MyArray(J) = FindMe THEN FoundIt = 1 END IF END IF NEXT J IF FoundIt = 1 THEN PRINT \u201cFound it!\u201d ELSE PRINT \u201cThe number you want is not in the list.\u201d END IF END This program works as follows: 1. The first and second lines create the variable MaxSize, set the value of MaxSize to 5, and define the array MyArray, which can hold five (the value of MaxSize) integers. 2. The third through ninth lines create a random number and store it in MyArray. Each additional random number is slightly larger than the previ- ous one to create a sorted array of five integers. Then this group of lines prints the complete array on-screen for you to examine. 288 Part V: Algorithms: Telling the Computer What to Do 3. The tenth line asks the user to type the number to find, which the pro- gram stores in the FindMe variable. 4. The eleventh line creates the variable FoundIt and sets its value to 0. 5. The twelfth through nineteenth lines start searching in MyArray for the number that the FindMe variable stores and print each array location that the program checks. 6. The twentieth through twenty-fifth lines print the message Found it! if the program finds the number; if the program doesn\u2019t find the number, it prints The number that you want is not in the list. 7. The twenty-sixth line marks the end of the program. One advantage of a sequential search is that you can use it on both sorted and unsorted lists. Performing a Binary Search A sequential search starts from the beginning of a list and keeps trudging through the entire list from start to finish until it finds what it\u2019s looking for. But if a list"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "6. The twentieth through twenty-fifth lines print the message Found it! if the program finds the number; if the program doesn\u2019t find the number, it prints The number that you want is not in the list. 7. The twenty-sixth line marks the end of the program. One advantage of a sequential search is that you can use it on both sorted and unsorted lists. Performing a Binary Search A sequential search starts from the beginning of a list and keeps trudging through the entire list from start to finish until it finds what it\u2019s looking for. But if a list is already sorted, you can shorten the search by using a binary search. (See Chapter 20 for more information about sorting data.) A binary search divides a long (previously sorted) list in half. If the list that you want to sort contains 10 numbers that it arranges from smallest (on the left) to largest (on the right), the computer looks to see which half of the list (5 numbers on the left and 5 numbers on the right) contains the number for which it\u2019s searching. Figure 21-1 shows a binary search trying to find the number 37 in a list con- taining 10 numbers. First, the binary search algorithm cuts the long list in half and examines the number in the middle of the list. Because the list con- tains 10 numbers, the binary search examines the fifth number in the list. In this case, the middle (fifth) number is 30, which tells the binary search algo- rithm that the number that it wants (37) must lie in the right half of the list. Then the binary search takes the right half of the list (consisting of five num- bers) and cuts this list in half, which points to the third number in the list (59). Because 59 is larger than 37 (the number that it\u2019s trying to find), the binary- search algorithm determines that the number 37 must lie in the left side of this part of the list. The left part of this list contains just two numbers, 37 and 45. With two items in a list, the binary search algorithm needs to look at only the first number in this list, which is 37. Fortunately, 37 is the number that the binary search is looking for, and so the search is over. 289 Chapter 21: Searching To see how the binary-search algorithm works, try the following program: MaxSize = 5 REDIM MyArray(MaxSize) MyArray(1) = INT(RND(1) * 10) + 1 PRINT MyArray(1); SPACE$(1); FOR I = 2 TO MaxSize MyArray(I) = MyArray(I - 1) + INT(RND(1) * 10) + 1 PRINT MyArray(I); SPACE$(1); NEXT I PRINT INPUT \u201cWhich number do you want to find: \u201c; FindMe Left = 1 Right = MaxSize Time2Stop = 0 WHILE Time2Stop = 0 Half = INT((Left + Right) / 2) IF FindMe < MyArray(Half) THEN Right = Half - 1 ELSE Left = Half + 1 END IF IF (FindMe = MyArray(Half)"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "see how the binary-search algorithm works, try the following program: MaxSize = 5 REDIM MyArray(MaxSize) MyArray(1) = INT(RND(1) * 10) + 1 PRINT MyArray(1); SPACE$(1); FOR I = 2 TO MaxSize MyArray(I) = MyArray(I - 1) + INT(RND(1) * 10) + 1 PRINT MyArray(I); SPACE$(1); NEXT I PRINT INPUT \u201cWhich number do you want to find: \u201c; FindMe Left = 1 Right = MaxSize Time2Stop = 0 WHILE Time2Stop = 0 Half = INT((Left + Right) / 2) IF FindMe < MyArray(Half) THEN Right = Half - 1 ELSE Left = Half + 1 END IF IF (FindMe = MyArray(Half) OR Left > Right) THEN Time2Stop = 1 END IF WEND IF FindMe = MyArray(Half) THEN PRINT \u201cFound it in location \u201c; Half ELSE PRINT \u201cThe number you want is not in the list.\u201d END IF END 4 Using a binary search to find the number 37 15 16 29 30 37 45 59 82 93 37 45 59 82 93 37 45 Start search here Search here Found number here Figure 21-1: A binary search cuts a list in half until it finds what it\u2019s looking for. 290 Part V: Algorithms: Telling the Computer What to Do The binary search program works as follows: 1. The first and second lines create the variable MaxSize, set the value of MaxSize to five, and define the array MyArray, which can hold five inte- gers (the value of MaxSize). 2. The third through ninth lines create a random number and store it in MyArray. Each additional random number is slightly larger than the pre- vious one to create a sorted array of five integers. Then this group of lines prints the complete array on-screen for you to examine. 3. The tenth line asks the user to type the number to find which the pro- gram stores in the FindMe variable. 4. The eleventh line creates the variable Left and sets its value to 1. 5. The twelfth line creates the variable Right and sets its value to MaxSize, the maximum size of the array. 6. The thirteenth line creates the variable Time2Stop and sets its value to 0. 7. The fourteenth line is the start of a WHILE WEND loop that repeats until the binary search finds the FindMe number in the array or until it searches the entire array and can\u2019t find the FindMe number. 8. The fifteenth line creates the variable Half, which divides the list in half and stores the integer result. (So if you divide an odd number, the inte- ger result drops all fractions, so INT(5 / 2) equals 2.) 9. The sixteenth through twentieth lines look for the FindMe number in the left half of the array. If the FindMe number is less than the item that the middle of the array stores, the Right variable is set to Half - 1. Otherwise, the value of the Left variable is set to Half + 1. By lower- ing the value of the Right variable and increasing"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "variable Half, which divides the list in half and stores the integer result. (So if you divide an odd number, the inte- ger result drops all fractions, so INT(5 / 2) equals 2.) 9. The sixteenth through twentieth lines look for the FindMe number in the left half of the array. If the FindMe number is less than the item that the middle of the array stores, the Right variable is set to Half - 1. Otherwise, the value of the Left variable is set to Half + 1. By lower- ing the value of the Right variable and increasing the value of the Left variable, the program can keep track after it searches all numbers in the array without finding the number that it\u2019s looking for. The moment that the Left variable becomes greater than the Right variable, the program knows that the number it\u2019s searching for isn\u2019t anywhere in the array. 10. The twenty-first through twenty-third lines check to see whether it can find the FindMe number or until the program determines that the FindMe number doesn\u2019t exist. If this situation occurs, the value of the Time2Stop variable is set to 1. 11. The twenty-fourth line marks the end of the WHILE-WEND loop. 12. The twenty-fifth through twenty-ninth lines print the message Found it in location, following that message with the array position. If it doesn\u2019t find the number in the array, the program prints The number that you want is not in the list. 13. The thirtieth line marks the end of the program. 291 Chapter 21: Searching The binary-search algorithm can work only on a sorted list. Hashing Finding something is always easier if you know where you stored it last. That\u2019s why finding your car keys is easier if they\u2019re hanging on a hook by the front door than if you must search the entire house because you can\u2019t remember where you put them. Hashing works on a similar principle. If you want to store an item, hashing first calculates a numeric value (known as a hash function) that identifies that item. Then the program uses this numeric value to store the item in a specific location in a data structure (such as an array or a linked list). Now, instead of needing to search an entire array or linked list to find a single item, the pro- gram just needs to look in the specific location using the hash function. Suppose, for example, that you want to store an integer in an array. If you store the integer anywhere in the array, you must search the entire array to find that number again. But if you use hashing, the task is much simpler. First, calculate a hash function by using the following formula: HashValue = Number to store MOD 5 This formula tells the computer to take the number that you want to store, divide it by five, and use the remaining value as the hash function. So if you want to store the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "specific location using the hash function. Suppose, for example, that you want to store an integer in an array. If you store the integer anywhere in the array, you must search the entire array to find that number again. But if you use hashing, the task is much simpler. First, calculate a hash function by using the following formula: HashValue = Number to store MOD 5 This formula tells the computer to take the number that you want to store, divide it by five, and use the remaining value as the hash function. So if you want to store the number 26, the hash function is 1 (26 / 5 = 5 with a remainder of 1). MOD is a special division command that tells the computer to divide a number and return the remainder. The command 26 MOD 5, for example, returns the value of 1. Because Liberty BASIC doesn\u2019t support the MOD command, you need to use the following formula instead, which mimics the MOD command that you find in other languages: HashValue = Number to Store - (INT(Number to Store / 5) * 5) No matter what number you choose to store, the hash function calculates one of the following five values \u2014 0, 1, 2, 3, or 4. You can create an array and use the hash function to determine the exact position at which to store an item in the array. Because the hash function of the number 26 equals 1, you can store this integer in array location number 1, as shown in Figure 21-2. The value of the hash function determines where to store the item in a data structure. 292 Part V: Algorithms: Telling the Computer What to Do If you want to find the number 26 in the array again, hashing calculates the same hash function (which calculates to 1), telling the program to look for the number 26 in the first array location. Because hashing doesn\u2019t require searching every item in a list, hashing can prove much faster than sequential and binary searching, especially for long lists of data. Dealing with collisions Ideally, a hash function calculates a unique value. But a hash function probably calculates the same value for different items. For example, calculating a hash function by using MOD 5 \u2014 dividing a number by 5 and using the remainder as the hash function \u2014 returns a value of 2 for the numbers 7 and 32. If you\u2019re storing large numbers of items, more than one item is likely to share the same hash function. If two items share the same hash function, program- mers say that a collision is occurring. To handle collisions, you need to create a data structure that can store multiple items with the same hash function. Figure 21-3 shows two data structures to handle collisions: a two-dimensional array and a one-dimensional array of linked lists. (Chapter 16 contains infor- mation about creating and using two-dimensional arrays. Chapter 18 contains information about linked lists."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "of 2 for the numbers 7 and 32. If you\u2019re storing large numbers of items, more than one item is likely to share the same hash function. If two items share the same hash function, program- mers say that a collision is occurring. To handle collisions, you need to create a data structure that can store multiple items with the same hash function. Figure 21-3 shows two data structures to handle collisions: a two-dimensional array and a one-dimensional array of linked lists. (Chapter 16 contains infor- mation about creating and using two-dimensional arrays. Chapter 18 contains information about linked lists. Remember that Liberty BASIC can\u2019t create linked lists, but other languages \u2014 such as C/C++, C#, Pascal, and Java \u2014 can create linked lists.) In Figure 21-3, the numbers 7 and 32 share the same hash function (which is 2). Because the number 7 is in array element number 2 (which represents the hash function 2), the program must store the number 32 beneath the number 7 underneath the same hash function of 2. Both a two-dimensional array and an array of linked lists enables the program to store multiple numbers under- neath the same hash function location of 2. Array location 26 0 1. Store the number 26 in the array. 2. Calculate the hash function of 26: 3. Store the number 26 in array location 1. 1 2 26 MOD 5 = 1 3 4 Figure 21-2: Hashing calculates a value to determine where to store data initially and where to find the data later. 293 Chapter 21: Searching Ideally, you want to use a data structure that can expand or shrink to handle items sharing identical hash functions. Searching by using a hash function After you store items in a data structure by using hashing, you can search for any of those items by calculating a hash function for the item that you want to find. Then you look for the item in the data structure that stores items sharing the same hash function. If every item has a unique hash function, the hash function can pinpoint the exact location of an item extremely quickly. Even if multiple items share the same hash function (refer to Figure 21-2), hashing now limits the search to a smaller list of items with identical hash functions. As a result, hashing usually can search faster than sequential or binary searching. The following Liberty BASIC program creates five random integers \u2014 in this case, 41, 50, 57, 75, 67 \u2014 and stores them in a two-dimensional array, as shown in Figure 21-4. If you create an array in Liberty BASIC, the first array location is number one, the second location is number two, and so on. So to mimic an array that holds a hash function of 0 through 4, the following program calculates a hash func- tion and adds one (1) to its value: Array location A two-dimensional array 26 0 1 2 3 4 7 7 32 Array location An"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "following Liberty BASIC program creates five random integers \u2014 in this case, 41, 50, 57, 75, 67 \u2014 and stores them in a two-dimensional array, as shown in Figure 21-4. If you create an array in Liberty BASIC, the first array location is number one, the second location is number two, and so on. So to mimic an array that holds a hash function of 0 through 4, the following program calculates a hash func- tion and adds one (1) to its value: Array location A two-dimensional array 26 0 1 2 3 4 7 7 32 Array location An array of linked lists 26 0 1 2 3 4 7 32 Figure 21-3: A two- dimensional array or an array of linked lists can handle collisions. 294 Part V: Algorithms: Telling the Computer What to Do MaxSize = 5 REDIM MyArray(MaxSize, MaxSize) FOR I = 1 TO MaxSize \u2018 Vertical FOR J = 1 TO MaxSize \u2018 Horizontal MyArray(I, J) = 0 NEXT J NEXT I Count = 1 FOR J = 1 TO MaxSize StopNow = 0 StoreMe = INT(RND(1) * 100) + 1 HashValue = StoreMe - (INT(StoreMe / 5) * 5) + 1 WHILE StopNow <> 1 IF MyArray(Count, HashValue) = 0 THEN MyArray(Count, HashValue) = StoreMe StopNow = 1 ELSE Count = Count + 1 END IF WEND PRINT StoreMe; SPACE$(1); NEXT J PRINT PRINT FOR I = 1 TO MaxSize \u2018 Vertical FOR J = 1 TO MaxSize \u2018 Horizontal PRINT MyArray(I, J); SPACE$(5); NEXT J PRINT NEXT I END Array location 41 0 1 2 3 4 57 50 75 67 A two-dimensional array Figure 21-4: A two- dimensional array can store values that its hash function organizes. 295 Chapter 21: Searching The preceding program uses hashing to store five random numbers in a two- dimensional array, as follows: 1. The first and second lines define the variable MaxSize and set its value to 5. Then they create the two-dimensional array MyArray that can hold five by five (25) integers. 2. The third through seventh lines fill MyArray with zeroes. Notice that the I variable defines the row number and the J variable defines the column numbers in Figure 21-4. (Remember: Because Liberty BASIC arrays always start counting with the number one, the array location that 0 identifies in Figure 21-4 is actually the array location number one in Liberty BASIC; the array location that 1 identifies is actually the array location number two \u2014 and so on.) 3. The eighth line creates the variable Count and sets its value to one. 4. The ninth line starts a FOR-NEXT loop that starts the hash algorithm to store an integer in the two-dimensional array. 5. The tenth line creates the variable StopNow and sets its value to zero. 6. The eleventh line creates a random number from 1 to 100 and stores it in the variable StoreMe. 7. The twelfth line calculates a hash function and stores it in the variable HashValue. HashValue is"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "location that 1 identifies is actually the array location number two \u2014 and so on.) 3. The eighth line creates the variable Count and sets its value to one. 4. The ninth line starts a FOR-NEXT loop that starts the hash algorithm to store an integer in the two-dimensional array. 5. The tenth line creates the variable StopNow and sets its value to zero. 6. The eleventh line creates a random number from 1 to 100 and stores it in the variable StoreMe. 7. The twelfth line calculates a hash function and stores it in the variable HashValue. HashValue is always one of five numbers: 1, 2, 3, 4, or 5. 8. The thirteenth line starts a WHILE-WEND loop that tries to determine where to store the StoreMe number in MyArray. 9. The fourteenth through nineteenth lines try to store the StoreMe number in the first row (which the Count variable represents) of MyArray in the column that the value of HashValue represents. If a number is already in the array location, these instructions try to store the number in the next row down until they succeed in finding an empty spot in the array. 10. The twentieth line ends the WHILE-WEND loop that starts in the thirteenth line. 11. The twenty-first line prints the five random numbers that the program creates. 12. The twenty-second line represents the end of the FOR-NEXT loop that starts in the ninth line. 13. The twenty-third and twenty-fourth lines print two blank lines. 14. The twenty-fifth through thirtieth lines print the entire array so that you can see how hashing sorts the five random numbers that the program creates. 15. The thirty-first line marks the end of the program. 296 Part V: Algorithms: Telling the Computer What to Do Picking a Searching Algorithm Sequential searching is the easiest search method to implement and is the fastest for small lists, but for larger lists, sequential searching takes too long. For general use, binary searching is usually faster than sequential searching. The main drawback is that binary searching works only on data that\u2019s already sorted. Hashing is best for large amounts of data, but it\u2019s more complicated to imple- ment because you need to calculate a hash function to store each item in a specific location in a data structure. Then you face the additional problem of dealing with collisions (if two items share the same hash function). As a general rule, use sequential searching for small lists or unsorted lists; binary searching for larger, sorted lists; and hashing if you don\u2019t mind calcu- lating hash functions for each item. 297 Chapter 21: Searching 298 Part V: Algorithms: Telling the Computer What to Do Chapter 22 Optimizing Your Code In This Chapter \u0001 Choosing the right data structure \u0001 Choosing the right algorithm \u0001 Fine-tuning the source code \u0001 Using a faster language \u0001 Optimizing your compiler G etting a program to work correctly is often a miracle in itself. But after you do get a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "hash function). As a general rule, use sequential searching for small lists or unsorted lists; binary searching for larger, sorted lists; and hashing if you don\u2019t mind calcu- lating hash functions for each item. 297 Chapter 21: Searching 298 Part V: Algorithms: Telling the Computer What to Do Chapter 22 Optimizing Your Code In This Chapter \u0001 Choosing the right data structure \u0001 Choosing the right algorithm \u0001 Fine-tuning the source code \u0001 Using a faster language \u0001 Optimizing your compiler G etting a program to work correctly is often a miracle in itself. But after you do get a program to work and eliminate as many bugs as possible, the next question is whether to use (or release) the program right away or take some time to optimize it. Optimization means trying to meet the following three goals (without intro- ducing bugs into the program in the process): \u0002 Make the program faster. \u0002 Make the program smaller. \u0002 Make the program require less memory to run. As a general rule, software companies rush the new version (such as version 1.0 or version 4.0) of any program out the door just to grab market share. Within a few months, companies usually release slightly modified versions (such as version 1.01 or version 4.1), which fix some bugs (and usually introduce some new ones as well) and optimize the program in some way. In the commercial software market, optimization is usually a luxury, which is why so many pro- grams are known as bloatware \u2014 they require globs of memory and hard drive space. Choosing the Right Data Structure Every program needs to store data, so you need to choose the right data structure for holding information in your program. An array may seem easy to create, but you must know the number of items that the array needs to hold ahead of time. Make an array too small and your program runs out of space to store additional data, possibly crashing your program. Make an array too large and you risk allocating space for storage that you don\u2019t need, which can cause your program to gobble up more memory than necessary. More important, the data structure that you choose can affect the efficiency of the sorting and searching algorithms in your program. Compared with sorting items in an array, a sorting algorithm runs much faster rearranging pointers in a linked list. To find out more about different types of data structures, see Chapters 16 through 19. To learn more about pointers and linked lists, see Chapter 18. Choosing the Right Algorithm An algorithm tells the computer how to accomplish a specific task. Think, for example, about all the different ways you can tell your friends to get to your house from downtown. You can tell them to take the highway, which is easier but may take longer. Or you can tell them to take a variety of side streets that ultimately make the trip shorter but make your directions harder"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "list. To find out more about different types of data structures, see Chapters 16 through 19. To learn more about pointers and linked lists, see Chapter 18. Choosing the Right Algorithm An algorithm tells the computer how to accomplish a specific task. Think, for example, about all the different ways you can tell your friends to get to your house from downtown. You can tell them to take the highway, which is easier but may take longer. Or you can tell them to take a variety of side streets that ultimately make the trip shorter but make your directions harder to follow. Deciding which set of directions to give to someone is much like deciding which algorithm to use in your program. If you need to sort a list containing 30,000 names, for example, the bubble-sort algorithm sorts that list much slower than the Quicksort algorithm sorts the same list. (See Chapter 20 for explanations on the bubble-sort and Quicksort algorithms.) After you sort 30,000 names, using a sequential-search algorithm to find a name is much slower than using a binary-search algorithm. (See Chapter 21 for explanations on sequential- and binary-search algorithms.) For another example of choosing the right algorithm, think of a video game that displays the ten highest scores. Before anyone plays the game, the ten highest scores are all zero. The first time that a person plays the game, the video game lists that person\u2019s score as number one. Each time that someone plays the game again, the video game must sort the scores to display the highest to the lowest ten scores. For this video game example, the insertion-sort algorithm is most efficient. After the video game shows two scores, the insertion-sort algorithm sorts those two scores from highest to lowest. The third time that someone plays the video game, the insertion-sort algorithm compares the third score with 300 Part V: Algorithms: Telling the Computer What to Do the previous two scores and inserts the third score in its correct place. Each additional time that someone plays the video game, the insertion-sort algo- rithm compares the new score with the previous high scores to determine where to insert the new score in the top-ten list of scores (assuming that it ranks that high, that is). If you use a bubble-sort algorithm to sort the top-ten scores, the bubble-sort algorithm needs to examine the list multiple times and compare each score with its neighbor \u2014 taking more time than the insert-sort algorithm as a result. In this particular case, you can see how the insert sort-algorithm is more effi- cient than the bubble-sort algorithm. As you write your own programs, remember that different algorithms are available for you to use to accomplish identical tasks for your program. Choose the algorithm that runs the fastest for your program. Fine-Tuning the Source Code Even if you choose data structures and algorithms with care, you can still optimize your program by fine-tuning the source code. This phrase means that you"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "and compare each score with its neighbor \u2014 taking more time than the insert-sort algorithm as a result. In this particular case, you can see how the insert sort-algorithm is more effi- cient than the bubble-sort algorithm. As you write your own programs, remember that different algorithms are available for you to use to accomplish identical tasks for your program. Choose the algorithm that runs the fastest for your program. Fine-Tuning the Source Code Even if you choose data structures and algorithms with care, you can still optimize your program by fine-tuning the source code. This phrase means that you rewrite portions of your program to make it run faster or require less memory. Put the condition most likely to be false first When you use the AND operator in an IF THEN statement, you combine two or more conditions, as follows: IF (Boolean expression 1) AND (Boolean expression 2) THEN \u2018 Follow one or more instructions listed here END IF See Chapter 9 for more information about Boolean expressions. This IF THEN statement runs only after the computer takes time to verify that both Boolean expression 1 and Boolean expression 2 are true. If either one of these Boolean expressions is false, the instructions inside the IF THEN statement don\u2019t run. So if you intend to use the AND operator, put the expression that\u2019s most likely false in the first part of the AND operation. For example, if Boolean expression 1 is false, the computer doesn\u2019t bother checking to see whether Boolean expression 2 is true because one false Boolean expression always makes the entire AND operation false. 301 Chapter 22: Optimizing Your Code The moment that the computer determines that the first Boolean expression in an AND operation is false, it doesn\u2019t check the second Boolean expression, thus saving time and helping make your program run just a little bit faster. Put the condition most likely to be true first The IF THEN ELSEIF and SELECT CASE statements often need to check several conditions to make a decision, as the following code shows: IF (Boolean expression 1) THEN \u2018 Follow one or more instructions listed here ELSEIF (Boolean expression 2) THEN \u2018 Follow one or more instructions listed here END IF In this IF THEN ELSEIF statement, the computer first checks to see whether Boolean expression 1 is true. If not, it checks to see whether Boolean expression 2 is true. But what if Boolean expression 1 is false most of the time and Boolean expression 2 is true most of the time? Then the program wastes time always checking Boolean expression 1 (which is usually false) before it can get to Boolean expression 2 (which is usually true). To keep your program from wasting time checking a Boolean expression that\u2019s usually false, put the Boolean expression that\u2019s most likely true at the front and the Boolean expression that\u2019s least likely true at the end of the IF THEN ELSEIF statement, as follows: IF (Boolean expression 2) THEN"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "2 is true. But what if Boolean expression 1 is false most of the time and Boolean expression 2 is true most of the time? Then the program wastes time always checking Boolean expression 1 (which is usually false) before it can get to Boolean expression 2 (which is usually true). To keep your program from wasting time checking a Boolean expression that\u2019s usually false, put the Boolean expression that\u2019s most likely true at the front and the Boolean expression that\u2019s least likely true at the end of the IF THEN ELSEIF statement, as follows: IF (Boolean expression 2) THEN \u2018 Follow one or more instructions listed here ELSEIF (Boolean expression 1) THEN \u2018 Follow one or more instructions listed here END IF By placing the Boolean expression that\u2019s most likely true at the beginning, you save the computer from wasting time checking one or more additional Boolean expressions that\u2019s usually going to prove false anyway. Liberty BASIC doesn\u2019t support the IF THEN ELSEIF statement. This technique also works for SELECT CASE statements, as in the following example: 302 Part V: Algorithms: Telling the Computer What to Do SELECT CASE Variable CASE Value1 \u2018 Follow these instructions if the Variable = Value1 CASE Value2 \u2018 Follow these instructions if the Variable = Value2 END SELECT SELECT CASE statements check to see whether a variable equals one value (such as Value1). If you put the values most likely to match the SELECT CASE variable up front, you avoid forcing the computer to check a long list of values that are least likely to match anyway. Although the technique of putting the conditions that are most likely true first may seem trivial, every little bit of time that you save can add up to make a faster and more responsive program. Don\u2019t run a FOR-NEXT loop needlessly Loops can gobble up time, so make sure that you choose the right loop. If you\u2019re using a sequential search to find an item in an array, for example, you can use a FOR-NEXT loop. The FOR-NEXT loop can count to make the com- puter check every position in the array to look for a specific item. The FOR-NEXT loop runs a specific number of times. What do you think hap- pens if it finds the item that it\u2019s looking for on the first try? The FOR-NEXT loop doesn\u2019t care; it continues looping a fixed number of times anyway, thereby wasting time. If you use a FOR-NEXT loop, make sure that you absolutely need the program to loop a fixed number of times; otherwise, use the EXIT FOR command to exit the FOR-NEXT loop as soon as possible. The following BASIC example uses the EXIT FOR command to exit from the FOR NEXT loop at the moment that it finds what it\u2019s looking for. Without the EXIT FOR command, the FOR-NEXT loop always repeats itself 30 times, regardless of whether it needs to loop all 30 times, as the following code shows: FoundIt = 0"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "number of times anyway, thereby wasting time. If you use a FOR-NEXT loop, make sure that you absolutely need the program to loop a fixed number of times; otherwise, use the EXIT FOR command to exit the FOR-NEXT loop as soon as possible. The following BASIC example uses the EXIT FOR command to exit from the FOR NEXT loop at the moment that it finds what it\u2019s looking for. Without the EXIT FOR command, the FOR-NEXT loop always repeats itself 30 times, regardless of whether it needs to loop all 30 times, as the following code shows: FoundIt = 0 FOR J = 1 TO 30 PRINT \u201cChecking array location\u201d; J IF MyArray(J) = FindMe THEN FoundIt = 1 EXIT FOR END IF NEXT J 303 Chapter 22: Optimizing Your Code Clean out your loops You must absolutely place all instructions that you cram inside a loop . . . well, inside the loop. If you put an instruction inside a loop that serves no purpose in the loop, you force the computer to keep running that instruction repeat- edly, thereby slowing down your loop and ultimately your program as well. Consider, for example, the following loop: FOR J = 1 TO 5000 I = 0 IF MyArray(J) = 55 THEN PRINT MyArray(J) END IF NEXT J The preceding FOR-NEXT loop repeats itself 5,000 times, but the program never uses the I = 0 instruction inside the FOR-NEXT loop. It forces the com- puter to run the I = 0 instruction 5,000 times for no reason. To avoid this problem, simply remove the I = 0 instruction from the loop, as follows: I = 0 FOR J = 1 TO 5000 IF MyArray(J) = 55 THEN PRINT MyArray(J) END IF NEXT J In the programming world, nesting occurs if you cram one type of control or loop structure inside another one. In the preceding Liberty BASIC program example, an IF THEN statement nests inside a FOR-NEXT loop. Be especially wary of nested loops. If you nest one loop inside the other, the inner loop runs more often than the outer loop. By ridding the inner loop of any instructions that don\u2019t need to be inside that loop, you avoid forcing the computer to repeat an instruction needlessly. Use the correct data types To save memory, use the correct data types. Many versions of BASIC, such as Visual Basic, enable you to declare your variables as integers (as in DIM Num AS INTEGER) or as long integers (as in DIM Num AS LONG). Long integers can range in value from \u20132,147,483,648 to 2,147,483,647; ordinary integers can range in value only from \u201332,768 to 32,767. 304 Part V: Algorithms: Telling the Computer What to Do A long integer variable, however, gobbles up more memory if you need to stuff a really large number into it, such as 2,147,483,647. If your variables never need to hold such a large number, a smaller data type (such as an integer) works just as well and"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "to declare your variables as integers (as in DIM Num AS INTEGER) or as long integers (as in DIM Num AS LONG). Long integers can range in value from \u20132,147,483,648 to 2,147,483,647; ordinary integers can range in value only from \u201332,768 to 32,767. 304 Part V: Algorithms: Telling the Computer What to Do A long integer variable, however, gobbles up more memory if you need to stuff a really large number into it, such as 2,147,483,647. If your variables never need to hold such a large number, a smaller data type (such as an integer) works just as well and requires less memory. 305 Chapter 22: Optimizing Your Code Why C/C++ programs can be hard to understand Programs that you write in C/C++ usually run faster and more efficiently than identical pro- grams written in other languages, such as Pascal or BASIC. But C/C++ has developed a well-deserved reputation for allowing program- mers to create cryptic code. One reason is that C/C++ allows a variety of shortcuts that can make your program run faster \u2014 but at the sac- rifice of readability. Rather than type x = x + 5 or y = y \u2013 23, for example, C/C++ enables you to use short- cuts, as in the following examples: x += 5; /* equivalent to x = x + 5 */ y -= 23; /* equivalent to y = y - 23 */ C/C++ also includes something called a prefix or postfix operator that can increment or decre- ment a variable by one. The following are exam- ples of postfix operators: x++; /* equivalent to x = x + 1 */ y--; /* equivalent to y = y - 1 */ The prefix operators that are equivalent to the preceding postfix operators are as follows: ++x; /* equivalent to x = x + 1 */ --y; /* equivalent to y = y - 1 */ If you think they look and act alike, you\u2019re almost right. The big difference occurs if you combine postfix or prefix operators into a formula, as follows: x = y + z++ The preceding formula is actually equivalent to the following two instructions: x = y + z z = z + 1 You can use the following prefix operator instead: a = b + --c This line is equivalent to the following two instructions: c = c - 1 a = b + c C/C++ even offers a strange shortcut for an IF ELSE statement that uses a combination of a question mark and a colon, as follows: printf(\u201cThis number is bigger = %d\\n\u201d, (x > y) ? x : y); This line is equivalent to the following normal- looking IF ELSE statement: if (x > y) printf(\u201cThis number is bigger = %d\\n\u201d, x); else printf(\u201cThis number is bigger = %d\\n\u201d, y); The shorter, more cryptic version of the IF ELSE statement may take up less space and run faster, but it\u2019s harder to understand at first glance. In using shortcuts, be aware"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "c C/C++ even offers a strange shortcut for an IF ELSE statement that uses a combination of a question mark and a colon, as follows: printf(\u201cThis number is bigger = %d\\n\u201d, (x > y) ? x : y); This line is equivalent to the following normal- looking IF ELSE statement: if (x > y) printf(\u201cThis number is bigger = %d\\n\u201d, x); else printf(\u201cThis number is bigger = %d\\n\u201d, y); The shorter, more cryptic version of the IF ELSE statement may take up less space and run faster, but it\u2019s harder to understand at first glance. In using shortcuts, be aware that they can make your program harder to read. Use built-in commands whenever possible Nearly every programming language includes special built-in commands that run faster than equivalent commands that you type yourself. If you have a variable (MyNumber) that you want to increment by 1, for example, you can use the following command: MyNumber = MyNumber + 1 Nothing is wrong with this command, but other languages offer shortcuts for incrementing a variable by 1. In C/C++, you can use a shortcut as shown in the following example: mynumber++ If you want to increment a variable in Delphi (which is based on the Pascal language), you can use the following bit of code: Inc(MyNumber) If you use built-in commands, you risk making your code more cryptic and harder to understand. That\u2019s because not all programmers know all the built-in commands (shortcuts) that a particular language may offer. If a programmer encounters a built-in command, he may not understand how that particular command actually works. Using a Faster Language The fastest possible language in which you can write a program is machine code, followed by assembly language and C/C++, with the other languages (such as Pascal and BASIC) trailing slightly behind. If you want to speed up your program, consider switching to a different programming language. Many programmers use a simpler language such as Visual Basic to develop a prototype program that they can show to a client and to design the user inter- face. After you create a prototype program, you have two choices. Your first choice is to dump the entire prototype program and rewrite the whole thing from scratch using a faster language, such as C/C++. Naturally, this process can take a long time and doesn\u2019t guarantee that the program works right (but at least it probably looks good). Your second choice is to use the prototype of the program as the basis for your actual working program. But instead of writing the entire program in a single language, you can write the parts of the program that you expect people to use most often in a faster language. If you use two or more languages to create a single program, you can take advantage of each language\u2019s strengths. The drawback of this strategy is trying 306 Part V: Algorithms: Telling the Computer What to Do to make two or three different programming languages cooperate with one another."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "good). Your second choice is to use the prototype of the program as the basis for your actual working program. But instead of writing the entire program in a single language, you can write the parts of the program that you expect people to use most often in a faster language. If you use two or more languages to create a single program, you can take advantage of each language\u2019s strengths. The drawback of this strategy is trying 306 Part V: Algorithms: Telling the Computer What to Do to make two or three different programming languages cooperate with one another. Many people create a program by using a simple language, such as Visual Basic, and then, with each revision, they gradually rewrite parts of the program in a faster language, such as C/C++ or assembly language. The entire program may start out in one language, but eventually you completely rewrite in a differ- ent language. Optimizing Your Compiler As an alternative to using a faster language, you can use a faster compiler. If you put the identical program through different compilers, each compiler creates the same program, but one compiler\u2019s program may run faster than another compiler\u2019s program. Unfortunately, if you write a program in C++ for one compiler (such as Microsoft Visual C++), the program may not run at all in another C++ compiler (such as Borland C++ Builder) without extensive modifications. To give you more control over your program, most compilers offer options for changing the way that the compiler works. You can change these options to fine-tune your compiler for your particular program, as shown in Figure 22-1. Figure 22-1: Optimization settings for the Delphi compiler. 307 Chapter 22: Optimizing Your Code Make sure that you know what you\u2019re doing before you change any of your compiler optimization settings. Most of these optimization settings can make your program run faster but at the expense of turning off the compiler\u2019s built- in error-checking feature, which can help you spot bugs in your program. If you turn off your compiler\u2019s error-checking capabilities, your program runs faster, but it may crash more often as a result. 308 Part V: Algorithms: Telling the Computer What to Do Part VI Internet Programming In this part . . . P rogramming a computer once meant running a set of instructions on a single computer. If another computer wanted to run the same program, you needed to make a copy of the program and then run each copy on a different computer. But with the growing popularity of the Internet, a new vari- ation of programming has appeared. Instead of writing a single program to run on a single computer, you can write a single program that can run on a variety of different com- puters across the Internet. Theoretically, what you create on your computer another user can see on another com- puter anywhere in the world. This part of the book introduces you to the wonderful world of Internet programming languages. Programs"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "you needed to make a copy of the program and then run each copy on a different computer. But with the growing popularity of the Internet, a new vari- ation of programming has appeared. Instead of writing a single program to run on a single computer, you can write a single program that can run on a variety of different com- puters across the Internet. Theoretically, what you create on your computer another user can see on another com- puter anywhere in the world. This part of the book introduces you to the wonderful world of Internet programming languages. Programs that you write in Internet languages exist as source code on a single computer. If another computer accesses this source code, that computer runs the program and interprets the results. The most common Internet programming language is known as HTML, which is a special language for designing Web pages. Other popular languages for creating more interactive Web sites include Java and JavaScript. If you ever wanted to create your own Web pages that can inter- act with the user, this part is the place to start. Chapter 23 Playing with HTML In This Chapter \u0001 Understanding the basics of HTML \u0001 Using tags to define text \u0001 Using tag attributes \u0001 Making lists \u0001 Creating hyperlinks \u0001 Using graphics \u0001 Creating a user interface T he World Wide Web adds a graphical user interface to the Internet. You can use the Internet without using the World Wide Web, but you can\u2019t use the World Wide Web without using the Internet. Initially, the World Wide Web consisted solely of text, but the World Wide Web also allowed something called hyperlinks (text references that point to other documents stored on the World Wide Web). Because plain old text looks boring, eventually people added pictures to make the World Wide Web easier and prettier to use. Because the Internet consists of a variety of computers, programmers needed to make the graphical interface of the World Wide Web a standard that can run on any computer. Every computer can understand ASCII codes, so program- mers created an ASCII-based language that they dubbed HyperText Markup Language, or HTML. To create a Web site, you type HTML codes and store them in an ASCII file, which usually ends with the file extension .htm or .html. If another computer wants to view your Web site, it uses a special program known as a browser that translates the HTML code into a pretty graphical interface. Grasping the Basics of HTML HTML code defines the way that text and graphics appear in a browser. A Web page actually consists of HTML code that you store in an ASCII file, usually with the HTM or HTML file extension. HTML code consists of something known as tags, which appear in brackets. Most (but not all) tags appear in pairs, where the first tag defines the start of something and the second tag defines the end of something, such as defining italic"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "a special program known as a browser that translates the HTML code into a pretty graphical interface. Grasping the Basics of HTML HTML code defines the way that text and graphics appear in a browser. A Web page actually consists of HTML code that you store in an ASCII file, usually with the HTM or HTML file extension. HTML code consists of something known as tags, which appear in brackets. Most (but not all) tags appear in pairs, where the first tag defines the start of something and the second tag defines the end of something, such as defining italic text or a heading, as in the following example: <I>This text appears in italics.</I> An ASCII file contains nothing but characters without any formatting such as fonts or underlining. Because all computers can understand characters (such as letters, numbers, and symbols that you can type from a keyboard), you can transfer text from one computer to another using ASCII files. Ending tags always use a slash character: </I> or </BODY>. You can enclose tags within other tags, as in the following line: <B>This <I>text</I> appears in bold.</B> The preceding two tags display the entire line in bold and display the word text in both bold and italics, which looks as follows: This text appears in bold. Tags act as containers for holding text. Think of tags as marking the beginning and ending of a container. Make sure that you don\u2019t mix up your tags, or you may get unpredictable formatting of text, as in the following example: <B>This <I>text appears</B> in bold. </I> If you used the above mixed up tags, your text looks as follows: This text appears in bold. Ideally, you want to locate tags completely inside the beginning and ending of other tags, as shown in Figure 23-1. HTML codes can look cryptic if you cram them together, so feel free to use plenty of blank lines and spaces to make your HTML code look halfway read- able. Remember that when a browser interprets your HTML code into a Web page, it ignores blank lines or spaces. 312 Part VI: Internet Programming You can write HTML code in any text editor, such as Windows Notepad or even the Liberty BASIC editor. Just remember to save your file with the HTM or HTML file extension. After you create a file by using HTML codes, you can load that file into your browser by choosing File\u27aaOpen from the browser\u2019s menu bar. Grasping the most important HTML tags The following are the first HTML tags that every Web page needs: <HTML> </HTML> These two tags simply define a blank Web page. Anything that appears inside these two tags appears on the Web page. Nothing should appear before the <HTML> tag or after the </HTML> tag. If anything does appear in these locations in your text editor, it doesn\u2019t appear on-screen if you view the page in a Web browser. Creating a header and title Next, you need to define anything"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "file into your browser by choosing File\u27aaOpen from the browser\u2019s menu bar. Grasping the most important HTML tags The following are the first HTML tags that every Web page needs: <HTML> </HTML> These two tags simply define a blank Web page. Anything that appears inside these two tags appears on the Web page. Nothing should appear before the <HTML> tag or after the </HTML> tag. If anything does appear in these locations in your text editor, it doesn\u2019t appear on-screen if you view the page in a Web browser. Creating a header and title Next, you need to define anything that you want to appear in the header (the top) of your Web page by using the <HEAD> tag, which looks as follows: <HTML> <HEAD> </HEAD> </HTML> <tag1> <tag2> </tag2> </tag1> Correct <tag1> </tag1> <tag2> </tag2> Incorrect Figure 23-1: The correct (left) and incorrect (right) ways to use HTML tags. 313 Chapter 23: Playing with HTML The most common item to place between the <HEAD> and </HEAD> tags is a title. If someone decides to bookmark your Web page, the title is the text that the browser stores in that person\u2019s bookmark list. Without a title, the user\u2019s bookmark list contains the actual filename, which is often cryptic and confus- ing. After all, what\u2019s easier to read in a bookmark listing \u2014 an actual Web-page name, such as Web Site Containing American Nuclear Secrets or a file- name, such as NK1999.HTM? To define a title for your Web page, you shove the title tags between the header tags, as follows: <HTML> <HEAD> <TITLE>Document title</TITLE> </HEAD> </HTML> A Web page needs only one title. Defining the bulk of your Web page After you define a header and title for your Web page, you need to define the remainder of your page by using the <BODY> and </BODY> tags, as follows: <HTML> <HEAD> <TITLE>Document title</TITLE> </HEAD> <BODY> </BODY> </HTML> Adding comments In Liberty BASIC and other programming languages, you can insert comments that explain what your program is doing, when you last changed the program, and who last modified the program. As you\u2019re writing HTML code, you can also add comments to your Web pages. Comments don\u2019t appear in a browser; they appear only if you\u2019re viewing the HTML code. A comment must appear inside brackets as follows: 314 Part VI: Internet Programming <!-- This is a comment: Your mother is ugly and so are you. --> The <!-- marks the beginning of the comment tag, and the --> marks the end of the comment tag. Defining Text with Tags The basic HTML tags define your Web page as a whole, but you need to add text to provide something useful for viewers to read. HTML provides special tags for creating the following elements: \u0002 Headings separate sections of text and categorize blocks of text under a single topic (similar to the way that headings in this chapter separate and categorize text). \u0002 Paragraphs are blocks of text consisting of one or"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "and so are you. --> The <!-- marks the beginning of the comment tag, and the --> marks the end of the comment tag. Defining Text with Tags The basic HTML tags define your Web page as a whole, but you need to add text to provide something useful for viewers to read. HTML provides special tags for creating the following elements: \u0002 Headings separate sections of text and categorize blocks of text under a single topic (similar to the way that headings in this chapter separate and categorize text). \u0002 Paragraphs are blocks of text consisting of one or more sentences. \u0002 Quotes are similar to paragraphs, but the HTML tags for quotes indent and surround them with more space than ordinary paragraphs. \u0002 Text emphasis displays text in a certain format or style to highlight the text. The following sections describe each of these different text tags. Making a heading HTML enables you to choose among six heading styles. Heading 1 signifies the most important heading, and Heading 6 signifies the least important heading. Figure 23-2 shows an example of each type of heading. To create one of these six headings, use one of the following sets of HTML tags: <H1>Heading 1</H1> <H2>Heading 2</H2> <H3>Heading 3</H3> <H4>Heading 4</H4> <H5>Heading 5</H5> <H6>Heading 6</H6> 315 Chapter 23: Playing with HTML Usually, you want at least two subheadings under each heading. You want, for example, two or three Heading 2s under a single Heading 1. Or you want two or three Heading 6s under a single Heading 5. Defining a paragraph A paragraph is a chunk of text that you separate from the surrounding text by a blank line (just as with the paragraphs that you see on this page). To define the start of a paragraph, you use the <P> tag, and to define the end of the para- graph, you use the </P> tag, as follows: <P> This text you can consider a paragraph. </P> If you type text inside a pair of paragraph tags, the entire paragraph can exist on a single line, extending from the left margin of the screen to beyond the right margin of the screen. The paragraph tags automatically take care of dis- playing text within the margins of the screen. Figure 23-2: The six types of headings that you can create by using HTML tags. 316 Part VI: Internet Programming To make your paragraph text easier to read, you may want to press Enter to make paragraph lines appear on multiple lines instead of on a single line. If you want to insert a line break in the middle of a paragraph, you can use a special line-break tag \u2014 the <BR> tag. Unlike other tags, the line-break tag appears by itself. Figure 23-3 shows how the paragraph tag <P> and the line- break tag <BR> can create a blank line between paragraphs. Highlighting a quote If you want to make a paragraph stand out from the rest of your text, you can"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "paragraph text easier to read, you may want to press Enter to make paragraph lines appear on multiple lines instead of on a single line. If you want to insert a line break in the middle of a paragraph, you can use a special line-break tag \u2014 the <BR> tag. Unlike other tags, the line-break tag appears by itself. Figure 23-3 shows how the paragraph tag <P> and the line- break tag <BR> can create a blank line between paragraphs. Highlighting a quote If you want to make a paragraph stand out from the rest of your text, you can define it as a quote this way: <BLOCKQUOTE> This text appears indented. </BLOCKQUOTE> Figure 23-3: How a paragraph looks if you display it in a Web browser. 317 Chapter 23: Playing with HTML Adding emphasis to text Paragraph tags can separate your text into paragraphs (automatically insert- ing blank lines before and after the paragraph), and block quotes can indent your text. But you may want to highlight specific words or phrases. To do so, you can use the following pairs of HTML tags: \u0002 <B> and </B> display text in bold. \u0002 <I> and </I> display text in italics. \u0002 <U> and </U> display text underlined. \u0002 <TT> and </TT> display text as if you\u2019re printing it from a typewriter. \u0002 <HR> displays a horizontal line. (Notice that the <HR> tag is another tag that doesn\u2019t appear in a pair.) Figure 23-4 shows a Web page that uses all these special ways to emphasize text within a browser. Figure 23-4: Displaying text to emphasize certain words and phrases. 318 Part VI: Internet Programming Using Tag Attributes To truly enhance the appearance of your text, you can use attributes. An attribute is a special command that you bury inside an HTML tag. An attribute modifies the appearance of any text that tag defines. The following are some common attributes: \u0002 ALIGN aligns paragraph or heading text to the right, center, or left. \u0002 BGCOLOR changes the background color of a Web page. \u0002 TEXT changes the color of text. \u0002 LINK changes the color of hyperlinks. \u0002 VLINK changes the color of hyperlinks that a user has already visited. Aligning text You normally left-align headings and paragraphs, but you can also right-align or center-align them by using the ALIGN attribute inside the first heading or paragraph tag, as in the following example: <P ALIGN=\u201dcenter\u201d> This text appears centered. </P> To center-align text, you just need to use the word \u201ccenter\u201d with the ALIGN attribute. To align text to the right or left, use the word \u201cright\u201d or \u201cleft\u201d with the ALIGN attribute, as follows: <H1 ALIGN=\u201dright\u201d> This text appears right-aligned. </H1> Playing with colors To define the background and text colors, you must set the BGCOLOR and TEXT attributes to the color that you want to use. The latest versions of most 319 Chapter 23: Playing with HTML browsers allow you to define colors by using names such as red,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "following example: <P ALIGN=\u201dcenter\u201d> This text appears centered. </P> To center-align text, you just need to use the word \u201ccenter\u201d with the ALIGN attribute. To align text to the right or left, use the word \u201cright\u201d or \u201cleft\u201d with the ALIGN attribute, as follows: <H1 ALIGN=\u201dright\u201d> This text appears right-aligned. </H1> Playing with colors To define the background and text colors, you must set the BGCOLOR and TEXT attributes to the color that you want to use. The latest versions of most 319 Chapter 23: Playing with HTML browsers allow you to define colors by using names such as red, blue, or yellow as shown below: <BODY BGCOLOR=\u201dwhite\u201d> (white background) <BODY TEXT=\u201dblack\u201d> (black text) For greater flexibility, you can use a six-digit (hexadecimal) number that repre- sents the RGB (Red-Green-Blue) value. An RGB value defines how much red, green, and blue appears. By altering the amount of red, green, or blue, you can create a variety of different colors such as purple, white, orange, yellow, and so on. The following code is just one example: <BODY BGCOLOR=\u201dFFFFFF\u201d> (white background) <BODY TEXT=\u201d000000\u201d> (black text) You define RGB colors by using hexadecimal numbers, which range from 0 to F (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F). A zero (0) represents the absence of a color, whereas an F represents the maximum amount of a color. You can vary the values for red, blue, and green to create other colors. The first two digits in the BGCOLOR and TEXT attributes represent the amount of red (R), the second two digits represent the amount of green (G), and the last two digits represent the amount of blue (B) in the color. If you want a completely red background, use the following command: <BODY BGCOLOR=\u201dFF0000\u201d> For a completely green background, use the following command: <BODY BGCOLOR=\u201d00FF00\u201d> And for a totally blue background, use the following command: <BODY BGCOLOR=\u201d0000FF\u201d> Coloring your hyperlinks You may also want to adjust the colors for your hyperlinks. Most Web pages display hyperlinks in a bright color to make them obvious. After a user visits a hyperlink, that hyperlink can change colors to show the user that he\u2019s already been to that Web page. To change colors for your hyperlinks, use one of the following tags: 320 Part VI: Internet Programming <BODY LINK=\u201d#hexadecimal_here\u201d> <BODY VLINK=\u201d#hexadecimal_here\u201d> If you want to use both the LINK and VLINK attributes, you can do so as follows: <BODY LINK=\u201d#hexadecimal_here\u201d VLINK=\u201d#hexadecimal_here\u201d> The LINK attribute uses the same hexadecimal numbers as for text and back- grounds to define the color for a hyperlink. The VLINK attribute similarly defines the color to display a hyperlink that the user\u2019s already visited. Making a List Creating a Web page to inform people about something is like creating an attention-grabbing television advertisement. In both cases, you want to show the viewer as much information as possible in an attractive and easily digestible way. Many people find large chunks of text intimidating and hard"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "LINK and VLINK attributes, you can do so as follows: <BODY LINK=\u201d#hexadecimal_here\u201d VLINK=\u201d#hexadecimal_here\u201d> The LINK attribute uses the same hexadecimal numbers as for text and back- grounds to define the color for a hyperlink. The VLINK attribute similarly defines the color to display a hyperlink that the user\u2019s already visited. Making a List Creating a Web page to inform people about something is like creating an attention-grabbing television advertisement. In both cases, you want to show the viewer as much information as possible in an attractive and easily digestible way. Many people find large chunks of text intimidating and hard to read, so consider separating your text into lists. HTML provides the following three types of lists (and I\u2019m using a list to show you those lists): \u0002 Unordered lists display text with bullets in front of each line, such as the list of which this text is a part. \u0002 Ordered lists number each line of text. \u0002 Definition lists indent each line of text. Unordered lists To create an unordered list, you need to use two types of HTML tags. The first HTML tags are <UL> and </UL>, which define the unordered list. The second tag, <LI> (which stands for List Item), marks each bulleted item. Following is an example: <UL> <LI>Take out the trash. <LI>Develop a nuclear weapon. <LI>Borrow an expensive appliance from the neighbor. </UL> 321 Chapter 23: Playing with HTML The <LI> tag doesn\u2019t require an ending tag. You can use <LI> by itself, if desired, or you can use </LI> as the ending tag. You can also create a nested unordered list as follows: <UL> <LI>Take out the trash. <LI>Develop a nuclear weapon. <UL> <LI>Steal secrets from the United States. <LI>Bomb our own embassy. <LI>Export more MSG to our enemies. </UL> <LI>Borrow an expensive appliance from the neighbor. </UL> Figure 23-5 shows how the preceding HTML code creates a nested, unordered list. Notice that the nested unordered list uses unique bullets to differentiate it from the outer unordered list. Figure 23-5: Creating a nested unordered list. 322 Part VI: Internet Programming Ordered lists Whereas an unordered list displays items with bullets, an ordered list displays items with numbers. The first list item is number 1; the second is number 2; and so on. To create an ordered list, you use the HTML tags <OL> and </OL> to define the ordered list. Then you use the <LI> tag to mark each numbered item. Following is an example: <OL> <LI>Turn left at the traffic light. <LI>Drive five blocks. <LI>Throw a rotten egg at the front door. </OL> You can also create a nested ordered list as follows: <OL> <LI>Turn left at the traffic light. <LI>Drive five blocks. <OL> <LI>Go past a burned down house. <LI>Drive through the next three traffic lights. <LI>Look for the house with toilet paper in the trees. </OL> <LI>Throw a rotten egg at the front door. </OL> Figure 23-6 shows a nested, ordered list. Notice that the nested ordered list uses different"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the <LI> tag to mark each numbered item. Following is an example: <OL> <LI>Turn left at the traffic light. <LI>Drive five blocks. <LI>Throw a rotten egg at the front door. </OL> You can also create a nested ordered list as follows: <OL> <LI>Turn left at the traffic light. <LI>Drive five blocks. <OL> <LI>Go past a burned down house. <LI>Drive through the next three traffic lights. <LI>Look for the house with toilet paper in the trees. </OL> <LI>Throw a rotten egg at the front door. </OL> Figure 23-6 shows a nested, ordered list. Notice that the nested ordered list uses different numbering from the outer ordered list. You can nest ordered and unordered lists inside one another, instead of nesting two unordered lists or two ordered lists. That way, you can have a bulleted list inside a numbered list or vice versa. Definition lists Definition lists get their name from the fact that people often use them in glos- saries, where one line lists a term and a second line lists the definition of that term. To create a definition list, you need to use the following three types of HTML tags: 323 Chapter 23: Playing with HTML \u0002 The <DL> and </DL> tags define the start and end of a definition list. \u0002 The <DT> tag displays a line of text, such as a single word or term. \u0002 The <DD> tag displays a definition for the word or term that the preceding <DT> tag defines. To see how to create a definition list, look at the following code and then take a look at Figure 23-7, which shows how the following HTML code looks in a browser: <DL> <DT>Cat <DD>An animal that enslaves its owners. <DT>Flashlight <DD>A case for holding dead batteries. <DT>Morons <DD>A boss or someone who doesn\u2019t know how to do anything but pretends to be important. </DL> Figure 23-6: Creating a nested ordered list. 324 Part VI: Internet Programming Creating Hyperlinks Every good Web page needs two items: information (usually text) that provides some useful content and hyperlinks that link your Web page to a related Web page. A Web page usually offers the following two types of hyperlinks: \u0002 External hyperlinks are links to other Web pages that typically reside on another computer (and often in another geographical location). \u0002 Internal hyperlinks are links to different pages of your own Web site or to a different part of the same Web page. To create a hyperlink, you must use a pair of anchor tags, such as <A> and </A>. Inside the first anchor tag, you must specify either an external or inter- nal hyperlink. Between the two anchor tags, you type the text or graphics that act as the hyperlink. Figure 23-7: A definition list as it appears in a Web browser. 325 Chapter 23: Playing with HTML Making external hyperlinks In defining an external hyperlink, the HREF (which stands for Hypertext REFerence) attribute defines the following two items: \u0002 The external hyperlink address, which"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "different part of the same Web page. To create a hyperlink, you must use a pair of anchor tags, such as <A> and </A>. Inside the first anchor tag, you must specify either an external or inter- nal hyperlink. Between the two anchor tags, you type the text or graphics that act as the hyperlink. Figure 23-7: A definition list as it appears in a Web browser. 325 Chapter 23: Playing with HTML Making external hyperlinks In defining an external hyperlink, the HREF (which stands for Hypertext REFerence) attribute defines the following two items: \u0002 The external hyperlink address, which appears in a form similar to the following example: http://www.someaddress.com. \u0002 The text or graphic that acts as the hyperlink, which is what the user clicks to jump to the external hyperlink. To use the HREF attribute, you must put it inside the first anchor tag, as shown in the following example: <A HREF=\u201dhttp://www.dummies.com\u201d>Dummies Web page</A> In this example, the words Dummies Web page are the text the viewer sees as the hyperlink. Clicking the hyperlink takes users to the www.dummies.com Web site. External hyperlinks are completely out of your control, so if a Web site to which you link goes down, your Web page\u2019s hyperlink leads viewers to a dead end. Making internal hyperlinks To make a hyperlink to another Web page on your own site, use the HREF attribute \u2014 but instead of listing another Web site address, just type the file- name of the Web page to which you want to link, as in the following example: <A HREF=\u201dindex.html\u201d>Index</A> This creates a hyperlink of the word Index. After users click this hyperlink, their browsers display the Web page that you store in the index.html file. Linking to a specific spot on a Web page One problem with linking to another Web page is that the user may need to scroll down the page to find specific information. To avoid this problem, you can create a hyperlink to a specific spot on a Web page, such as the middle or the bottom of the Web page. That way, the hyperlink directs the viewer to the exact information that you want to display. 326 Part VI: Internet Programming Creating a hyperlink that connects to a particular spot on another Web page is a two-step process, as the following steps describe: 1. Create an anchor in the spot on the Web page that you want a hyper- link to display. If you want a hyperlink to direct a viewer to the bottom of a Web page, for example, you place an anchor at the bottom of that particular page. 2. Create a hyperlink that directs a viewer to an anchor that you define. To create an anchor, you must use the NAME attribute, as follows: <A NAME=\u201dTOC\u201d>Table of Contents</A> This example displays the text Table of Contents on the Web page and assigns it the name \u201cTOC\u201d. After you create an anchor, the next step is to create a hyperlink"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Web page that you want a hyper- link to display. If you want a hyperlink to direct a viewer to the bottom of a Web page, for example, you place an anchor at the bottom of that particular page. 2. Create a hyperlink that directs a viewer to an anchor that you define. To create an anchor, you must use the NAME attribute, as follows: <A NAME=\u201dTOC\u201d>Table of Contents</A> This example displays the text Table of Contents on the Web page and assigns it the name \u201cTOC\u201d. After you create an anchor, the next step is to create a hyperlink that points to that particular anchor. Anchors are case-sensitive, which means that an anchor that you name TOC is completely different from an anchor that you name toc. If you forget this differ- ence, your anchors won\u2019t work at all. To make a hyperlink point to a predefined anchor, use the HREF attribute and include the Web-page filename, and the anchor name, separated from the Web page filename with the # character as follows: <A HREF=\u201dindex.html#TOC\u201d>Go to Page One</A> The preceding code displays the hyperlink Go to Page One on-screen. After the user clicks this hyperlink, the browser jumps to the index.html page and displays the anchor that the name \u201cTOC\u201d defines. In this case, the browser displays the Table of Contents at the top of the page, regardless of whether the words Table of Contents appear in the middle or at the bottom of the Web page. Displaying Graphics Just displaying text on a Web page can get pretty boring, so HTML enables you to display graphic images on your Web pages to make everything look prettier. Graphics can appear as part of the Web page or in the background. The only picture files that you can use for Web pages are GIF (Graphical Interchange Format) and JPG (also spelled JPEG, which stands for Joint Photographic Experts Group) files because these are the two graphic file formats that every computer can display. 327 Chapter 23: Playing with HTML Putting a picture on a Web page To display a picture on a Web page, you must use the image tag <IMG> and the source (SRC) attribute to tell the computer the specific filename of the graphic image that you want to display. Following is an example: <IMG SRC=\u201dfilename.gif\u201d> To give you greater control over the placement of a picture in relation to any text that appears next to the picture, you can use the ALIGN attribute. This attribute defines whether text appears at the top, at the bottom, or to either side of the image, as follows: <IMG SRC=\u201dfilename.gif\u201d ALIGN=middle> Figure 23-8 shows examples of text aligning with graphic images in a browser. Figure 23-8: The three positions for aligning text with a graphic image. 328 Part VI: Internet Programming Adding a background picture In addition to adding colors to a Web page, you may also want to display a picture in the background. To add a picture to a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "relation to any text that appears next to the picture, you can use the ALIGN attribute. This attribute defines whether text appears at the top, at the bottom, or to either side of the image, as follows: <IMG SRC=\u201dfilename.gif\u201d ALIGN=middle> Figure 23-8 shows examples of text aligning with graphic images in a browser. Figure 23-8: The three positions for aligning text with a graphic image. 328 Part VI: Internet Programming Adding a background picture In addition to adding colors to a Web page, you may also want to display a picture in the background. To add a picture to a Web page, use the BACKGROUND attribute inside the BODY tag, as in the following example: <BODY BACKGROUND =\u201dfilename.GIF\u201d> Creating a User Interface on a Form Although you can use HTML to display text on-screen, you may want to create something more flexible \u2014 what\u2019s known as a form. A form enables you to display text boxes, command buttons, and check boxes on-screen. To define a form, you use the <FORM> and </FORM> tags, which you sandwich between the <BODY> and </BODY> tags, as follows: <HTML> <BODY> <FORM> </FORM> </BODY> </HTML> Make sure that you sandwich the <FORM> and </FORM> tags inside the <BODY> and </BODY> tags; otherwise, your form doesn\u2019t appear on-screen. Of course, the <FORM> and </FORM> tags simply define a form, so you still must add your user interface items on the form, as shown in Figure 23-9. The follow- ing are some common user interface items that you may want to include on a form: \u0002 Text boxes are boxes in which users can type data. \u0002 Buttons are command buttons that users can click. \u0002 Check boxes are boxes that users can check or clear to choose or remove an option. \u0002 Radio buttons are buttons that users can check or clear to choose an option. You can select only one radio button at a time. 329 Chapter 23: Playing with HTML Handling events Every user interface element can respond to the user. Any time that the user does something to a user interface item, such as clicking on a command button, this action is known as an event. After an event occurs on a specific user interface item, such as a command button, your form can respond by displaying text, opening a window, and so on. The following are the HTML codes for some common events: \u0002 onAbort occurs after the user stops loading an image, either by clicking a link or clicking the Stop button. \u0002 onBlur occurs after an item, such as a text box or command button, loses focus. This event usually occurs after the user clicks another item. \u0002 onChange occurs after the contents of an item, such as a text box, change. \u0002 onClick occurs after the user clicks a specific item, such as a radio button or a command button. \u0002 onFocus occurs after the user clicks an object or highlights an object by using the Tab key. \u0002"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "events: \u0002 onAbort occurs after the user stops loading an image, either by clicking a link or clicking the Stop button. \u0002 onBlur occurs after an item, such as a text box or command button, loses focus. This event usually occurs after the user clicks another item. \u0002 onChange occurs after the contents of an item, such as a text box, change. \u0002 onClick occurs after the user clicks a specific item, such as a radio button or a command button. \u0002 onFocus occurs after the user clicks an object or highlights an object by using the Tab key. \u0002 onMouseOut occurs after the mouse pointer no longer appears over a certain item. \u0002 onMouseOver occurs after the mouse pointer moves over a certain item. \u0002 onSelect occurs after the user selects text within a text box. Figure 23-9: Common user interface elements that you can display on a form. 330 Part VI: Internet Programming Events link to a specific user interface item, such as a command button or a check box. A single user interface item can respond to more than one type of event. Creating a text box A text box can display text and enable the user to type text. To create a text box, type the following command inside the <FORM> and </FORM> tags: <FORM> <INPUT TYPE=text NAME=\u201dtextboxName\u201d VALUE=\u201dText inside the text box\u201d SIZE=integer [onBlur=\u201dcommand\u201d] [onChange=\u201dcommand\u201d] [onFocus=\u201dcommand\u201d] [onSelect=\u201dcommand\u201d]> </FORM> The TYPE=text command tells the computer to create a text box on-screen. The NAME command assigns any name that you choose to represent your text box. The VALUE command displays text inside your text box. The SIZE com- mand defines how many characters the text box can display without scrolling. A text box can respond to four different events: onBlur, onChange, onFocus, and onSelect. The following shows how to create a text box that displays the message \u201cOw! You click too hard!\u201d after you click inside the text box: <HTML> <BODY> <FORM> <INPUT TYPE=text NAME=\u201dtextboxName\u201d VALUE=\u201dThis appears inside the text box\u201d SIZE=30 onFocus=\u201dtextboxName.value=\u2019Ow! You click too hard!\u2019\u201d> </FORM> </BODY> </HTML> 331 Chapter 23: Playing with HTML Notice the use of single and double quotation marks following the onFocus event. The double quotation marks enclose the entire command that you want the computer to follow after the onFocus event occurs. Any command inside the double quotation marks must use single quotation marks or the entire command won\u2019t work. Creating a command button A command button displays a button that the user can click to perform a specific action. To create a command button, use the following code inside the <FORM> and </FORM> tags: <FORM> <INPUT TYPE=button NAME=\u201dbuttonName\u201d VALUE=\u201dText that appears on the button\u201d [onBlur=\u201dhandlerText\u201d] [onClick=\u201dhandlerText\u201d] [onFocus=\u201dhandlerText\u201d]> </FORM> The TYPE=button command creates a command button on-screen. The NAME command assigns a name to represent your command button. The VALUE com- mand displays the text that appears inside the command button, such as OK or Click Me. Command buttons can respond to three different events: onBlur, onClick, and onFocus. The"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Creating a command button A command button displays a button that the user can click to perform a specific action. To create a command button, use the following code inside the <FORM> and </FORM> tags: <FORM> <INPUT TYPE=button NAME=\u201dbuttonName\u201d VALUE=\u201dText that appears on the button\u201d [onBlur=\u201dhandlerText\u201d] [onClick=\u201dhandlerText\u201d] [onFocus=\u201dhandlerText\u201d]> </FORM> The TYPE=button command creates a command button on-screen. The NAME command assigns a name to represent your command button. The VALUE com- mand displays the text that appears inside the command button, such as OK or Click Me. Command buttons can respond to three different events: onBlur, onClick, and onFocus. The following example shows how to create two command buttons \u2014 one that opens a window to display the Web page that you store in the index.html file and one that closes the window: <HTML> <BODY> <FORM> <INPUT TYPE=button NAME=\u201dopen\u201d VALUE=\u201dOpen window\u201d onClick=\u201dmywindow=window.open(\u2018index.html\u2019)\u201d> <INPUT TYPE=button NAME=\u201dclose\u201d VALUE=\u201dClose window\u201d onClick=\u201dmywindow.close()\u201d> </FORM> </BODY> </HTML> 332 Part VI: Internet Programming Notice that the command that the onClick event defines uses double quota- tion marks to enclose the entire command. Anything that appears inside must use single quotation marks or the entire command won\u2019t work. Creating a check box Check boxes display options that the user can choose by clicking the check box to add or remove a check mark. To make a check box, put the following command inside the <FORM> and </FORM> tags: <FORM> <INPUT TYPE=checkbox NAME=\u201dcheckboxName\u201d VALUE=\u201dcheckboxValue\u201d [CHECKED] [onBlur=\u201dhandlerText\u201d] [onClick=\u201dhandlerText\u201d] [onFocus=\u201dhandlerText\u201d]> textToDisplay </FORM> The TYPE=checkbox command creates a check box on-screen. The NAME command assigns a name to represent that check box. The VALUE command specifies a number or string that the check box represents if the user chooses it. The CHECKED command displays a check mark in the check box. The text ToDisplay variable represents any text that you want to display next to the check box. A check box can respond to three different events: onBlur, onClick, and onFocus. The following example creates three check boxes: <HTML> <BODY> <H2>Where do you want your computer to go today?</H2> <FORM> <INPUT TYPE = checkbox NAME=\u201dcheck1\u201d VALUE=99 onClick=\u201dlitterbox.value=\u2019Throw the computer in the trash.\u2019\u201d> In the trash can <BR> <INPUT TYPE = checkbox NAME=\u201dcheck2\u201d VALUE=99 333 Chapter 23: Playing with HTML onClick=\u201dlitterbox.value=\u2019Toss the computer outside.\u2019\u201d> Out the window <BR> <INPUT TYPE = checkbox NAME=\u201dcheck3\u201d VALUE=99 onClick=\u201dlitterbox.value=\u2019Wreck it, and then throw it away.\u2019\u201d> Smash it to pieces <BR> <INPUT TYPE = text NAME=\u201dlitterbox\u201d VALUE=\u201d\u201d SIZE = 40> </FORM> </BODY> </HTML> After you click a check box, a message appears in a text box below it, as shown in Figure 23-10. If you type text to appear next to a check box, you don\u2019t need to enclose it in quotation marks. If you do enclose the text inside quotation marks, the quo- tation marks appear on-screen as well. Figure 23-10: Creating three check boxes and one text box. 334 Part VI: Internet Programming Creating a radio button A radio button works much like a check box, except that you can choose only one radio button at"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "= 40> </FORM> </BODY> </HTML> After you click a check box, a message appears in a text box below it, as shown in Figure 23-10. If you type text to appear next to a check box, you don\u2019t need to enclose it in quotation marks. If you do enclose the text inside quotation marks, the quo- tation marks appear on-screen as well. Figure 23-10: Creating three check boxes and one text box. 334 Part VI: Internet Programming Creating a radio button A radio button works much like a check box, except that you can choose only one radio button at any given time. Radio buttons enable users to answer ques- tions for which only one answer is possible, as in the following example: What is your current marital status? To answer this question, you need radio buttons for the following three responses: \u0002 Single \u0002 Married \u0002 Divorced The user can choose only one of the responses. If the user clicks the Single radio button, changes his mind, and then clicks the Divorced radio button, a dot appears in the Divorced radio button to show that the user\u2019s choosing it, and the Single radio button becomes empty to show that it\u2019s no longer chosen. To see how to create a radio button, look at the following code: <FORM> <INPUT TYPE=radio NAME=\u201dradioName\u201d VALUE=\u201dbuttonValue\u201d [CHECKED] [onBlur=\u201dhandlerText\u201d] [onClick=\u201dhandlerText\u201d] [onFocus=\u201dhandlerText\u201d]> textToDisplay </FORM> The TYPE=radio command creates a radio button on-screen. The NAME com- mand assigns a name to represent that radio button. If you want only one radio button to appear chosen within a group of radio buttons, you must give all radio buttons exactly the same name. When radio buttons share the same name, the computer makes sure that only one radio button can be selected at a time. 335 Chapter 23: Playing with HTML The VALUE command specifies a number or string that the radio button repre- sents if the user chooses it. The CHECKED command displays the radio button as chosen as it first appears on-screen. The textToDisplay variable repre- sents any text that you want to appear next to the radio button. A radio button can respond to three different events: onBlur, onClick, and onFocus. After you click a radio button, a message appears in a text box below the button. The following example shows how to create three radio buttons: <HTML> <BODY> <H2>Where do you want your computer to go today?</H2> <FORM> <INPUT TYPE = radio NAME=\u201dgroup1\u201d VALUE=99 onClick=\u201dlitterbox.value=\u2019Throw the computer in the trash.\u2019\u201d> In the trash can <BR> <INPUT TYPE = radio NAME=\u201dgroup1\u201d VALUE=99 onClick=\u201dlitterbox.value=\u2019Toss the computer outside.\u2019\u201d> Out the window <BR> <INPUT TYPE = radio NAME=\u201dgroup1\u201d VALUE=99 onClick=\u201dlitterbox.value=\u2019Wreck it, and then throw it away.\u2019\u201d> Smash it to pieces <BR> <INPUT TYPE = text NAME=\u201dlitterbox\u201d VALUE=\u201d\u201d SIZE = 40> </FORM> </BODY> </HTML> 336 Part VI: Internet Programming Notice that all radio buttons in the preceding example share the same name, which is \u201cgroup1\u201d. That way, the computer makes sure that only one radio button at a time can"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "go today?</H2> <FORM> <INPUT TYPE = radio NAME=\u201dgroup1\u201d VALUE=99 onClick=\u201dlitterbox.value=\u2019Throw the computer in the trash.\u2019\u201d> In the trash can <BR> <INPUT TYPE = radio NAME=\u201dgroup1\u201d VALUE=99 onClick=\u201dlitterbox.value=\u2019Toss the computer outside.\u2019\u201d> Out the window <BR> <INPUT TYPE = radio NAME=\u201dgroup1\u201d VALUE=99 onClick=\u201dlitterbox.value=\u2019Wreck it, and then throw it away.\u2019\u201d> Smash it to pieces <BR> <INPUT TYPE = text NAME=\u201dlitterbox\u201d VALUE=\u201d\u201d SIZE = 40> </FORM> </BODY> </HTML> 336 Part VI: Internet Programming Notice that all radio buttons in the preceding example share the same name, which is \u201cgroup1\u201d. That way, the computer makes sure that only one radio button at a time can be selected by the user. Deciding to Use Additional HTML Features The basic HTML codes described in the preceding sections of this chapter provide the fundamental elements that you need to know to create and edit simple Web pages. But newer versions of HTML offer additional features for creating tables, displaying fonts, or dividing a Web page into frames. Frames enable you to divide a Web browser screen into two or more parts, where each part (frame) can display a different Web page or a different part of the same Web page. Although these features may seem useful and fun, keep in mind that they don\u2019t always work with all versions of browsers. If you want to ensure that all users can view your Web page, stick with the basic HTML tags described in this chapter. 337 Chapter 23: Playing with HTML 338 Part VI: Internet Programming Chapter 24 Making Interactive Web Pages with JavaScript In This Chapter \u0001 Knowing the basics of JavaScript \u0001 Playing around with functions \u0001 Opening and closing windows H TML code can produce pretty \u2014 but ultimately static \u2014 pages that resemble billboards or magazine advertisements. Although these Web pages are functional, many people want to take fuller advantage of the com- puter and create miniprograms on their Web pages so that people can inter- act with the Web page by playing games or analyzing their stock portfolio. So to create more interactive Web pages, programmers created specialized Web-page programming languages, such as JavaScript and VBScript. If you write miniature programs in either JavaScript or VBScript, you can create your own programs just for running on your Web site. Despite the name similarities, JavaScript bears only a superficial resemblance to Java. JavaScript uses simple commands, and JavaScript programs can run only inside a browser. Java uses more complicated commands and can create separate applications. To practice writing JavaScript programs, use a text editor (such as Windows Notepad or the Liberty BASIC editor) and save your files with the HTML file extension. Then load your browser, choose File\u27aaOpen, and choose the file that you just saved with the HTML file extension to see how your browser interprets your JavaScript programs. Netscape created JavaScript; to compete against JavaScript, Microsoft created a similar language that it dubbed VBScript. VBScript isn\u2019t as popular as JavaScript, but it\u2019s still easy to use because it\u2019s based on the Visual Basic"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Java uses more complicated commands and can create separate applications. To practice writing JavaScript programs, use a text editor (such as Windows Notepad or the Liberty BASIC editor) and save your files with the HTML file extension. Then load your browser, choose File\u27aaOpen, and choose the file that you just saved with the HTML file extension to see how your browser interprets your JavaScript programs. Netscape created JavaScript; to compete against JavaScript, Microsoft created a similar language that it dubbed VBScript. VBScript isn\u2019t as popular as JavaScript, but it\u2019s still easy to use because it\u2019s based on the Visual Basic language. Just remember that any time you write a JavaScript or VBScript program in your Web page, the program may not run on an older version of a browser (which are often found running on Internet appliances such as Internet kiosks and WebTV devices). For another way to make your Web pages flashier and interesting, consider using a program called Flash (www.macromedia.com). Professional Web design- ers use Flash to create pull-down menus or show animated cartoons. If you\u2019re planning to design Web pages professionally, learning Flash is an absolute must. (For more information about Flash, pick up a copy of Macromedia Flash MX For Dummies by Gurdy Leete and Ellen Finkelstein, published by Wiley Publishing, Inc.) Understanding the Basics of JavaScript To define the start and end of a JavaScript program, you use just two tags, which look similar to HTML tags. Following is an example: <script language = \u201cJavaScript\u201d> </script> You can insert a JavaScript program between the <BODY> and </BODY> HTML tags, as in the following example: <HTML> <HEAD> <TITLE>Document title</TITLE> </HEAD> <BODY> <script language = \u201cJavaScript\u201d> </script> </BODY> </HTML> Because older browsers may not understand JavaScript commands, insert two additional lines immediately after the <script> tag and immediately before the </script> tag, as follows: <script language = \u201cJavaScript\u201d> <!-- //--> </script> The middle two lines tell older browsers to treat any JavaScript commands as comments, essentially making the browser ignore JavaScript altogether. Newer browsers that can understand JavaScript simply run the JavaScript commands. 340 Part VI: Internet Programming As an alternative to typing JavaScript code directly into an HTML file, you can store your JavaScript code in a separate file. Then to load and run the code in your JavaScript file, you can use the SRC attribute, as in the following example: <script language = \u201cJavaScript\u201d SRC=\u201dprogram.js\u201d> </script> This example tells the computer to load and run the JavaScript program stored in the file PROGRAM.JS. Displaying text JavaScript includes a document.write command for printing text on-screen: To see how this command works, look at the following example: document.write(\u201cText to print goes here.\u201d) If you want to get fancy, you can include ordinary HTML tags inside the parentheses to format the text. To display text in boldface, for example, just shove in the HTML bold tag, as in the following example: document.write(\u201c<B>\u201d, \u201cThis text appears bold.\u201d, \u201c</B>\u201d) 341 Chapter 24: Making Interactive Web Pages with JavaScript Objects and"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "</script> This example tells the computer to load and run the JavaScript program stored in the file PROGRAM.JS. Displaying text JavaScript includes a document.write command for printing text on-screen: To see how this command works, look at the following example: document.write(\u201cText to print goes here.\u201d) If you want to get fancy, you can include ordinary HTML tags inside the parentheses to format the text. To display text in boldface, for example, just shove in the HTML bold tag, as in the following example: document.write(\u201c<B>\u201d, \u201cThis text appears bold.\u201d, \u201c</B>\u201d) 341 Chapter 24: Making Interactive Web Pages with JavaScript Objects and JavaScript JavaScript is based on objects. (See Chapter 19 for more information about objects.) Objects include three characteristics: properties, meth- ods, and events. Properties define the appearance of the object, such as its color. Methods define actions that you can make the object perform. One of the most common objects is a document object, and its most common method is the write command. Events are occurrences that the object can respond to, such as a mouse click- ing an object. You can still use JavaScript without knowing much about objects, but knowing how objects work can help you better understand JavaScript. For now, just keep in mind that JavaScript is based on objects, so if you see strange JavaScript commands \u2014 such as document. write(\u201cHello, there!\u201d) \u2014 you can recognize that this command is telling a document object to write something on- screen. The document.write command can also smash strings together by using the plus (+) sign, as follows: document.write(\u201c<B>\u201d, \u201cThis text appears bold.\u201d, \u201c</B>\u201d + \u201c And this text appears as normal text.\u201d) The preceding command creates the following display: This text appears bold. And this text appears as normal text. Creating variables In the document.write example in the preceding section, the plus sign (+) links strings and variables that represent strings. In JavaScript, you can declare a variable by using the magical var command, as follows: var variablename In JavaScript, you don\u2019t need to declare a variable data type; you just declare a variable name. Then you can set a variable to represent a string and use the plus sign (+) to link a string to a variable representing a string, as in the follow- ing example: <script language = \u201cJavaScript\u201d> <!-- var mymessage mymessage = \u201cA goldfish.\u201d document.write(\u201cWhat animal has a near death experience every time you flush the toilet? Answer: \u201c + mymessage) //--> </script> This JavaScript program tells the computer to do the following: 1. The first and second lines tells the computer, \u201cAnything that you see between the <script> and the </script> tags is a JavaScript program.\u201d 2. The third line creates the variable mymessage. 3. The fourth line assigns the string A goldfish to the mymessage variable. 4. The fifth line writes the string, What animal has a near death experience every time you flush the toilet? Answer: A goldfish. 5. The sixth and seventh lines tell the computer that the JavaScript pro-"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "flush the toilet? Answer: \u201c + mymessage) //--> </script> This JavaScript program tells the computer to do the following: 1. The first and second lines tells the computer, \u201cAnything that you see between the <script> and the </script> tags is a JavaScript program.\u201d 2. The third line creates the variable mymessage. 3. The fourth line assigns the string A goldfish to the mymessage variable. 4. The fifth line writes the string, What animal has a near death experience every time you flush the toilet? Answer: A goldfish. 5. The sixth and seventh lines tell the computer that the JavaScript pro- gram is at an end. 342 Part VI: Internet Programming Making dialog boxes The document.write command can come in handy for displaying text on- screen. But JavaScript can go much farther than displaying text by creating dialog boxes. JavaScript can create the following types of dialog boxes: \u0002 An alert dialog box \u0002 A confirmation dialog box \u0002 A prompt dialog box Making an alert dialog box One type of dialog box that programs use fairly often is an alert dialog box. An alert dialog box usually pops up on-screen to alert the user that something important has just happened or is about to happen, as shown in Figure 24-1. To create this alert dialog box, you use the following alert command: alert(\u201cNuclear meltdown has occurred. Time to evacuate!\u201d) The alert command displays a dialog box that stays visible on-screen until the user clicks the OK button to make it go away. Making a confirmation dialog box A confirmation dialog box displays a message and gives the user a choice of two buttons \u2014 OK and Cancel. If the user clicks OK, the value of the confirm command is true. If the user clicks Cancel, the value of the confirm com- mand is false. The following program creates a confirmation dialog box that looks like the one shown in Figure 24-2: if (confirm(\u201cDo you want to erase your hard drive now?\u201d)) document.write(\u201cNow erasing your hard drive.\u201d) else document.write(\u201cThen wait until Windows crashes, and that will erase your hard drive for you.\u201d) Figure 24-1: An alert dialog box created with the alert JavaScript command. 343 Chapter 24: Making Interactive Web Pages with JavaScript If the user clicks the OK button, the program displays the string, \u201cNow erasing your hard drive.\u201d If the user clicks the Cancel button, the program displays the string, \u201cThen wait until Windows crashes, and that will erase your hard drive for you.\u201d Making a prompt dialog box To prod the user into typing some data into the computer, many programs use a prompt dialog box, similar to the one shown in Figure 24-3. A prompt dialog box asks the user for input by using the prompt command, as follows: prompt(\u201cHow many times has your computer crashed on you today?\u201d) If you want to provide a default value that the user can choose without typing anything (as shown in the dialog box in Figure 24-3), you can add"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "string, \u201cThen wait until Windows crashes, and that will erase your hard drive for you.\u201d Making a prompt dialog box To prod the user into typing some data into the computer, many programs use a prompt dialog box, similar to the one shown in Figure 24-3. A prompt dialog box asks the user for input by using the prompt command, as follows: prompt(\u201cHow many times has your computer crashed on you today?\u201d) If you want to provide a default value that the user can choose without typing anything (as shown in the dialog box in Figure 24-3), you can add the default value after the message text, as in the following code: prompt(\u201cHow many times has your computer crashed on you today?\u201d, 98) If you don\u2019t define a default value, the prompt dialog box simply displays the word Undefined. Because the prompt dialog box asks the user for input, you need to create a variable to hold the data that the user types into the prompt dialog box. After creating a variable, you need to set the variable equal to the prompt com- mand, as in the following example: Figure 24-3: A prompt dialog box with a default value of 98. Figure 24-2: A combi- nation dialog box offers the user a choice. 344 Part VI: Internet Programming <script language = \u201cJavaScript\u201d> <!-- var userdata userdata = prompt(\u201cHow many times has your computer crashed on you today?\u201d, 98) document.write(\u201cThis is what the user typed in = \u201c, userdata) //--> </script> This JavaScript program tells the computer to do the following: 1. The first and second lines tell the computer, \u201cAnything that you see within the <script> and </script> tags is a JavaScript program.\u201d 2. The third line creates the variable userdata. 3. The fourth line displays a prompt dialog box with the message How many times has your computer crashed on you today? In the text box, it displays a default value of 98. Any data that appears in the text box after the user clicks the OK button the program stores in the userdata variable. 4. The fifth line prints This is what the user typed in = on-screen, following it with the data that the program\u2019s storing in the userdata variable. 5. The sixth and seventh lines tell the computer that the JavaScript pro- gram is at an end. Playing with Functions Rather than create one massive JavaScript program, you can create subpro- grams known as functions. A function consists of the following four parts: \u0002 The function keyword: This part identifies your function as a legitimate JavaScript subprogram. \u0002 A function name: This part is the name that your JavaScript uses to \u201ccall\u201d the function and make it run. In the following example, the func- tion name is square: function square(number) { return number * number } \u0002 A list of arguments (data) that the function requires: The data can be numbers or strings, but you must separate items by commas. In the example following the preceding"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "program, you can create subpro- grams known as functions. A function consists of the following four parts: \u0002 The function keyword: This part identifies your function as a legitimate JavaScript subprogram. \u0002 A function name: This part is the name that your JavaScript uses to \u201ccall\u201d the function and make it run. In the following example, the func- tion name is square: function square(number) { return number * number } \u0002 A list of arguments (data) that the function requires: The data can be numbers or strings, but you must separate items by commas. In the example following the preceding bulleted item, the only data that the function requires is a number. 345 Chapter 24: Making Interactive Web Pages with JavaScript \u0002 Curly brackets enclosing the function instructions: The instructions that the curly brackets trap inside themselves tell the function how to work. In the preceding example, the function accepts a number, multi- plies that number by itself, and returns the value of this multiplication. A typical function may look as follows: function FunctionName(Data) { // one or more instructions } To create a function, you must choose a function name, what type of data the function needs, and how the function works. The following function, square, for example, accepts a single number and multiplies that number by itself: function square(number) { return number * number } If you don\u2019t want the function to return a value, omit the return keyword. To see how functions can work in a real-life JavaScript program, type the fol- lowing code into an editor (such as Windows Notepad) and save it with the HTML file extension: <html> <body> <script language = \u201cJavaScript\u201d> <!-- function square (number) { return number * number } function printbig (headlevel, headtext) { document.write(\u201c<H\u201d, headlevel, \u201c>\u201d, headtext, \u201c</H\u201d, headlevel, \u201c>\u201d) } var myvalue, longstring myvalue = prompt (\u201cHow many times has your computer crashed on you today?\u201d, 98) longstring = \u201c This is how many more times your computer will crash = \u201c + square(myvalue) printbig (2, longstring) //--> </script> </body> </html> Starting with the line that begins with the script tag <script language>, this JavaScript program tells the computer to do the following: 346 Part VI: Internet Programming 1. The <script language = \u201cJavaScript\u201d> line tells the computer, \u201cAnything that you see within the <script> and </script> tags is a JavaScript program.\u201d 2. The next line tells the computer that everything sandwiched in between the <!-- and //\u2192tags should be treated as a comment for older browsers that don\u2019t understand JavaScript. 3. The third line defines the function square, which accepts one chunk of data that the program stores in the variable number. 4. The fourth line tells the square function to multiply the number that the variable number stores and to return the multiplication result to the main JavaScript program. 5. The fifth line marks the end of the JavaScript function square. 6. The sixth line defines the function printbig, which accepts two chunks of data that the"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "that everything sandwiched in between the <!-- and //\u2192tags should be treated as a comment for older browsers that don\u2019t understand JavaScript. 3. The third line defines the function square, which accepts one chunk of data that the program stores in the variable number. 4. The fourth line tells the square function to multiply the number that the variable number stores and to return the multiplication result to the main JavaScript program. 5. The fifth line marks the end of the JavaScript function square. 6. The sixth line defines the function printbig, which accepts two chunks of data that the program stores in the variables headlevel and headtext. 7. The seventh line creates an HTML tag for defining a heading level and for displaying text in that heading level. 8. The eighth line marks the end of the JavaScript function printbig. 9. The ninth line creates two variables, myvalue and longstring. 10. The tenth line displays a prompt dialog box that asks, \u201cHow many times has your computer crashed on you today?\u201d For a default value, the prompt dialog box displays the number 98. After the user clicks the OK button, the program stores the value appearing in the prompt dialog box in the myvalue variable. 11. The eleventh line calls the square function by using the value that the myvalue variable stores. It takes this result and tacks it onto the end of the string, \u201cThis is how many more times your computer will crash = \u201c. Then it assigns the entire string, plus the value of square(myvalue), to the variable longstring. 12. The twelfth line calls the printbig function and feeds it the number 2 and the data that the longstring variable stores. In this case, the printbig function creates a heading 2 and displays the text that the longstring variable stores as a heading 2 on-screen. Opening and Closing a Window Although your browser may normally display only one window at a time, you can open two or more windows on-screen to display different Web pages. 347 Chapter 24: Making Interactive Web Pages with JavaScript (Web sites often open multiple windows to display those annoying pop-up or pop-under advertisements.) Opening a window To open a window, sandwich the open command between the <script> and </script> tags, as in the following example: <script language = \u201cJavaScript\u201d SRC=\u201dprogram.js\u201d> <!-- WindowName = window.open(web page or address) //--> </script> You can also use the window.open command with a user interface item such as a button. Chapter 23 provides more information about using commands with user interface items. You must define the WindowName, which can be any name you want. You also must define what the window displays. If you want the window to display a specific Web page, you must type the filename of that Web page, as in the fol- lowing example: MyWindow = window.open(\u201cindex.html\u201d) This command opens a new window, MyWindow, and displays the Web page that the file index.html stores. If you want the window to display a"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "also use the window.open command with a user interface item such as a button. Chapter 23 provides more information about using commands with user interface items. You must define the WindowName, which can be any name you want. You also must define what the window displays. If you want the window to display a specific Web page, you must type the filename of that Web page, as in the fol- lowing example: MyWindow = window.open(\u201cindex.html\u201d) This command opens a new window, MyWindow, and displays the Web page that the file index.html stores. If you want the window to display a Web site, you must type the entire Web-site address, as follows: MyWindow = window.open(\u201chttp://www.dummies.com\u201d) Defining a window\u2019s appearance To give you more control over a window\u2019s appearance, you can define the size and appearance of a window. If you define a window\u2019s appearance, you must give the window a second name, following it with any attributes that you want, as in the following example: MyWindow = window.open(\u201cindex.html\u201d, \u201csecondname\u201d, \u201ctoolbar=no, resizable=yes\u201d) This opens a window that displays the index.html Web page. This window doesn\u2019t have toolbars, but you can resize the window. You use the second name of the window (in this example, \u201csecondname\u201d) if you want to refer to this window from another window, such as through a hyperlink. 348 Part VI: Internet Programming Attributes can modify the appearance of a window, such as by adding a tool- bar and a menu bar. The following list explains those attributes that you can define for any window that you open: \u0002 toolbar[=yes|no]|[=1|0]: Displays a toolbar at the top of the window with buttons such as Back, Forward, and Stop. \u0002 location[=yes|no]|[=1|0]: Creates a text box displaying the current Web page or Web address. \u0002 directories[=yes|no]|[=1|0]: Displays directory buttons at the top of the window. \u0002 status[=yes|no]|[=1|0]: Displays a status bar at the bottom of the window. \u0002 menubar[=yes|no]|[=1|0]: Displays menus at the top of the window. \u0002 scrollbars[=yes|no]|[=1|0]: Creates horizontal and vertical scroll- bars if the document is larger than the window dimensions. \u0002 resizable[=yes|no]|[=1|0]: Enables the user to resize the window. \u0002 width=pixels: Specifies the width of the window, measuring it in pixels. \u0002 height=pixels: Specifies the height of the window, measuring it in pixels. If you want to open a window but hide the toolbar, for example, you can set the toolbar attribute to either yes/no or 0/1, as in the following example (using yes/no): MyWindow = window.open(\u201cindex.html\u201d, \u201csecondname\u201d, \u201ctoolbar=no\u201d) Or you can use the following example (with 1/0) for the same task: MyWindow = window.open(\u201cindex.html\u201d, \u201csecondname\u201d, \u201ctoolbar=0\u201d) Closing a window After you open a window, you may want to close it. To close a window, you must use the close command, as in the following example: WindowName.close() This command closes a window that you identify as WindowName. If you want to close a window that you call adWindow, you use the following command: adWindow.close() 349 Chapter 24: Making Interactive Web Pages with JavaScript The name of the window"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "in the following example (using yes/no): MyWindow = window.open(\u201cindex.html\u201d, \u201csecondname\u201d, \u201ctoolbar=no\u201d) Or you can use the following example (with 1/0) for the same task: MyWindow = window.open(\u201cindex.html\u201d, \u201csecondname\u201d, \u201ctoolbar=0\u201d) Closing a window After you open a window, you may want to close it. To close a window, you must use the close command, as in the following example: WindowName.close() This command closes a window that you identify as WindowName. If you want to close a window that you call adWindow, you use the following command: adWindow.close() 349 Chapter 24: Making Interactive Web Pages with JavaScript The name of the window that you use with the close command is the same name that you use to open the window. You open a window with the following command: WeirdStuff = window.open(\u201cindex.html\u201d) You close the same window with the following command: WeirdStuff.close() JavaScript is a full-blown programming language, far too complex to cover completely in this chapter. For more information about JavaScript, pick up a copy of JavaScript For Dummies, 3rd Edition, by Emily A. Vander Veer (pub- lished by Wiley Publishing). 350 Part VI: Internet Programming Chapter 25 Using Java Applets on Web Pages In This Chapter \u0001 Understanding how Java applets work \u0001 Adding a Java applet to a Web page \u0001 Finding free Java applets Java can create two types of programs: full-blown applications (such as word processors or Web browsers) and smaller applets that can run only when viewed through a browser. (This chapter is concerned only with using Java to write applets, rather than complete applications.) When you write applets in Java, you can add more sophisticated features to your Web pages. (If you\u2019d rather not write your own Java applets, you can always use applets that someone else has written for you, as long as you trust that the applet works correctly.) Writing Java applets can get extremely detailed and time-consuming, depending on how much work you want to put into your applet. For specific instructions on how to write programs in Java, pick up a copy of Beginning Programming with Java For Dummies by Barry Burd (Wiley Publishing). How Java Applets Work A Java applet is a miniature program written in the Java programming language. Unlike C++ (which compiles programs into machine code), Java applets get converted from source code into a special byte code format. Byte code format (also known as p-code) is a special file format that needs a special Java run-time file known as a virtual machine or VM. As long as you have an operating system with a Java VM on it (such as Windows, Linux, or OS X), you can run Java programs on your computer. The source code of a Java program is stored in an ASCII file with the file exten- sion of .java, such as Virus.java. When you compile a Java program into byte code format, you create a separate file with the file extension of .class, such as Virus.class. Because computers understand only machine code, no computer"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "file format that needs a special Java run-time file known as a virtual machine or VM. As long as you have an operating system with a Java VM on it (such as Windows, Linux, or OS X), you can run Java programs on your computer. The source code of a Java program is stored in an ASCII file with the file exten- sion of .java, such as Virus.java. When you compile a Java program into byte code format, you create a separate file with the file extension of .class, such as Virus.class. Because computers understand only machine code, no computer in the world knows how to run a Java program saved in byte code format. If you want to run a Java program stored in byte code format, you have to use a special (and free) program called a Java Virtual Machine (VM). (Chances are good that if you have a browser such as Internet Explorer or Netscape Navigator, you already have a copy of the Java VM on your computer.) Java programs can run on any computer that has a copy of the Java VM, includ- ing Windows, the Macintosh, and UNIX. If you compile your Java programs into byte code format, you can run them on a variety of computers and operating systems without any modifications whatsoever. To show you what a Java applet looks like (don\u2019t worry about understanding how the code actually works), here\u2019s a simple Java applet that displays the message \u201cStop staring at me!\u201d on-screen: import java.awt.*; import java.applet.Applet; public class TrivialApplet extends Applet { Font f = new Font(\u201cTimesRoman\u201d, Font.BOLD, 24); 352 Part VI: Internet Programming Java versus JavaScript Although both Java and JavaScript enable you to create interactive Web pages that ordinary HTML code can\u2019t offer, they\u2019re actually two completely different languages. But when should you use Java, and when should you use JavaScript? JavaScript is easier than Java to learn and use, so it\u2019s a much faster method for creating inter- active Web pages. On the other hand, Java is a much more powerful and flexible programming language that enables you to create features that would be cumbersome, difficult, or impos- sible to duplicate in JavaScript. As a general rule, use JavaScript for short, simple tasks, and use Java for more complicated tasks. Of course, you can use both JavaScript and Java together on the same Web page to get the best of both worlds. public void init() { repaint(); } public void paint( Graphics g ) { g.setFont(f); g.setColor(Color.blue); g.drawString( \u201cStop staring at me!\u201d, 15, 75 ); } } Figure 25-1 shows the output of the preceding Java program. You can type a Java program using any text editor (such as Liberty BASIC\u2019s editor or the Windows Notepad). To compile your Java program into byte code format, you need to use a Java compiler, such as the free Sun Microsystems (java.sun.com) Java compiler or a commercial Java compiler such as JBuilder from Borland (www.borland.com) or CodeWarrior (www.metrowerks.com) from Metrowerks. Figure"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "best of both worlds. public void init() { repaint(); } public void paint( Graphics g ) { g.setFont(f); g.setColor(Color.blue); g.drawString( \u201cStop staring at me!\u201d, 15, 75 ); } } Figure 25-1 shows the output of the preceding Java program. You can type a Java program using any text editor (such as Liberty BASIC\u2019s editor or the Windows Notepad). To compile your Java program into byte code format, you need to use a Java compiler, such as the free Sun Microsystems (java.sun.com) Java compiler or a commercial Java compiler such as JBuilder from Borland (www.borland.com) or CodeWarrior (www.metrowerks.com) from Metrowerks. Figure 25-1: The source code to a Java applet running inside a Web browser. 353 Chapter 25: Using Java Applets on Web Pages Adding a Java Applet to a Web Page When you have a Java applet compiled into byte code format, you\u2019re ready to use HTML tags to run that Java applet on a Web page. Adding a Java applet to a Web page involves using two tags, sandwiched between the <BODY> and </BODY> tags: <APPLET CODE = \u201cJavaAppletName\u201d> Text to display if the Java applet can\u2019t run </APPLET> The JavaAppletName variable is the actual name of the Java applet that you want to run. If you want to run a Java applet named Message.class, the HTML applet tag would look like this: <APPLET CODE = \u201cMessage.class\u201d> Text to display if the Java applet can\u2019t run </APPLET> One or more lines of text can be sandwiched between the <APPLET> and </APPLET> tags. This text appears only if the Java applet can\u2019t run within a particular browser. So rather than display a blank image on-screen, the text appears in order to explain to the user that the Java applet can\u2019t run. Defining the size of a Java applet window For additional fun, you can define the size of the area that your Java applet appears in by using the WIDTH and HEIGHT attributes, as in the following example: 354 Part VI: Internet Programming Limiting the power of Java applets Java applets are miniature programs, which means that they have the potential to erase files or mess up your computer if someone writes a virus or Trojan Horse in Java. To prevent mali- cious Java applets from attacking your com- puter, Java restricts Java applets from performing certain tasks such as deleting files, reading the contents of a hard drive, renaming files, creating directories, or running any exter- nal programs. Naturally, since Java\u2019s introduction, people have found numerous holes in Java\u2019s defenses. Although none of these weaknesses has yet allowed a malicious hacker to exploit these holes and threaten the world, these flaws do serve to remind programmers that Java pre- sents opportunities to attack your computer, given enough creativity and persistence on the part of a malicious Java programmer. <APPLET CODE = \u201cMessage.class\u201d WIDTH = 250 HEIGHT = 100> Text to display if the Java applet can\u2019t run </APPLET> This example defines a width of 250 pixels and a height of"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "creating directories, or running any exter- nal programs. Naturally, since Java\u2019s introduction, people have found numerous holes in Java\u2019s defenses. Although none of these weaknesses has yet allowed a malicious hacker to exploit these holes and threaten the world, these flaws do serve to remind programmers that Java pre- sents opportunities to attack your computer, given enough creativity and persistence on the part of a malicious Java programmer. <APPLET CODE = \u201cMessage.class\u201d WIDTH = 250 HEIGHT = 100> Text to display if the Java applet can\u2019t run </APPLET> This example defines a width of 250 pixels and a height of 100 pixels for the applet. Aligning the location of a Java applet window When an applet appears on a Web page, you may want to use the ALIGN command to define how text appears next to the applet. You can use the following three ALIGN attributes: \u0002 ALIGN=TOP aligns the text with the top of the applet. \u0002 ALIGN=MIDDLE aligns the text in the middle of the applet. \u0002 ALIGN=BOTTOM aligns the text with the bottom of the applet. Figure 25-2 shows how text appears when aligned with an applet in three ways. Figure 25-2: Three different ways to align text with a Java applet. 355 Chapter 25: Using Java Applets on Web Pages Defining space around a Java applet To keep your text from appearing too close to an applet on a Web page, you can define the amount of horizontal and vertical space to put between the applet and the text. Use the following HSPACE and VSPACE attributes to define this spacing: <APPLET CODE = \u201cMessage.class\u201d WIDTH = 250 HEIGHT = 100 VSPACE = 25 HSPACE = 15> Text to display if the Java applet can\u2019t run </APPLET> The preceding code defines a vertical space of 25 pixels between text and the applet and a horizontal space of 15 pixels between text and the applet. Figure 25-3 shows what appears when you view the following code in your browser: <html> <body> <applet code=\u201dTrivialApplet.class\u201d align = \u201cmiddle\u201d width=250 height=200> </applet> 356 Part VI: Internet Programming If Java is free, why buy a Java compiler? In an effort to make Java as widespread and uni- versal as possible, Sun Microsystems provides a free Java compiler, source code, and tools that you can download for free from the Sun Microsystems Java Web site (java.sun.com). But if you can get a free Java compiler, why should you buy a commercial Java compiler? First, the Sun Microsystems Java compiler pro- vides the bare necessities for writing and com- piling a Java program. Using the free Sun Microsystems Java compiler is a lot like walk- ing from New York to Los Angeles: You could do it, but paying extra to take a plane would be easier, faster, and more convenient. Second, a commercial Java compiler offers additional benefits that the free Sun Microsystems Java compiler can\u2019t offer. For example, JBuilder (from Borland) allows you to graphically design your Java program\u2019s user interface and appearance"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Java compiler, why should you buy a commercial Java compiler? First, the Sun Microsystems Java compiler pro- vides the bare necessities for writing and com- piling a Java program. Using the free Sun Microsystems Java compiler is a lot like walk- ing from New York to Los Angeles: You could do it, but paying extra to take a plane would be easier, faster, and more convenient. Second, a commercial Java compiler offers additional benefits that the free Sun Microsystems Java compiler can\u2019t offer. For example, JBuilder (from Borland) allows you to graphically design your Java program\u2019s user interface and appearance so that you don\u2019t have to write Java code to create the user inter- face yourself. So feel free to try programming in Java using Sun Microsystem\u2019s free tools, but when you\u2019re ready to start creating larger pro- grams on a regular basis, seriously consider buying a Java compiler instead. You\u2019ll be glad you did. <text> The value of HSPACE = 0 </text> <p> This paragraph appears smashed near the Java applet since the value of VSPACE = 0 </p> <applet code=\u201dTrivialApplet.class\u201d align = \u201cmiddle\u201d width=250 height=200 vspace = 45 hspace = 55> </applet> <text> The value of HSPACE = 55 </text> <p> This paragraph appears at a distance from the Java applet since VSPACE = 45 </p> </body> Figure 25-3: The HSPACE and VSPACE commands can keep text away from the edges of a Java applet. 357 Chapter 25: Using Java Applets on Web Pages Finding Free Java Applets If you want to write your own Java applets, you have to spend some time studying Java programming. Java can be a challenging language for beginners to master on their own. Until you master Java (or instead of mastering Java), you may prefer to use Java applets written by other people. You can paste other people\u2019s ready-made applets into your Web pages. Or if the source code is available, you can modify the applet and recompile it your- self, which often helps you understand the Java code more quickly. To find a list of Web sites that offer Java applets, visit your favorite Internet search engine, such as Hotbot (www.hotbot.com) or Google (www.google. com), and search for the string \u201cJava applet.\u201d Or you can visit Yahoo! (www.yahoo.com) and click the links labeled Computers and Internet, Programming and Development, Languages, Java, and Applets. These links take you to a list of dozens of Web sites where you can download free Java applets and source code. 358 Part VI: Internet Programming Part VII The Part of Tens In this part . . . O nce you learn the fundamentals of programming, most books, classes, and schools push you out the door, wish you luck, and force you to \ufb01gure out what to do with your programming skills. But this book doesn\u2019t aban- don you without giving you some directions on where to go with your skills. To avoid feeling aimless and lost, you can use this part of the book to get"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "dozens of Web sites where you can download free Java applets and source code. 358 Part VI: Internet Programming Part VII The Part of Tens In this part . . . O nce you learn the fundamentals of programming, most books, classes, and schools push you out the door, wish you luck, and force you to \ufb01gure out what to do with your programming skills. But this book doesn\u2019t aban- don you without giving you some directions on where to go with your skills. To avoid feeling aimless and lost, you can use this part of the book to get some ideas for applying and pro\ufb01ting from your programming abilities. As a programmer, you possess unique skills, so don\u2019t settle for an ordinary job in an ordinary company doing ordinary work that ultimately gives you an ordinary (and boring) life. Instead, browse through this part of the book to see all the different ways that people are using their pro- gramming skills at fun, exciting, and unusual jobs that you can get, too. This part also provides guidance for helping you \ufb01nding your next language compiler and offers some tips for playing games to sharpen your programming skills. Chapter 26 Ten Cool Programming Careers In This Chapter \u0001 Programming computer games \u0001 Animating with computers \u0001 Encrypting data \u0001 Programming for the Internet \u0001 Fighting computer viruses \u0001 Hacking for hire \u0001 Working on an open-source project \u0001 Programming for a specialized market \u0001 Sharing your skills with others \u0001 Selling your own software A sk most high school or college guidance counselors what you can do with your programming skills, and they\u2019re likely to steer you in the direction of sterile job titles such as programmer analyst or data-entry opera- tor. To help stimulate your imagination so that you can get a really cool job playing around with computers all day, this chapter lists some unusual pro- gramming jobs that you may want to consider so that you can actually have fun with your life and your job at the same time. Programming Computer Games for Fun and Profit Of all the programming topics in the world, none is more popular than game programming. Besides the obvious job of designing computer games (and getting paid to do it), game programming offers a wide variety of related jobs that can prove just as much fun as game designing but don\u2019t get as much publicity. Most computer games are team designs. One team may design the game rules; another team does the actual programming; another creates the graphic backgrounds and animation; and still another gets paid to play the latest games to look for bugs and offer suggestions for making the games more exciting (and, hence, more profitable for the publisher). If you want to write computer games, you need to learn C/C++ and a little bit of assembly language because games need to be as small and as fast as possi- ble. Metrowerks (at www.metrowerks.com) sells special versions of its"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "get as much publicity. Most computer games are team designs. One team may design the game rules; another team does the actual programming; another creates the graphic backgrounds and animation; and still another gets paid to play the latest games to look for bugs and offer suggestions for making the games more exciting (and, hence, more profitable for the publisher). If you want to write computer games, you need to learn C/C++ and a little bit of assembly language because games need to be as small and as fast as possi- ble. Metrowerks (at www.metrowerks.com) sells special versions of its CodeWarrior compiler for writing computer games in C/C++ for Sony PlayStation and Nintendo game consoles. If you\u2019d rather exercise your graphic skills, you need to learn animation, which means studying a lot of math (which you use to calculate the best ways to make objects move around the screen). To start writing your own games, consider using a game engine \u2014 a special program that provides instructions to tell the computer how to move ani- mated objects around on-screen. You then spend your time designing your game, not worrying about the details of controlling animated characters on-screen. For a free game engine that runs on Windows, Linux, and the Macintosh, download the Crystal Space game engine from the official Crystal Space Web site (at http://crystal.sourceforge.net/drupal). Using Crystal Space (and other game engines), you can create 3D triangle mesh sprites with frame animation or transparent and semitransparent textures for creating see- through water surfaces and windows. If none of this stuff makes any sense to you, imagine trying to create a game and, at the same time, needing to learn all these technical terms and how to program them yourself. That\u2019s why many people use game engines to help them make new games. Without a game engine, making a game can prove as complicated as making your own word processor just so that you can write a letter. To find out more about game programming, visit one of the following Web sites (and start on your new career as a professional game programmer today!): \u0002 International Game Developer\u2019s Association (at www.igda.org) is the granddaddy of computer-gaming organizations that promotes and pro- tects the computer-gaming industry as well as provides conferences to bring computer gaming professionals together. \u0002 Game Developer (at www.gdmag.com) is a special online magazine devoted exclusively to covering the latest game-programming tech- niques and game-programming industry news. 362 Part VII: The Part of Tens \u0002 Game Programmer (at gameprogrammer.com) is a Web site that pro- vides information and links to the multitude of game programming resources all across the Internet. \u0002 DigiPen (at www.digipen.edu) is the site of one of the first schools (with close ties to Nintendo) devoted to training game-programming pro- fessionals and awarding them with real college degrees. \u0002 GameJobs (at www.gamejobs.com) is a site that provides information, tips, and contacts to help you find a job in the computer-gaming industry. Creating Computer Animation Computer animation"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "latest game-programming tech- niques and game-programming industry news. 362 Part VII: The Part of Tens \u0002 Game Programmer (at gameprogrammer.com) is a Web site that pro- vides information and links to the multitude of game programming resources all across the Internet. \u0002 DigiPen (at www.digipen.edu) is the site of one of the first schools (with close ties to Nintendo) devoted to training game-programming pro- fessionals and awarding them with real college degrees. \u0002 GameJobs (at www.gamejobs.com) is a site that provides information, tips, and contacts to help you find a job in the computer-gaming industry. Creating Computer Animation Computer animation isn\u2019t just for creating animated characters to shoot or blow up in video games. Programmers also use computer animation in virtual reality, training simulators, and Hollywood special effects (because blowing up a computer-animated building is easier than building a mock-up of an existing building to blow up). Computer animation can range from creating lifelike images for TV and movies to creating multimedia presentations for business, to making car- toons and animated films. If you like to draw but want to become more than just an artist, combine your knowledge of graphics with programming and help design new graphics-animation programs, create virtual-reality simula- tors, or work on the next Hollywood blockbuster\u2019s special effects. To learn more about the wonderfully weird world of computer animation, browse through these Web sites and see what sparks your imagination: \u0002 Pixar Animation Studios (at www.pixar.com) is a leading Hollywood animation studio responsible for animating movies such as Toy Story, Finding Nemo, and A Bug\u2019s Life. \u0002 MIT Computer Graphics Society (at www.mit.edu/activities/cgs/ mitcgs.html) is an MIT club dedicated to studying computer graphics as an artistic medium. \u0002 International Animated Film Society (at www.asifa-hollywood.org) grants awards (similar to the Academy Awards) for the best computer- animation short films. \u0002 Animation Magazine (at www.animationmagazine.net) provides news and information for the entire animation industry. \u0002 National Centre for Computer Animation (at ncca.bournemouth. ac.uk) is the United Kingdom\u2019s leading research and training institution for computer animation and digital media. 363 Chapter 26: Ten Cool Programming Careers \u0002 Computer Graphics World Online (at http://cgw.pennnet.com/ home/home.cfm) is a magazine covering all the tools, news, and confer- ences that professional computer graphics artists may need to know about. Making (And Breaking) Encryption Ever since nations decided to play the game of war and send their people into battle for their own political reasons, armies have used secret codes to communicate with their commanders without revealing information to their enemies. Because war isn\u2019t likely to disappear anytime soon, every country in the world continues to develop encryption techniques for creating codes and breaking the codes of others. If the world of James Bond, espionage, and cloak-and-dagger spies appeals to your sense of adventure, consider a career in encryption. Encryption is the art of converting plain-text information into unreadable garbage (which often resembles tax forms or legal documents) so that no one but your intended recipient can read it. Then, by using a secret"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "reasons, armies have used secret codes to communicate with their commanders without revealing information to their enemies. Because war isn\u2019t likely to disappear anytime soon, every country in the world continues to develop encryption techniques for creating codes and breaking the codes of others. If the world of James Bond, espionage, and cloak-and-dagger spies appeals to your sense of adventure, consider a career in encryption. Encryption is the art of converting plain-text information into unreadable garbage (which often resembles tax forms or legal documents) so that no one but your intended recipient can read it. Then, by using a secret password or code phrase, the recipient of your encrypted message can unscramble and read it. The art of encrypting data involves plenty of math (usually focusing on prime numbers). If you plan to pursue a career in encryption, earn some graduate degrees in advanced mathematics and practice your C/C++ programming skills. Then get a job working for the military, a defense contractor, a software encryption publisher, or a security agency such as the National Security Agency (at www.nsa.gov). The National Security Agency (open to U.S. citizens only) is the premier code- making and code-breaking agency in the world, housing the most supercom- puters in one location. If you know programming, advanced math, or any foreign language, you can use your abilities to read intercepted messages, track enemy submarine acoustic signatures in the Atlantic Ocean, or search through databases to spot the movements and operations of international terrorists. If you find encryption fascinating but you\u2019d rather not help your country pre- pare for war, consider putting your encryption skills to use in the interna- tional banking and financial world, where encryption protects electronic transactions worth billions of dollars every day. 364 Part VII: The Part of Tens For more information about encryption, visit one of the following Web sites. Many of these sites offer C/C++ source code to various encryption algorithms, so you can practice both your programming and encryption skills at the same time. \u0002 CypherNet (at www.cypher.net) is a grass-roots organization dedicated to helping individuals use encryption to protect themselves against their own governments. \u0002 Central Intelligence Agency (at www.cia.gov) is the most famous intel- ligence agency in the world, responsible for spying on other countries. \u0002 North American Cryptography Archives (at www.cryptography.org) offers plenty of encryption programs and encryption algorithm source code to help you learn as much as possible about encryption. \u0002 International PGP Home Page (at www.pgpi.com) is the home of the most famous personal encryption program in the world, Pretty Good Privacy (PGP). \u0002 RSA (at www.rsasecurity.com), the name of which derives from the first names of its founders, Rivest, Shamir, and Adleman, is the number- one encryption company providing encryption technology for many pro- grams that rely on the Internet. Internet Programming Besides Internet companies gobbling up programmers, many old-fashioned companies also need programmers to help them create interactive Web sites. With so much activity revolving around the Internet, the increasing demand for Internet"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "as possible about encryption. \u0002 International PGP Home Page (at www.pgpi.com) is the home of the most famous personal encryption program in the world, Pretty Good Privacy (PGP). \u0002 RSA (at www.rsasecurity.com), the name of which derives from the first names of its founders, Rivest, Shamir, and Adleman, is the number- one encryption company providing encryption technology for many pro- grams that rely on the Internet. Internet Programming Besides Internet companies gobbling up programmers, many old-fashioned companies also need programmers to help them create interactive Web sites. With so much activity revolving around the Internet, the increasing demand for Internet programmers is no surprise. To get involved in this field, spend some time mastering the intricacies of HTML so that you know the basics of designing Web pages. (A little bit of training in graphic design and layout doesn\u2019t hurt either.) Although HTML can create pretty Web pages, companies really want to take advantage of the Internet to sell products online. To create interactive Web sites, programmers use a variety of languages, including Java, XML, JavaScript, VBScript, Perl, C#, and Python. To get a start in Internet programming, teach yourself HTML; start playing around with an Internet programming language (such as JavaScript); sharpen your Windows XP, Linux, or Unix operating system skills; learn more about accessing databases by using SQL; and play with Web servers such as Apache (which often comes free with Linux). 365 Chapter 26: Ten Cool Programming Careers (Coincidentally, Wiley publishes many books about the preceding topics, including Java and Linux. To learn more about these books, visit www. dummies.com.) Visit one of the following Web sites to see how quickly you can start working (and earning a lot of money) in an Internet programming position: \u0002 Career Moves (at www.computerweekly.com/careermoves) lists vari- ous Internet programming jobs, along with advice to help you find the best job for you. \u0002 GeekFinder (at www.geekfinder.com) provides plenty of jobs for a wide variety fo computer-related jobs all around the world. \u0002 Web Jobs USA (at www.webjobsusa.com) is dedicated to helping Internet professionals find jobs practicing their Web-page and Internet- programming skills. \u0002 Java Jobs (at javajobs.com) provides tutorials, training, and Java- related job listings. Fighting Computer Viruses and Worms Every month, malicious programmers release hundreds of new computer viruses into the wild. Fortunately, many of these computer viruses contain bugs that keep them from working correctly: They don\u2019t spread; they\u2019re too easy to detect; they don\u2019t do anything other than take up space . . . and so on. Still, every year, a few new computer viruses manage to cause immense headaches to computer users throughout the world. Some of the more infa- mous superviruses that made headlines include the Slammer worm, the CIH virus, the Melissa virus, and the LoveBug worm. Although most virus writers create viruses for their own amusement and entertainment, a small minority actively write destructive viruses as an intel- lectual challenge. Because malicious programmers, such as virus writers, are always around, programmers who can"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "they\u2019re too easy to detect; they don\u2019t do anything other than take up space . . . and so on. Still, every year, a few new computer viruses manage to cause immense headaches to computer users throughout the world. Some of the more infa- mous superviruses that made headlines include the Slammer worm, the CIH virus, the Melissa virus, and the LoveBug worm. Although most virus writers create viruses for their own amusement and entertainment, a small minority actively write destructive viruses as an intel- lectual challenge. Because malicious programmers, such as virus writers, are always around, programmers who can create and update antivirus programs can always find work. To learn more about computer viruses, study assembly language along with VBA (Visual Basic for Applications), the macro programming language that Microsoft uses in its Office suite. Most viruses and antivirus programs use assembly language to create small, fast programs that can directly access the actual computer hardware. To learn more about different antivirus compa- nies and what type of positions they have available, visit any of the following Web sites: 366 Part VII: The Part of Tens \u0002 Network Associates (at www.nai.com) publishes the popular VirusScan antivirus program. \u0002 Sophos (at www.sophos.com) publishes the popular Sophos AntiVirus program. \u0002 Symantec (at www.symantec.com) publishes the popular Norton AntiVirus program. \u0002 Trend Micro (at www.trend.com) publishes the popular PC-cillin AntiVirus program. \u0002 F-Secure (at www.datafellows.com) publishes the well-regarded F-Prot antivirus program. Hacking for Hire Hackers are often extremely skilled (or extremely patient) people who enjoy the technical challenge of breaking into computers. Although breaking into computers is technically illegal, your chances of getting caught increase immensely the moment that you start causing damage. Rather than risk getting thrown in jail because you can\u2019t resist playing around with computers, consider the alternative challenge of trying to outwit the hackers themselves. As a computer-security expert, you can work for the government to help track down malicious hackers, or you can work for a cor- poration and help keep hackers out of a company\u2019s computers. By working as a \u201cgood\u201d hacker, you get to face all the technical challenges of hacking while getting paid. Plus you get to experience the thrill of working on the side of law-enforcement agencies to track down hackers around the world. To learn more about using your hacking skills on the side of law enforcement, visit the following Web sites: \u0002 Federal Bureau of Investigation (at www.fbi.gov) is the agency in charge of United States law enforcement on a national level, including investigating and prosecuting computer hackers. \u0002 AntiOnline (at www.antionline.com) provides news and hacking tools, along with a network of computers on which hackers can safely and legally expand their skills. \u0002 2600 (at www.2600.com) is a quarterly hacker magazine that provides hacking-related articles and information. \u0002 BlackCode (at www.blackcode.com) provides the latest news about computer hacking. 367 Chapter 26: Ten Cool Programming Careers Participating in an Open-Source Project To get a job, you need job experience, but you"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "\u0002 Federal Bureau of Investigation (at www.fbi.gov) is the agency in charge of United States law enforcement on a national level, including investigating and prosecuting computer hackers. \u0002 AntiOnline (at www.antionline.com) provides news and hacking tools, along with a network of computers on which hackers can safely and legally expand their skills. \u0002 2600 (at www.2600.com) is a quarterly hacker magazine that provides hacking-related articles and information. \u0002 BlackCode (at www.blackcode.com) provides the latest news about computer hacking. 367 Chapter 26: Ten Cool Programming Careers Participating in an Open-Source Project To get a job, you need job experience, but you can\u2019t get job experience unless you have a job. Given this paradox, the most reliable way to solve this prob- lem is to demonstrate your abilities by working for free. To get valuable programming experience that impresses big companies, con- sider participating in an open-source project. The whole idea behind an open- source project is to get programmers to contribute to the development of a single project, such as the Linux operating system or the GNOME user inter- face for Linux. Working on an open source project not only gives you instant credibility (pro- viding that you actually contribute something useful), but it also gives you valuable experience in working with a real-life programming project. While other programmers may get shuffled into entry-level positions working on boring projects that nobody really cares about, you get to work on something that can give you pride and a sense of accomplishment. The prestige of contributing to an open-source project can later help you find a better-paying job, or it can serve as an amusing hobby. Either way, open- source projects give you a chance to prove to the world what you can actu- ally accomplish with your programming skills. To get involved with an open source project, visit one of the following Web sites and start programming: \u0002 Open Source (at www.opensource.org) provides news and information about the value of open source projects. \u0002 Free Software Foundation (at www.fsf.org) offers information about open-source projects in general and the GNU C compiler in particular. \u0002 Perl (at www.perl.com) is the home page of the Perl programming lan- guage, which is quickly becoming the most popular programming lan- guage for the Internet. \u0002 Apple Open Source (at http://developer.apple.com/darwin) is the place for information about Apple Computer\u2019s open-source operating- system projects. \u0002 GNOME project (at www.gnome.org) guides the development of the GNOME interface, which aims to put a friendly graphical user interface on Linux. \u0002 Mozilla (at www.mozilla.org) is the open-source project for Netscape Navigator, the second most popular Web browser in the universe. \u0002 Linux (at www.linux.org) is the premier Unix-clone operating system that worries even Microsoft. 368 Part VII: The Part of Tens Niche-Market Programming One problem with programming classes is that they teach you how to write programs, but they don\u2019t teach you how to put your skills to practical use. Most companies use computers, so try to combine your knowledge of"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "www.gnome.org) guides the development of the GNOME interface, which aims to put a friendly graphical user interface on Linux. \u0002 Mozilla (at www.mozilla.org) is the open-source project for Netscape Navigator, the second most popular Web browser in the universe. \u0002 Linux (at www.linux.org) is the premier Unix-clone operating system that worries even Microsoft. 368 Part VII: The Part of Tens Niche-Market Programming One problem with programming classes is that they teach you how to write programs, but they don\u2019t teach you how to put your skills to practical use. Most companies use computers, so try to combine your knowledge of pro- gramming with another field. Who\u2019s better qualified to design and write medical software, for example, than a programmer with a medical background (or a medical professional with a programming background)? Sports fanatics combine programming skills with enthusiasm for sports to design horse race-handicapping software; health professionals design nutrition and diet software; and lawyers create special legal software. Practically every field faces unique needs that general-purpose software (such as spreadsheets or databases) can\u2019t solve. That\u2019s why professionals hire programmers to develop custom software. Best of all, niche markets are so small that you never need to worry about monolithic companies such as Microsoft competing against you and wiping out your business. In addition, only a handful of programmers can even pos- sibly write programs for certain niche markets \u2014 how many programmers have experience in hotel management, for example? \u2014 which means that you face less competition and a market practically begging for your software. If you ever wanted to take advantage of your previous job experience and combine it with your new programming skills, consider developing a program that solves a specific problem in a niche market. Who knows? With your pro- gramming skills, you can perhaps find new opportunities in a field that may have seemed a dead end. Teaching Others about Computers Become an expert in any field, and you can teach others your unique skills. In addition to the obvious teaching positions in schools, training others to use popular programs such as Microsoft Word, Lotus Notes, or C++ programming is a lucrative business. Training professionals travel around the world, conducting classes for corpo- rations who want to train their workers to use a variety of programs in hopes that they become more productive. As a trainer, you get to see the world, meet people, and see for yourself how many different ways Holiday Inns can design the inside of a hotel room. 369 Chapter 26: Ten Cool Programming Careers If you like dealing with people, enjoy traveling, and love sharing your knowl- edge of computers with others, this sort of job may prove the perfect posi- tion for you. Selling Your Own Software There\u2019s no cheaper way to go into business for yourself than to develop and sell your own software. Unlike restaurants or bookstores, you don\u2019t need a large amount of space or an extensive inventory. You simply write a program and sell it electronically"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "for yourself how many different ways Holiday Inns can design the inside of a hotel room. 369 Chapter 26: Ten Cool Programming Careers If you like dealing with people, enjoy traveling, and love sharing your knowl- edge of computers with others, this sort of job may prove the perfect posi- tion for you. Selling Your Own Software There\u2019s no cheaper way to go into business for yourself than to develop and sell your own software. Unlike restaurants or bookstores, you don\u2019t need a large amount of space or an extensive inventory. You simply write a program and sell it electronically across the Internet. The most popular way to test-market a program is through shareware distrib- ution: You give away copies of your software and ask that people send you money if they find it useful. To encourage more people to send money, your program must prove useful and work reliably. Despite the seemingly bizarre business logic of giving away your product and trusting that people actually pay you for it, many shareware authors earn hundreds (and sometimes millions) of dollars for their programs over the years. (One of the most successful shareware programs is WinZip, which you can download at www.winzip.com.) Distributing programs as shareware can make you rich or earn you a little bit of extra spending money. If you ever wanted to start your own business but didn\u2019t want to take out a loan, starting a shareware business is the easiest and cheapest solution. All it takes is a good idea, some decent programming skills, and a little bit of mar- keting know-how to launch your business. If your program doesn\u2019t appeal to the average computer user, try selling it to a niche market instead. In addition to niche markets for stock brokers, law-enforcement agencies, or restaurant owners, you can also find niche mar- kets that target specific computers, such as the Palm or PocketPC handheld computers. You can turn your programming skills into your own business with the right computer program. And if you like programming, what other job lets you stay home all day, play around with your computer, and still get paid for it in a business all your own? 370 Part VII: The Part of Tens Chapter 27 Ten Additional Programming Resources In This Chapter \u0001 Commercial compilers \u0001 Finding shareware and freeware compilers \u0001 Using proprietary languages \u0001 Buying from mail-order houses \u0001 Finding sources for source code \u0001 Joining a user group \u0001 Browsing Usenet newsgroups \u0001 Playing Core War \u0001 Building battling robots \u0001 Playing with Lego Mindstorms I f Liberty BASIC is your first foray into the wonderfully wacky world of computer programming, you may be curious about where to go from here. Although you can continue practicing with Liberty BASIC and even use Liberty BASIC to create programs that you can sell to others, you may want to learn what other programming languages you can use as well. If you\u2019re serious about programming as a career, the next logical"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Finding sources for source code \u0001 Joining a user group \u0001 Browsing Usenet newsgroups \u0001 Playing Core War \u0001 Building battling robots \u0001 Playing with Lego Mindstorms I f Liberty BASIC is your first foray into the wonderfully wacky world of computer programming, you may be curious about where to go from here. Although you can continue practicing with Liberty BASIC and even use Liberty BASIC to create programs that you can sell to others, you may want to learn what other programming languages you can use as well. If you\u2019re serious about programming as a career, the next logical choice is to learn C/C++, C#, or Java. Of course, this step means learning the arcane syntax of C/C++, C#, or Java, so you may want to consider a simpler (but still powerful) alternative such as Visual Basic. Then again, why limit yourself to C, C++, Java, or any version of BASIC if you can choose from literally hundreds of different programming languages with oddball names such as Modula-2, LISP, LOGO, Scheme, Prolog, ICON, APL, COBOL, FORTRAN, Ada, and Perl? Because programming can often get frustrating and downright troublesome, this chapter also includes resources where you can find additional help from real-life people \u2014 for example, at computer user groups in your area or Usenet newsgroups on the Internet. To save you money, this chapter also points you to mail-order houses where you can find a wide variety of programming tools at steep discounts. If you get tired of practicing programming, this chapter also directs you to various programming games that you can play to sharpen your programming skills and have fun at the same time. Just remember that no matter what language you use or where you find addi- tional programming help, ultimately your own skills determine whether you finish your programming project on time and it works or is so buggy and unreliable that users abandon it. Trying Commercial Compilers The most important tool for any programmer is a language compiler. (See Chapter 4 for information on what a compiler does and why you\u2019d want one.) Although you can find plenty of free language compilers, most programmers rely on commercial compilers that offer support and regular updates. Most commercial compilers cost several hundred dollars (which doesn\u2019t matter if your company is paying for them), but you can often buy special beginner or standard editions of compilers that cost much less (typically ranging in price from $50 to $150). Windows programming Like it or not, Microsoft Windows is the dominant operating system on the planet (although Linux is quickly gaining momentum). If you plan to write a program to sell to people, the largest and most profitable market is the Windows market. The standard language for writing Windows programs is Visual C++ .NET, which the friendly folks at Microsoft (at www.microsoft.com) produce. Despite the addition of the term \u201cVisual,\u201d Visual C++ .NET is a fairly complex C/C++ programming environment that even professional programmers have trouble mastering. Still, if you"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "much less (typically ranging in price from $50 to $150). Windows programming Like it or not, Microsoft Windows is the dominant operating system on the planet (although Linux is quickly gaining momentum). If you plan to write a program to sell to people, the largest and most profitable market is the Windows market. The standard language for writing Windows programs is Visual C++ .NET, which the friendly folks at Microsoft (at www.microsoft.com) produce. Despite the addition of the term \u201cVisual,\u201d Visual C++ .NET is a fairly complex C/C++ programming environment that even professional programmers have trouble mastering. Still, if you want to write Windows programs, you can\u2019t go wrong by picking up a copy of Visual C++ .NET. Despite the popularity of C++, the future for Windows programming lies in Microsoft\u2019s newest language, C# (pronounced C-sharp). Their Visual C# .NET compiler combines the best features of C++ and Visual Basic to create a friendlier language that also protects you from making the majority of horren- dous mistakes that plague C++ programs. 372 Part VII: The Part of Tens Because few people want to devote half their lives to learning the cryptic structure of C/C++ or C#, many programmers choose the second most popu- lar programming tool: Visual Basic .NET. Unlike Visual C++ .NET or Visual C# .NET, Visual Basic .NET is much easier to learn since the BASIC language more closely resembles English than C++ or C#. If you want to preserve your knowledge of Liberty BASIC, learning Visual Basic .NET is the next logical step in any programmer\u2019s quest to dominate the programming world. Because of the growing popularity of Java, you may want to take a look at JBuilder by Borland (at www.borland.com). Borland has a long history of providing quality programming tools and also sells two other popular rapid- application development tools, C++Builder and Delphi. Like JBuilder, C++Builder and Delphi let you design the user interface visually, and then write code in either Java, Pascal, or C++ to make the program actually work. A rapid-application development (RAD) tool enables you to build the user interface quickly. (For more information about RAD tools, see Chapter 2.) If you have any interest in creating cross-platform applications (programs that can run on different operating systems such as Windows, Linux, and the Macintosh), a popular choice is Metrowerks CodeWarrior (at www. metrowerks.com). Unlike most of its competitors, such as Visual C++ .NET or C++ Builder, CodeWarrior runs on such different operating systems as Windows, Solaris, Linux, and the Macintosh, so you can (theoretically) copy your source code from the Windows version of CodeWarrior to the Linux ver- sion of CodeWarrior and compile your program for another operating system with little or no modifications. To help you choose the best compiler for your needs, Table 27-1 lists several popular Windows compilers. Table 27-1 Popular Windows Compilers Compiler Name Language Used Web Site Visual C++ .NET C, C++ www.microsoft.com Visual Basic .NET BASIC www.microsoft.com Visual C# .NET C# www.microsoft.com CodeWarrior C, C++, Java"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": ".NET or C++ Builder, CodeWarrior runs on such different operating systems as Windows, Solaris, Linux, and the Macintosh, so you can (theoretically) copy your source code from the Windows version of CodeWarrior to the Linux ver- sion of CodeWarrior and compile your program for another operating system with little or no modifications. To help you choose the best compiler for your needs, Table 27-1 lists several popular Windows compilers. Table 27-1 Popular Windows Compilers Compiler Name Language Used Web Site Visual C++ .NET C, C++ www.microsoft.com Visual Basic .NET BASIC www.microsoft.com Visual C# .NET C# www.microsoft.com CodeWarrior C, C++, Java www.metrowerks.com RealBasic BASIC www.realbasic.com (continued) 373 Chapter 27: Ten Additional Programming Resources Table 27-1 (continued) Compiler Name Language Used Web Site JBuilder Java www.borland.com C++ Builder C, C++ www.borland.com Delphi Pascal www.borland.com Macintosh and Palm OS programming The Macintosh easily maintains its reputation as one of the easiest computers in the world to use \u2014 and one of the hardest to program. Fortunately, the latest Macintosh programming tools make Macintosh programming much easier. The premier Macintosh programming tool is CodeWarrior (which many often credit with saving the Macintosh, because it was the only reliable programming tool available at one time). CodeWarrior, by Metrowerks (at www.metrowerks.com), enables you to write programs in three different lan- guages: C, C++, and Java. So rather than buy three separate compilers, you get everything that you need in one package. Best of all, Metrowerks sells special versions of CodeWarrior so that you can write programs for Windows (including Windows 98/Me/NT/2000/XP and Windows CE), Solaris, Linux, Sony PlayStation game consoles, Nintendo game consoles, and the most popular handheld computer in the world, the Palm handheld computer. If you plan to write programs for the Macintosh, the Palm handheld, or game consoles such as Nintendo or Sony PlayStation, CodeWarrior is your first (and probably only) choice. Of course, CodeWarrior doesn\u2019t support BASIC, so if you want to program a Macintosh by using BASIC, you have only two choices: Future Basic and RealBasic. Future Basic (at www.stazsoftware.com) closely resembles Liberty BASIC but runs entirely on the Macintosh. RealBasic (at www.realbasic.com) is another BASIC programming language that closely resembles Visual Basic. As with Visual Basic, you can design the user interface of your program and then write BASIC code to make your pro- gram work. RealBasic even goes one step farther and enables you to convert Visual Basic source code to run on the Macintosh. If you have any Visual Basic programs 374 Part VII: The Part of Tens that you need to turn into Macintosh programs, you can do so by using RealBasic. Of course, converting Visual Basic programs into RealBasic isn\u2019t 100 percent accurate, which means that you may need to modify the programs slightly. So if you really need to create both Macintosh and Windows programs, write your program in RealBasic and have RealBasic turn it into Macintosh and Windows programs at the same time. Table 27-2 lists the most popular Macintosh compilers for writing programs"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "code to run on the Macintosh. If you have any Visual Basic programs 374 Part VII: The Part of Tens that you need to turn into Macintosh programs, you can do so by using RealBasic. Of course, converting Visual Basic programs into RealBasic isn\u2019t 100 percent accurate, which means that you may need to modify the programs slightly. So if you really need to create both Macintosh and Windows programs, write your program in RealBasic and have RealBasic turn it into Macintosh and Windows programs at the same time. Table 27-2 lists the most popular Macintosh compilers for writing programs for the Mac. Table 27-2 Popular Macintosh Compilers Compiler Name Language Used Web Site CodeWarrior C, C++, Java www.metrowerks.com RealBasic BASIC www.realbasic.com Future Basic BASIC www.stazsoftware.com Linux programming If any operating system can break the Microsoft stranglehold on the personal computer market, Linux looks like the best choice. Linux is surging in popu- larity, and many companies and programmers are quickly porting their pro- grams to run under Linux. Several commercial vendors have released Linux versions of their compilers (such as CodeWarrior, JBuilder, and Kylix, which is a Linux version of Delphi), but you may be pleased to know that Linux also offers a rich assortment of language compilers that you can use for free. Depending on your version of Linux (RedHat, SUSE, or Debian, for example), you may already have a language compiler such as GNU C (a C language com- piler) or EGCS (a C++ compiler). Although Linux doesn\u2019t offer as many popular applications as Windows or the Macintosh, plenty of Linux compilers are available for a variety of lan- guages, including Ada, Pascal, FORTRAN, and BASIC. For more information about many popular Linux compilers, visit www.gnu.ai.mit.edu/ software/gcc/gcc.html. 375 Chapter 27: Ten Additional Programming Resources Testing the Shareware and Freeware Compilers Choosing a programming language can often prove as emotional and subjec- tive as choosing someone to marry. Rather than buy a handful of commercial compilers only to find out that you don\u2019t like any of them or the programming languages that they use, take some time to download a shareware or freeware compiler instead. As you test shareware or freeware compilers, you can practice using different programming languages such as C++ or Java. If you find a programming lan- guage that you like, consider buying the shareware or a similar commercial compiler. For a list of free compilers for a variety of different programming languages, visit the Catalog of Free Compilers and Interpreters Web page at www.idiom.com/free-compilers. BASIC compilers For a BASIC compiler that can create MS-DOS and Windows programs, con- sider PowerBasic (at www.powerbasic.com). For writing MS-DOS programs, 376 Part VII: The Part of Tens Programming a handheld computer Microsoft created a stripped-down version of Windows known as Windows CE for use in handheld and palm-size computers (often known as PocketPC computers). Unfortunately, programs that you write for Windows 98/Me/NT/2000/XP can\u2019t run on Windows CE. So if you want to write programs for Windows CE, you"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "compilers for a variety of different programming languages, visit the Catalog of Free Compilers and Interpreters Web page at www.idiom.com/free-compilers. BASIC compilers For a BASIC compiler that can create MS-DOS and Windows programs, con- sider PowerBasic (at www.powerbasic.com). For writing MS-DOS programs, 376 Part VII: The Part of Tens Programming a handheld computer Microsoft created a stripped-down version of Windows known as Windows CE for use in handheld and palm-size computers (often known as PocketPC computers). Unfortunately, programs that you write for Windows 98/Me/NT/2000/XP can\u2019t run on Windows CE. So if you want to write programs for Windows CE, you must use a special Windows CE compiler. Microsoft developed Windows CE, so naturally Microsoft offers Windows CE programming toolkits so that you can write programs for Windows CE/PocketPC computers by using either Visual C++ or Visual Basic. Two other programming languages for writing Windows CE/PocketPC programs include Pocket C (at www.orbworks.com) and NSBASIC (at www.nsbasic.com). Pocket C uses a stripped- down version of the C programming language, and NSBASIC uses a stripped-down version of the BASIC programming language. Pocket C and NSBASIC aren\u2019t quite as powerful as Visual C++ and Visual Basic, but they still enable you to create commercial-quality programs for a Windows CE/PocketPC computer. Both Pocket C and NSBASIC also come in ver- sions that run under the Palm OS, so you can also write programs for the Palm handheld com- puter. Because the Palm OS and Windows CE/Pocket PC are drastically different comput- ers, you can\u2019t run your programs on both the Palm OS and Windows CE/Pocket PC without extensive modification. the company offers their FirstBasic and PowerBasic shareware compilers. For writing Windows programs, try the PowerBasic for Windows compiler. If you have a Macintosh, you can download the freeware Chipmunk Basic interpreter (not a compiler) from www.nicholson.com/rhn/basic. One of the more challenging tasks for any programmer is writing 3D com- puter animated games. Although most programmers use C/C++ to write com- puter video games, you may want to use your knowledge of BASIC to write your own computer games for Windows by using a special game-creation lan- guage known as DarkBASIC (at http://darkbasic.thegamecreators.com). C/C++ and Java compilers C and C++ are powerful languages, but they can prove intimidating to many people. Rather than spend lots of money buying a commercial C/C++ com- piler, spend some time playing with shareware and freeware C/C++ compilers first. The most popular C compiler for Linux is the GNU C compiler, so that same compiler was ported to Windows and renamed the Cygwin compiler (at http://sources.redhat.com/cygwin). For those who want to tackle Java programming, download the free Java soft- ware development kit direct from Sun Microsystems (at java.sun.com), the inventors of Java. This bare-bones Java programming tool can help you learn Java. To help spread the popularity of their C++ and Java compilers, Borland International offers free versions of their C++ Builder and JBuilder compilers. The idea is that if you like using the free versions, you might want to buy"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "popular C compiler for Linux is the GNU C compiler, so that same compiler was ported to Windows and renamed the Cygwin compiler (at http://sources.redhat.com/cygwin). For those who want to tackle Java programming, download the free Java soft- ware development kit direct from Sun Microsystems (at java.sun.com), the inventors of Java. This bare-bones Java programming tool can help you learn Java. To help spread the popularity of their C++ and Java compilers, Borland International offers free versions of their C++ Builder and JBuilder compilers. The idea is that if you like using the free versions, you might want to buy their more advanced versions later. Pascal compilers Although Pascal has faded in popularity in North America, it\u2019s still popular among a small group of programming die-hards. For a free Pascal compiler for MS-DOS, Windows, and Linux, download Free Pascal from www.freepascal. org. If you always wanted to dig into the guts of a compiler, visit the Bloodshed Software Web site (at www.bloodshed.net), where you can join an ongoing effort to create and develop a Pascal compiler for Windows. Currently the most well-known Pascal compiler is Delphi, a Visual Basic-like compiler developed by Borland International. To help spread the popularity of Delphi, Borland offers a free version of Delphi (and Kylix, their Linux 377 Chapter 27: Ten Additional Programming Resources Pascal compiler) for personal use. Just visit www.borland.com to grab your free copy and start programming your Windows or Linux computer in Pascal today. Oddball language compilers and interpreters Not everyone likes the idea of following the pack and learning traditional lan- guages such as C/C++ or BASIC. For you rebels out there, consider some of the oddball free language compilers or interpreters that give you a chance to play with some obscure programming languages. Prolog has gained a loyal following as one of the more popular languages with which to learn about artificial intelligence. If you want to understand all the excitement about artificial intelligence languages in general, and Prolog in particular, download a free copy of Strawberry Prolog from www.dobrev.com, which runs on Both Windows and Linux. For another free Prolog compiler for Windows, download a copy of Visual Prolog from www.visual-prolog.com. Back in the early 1980s, the Department of Defense tried to force the Ada pro- gramming language into full-scale use for all military projects. Unfortunately for the Pentagon, by the time Ada compilers were available, most of the rest of the world had already switched to C/C++ and left Ada behind. Still, Ada has its supporters, and if you want to experiment with a language that tried to become the best programming language in the world, grab a copy of GNAT Ada from ftp://cs.nyu.edu/pub/gnat. Although BASIC was designed to teach beginners how to program computers, another language, LOGO, was specifically designed to teach kids how to pro- gram computers. If you want to program Windows by using the LOGO lan- guage, get a free copy of MSW Logo from Softronics (at www.softronix.com). Using a Proprietary Language A"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "the rest of the world had already switched to C/C++ and left Ada behind. Still, Ada has its supporters, and if you want to experiment with a language that tried to become the best programming language in the world, grab a copy of GNAT Ada from ftp://cs.nyu.edu/pub/gnat. Although BASIC was designed to teach beginners how to program computers, another language, LOGO, was specifically designed to teach kids how to pro- gram computers. If you want to program Windows by using the LOGO lan- guage, get a free copy of MSW Logo from Softronics (at www.softronix.com). Using a Proprietary Language A wide variety of books, magazines, newsletters, source code, and users around the world can provide help and advice for solving specific problems with programming languages such as C/C++ and Java. Unfortunately, popular programming languages are designed to solve a wide variety of different problems, which means that they usually can\u2019t solve any single problem quickly and easily. 378 Part VII: The Part of Tens As an alternative to popular programming languages, consider using a propri- etary programming language. A single company usually develops proprietary programming languages to perform a specific type of task, such as creating multimedia presentations or artificially intelligent programs. Proprietary pro- gramming languages have the following advantages: \u0002 Proprietary languages are generally easier to learn than popular languages. \u0002 Proprietary language programs are often smaller and faster to create because the languages are designed to perform a specific task. Although proprietary programming languages can prove easier to learn and enable you to create fancy applications with a minimum amount of program- ming, they have their own disadvantages, as I describe in the following list, which may make you wary of using them for critical projects: \u0002 You don\u2019t find as much third-party support (such as books or maga- zines) for proprietary languages as you do for popular languages. \u0002 Proprietary languages may run on only certain operating systems (meaning that porting the program to another operating system may prove virtually impossible). \u0002 You\u2019re dependent on a single company for support. If the company that makes your proprietary language goes out of business, your program may prove difficult or next to impossible to update. \u0002 Buying a proprietary language may prove extremely expensive com- pared to buying general-purpose language compilers. \u0002 Proprietary language programs often run slower than programs that you create in a general-purpose language. HyperCard One of the most famous (and ultimately most ignored) proprietary programming languages comes from Apple Computer\u2019s HyperCard program. HyperCard was originally designed to enable nonprogrammers to write pro- grams by using an index card metaphor. An entire HyperCard program is meant to resemble a stack of index cards, with one card at a time appearing on-screen. Text and pictures appear on each card, and cards can provide hyperlinks to other cards. By using a simpli- fied programming language known as HyperTalk, you can write programs to make your HyperCard stack calculate results or display information. 379 Chapter 27: Ten Additional Programming"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "of the most famous (and ultimately most ignored) proprietary programming languages comes from Apple Computer\u2019s HyperCard program. HyperCard was originally designed to enable nonprogrammers to write pro- grams by using an index card metaphor. An entire HyperCard program is meant to resemble a stack of index cards, with one card at a time appearing on-screen. Text and pictures appear on each card, and cards can provide hyperlinks to other cards. By using a simpli- fied programming language known as HyperTalk, you can write programs to make your HyperCard stack calculate results or display information. 379 Chapter 27: Ten Additional Programming Resources Although most consider HyperCard the forerunner of hypertext and visual programming (long before the popularity of the World Wide Web and Visual Basic), the HyperCard programs often ran too slowly and were limited to run- ning only on the Macintosh. Apple Computer no longer gives away free copies of HyperCard with every Macintosh, and the company has pretty much let HyperCard drift farther into the background of neglect. Still, HyperCard\u2019s latest claim to fame was that the designers of the best-selling game, Myst, used it to create their product, which shows that imagination is ultimately more important than the pro- gramming language you choose. To discover more about HyperCard, visit www.apple.com. Revolution In the wake of HyperCard\u2019s initial popularity, many companies offered HyperCard-clone programs. Following HyperCard\u2019s steady decline into obscu- rity, most of these HyperCard-clone programs also died. One of the few remaining HyperCard clones is Revolution, which not only runs HyperCard stacks, but also runs them on a variety of different operating sys- tems including the Macintosh, Windows, and Linux/Unix. So if you write any programs by using HyperCard and want to preserve your programs while enabling them to run on different computers, consider using Revolution (www. runrev.com). PowerBuilder One of the more popular database development languages is PowerBuilder, which enables you to visually design a database application with a minimum of coding. Whether you need to share data with big mainframe computers or minicomputers, PowerBuilder may prove the product to use for making your next application. To find out more about PowerBuilder, visit www.sybase.com. Shopping by Mail Order You can buy language compilers directly from the publishers, but unless they\u2019re offering a special discounted price, you\u2019re better off buying from a mail-order house. Mail-order houses sell products at a discount \u2014 and they often don\u2019t charge you sales tax. 380 Part VII: The Part of Tens In addition to offering a wide variety of commercial compilers at discounted prices, mail-order houses often stock a variety of programming tools that you may never find anywhere else, such as special programming editors, code analyzers, language utilities to make programming easier, copy-protection kits, and installation programs. The following mail-order houses specialize in programming tools: \u0002 Programmer\u2019s Paradise (at www.pparadise.com) offers a variety of programming tools for a variety of languages. \u0002 VBXtras (at www.vbxtras.com) specializes in Visual Basic add-ons and programming aids. Getting Your Hands on Source Code Because one"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "sales tax. 380 Part VII: The Part of Tens In addition to offering a wide variety of commercial compilers at discounted prices, mail-order houses often stock a variety of programming tools that you may never find anywhere else, such as special programming editors, code analyzers, language utilities to make programming easier, copy-protection kits, and installation programs. The following mail-order houses specialize in programming tools: \u0002 Programmer\u2019s Paradise (at www.pparadise.com) offers a variety of programming tools for a variety of languages. \u0002 VBXtras (at www.vbxtras.com) specializes in Visual Basic add-ons and programming aids. Getting Your Hands on Source Code Because one of the best ways to learn anything is to learn from someone else, many programmers voluntarily share their source code so that others can benefit from their work. The Linux operating system is the ultimate example of people sharing source code. If you can get the source code to another program, you can include its features in your own program, thus saving you time. Many companies sell programming utilities (such as miniature word processors, spreadsheets, or graphics-charting programs) that you can paste together into your own programs. As a bonus, some of these companies also include the source code so that you can modify the program for your needs. You can often find the source code to small programs scattered around the Internet for free. These small programs typically solve simple problems, but one of those problems may prove exactly what you need. To find source code for your favorite language, use a search engine to search for the string \u201cC source code\u201d. This search string likely turns up a long list of useless Web sites and an occasional useful Web site that offers source code that you can download for free. To help narrow your search for source code, try visiting one of the following Web sites: \u0002 Code Guru (at www.codeguru.com) offers source code snippets to a variety of popular languages, including C/C++, Visual Basic, and Java. \u0002 Planet Source Code (at www.planet-source-code.com) provides Visual Basic and Java source code. 381 Chapter 27: Ten Additional Programming Resources \u0002 The Delphi Source (at www.delphisource.com/) features source code just for Delphi programmers. \u0002 ABC: All BASIC Code (at www.allbasiccode.com/) provides source code for nearly all varieties of BASIC, including Liberty BASIC, QBASIC, QuickBasic, and Visual Basic. \u0002 The JavaScript Source (at http://javascript.internet.com/) offers loads of free source code for programming in JavaScript. \u0002 The cprogramming.com site (at www.cprogramming.com) offers lots of source code for C/C++ programmers to use and enjoy. Joining a Local User Group Programming can prove lonely and difficult in isolation. If you\u2019re lucky (or unlucky, depending on your point of view) enough to live in a big city, you can perhaps find a local programming user group. User groups meet regularly \u2014 usually weekly or monthly \u2014 and enable pro- grammers to share tips and information with one another concerning their favorite language, such as C/C++, Java, Visual Basic, or Delphi. Many user groups advertise in local"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "in JavaScript. \u0002 The cprogramming.com site (at www.cprogramming.com) offers lots of source code for C/C++ programmers to use and enjoy. Joining a Local User Group Programming can prove lonely and difficult in isolation. If you\u2019re lucky (or unlucky, depending on your point of view) enough to live in a big city, you can perhaps find a local programming user group. User groups meet regularly \u2014 usually weekly or monthly \u2014 and enable pro- grammers to share tips and information with one another concerning their favorite language, such as C/C++, Java, Visual Basic, or Delphi. Many user groups advertise in local computer magazines and newsletters, which you can often find in your favorite computer store. For another way to find a user group in your area, visit the Web site of your favorite compiler company (such as www.microsoft.com or www.borland.com). Company Web sites often list user group meetings in different cities. Frequenting Usenet Newsgroups Learning anything can prove much easier if you have some friends to help you out. If you don\u2019t have any knowledgeable programming friends nearby, use the next best resource \u2014 a Usenet newsgroup. Newsgroups act as electronic bulletin boards, where anyone can leave a mes- sage asking for help. Complete strangers from all around the world can give you advice or information to answer your question. If you browse through newsgroups long enough, you can often respond to other people\u2019s messages and give them some help as well. Nearly every programming language has a newsgroup where loyal pro- grammers gather and swap tips, tricks, and news. Check out the following newsgroups: 382 Part VII: The Part of Tens \u0002 comp.lang is a general-purpose programming newsgroup. \u0002 comp.lang.basic is a newsgroup for BASIC programming enthusiasts. \u0002 comp.lang.c is for C programming fanatics and followers. \u0002 comp.lang.c++ enables you to learn C++ from this newsgroup. \u0002 comp.lang.delphi enables you to band together with other Delphi programmers. \u0002 comp.lang.java.help is a great place for getting help with program- ming and using Java. \u0002 comp.lang.pascal covers Pascal programming, including some Delphi programming news and information. This list is just a short sampling of available programming newsgroups. With a little bit of searching, you can find newsgroups for other programming lan- guages and specific compilers such as Visual Basic, C++Builder, and RealBasic. Playing Core War People tend to learn faster and more effectively if they\u2019re having fun (which is a lesson that public schools and copycat book publishers still haven\u2019t figured out yet). Although writing a program that can calculate a second-order differ- ential equation may improve your programming skills, it may also make you think that programming is extremely boring. So to keep you from getting bored and to show you that programming can actually prove a lot of fun, you can play one of many programming games available for free (or for a nominal price). The purpose of programming games is to help sharpen your programming skills. If you want to win, you must learn to write the smallest, fastest,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "public schools and copycat book publishers still haven\u2019t figured out yet). Although writing a program that can calculate a second-order differ- ential equation may improve your programming skills, it may also make you think that programming is extremely boring. So to keep you from getting bored and to show you that programming can actually prove a lot of fun, you can play one of many programming games available for free (or for a nominal price). The purpose of programming games is to help sharpen your programming skills. If you want to win, you must learn to write the smallest, fastest, and most efficient programs \u2014 just as in real life. The granddaddy of all programming games is Core War. In the old days, computers didn\u2019t use floppy or hard disks. Instead, they stored data on a magnetically-charged doughnut-shaped device called core memory or just core for short. The idea behind Core War is to write a program that you \u201cstore\u201d in the core memory of an imaginary mainframe computer. To play Core War, each player must write a program by using a simplified version of assembly language, dubbed Red Code. Each program must search for enemy programs and erase them from the computer\u2019s core memory. The winner is the player whose pro- gram is the last surviving program in core memory. 383 Chapter 27: Ten Additional Programming Resources Although Core War is popular, it\u2019s not a very visually exciting game to watch. All you see are the various programs stalking one another in core memory and trying to erase the instructions of enemy programs, which often looks no more interesting than watching a visual depiction of defragmenting your hard disk. For more information about Core War, visit one of the following sites: \u0002 www.ecst.csuchico.edu/~pizza/koth \u0002 www.koth.org \u0002 ftp.csua.berkeley.edu/pub/corewar To exchange messages with other Core War fanatics, visit the news:rec. games.corewar newsgroup, where you can learn about the latest Core War tournaments and start writing your own killer programs. Programming a Battling Robot The Core War programming game (described in the preceding section) doesn\u2019t offer great graphics to hold a player\u2019s attention. To satisfy the players\u2019 need for visual appeal, rival programming games incorporate more adventurous graphics. And, of course, what can prove any more appealing than war and gladiatorial combat? Instead of sending human gladiators into an arena to fight to the death, however, some programming games provide an imaginary arena where battling robots fight to the death. Each robot incorporates identical capabilities to move, search, and shoot. But the way that each player programs his robot determines the actual actions of each robot. To program a robot, you must write a miniature pro- gram by using a simplified version of the C, C++, or Pascal language. The challenge is not only to write a program that runs correctly, but also to provide your robot with instructions that create an optimum defensive and offensive strategy for surviving, stalking, and killing enemy robots at the same time. Write a large program"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "arena where battling robots fight to the death. Each robot incorporates identical capabilities to move, search, and shoot. But the way that each player programs his robot determines the actual actions of each robot. To program a robot, you must write a miniature pro- gram by using a simplified version of the C, C++, or Pascal language. The challenge is not only to write a program that runs correctly, but also to provide your robot with instructions that create an optimum defensive and offensive strategy for surviving, stalking, and killing enemy robots at the same time. Write a large program that gives your robot limited choices, and your robot probably gets blown up within seconds. Write a small program that runs quickly and provides your robot with enough intelligence to avoid damage while pummeling its opponents as often as possible, and your robot is likely to survive any battle. In addition to providing a more visually appealing way to see whose program- ming is better, battling robot games also give you a chance to practice writing 384 Part VII: The Part of Tens programs in your favorite language, such as C, C++, or Pascal. After you master how to control a robot using C or Pascal, you can transfer your robot programming skills to real-life programs. Most battling robot programs run only on MS-DOS. If that\u2019s okay with you, download a free copy of a battling-robots game from one of the following Web sites: \u0002 The C++ Robots game is at www.gamerz.net/c++robots/. \u0002 The C-Robots and P-Robots game is at www.informatik. uni-frankfurt.de/~hbecker/pcroth.html. Toying with Lego Mindstorms Nearly every kid\u2019s had the chance to play with Lego building blocks (and plenty of parents have had the chance to step on a Lego building block in their bare feet). Because so many kids love playing with computers, the fine people controlling the Lego empire decided to combine Legos with comput- ers, and the result is something known as Lego Mindstorms (at http:// mindstorms.lego.com). By using Lego Mindstorms, you can use Lego bricks to build a robot and then program it by using a simplified, graphically oriented programming language. Of course, if you find this simplified programming language too tame, the Lego Mindstorms Web site offers a free software developer\u2019s toolkit that enables you to program a Lego robot by using Visual Basic. Programming a Lego robot involves pasting together blocks of instructions, similar to snap- ping together Lego building blocks. For hardcore programmers who\u2019d rather use a language tougher than Visual Basic, visit the legOS Web site (at www.noga.de/legOS) and download tools that enable you to control your Lego Mindstorms robots by using assembly language, C, C++, Pascal, or practically any programming language that you choose. By using a copy of Lego Mindstorms and any of the free programming toolkits available, you can create your own robots out of Legos and program them to attack one another, chase your dog around the house, or run berserk and protect your house against prowlers."}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "similar to snap- ping together Lego building blocks. For hardcore programmers who\u2019d rather use a language tougher than Visual Basic, visit the legOS Web site (at www.noga.de/legOS) and download tools that enable you to control your Lego Mindstorms robots by using assembly language, C, C++, Pascal, or practically any programming language that you choose. By using a copy of Lego Mindstorms and any of the free programming toolkits available, you can create your own robots out of Legos and program them to attack one another, chase your dog around the house, or run berserk and protect your house against prowlers. After you practice your programming skills with Lego Mindstorms, you can create almost anything that you want within the safe, friendly environment of Legos. 385 Chapter 27: Ten Additional Programming Resources 386 Part VII: The Part of Tens Appendix About the CD H ere\u2019s just some of the stuff available on the Beginning Programming For Dummies, Third Edition, CD-ROM: \u0001 Liberty BASIC: a shareware program for writing Windows programs using BASIC \u0001 NS Basic: a trial program that allows you to write BASIC programs for either the PalmOS or the PocketPC handheld computer \u0001 REALbasic: a demo that allows you to create Macintosh and Windows programs by drawing your user interface and then writing BASIC code to make it work \u0001 Dev-C++: a freeware and open source C++ compiler that allows you to see how a compiler works and write C/C++ programs for Windows \u0001 Revolution: a cross-platform trial program that lets you write programs for Windows, the Macintosh, and Linux \u0001 pMARS: a freeware game program in which players write programs that stalk each other through the memory of an imaginary computer System Requirements Make sure that your computer meets the minimum system requirements that I give in the following list. If your computer doesn\u2019t match up to most of these requirements, you may experience problems in using the contents of the CD. \u0001 A PC with a Pentium (or similar processor such as a Duron, K6, Celeron, or Athlon) or faster processor or a Mac OS computer with a PowerPC processor. \u0001 Microsoft Windows 98 or later or Mac OS system software 8.6 or later. \u0001 At least 32MB total RAM on your computer. \u0001 A CD-ROM drive. If you need more information on the basics, check out PCs For Dummies, 7th Edition, by Dan Gookin; Macs For Dummies, 7th Edition, by David Pogue; iMac For Dummies, by David Pogue; or Windows Me Millennium Edition For Dummies, Windows 98 For Dummies, or Windows XP For Dummies, 2nd Edition, all by Andy Rathbone (all published by Wiley Publishing). Using the CD with Microsoft Windows To install from the CD to your hard drive, follow these steps: 1. Insert the CD into your computer\u2019s CD-ROM drive. 2. Click the Start button and choose Run from the menu. 3. Type D:\\ where D is the letter of your CD-ROM drive. 4. Double-click the file called License.txt. This file contains the end-user"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Dummies, 7th Edition, by David Pogue; iMac For Dummies, by David Pogue; or Windows Me Millennium Edition For Dummies, Windows 98 For Dummies, or Windows XP For Dummies, 2nd Edition, all by Andy Rathbone (all published by Wiley Publishing). Using the CD with Microsoft Windows To install from the CD to your hard drive, follow these steps: 1. Insert the CD into your computer\u2019s CD-ROM drive. 2. Click the Start button and choose Run from the menu. 3. Type D:\\ where D is the letter of your CD-ROM drive. 4. Double-click the file called License.txt. This file contains the end-user license that you agree to by using the CD. When you are done reading the license, close the program, most likely NotePad, that displayed the file. 5. Double click the file called Readme.txt. This file contains instructions about installing the software from this CD. It might be helpful to leave this text file open while you are using the CD. 6. Double-click the folder for the software you are interested in. Be sure to read the descriptions of the programs in the next section of this appendix (much of this information also shows up in the Readme file). These descriptions will give you more precise information about the programs\u2019 folder names, and about finding and running the installer program. 7. Find the file called Setup.exe, or Install.exe, or something similar, and double-click on that file. The program\u2019s installer will walk you through the process of setting up your new software. To run some of the programs on the Beginning Programming For Dummies CD-ROM, you may need to keep the CD inside your CD-ROM drive. This requirement is a good thing. Otherwise, you may need to install a very large chunk of the program to your hard drive, which can possibly keep you from installing other software. 388 Beginning Programming For Dummies, 3rd Edition Using the CD with Mac OS To install the items from the CD to your Mac\u2019s hard drive, follow these steps: 1. Insert the CD into your computer\u2019s CD-ROM drive. In a moment, an icon representing the CD you just inserted appears on your Mac desktop. The icon probably looks like a CD-ROM. 2. Double-click the CD icon to show the CD\u2019s contents. 3. Double-click the License Agreement icon. 4. Double-click the Read Me First icon. The Read Me First text file contains information about the CD\u2019s pro- grams and any last-minute instructions that you may need to correctly install them. 5. To install most programs, open the program folder and double-click the Install (or Installer) icon. Sometimes the installers are actually self-extracting archives, which just means that the program files are bundled up into an archive, and this self-extractor unbundles the files and places them on your hard drive. This kind of program is often known as a SEA file. Double-click anything with SEA in the title, and it runs just like an installer. 6. For those programs don\u2019t come with installers, just drag the program\u2019s"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "pro- grams and any last-minute instructions that you may need to correctly install them. 5. To install most programs, open the program folder and double-click the Install (or Installer) icon. Sometimes the installers are actually self-extracting archives, which just means that the program files are bundled up into an archive, and this self-extractor unbundles the files and places them on your hard drive. This kind of program is often known as a SEA file. Double-click anything with SEA in the title, and it runs just like an installer. 6. For those programs don\u2019t come with installers, just drag the program\u2019s folder from the CD window and drop it onto your hard drive icon. After you install the programs that you want, you can eject the CD. Carefully place it back in the plastic jacket of the book for safekeeping. Using the CD with Linux To install the items from the CD to your hard drive, follow these steps: 1. Log in as root. 2. Insert the CD into your computer\u2019s CD-ROM drive. 3. If your computer has Auto-Mount enabled, wait for the CD to mount. Otherwise, follow these steps: a. Command line instructions: At the command prompt type: mount /dev/cdrom /mnt/cdrom 389 Appendix: About the CD (This mounts the cdrom device to the mnt/cdrom directory. If your device has a different name, change cdrom to that device name \u2014 for example, cdrom1.) b. Graphical: Right-click the CD-ROM icon on the desktop and choose Mount CD-ROM. This mounts your CD-ROM. 4. Browse the CD and follow the individual installation instructions for the products listed below. 5. To remove the CD from your CD-ROM drive, follow these steps: a. Command line instructions: At the command prompt type: umount /mnt/cdrom b. Graphical: Right-click the CD-ROM icon on the desktop and choose UMount CD-ROM. This un-mounts your CD-ROM. When you have installed the programs that you want, you can eject the CD. Carefully place it back in the plastic jacket of the book for safekeeping. What You\u2019ll Find This CD is crammed with a variety of different programming languages so that you can experiment and explore different languages from the comfort and convenience of your own computer. Just as studying different foreign lan- guages can give you a broader understanding of human communication, so can studying a range of computer programming languages give you a broader understanding of computer programming in general. Software Adobe Acrobat, from Adobe (www.adobe.com). Adobe Acrobat enables you to read Acrobat PDF files on a Windows or Macintosh computer. BBedit, from Bare Bones Software (www.barebones.com), BBEdit is a text editor for the Macintosh, which lets you write any type of programs including HTML code to design your own web pages. C++ Builder, from Borland International (www.borland.com). C++ Builder allows you to visually design your user interface and then use the C++ pro- gramming language to make it work. Borland plans to make C++ Builder into a cross-platform compiler so you can write programs for both Windows and Linux. 390 Beginning"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Acrobat, from Adobe (www.adobe.com). Adobe Acrobat enables you to read Acrobat PDF files on a Windows or Macintosh computer. BBedit, from Bare Bones Software (www.barebones.com), BBEdit is a text editor for the Macintosh, which lets you write any type of programs including HTML code to design your own web pages. C++ Builder, from Borland International (www.borland.com). C++ Builder allows you to visually design your user interface and then use the C++ pro- gramming language to make it work. Borland plans to make C++ Builder into a cross-platform compiler so you can write programs for both Windows and Linux. 390 Beginning Programming For Dummies, 3rd Edition C++ Robots, a game where you program a battling robot using the C++ pro- gramming language. Well-written programs survive awhile poorly written pro- grams (those that don\u2019t work right or run too slowly) get wiped out on the battlefield. (http://www.gamerz.net/rrognlie/projects.html) C# Builder Personal, from Borland International (www.borland.com). C# Builder allows you to use Microsoft\u2019s newest C# programming language to create Windows programs. Delphi, from Borland International (www.borland.com). Delphi is a rapid- application development tool based on the Pascal programming language. By copying source code between Linux and Delphi, you can create applications for both Windows and Linux. Dev-C++, from Bloodshed Software (at www.bloodshed.net). Dev-C++ is a complete C/C++ programming environment for creating Windows programs. Free Pascal, from Free Pascal.org (at www.freepascal.org). Free Pascal is a Pascal compiler that closely follows the syntax of Borland Pascal version 7.0 and Delphi. Future BASIC3, from Staz Software (at www.stazsoftware.com). Future BASIC3 enables you to write applications for the Macintosh by using the BASIC programming language. IBM\u00ae Robocode V1.0.6, battling robot game from IBM, which lets you pro- gram a robot in Java (http://robocode.alphaworks.ibm.com/home/ home.html). Poorly written programs get killed while well-written programs wipe out the competition and survive. JBuilder, from Borland International (www.borland.com). JBuilder is a rapid- application development tool for writing programs using the Java program- ming language. Because Java programs can run on different operating systems, JBuilder programs can as well, including Windows and Linux. Kylix, from Borland International (www.borland.com). Kylix is the Linux ver- sion of Delphi, which allows you to use Pascal to write Linux applications. By copying source code between Linux and Delphi, you can create applications for both Windows and Linux. Liberty BASIC, from ShopTalk Systems (at www.libertybasic.com). Liberty BASIC offers a BASIC compiler for Windows capable of creating complete Windows applications. MacPerl, a Macintosh version of the popular Perl programming language, often used to program web sites but also capable of creating general purpose programs too (www.macperl.com). 391 Appendix: About the CD NS Basic, from the NSBasic Corporation (www.nsbasic.com). This demo ver- sion allows you to write BASIC programs for the handheld PocketPC operat- ing system. Perl, a popular programming language, derived from the C language, often used to create programs for web sites. If you\u2019re going to create web sites that do more than just display text and graphics, you\u2019ll probably need to use Perl. (www.perl.com). pMARS, from KOTH.org (at"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "MacPerl, a Macintosh version of the popular Perl programming language, often used to program web sites but also capable of creating general purpose programs too (www.macperl.com). 391 Appendix: About the CD NS Basic, from the NSBasic Corporation (www.nsbasic.com). This demo ver- sion allows you to write BASIC programs for the handheld PocketPC operat- ing system. Perl, a popular programming language, derived from the C language, often used to create programs for web sites. If you\u2019re going to create web sites that do more than just display text and graphics, you\u2019ll probably need to use Perl. (www.perl.com). pMARS, from KOTH.org (at www.koth.org). Core Wars programming game where contestants write their own programs that try to wipe other compet- ing programs from an imaginary computer\u2019s memory. \u201cProgramming in Python\u201d bonus chapter. A short chapter, stored in an Adobe Acrobat PDF file, that explains the Python programming language. Python, from the Python Consortium (at www.python.org). Python is an object-oriented scripting language that people often use for creating Internet applications. Programmers often compare Python to languages such as Perl and Java. REALbasic, from REAL Software (at www.realbasic.com). REALbasic enables you to draw your user interface and write BASIC code to create appli- cations for the Macintosh, Linux, or Windows. Revolution, from Runtime Revolution (at www.runrev.com). Revolution is a cross-platform, HyperCard clone that enables you to create stacks of graph- ics and text that you can link together to create your own programs. Ruby, a free programming language designed to teach the principles of object-oriented programming. (www.ruby-lang.org/en). Ruby programs can run on a wide variety of operating systems including Windows, Linux, Macintosh, and even OS/2. TextPad, simple, yet powerful text editor for Windows to let you write pro- grams or HTML code to design your own web pages. (www.textpad.com) WinAce, a trial version of a file-compression program used to smash multiple files into a single file and compress their size to make it easier to transfer data from one computer to another. (www.winace.com) WinRAR, a trial version of another file-compression program used to smash multiple files into a single file and compress their size to make it easier to transfer data from one computer to another. (www.rarlabs.com) Shareware programs are fully functional, free, trial versions of copyrighted programs. If you like particular programs, register with their authors for a nominal fee and receive licenses, enhanced versions, and technical support. 392 Beginning Programming For Dummies, 3rd Edition Freeware programs are free, copyrighted games, applications, and utilities. You can copy them to as many PCs as you like \u2014 free \u2014 but they have no technical support. GNU software is governed by its own license, which you find inside the folder of the GNU software. You face no restrictions on distribution of this software. See the GNU license for more details. Trial, demo, or evaluation versions are usually limited either by time or func- tionality (such as an inability to save projects). If You\u2019ve Got Problems (Of the CD Kind) I tried my best to compile programs"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Edition Freeware programs are free, copyrighted games, applications, and utilities. You can copy them to as many PCs as you like \u2014 free \u2014 but they have no technical support. GNU software is governed by its own license, which you find inside the folder of the GNU software. You face no restrictions on distribution of this software. See the GNU license for more details. Trial, demo, or evaluation versions are usually limited either by time or func- tionality (such as an inability to save projects). If You\u2019ve Got Problems (Of the CD Kind) I tried my best to compile programs that work on most computers with the minimum system requirements. Alas, your computer may differ, and some programs may not work correctly for some reason. The two likeliest problems are that your machine doesn\u2019t have enough memory (RAM) for the programs that you want to use or that you have other programs running that are affecting installation or running of a program. If you get error messages such as Not enough memory or Setup cannot continue, try one or more of the following methods and then try using the software again: \u0001 Turn off any antivirus software that\u2019s on your computer. Installers sometimes mimic virus activity and may make your computer incor- rectly believe that a virus is infecting it. \u0001 Close all running programs. The more programs that you\u2019re running, the less memory is available to other programs. Installers also typically update files and programs; if you keep other programs running, installa- tion may not work correctly. \u0001 In Windows, close the CD interface and run demos or installations directly from Windows Explorer. The interface itself can tie up system memory or even conflict with certain kinds of interactive demos. Use Windows Explorer to browse the files on the CD and launch installers or demos. \u0001 Have your local computer store add more RAM to your computer. This course is, admittedly, a drastic and somewhat expensive step. If you have a Windows 95 PC or a Mac OS computer with a PowerPC chip, how- ever, adding more memory can really help the speed of your computer and enable more programs to run at the same time. 393 Appendix: About the CD If you still have trouble with the CD-ROM, please call the Wiley Product Technical Support phone number: (800) 762-2974. Outside the United States, call 1(317) 572-3994. You can also contact Wiley Product Technical Support through the internet at: www.wiley.com/techsupport. Wiley Publishing will provide technical support only for installation and other general quality con- trol items; for technical support on the applications themselves, consult the program\u2019s vendor or author. To place additional orders or to request information about other Wiley prod- ucts, please call (800) 225-5945. 394 Beginning Programming For Dummies, 3rd Edition \u2022 Symbols \u2022 & (ampersand) menu shortcut operator, 196 \u2019 (apostrophe) BASIC comment prefix, 92, 93 * (asterisk) BASIC multi- plication operator, 96 \\ (backslash) BASIC graphic control text prefix, 171 | (bar) BASIC menu com-"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "also contact Wiley Product Technical Support through the internet at: www.wiley.com/techsupport. Wiley Publishing will provide technical support only for installation and other general quality con- trol items; for technical support on the applications themselves, consult the program\u2019s vendor or author. To place additional orders or to request information about other Wiley prod- ucts, please call (800) 225-5945. 394 Beginning Programming For Dummies, 3rd Edition \u2022 Symbols \u2022 & (ampersand) menu shortcut operator, 196 \u2019 (apostrophe) BASIC comment prefix, 92, 93 * (asterisk) BASIC multi- plication operator, 96 \\ (backslash) BASIC graphic control text prefix, 171 | (bar) BASIC menu com- mand separator, 199 { } (curly brackets) C text delimiters, 73 JavaScript function instruction delimiters, 346 [ ] (square brackets) BASIC subprogram delimiters, 73 ^ (caret) BASIC exponentiation operator, 96 --> (dash, dash, greater than sign) HTML comment suffix, 315 $ (dollar sign) BASIC variable name suffix, 83 = (equals sign) BASIC relational operator, 112 BASIC variable declaration operator, 83 > (greater than sign) BASIC relational operator, 112 >= (greater than sign, equals sign) BASIC relational operator, 112 < (less than sign) BASIC relational operator, 112 <= (less than sign, equals sign) BASIC relational operator, 112 <! -- (less than sign, exclamation mark, dash, dash,) HTML comment prefix, 315 <> (less than sign, greater than sign) BASIC relational operator, 112 \u2013 (minus sign) BASIC sub- traction operator, 96 ( ) (parentheses) BASIC operator delimiters, 99 + (plus sign) BASIC addition operator, 96 BASIC concatenation operator, 103 JavaScript concatenation operator, 342 JavaScript variable prefix, 342 \u201c \u201d (quotation marks, double) BASIC string delimiters, 72 HTML command delimiters, 332 \u2018 \u2019 (quotation marks, single) HTML command delimiters, 332 ; (semicolon) BASIC SPACE function suffix, 77 / (slash) BASIC division operator, 96 HTML end tag suffix, 312 _ (underscore) BASIC line continuation character, 166, 198 \u2022 A \u2022 A tag (HTML), 325, 326 ABC: All BASIC Code Web site, 382 ABS function (Liberty BASIC), 100 ACS function (Liberty BASIC), 100 Ada, 26, 378 addition, 85, 95\u201396, 98 Adobe Acrobat software (on the CD), 390 alert command (JavaScript), 343 algorithm described, 287 sorting algorithm, 269, 270, 300\u2013301 ALIGN attribute HTML, 319, 328 Java applet, 355 alpha testing, 45, 46 American Standard Code for Information Interchange format, 49, 311, 312 ampersand (&) menu shortcut operator, 196 AND operator (Liberty BASIC), 115\u2013116 animation, choosing career in, 363\u2013364 Animation Magazine Web site, 363 AntiOnline Web site, 367 apostrophe (\u2019) BASIC comment prefix, 92, 93 APPEND command (Liberty BASIC), 178 Apple Open Source Web site, 368 Index AppleScript, 31 applet, Java. See Java applet array collection, 234 creating, 226\u2013227 data type, 226 deleting data from, 247 described, 225\u2013226 dynamic, 232\u2013234 hash function, applying to, 292\u2013296 index, 226\u2013227 linked list compared, 241 list box, populating from, 209 location in, referencing, 228, 231\u2013232 looping through, 228\u2013229 memory considerations, 232, 241, 247 multidimensional, 230\u2013232 naming, 226 number array, 226 optimizing, 300 record, using with, 239\u2013240 retrieving data from, 228\u2013229 searching, 288\u2013289, 291, 292\u2013296 sizing, 227, 230\u2013231, 232\u2013233, 300 sort operation, using"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "apostrophe (\u2019) BASIC comment prefix, 92, 93 APPEND command (Liberty BASIC), 178 Apple Open Source Web site, 368 Index AppleScript, 31 applet, Java. See Java applet array collection, 234 creating, 226\u2013227 data type, 226 deleting data from, 247 described, 225\u2013226 dynamic, 232\u2013234 hash function, applying to, 292\u2013296 index, 226\u2013227 linked list compared, 241 list box, populating from, 209 location in, referencing, 228, 231\u2013232 looping through, 228\u2013229 memory considerations, 232, 241, 247 multidimensional, 230\u2013232 naming, 226 number array, 226 optimizing, 300 record, using with, 239\u2013240 retrieving data from, 228\u2013229 searching, 288\u2013289, 291, 292\u2013296 sizing, 227, 230\u2013231, 232\u2013233, 300 sort operation, using in, 272\u2013273, 284 static, 232 string array, 209, 226 structure, changing, 232\u2013233, 234, 242 variable, relation to, 226 ASCII (American Standard Code for Information Interchange) format, 49, 311, 312 ASN function (Liberty BASIC), 100 assembler, 21, 22\u201324 assembly language, 20\u201322, 42 asterisk (*) BASIC multi- plication operator, 96 ATN function (Liberty BASIC), 100 audio, outputting, 72, 172\u2013174 Axon Idea Processor software, 10, 12 \u2022 B \u2022 B HTML tag, 318 programming language, 22 BACKCOLOR command (Liberty BASIC), 169, 170, 172 BACKGROUND attribute (HTML), 329 BackgroundColor command (Liberty BASIC), 194 backslash (\\) BASIC graphic control text prefix, 171 bar (|) BASIC menu com- mand separator, 199 BAS files, 66 BASIC (Beginner\u2019s All- purpose Symbolic Instruction Code). See also specific implementation case sensitivity, 65, 80\u201381, 108, 217 compiler, 52, 63, 376\u2013377 constant support, 91 ending program, 85 function as subprogram, 150, 151 interpreter, 62\u201363, 377 introduced, 25 linked list support, 241 Linux, running on, 62 Macintosh, programming for, 61, 374, 377 naming program file, 66 Notice dialog box, 76, 85 OOP support, 255 opening file written in, 67\u201368 Pascal compared, 25 running program written in, 65\u201366, 68 saving program written in, 66\u201367, 68 source code, downloading, 382 BBedit software (on the CD), 390 BEEP command (Liberty BASIC), 173 BEGIN command (Pascal), 247 Beginner\u2019s All-purpose Symbolic Instruction Code. See BASIC beta testing, 45, 46 BGCOLOR attribute (HTML), 319\u2013320 Big-O notation, 270 BlackCode Web site, 367 bloatware, 299 BLOCKQUOTE tag (HTML), 317 Bloodshed Software Web site, 377 BMPBUTTON command (Liberty BASIC), 201\u2013202 BODY tag (HTML), 314, 329 bookmark, browser, 314 Boolean expression, 111\u2013119, 131\u2013133, 301\u2013302 Borland C++ Builder compiler (on the CD), 307, 373, 374, 377, 390 JBuilder compiler (on the CD), 353, 356, 374, 377, 391 JBuilder language, 27, 373 396 Beginning Programming For Dummies, 3rd Edition Kylix compiler (on the CD), 27, 39, 377\u2013378, 391 BOX command (Liberty BASIC), 170\u2013171 BOXFILLED command (Liberty BASIC), 170 BR tag (HTML), 317 brackets, curly ({ }) C text delimiters, 73 JavaScript function instruction delimiters, 346 brackets, square ([ ]) BASIC subprogram delimiters, 73 branching instruction, 144\u2013145, 146 breakpoint, 54 browser bookmark, 314 HTML file, opening in, 313 HTML, rendering by, 32\u201333 introduced, 311 JavaScript support, 340, 347 Web programming support, 34 bug, 53, 215\u2013216. See also debugging button command button, 200\u2013202, 332\u2013333 directory button, 349 HTML, creating in, 329, 332\u2013333 input, retrieving, 201, 202, 206, 332\u2013333 JavaScript, creating in, 349 naming, 201, 335 radio button,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "39, 377\u2013378, 391 BOX command (Liberty BASIC), 170\u2013171 BOXFILLED command (Liberty BASIC), 170 BR tag (HTML), 317 brackets, curly ({ }) C text delimiters, 73 JavaScript function instruction delimiters, 346 brackets, square ([ ]) BASIC subprogram delimiters, 73 branching instruction, 144\u2013145, 146 breakpoint, 54 browser bookmark, 314 HTML file, opening in, 313 HTML, rendering by, 32\u201333 introduced, 311 JavaScript support, 340, 347 Web programming support, 34 bug, 53, 215\u2013216. See also debugging button command button, 200\u2013202, 332\u2013333 directory button, 349 HTML, creating in, 329, 332\u2013333 input, retrieving, 201, 202, 206, 332\u2013333 JavaScript, creating in, 349 naming, 201, 335 radio button, 205\u2013207, 335\u2013337 BUTTON command (Liberty BASIC), 200\u2013201 BYREF command (Liberty BASIC), 160 byte code. See p-code \u2022 C \u2022 C++ Builder compiler (on the CD), 307, 373, 374, 377, 390 C# Builder Personal software (on the CD), 391 C programming language. See C/C++ programming language C# programming language, 372 C++ Robots software (on the CD), 385, 391 calculation, mathematical absolute value, returning, 100 addition, 85, 95\u201396, 98 Boolean expression, 111\u2013119, 131\u2013133, 301\u2013302 constant, involving, 96\u201397 division, 84, 95\u201396, 98, 292 exponentiation, 96, 98 function, involving, 100\u2013101 logarithm, 100, 101 multiplication, 82, 85, 95\u201396, 98, 347 precedence, 97\u201399 square root, 100, 101 subtraction, 95\u201396, 98 trigonometry, 100 variable, assigning result to, 84\u201386, 96\u201397 CALL command (Liberty BASIC), 153 career, choosing programming as animation, 363\u2013364 database programming, 30, 34 demand, 10 encryption, 364\u2013365 game programming, 361\u2013363 Internet programming, 365\u2013366 language specialty, choosing, 34\u201335, 371\u2013372 niche-market programming, 369 open-source project, using as starting point, 368 security, 364\u2013365, 366\u2013367 selling your software, 370 teaching, 369\u2013370 Career Moves Web site, 366 caret (^) BASIC exponentiation operator, 96 case, converting, 104 case sensitivity BASIC, 65, 80\u201381, 108, 217 C, 80\u201381 HTML, 327 Java, 80\u201381 Pascal, 80 Catalog of Free Compilers and Interpreters Web site, 376 C/C++ programming language assembly language compared, 22 background, historical, 22\u201323 case sensitivity, 80\u201381 char data type, 102 class command, 261\u2013262 compiler, 23, 50, 307, 377, 387 computer access functionality, 23, 24 FOR NEXT statement, 137 function, 150, 151 IF ELSE statement, 305 int command, 227 397 Index C/C++ programming language (continued) main command, 73 memory considerations, 24, 243 OOP support, 24 portability, 23\u201324, 39 postfix operator, 305 prefix operator, 305 prevalence, 24 readability, 23, 305 screen, outputting text to, 73 SELECT CASE statement, 126 source code, downloading, 382 speed, 22, 24, 50, 306\u2013307 switch statement, 126 variable, working with, 81, 86, 90 Visual C#, 27 Visual C# .NET, 373 Visual C++ .NET, 372, 373 void command, 264 CD-ROM with this book Adobe Acrobat, 390 BBedit, 390 C++ Builder, 390 C# Builder Personal, 391 C++ Robots, 391 Core War, 391 Delphi, 391 Dev-C++, 387, 391 Free Pascal, 391 Future Basic, 391 IBM Robocode, 391 installing, 388\u2013390 JBuilder, 391 Kylix, 391 Liberty BASIC, 61, 387 MacPerl, 391 NS BASIC, 387 Perl, 391 pMARS, 387 \u201cProgramming in Python\u201d bonus chapter, 391 Python, 391\u2013392 REALbasic, 387 Revolution, 387 Ruby, 392 system requirement, 387\u2013388 TextPad, 392 troubleshooting, 392\u2013393 WinAce, 392 WinRAR, 392 char data type (C/C++),"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "90 Visual C#, 27 Visual C# .NET, 373 Visual C++ .NET, 372, 373 void command, 264 CD-ROM with this book Adobe Acrobat, 390 BBedit, 390 C++ Builder, 390 C# Builder Personal, 391 C++ Robots, 391 Core War, 391 Delphi, 391 Dev-C++, 387, 391 Free Pascal, 391 Future Basic, 391 IBM Robocode, 391 installing, 388\u2013390 JBuilder, 391 Kylix, 391 Liberty BASIC, 61, 387 MacPerl, 391 NS BASIC, 387 Perl, 391 pMARS, 387 \u201cProgramming in Python\u201d bonus chapter, 391 Python, 391\u2013392 REALbasic, 387 Revolution, 387 Ruby, 392 system requirement, 387\u2013388 TextPad, 392 troubleshooting, 392\u2013393 WinAce, 392 WinRAR, 392 char data type (C/C++), 102 check box, creating, 204\u2013205, 333\u2013334 CHECKED command (HTML), 333, 336 Chipmunk Basic interpreter, 377 CIA (Central Intelligence Agency), 365 CIRCLE command (Liberty BASIC), 168\u2013170 class, 261\u2013262. See also OOP (object oriented programming) class command (C/C++), 261\u2013262 .class files, 352 close command (JavaScript), 349\u2013350 CLOSE command (Liberty BASIC), 176, 182, 186, 193 COBOL (COmmon Business-Oriented Language), 22, 24\u201325, 34 Code Guru Web site, 381 Code \u27aaRun to Line (Liberty BASIC), 220 CodeWarrior compiler, 353, 362, 373, 374 collection (array), 234 color box, 170 circle, 169 hexadecimal, 320 HTML, 319\u2013321 hyperlink, 320\u2013321 line, 167\u2013168 RGB, 320 text, 171\u2013172, 319\u2013320 window, 194\u2013195 COLOR command (Liberty BASIC), 167\u2013168, 170, 171\u2013172 COMBOBOX command (Liberty BASIC), 211\u2013213 Comedy Writer software, 9\u201310, 11 command button, creating, 200\u2013202, 332\u2013333 commenting code HTML, 314\u2013315 JavaScript command, treating as comment, 340, 347 Liberty BASIC, 92\u201394 loop structure, 130 COmmon Business- Oriented Language. See COBOL comp newsgroup, 383 comparison number, 112\u2013117, 122\u2013125 variable value, 113\u2013114, 122\u2013125 compiler. See also specific compiler BASIC, 52, 63, 376\u2013377 buggy, 53\u201354 C/C++, 23, 50, 307, 377, 387 choosing appropriate, 373\u2013374, 376\u2013378 computer type, targeting specific, 50 cross-platform, 39, 42, 373 decompiling, 52\u201353 described, 23, 50 error checking, 308 free versus commercial, 356, 372, 376 interpreter versus, 47, 53 Java, 351, 352, 353, 356, 377 Linux, 375, 377 Macintosh, 50, 51\u201352, 374\u2013375 optimizing, 307\u2013308 398 Beginning Programming For Dummies, 3rd Edition Pascal, 377\u2013378 p-code, 51\u201353 speed, 306\u2013308 Computer Graphics Society, 363 Computer Graphics World Online, 364 computer type, targeting specific, 37, 38\u201339, 45, 50 condition, testing Boolean expression, using, 111\u2013119, 131\u2013133, 301\u2013302 IF THEN ELSE statement, using, 112\u2013113, 120\u2013123 IF THEN ELSEIF statement, using, 302 IF THEN statement, using, 119\u2013120, 144\u2013145, 273, 301 optimizing, 301\u2013303 order of execution, 301\u2013303 SELECT CASE statement, using, 121\u2013127 WHILE-WEND loop, in, 130\u2013133, 145 confirm command (JavaScript), 343\u2013344 CONFIRM command (Liberty BASIC), 192 constant BASIC support, 91 calculation involving, 96\u201397 described, 79, 91\u201392 Pascal support, 91 control, graphic, 161, 171\u2013172 Core War software (on the CD), 383\u2013384, 391 COS function (Liberty BASIC), 100 counter variable, 134, 135\u2013137 cprogramming.com Web site, 382 C-Robots and P-Robots game Web site, 385 cross-platform programming, 39, 373 Crystal Space game engine, 362 CypherNet Web site, 365 \u2022 D \u2022 DarkBASIC, 377 dash, dash, greater than sign ( -- >) HTML comment suffix, 315 data structure, 235, 249\u2013254, 300 data type array, 226 converting, 108\u2013110 integer, 304\u2013305 number, 83, 108\u2013110, 304\u2013305 optimizing program via choosing appropriate,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "(Liberty BASIC), 192 constant BASIC support, 91 calculation involving, 96\u201397 described, 79, 91\u201392 Pascal support, 91 control, graphic, 161, 171\u2013172 Core War software (on the CD), 383\u2013384, 391 COS function (Liberty BASIC), 100 counter variable, 134, 135\u2013137 cprogramming.com Web site, 382 C-Robots and P-Robots game Web site, 385 cross-platform programming, 39, 373 Crystal Space game engine, 362 CypherNet Web site, 365 \u2022 D \u2022 DarkBASIC, 377 dash, dash, greater than sign ( -- >) HTML comment suffix, 315 data structure, 235, 249\u2013254, 300 data type array, 226 converting, 108\u2013110 integer, 304\u2013305 number, 83, 108\u2013110, 304\u2013305 optimizing program via choosing appropriate, 304\u2013305 string, 81, 83, 101\u2013103, 108\u2013110 user-defined, 236 variable, assigning to, 81\u201383, 84\u201385, 87\u201390 database programming, 29\u201330, 34 DD tag (HTML), 324 debugging breakpoint, using, 54 logic error, 215, 219\u2013220 maintenance cycle, place in, 45\u201346 patching buggy program, 46 run-time error, 215, 218\u2013219 software, using specialized, 48, 53\u201355 stepping through code, via, 54, 219\u2013220 syntax error, 215, 216\u2013218 tracing, via, 221\u2013222 watchpoint, using, 54\u201355 Debugging window (Liberty BASIC), 220\u2013221 decompiling, 52\u201353 Delphi (on the CD) compiler, 39, 373, 374, 377 described, 391 language, 27, 306, 382 Delphi Source Web site, 382 desktop icon, creating, 64 Dev-C++ compiler (on the CD), 387, 391 development cycle, 44\u201345 dialog box, creating in JavaScript, 343\u2013345 DigiPen Web site, 363 DIM command (Liberty BASIC), 88\u201389, 226\u2013227 division, 84, 95\u201396, 98, 292 DL tag (HTML), 324 DLL (dynamic link library), 42 document.write command (JavaScript), 342, 343 dollar sign ($) BASIC variable name suffix, 83 DOWN command (Liberty BASIC), 163 drawing using Liberty Basic turtle graphic, 162\u2013171 DreamScape software, 10, 11 DT tag (HTML), 324 Dummies Web site, 366 DUMP command (Liberty BASIC), 76 dynamic link library, 42 \u2022 E \u2022 editor HTML, 313 Java, 353 JavaScript, 339 Liberty BASIC, 64\u201365, 68\u201369 399 Index editor (continued) overview, 48\u201349 Visual Basic, 49 Eiffel programming language, 266 encapsulation, 259, 265 encryption, choosing career in, 364\u2013365 END command (Liberty BASIC), 149\u2013150, 151 END TYPE command (QBASIC), 236 ending program execution, 85, 149\u2013150, 151 EOF command (Liberty BASIC), 179 equals sign (=) BASIC relational operator, 112 BASIC variable declaration operator, 83 event handling HTML, 330\u2013331, 332, 333, 336 JavaScript, 341 EXE files, 47 EXIT FOR command (Liberty BASIC), 137, 303 EXIT FUNCTION command (Liberty BASIC), 158 EXIT SUB command (Liberty BASIC), 154\u2013155 EXIT WHILE command (Liberty BASIC), 131\u2013132 EXP function (Liberty BASIC), 100 exponentiation, 96, 98 \u2022 F \u2022 FBI (Federal Bureau of Investigation), 367 FIELD command (Liberty BASIC), 182 FIFO (First In, First Out) linked list, 252 file appending to, 177\u2013178 binary, 186\u2013190 closing, 176 compression, 57 end of, finding, 179 JavaScript, storing in separate, 341 looping through, 179 opening, 176, 313 pointer, 187\u2013188 position in, returning/changing, 188 printing to, 176\u2013177, 187 random-access, 180\u2013185 reading, 178\u2013180, 184\u2013185 sequential, 175 text file, 175\u2013181 File \u27aaExit (Liberty BASIC), 70 File \u27aaNew File (Liberty BASIC), 67 File \u27aaOpen (Liberty BASIC), 68 File \u27aaSave (Liberty BASIC), 66 FileMaker software, 30 Filename text box (Liberty BASIC), 66 First In, First Out linked list, 252 Flash"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Bureau of Investigation), 367 FIELD command (Liberty BASIC), 182 FIFO (First In, First Out) linked list, 252 file appending to, 177\u2013178 binary, 186\u2013190 closing, 176 compression, 57 end of, finding, 179 JavaScript, storing in separate, 341 looping through, 179 opening, 176, 313 pointer, 187\u2013188 position in, returning/changing, 188 printing to, 176\u2013177, 187 random-access, 180\u2013185 reading, 178\u2013180, 184\u2013185 sequential, 175 text file, 175\u2013181 File \u27aaExit (Liberty BASIC), 70 File \u27aaNew File (Liberty BASIC), 67 File \u27aaOpen (Liberty BASIC), 68 File \u27aaSave (Liberty BASIC), 66 FileMaker software, 30 Filename text box (Liberty BASIC), 66 First In, First Out linked list, 252 Flash software, 340 FLUSH command (Liberty BASIC), 165 FOR-NEXT statement C, 137 Liberty BASIC, 134\u2013137, 145, 183\u2013184, 229, 303 optimizing, 303 FOR RANDOM command (Liberty BASIC), 182 form, HTML, 329\u2013337 Fortran (FORmula TRANslator), 22, 24\u201325 Free Pascal compiler (on the CD), 377, 391 Free Software Foundation, 368 freelance programmer, hiring, 40 F-Secure Web site, 367 function. See also specific function C, 150, 151 calling, 156\u2013157 creating, 155 exiting, 158 hash function, 292\u2013297 JavaScript, 345\u2013347 math-related, 100\u2013101 naming, 155 passing data to, 156, 158\u2013160 string-related, 103\u2013110 subprogram, as, 150, 151, 155 value calculated by, outputting to screen, 157 FUNCTION command (Liberty BASIC), 155\u2013157 Future Basic (on the CD), 61, 374, 391 \u2022 G \u2022 Game Developer Web site, 362 Game Programmer Web site, 363 game programming, choosing career in, 361\u2013363 GameJobs Web site, 363 GeekFinder Web site, 366 GET command (Liberty BASIC), 184 GIF (Graphical Interchange Format), 327 GNAT Ada, 378 GNOME project, 368 GNU C compiler, 377 400 Beginning Programming For Dummies, 3rd Edition GO command (Liberty BASIC), 163 GOSUB command (Liberty BASIC), 149 GOTO command (Liberty BASIC), 142\u2013143, 163, 166 graph (linked list type), 254 graphic box, 162 button image, 201\u2013202 control, 161, 171\u2013172 drawing using Liberty BASIC turtle graphic, 162\u2013171 HTML, 327\u2013329 window, 161\u2013162 Graphical Interchange Format (GIF), 327 GRAPHICBOX command (Liberty BASIC), 162 greater than sign (>) BASIC relational operator, 112 greater than sign, equals sign (>=) BASIC relational operator, 112 GROUPBOX command (Liberty BASIC), 213\u2013214 GUI (graphical user interface), 74 \u2022 H \u2022 H tag (HTML), 315\u2013316 hacking, choosing career in, 367 handheld computer programming, 374, 376 hard copy, 76 hashing, 292\u2013297 HEAD tag (HTML), 313\u2013314 HEIGHT attribute (Java applet), 354\u2013355 Help system authoring software, 48, 55\u201356, 57 described, 55 Liberty BASIC, 69\u201370 PowerPoint Office Assistant, 55\u201356 HR tag (HTML), 318 HREF attribute (HTML), 326, 327 HSPACE attribute (Java applet), 356\u2013357 .htm files, 311 .html files, 311 HTML (HyperText Markup Language) A tag, 325, 326, 327 ALIGN attribute, 319, 328 ASCII, relation to, 311, 312 attribute, 319\u2013321 B tag, 318 BACKGROUND attribute, 329 BGCOLOR attribute, 319\u2013320 BLOCKQUOTE tag, 317 BODY tag, 314, 329 BR tag, 317 browser, opening HTML file in, 313 browser, rendering by, 32\u201333 button, creating, 329, 332\u2013333 case sensitivity, 327 check box, creating, 329 CHECKED command, 333, 336 color attributes, 319\u2013321 commenting code, 314\u2013315 DD tag, 324 DL tag, 324 DT tag, 324 editor, 313 event handling, 330\u2013331, 332, 333, 336 form, 329\u2013337 frame,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "attribute (Java applet), 356\u2013357 .htm files, 311 .html files, 311 HTML (HyperText Markup Language) A tag, 325, 326, 327 ALIGN attribute, 319, 328 ASCII, relation to, 311, 312 attribute, 319\u2013321 B tag, 318 BACKGROUND attribute, 329 BGCOLOR attribute, 319\u2013320 BLOCKQUOTE tag, 317 BODY tag, 314, 329 BR tag, 317 browser, opening HTML file in, 313 browser, rendering by, 32\u201333 button, creating, 329, 332\u2013333 case sensitivity, 327 check box, creating, 329 CHECKED command, 333, 336 color attributes, 319\u2013321 commenting code, 314\u2013315 DD tag, 324 DL tag, 324 DT tag, 324 editor, 313 event handling, 330\u2013331, 332, 333, 336 form, 329\u2013337 frame, 337 graphic, inserting, 327\u2013329 H tag, 315\u2013316 HEAD tag, 313\u2013314 header, 313\u2013314 heading, 315\u2013316 HR tag, 318 HREF attribute, 326, 327 HTML tag, 313 hyperlink, 320\u2013321, 325\u2013327 I tag, 318 IMG tag, 328 introduced, 32 Java applet, inserting, 354 JavaScript, calling from external file, 341 JavaScript, inserting, 340 LI tag, 321\u2013323 line break, 317 line, horizontal, 318 line, treatment of blank, 312 LINK attribute, 319, 320\u2013321 list, defining, 321\u2013325 NAME command, 327, 331, 333 OL tag, 323 onAbort event, 330 onBlur event, 330 onChange event, 330 onClick event, 330, 333 onFocus event, 330, 332 onMouseOut event, 330 onMouseOver event, 330 onSelect event, 330 P tag, 316\u2013317 page title, 314 radio button, creating, 205\u2013207, 335\u2013337 readability, 312 script tag, 340 SIZE attribute, 331 space, treatment of, 312 SRC attribute, 328, 341 tag, 312, 313 TEXT attribute, 319, 320 401 Index HTML (continued) text box, creating, 207\u2013208, 329, 331\u2013332, 349 text, working with, 312, 315\u2013320 TT tag, 318 TYPE command, 331, 332, 335 U tag, 318 UL tag, 321 user interface, 329\u2013337 VALUE command, 332, 333, 336 variable, working with, 333, 336 VLINK attribute, 319, 320\u2013321 hybrid language, 265\u2013266 HyperCard software, 379\u2013380 hyperlink anchor, 325, 326\u2013327 color, 320\u2013321 described, 311 external, 325, 326 HTML, defining in, 320\u2013321, 325\u2013327 internal, 325, 326 Web page, to location in, 326\u2013327 HyperText Markup Language. See HTML \u2022 I \u2022 I tag (HTML), 318 IBIS software, 10, 12 IBM Robocode software (on the CD), 391 IF ELSE statement (C/C++), 305 IF THEN statement (Liberty BASIC), 119\u2013120, 144\u2013145, 273, 301 IF THEN ELSE statement (Liberty BASIC), 112\u2013113, 120\u2013123 IF THEN ELSEIF statement, 302 IGDA (International Game Developer\u2019s Association), 362 image. See graphic IMG tag (HTML), 328 Inc command (Delphi), 306 index, array, 226\u2013227 inheritance, 259, 265 input binary file, from, 189\u2013190 button input, retrieving, 201, 202, 206, 332\u2013333 check box input, retrieving, 205, 333\u2013334 introduced, 13\u201314 keyboard, from, 72, 74 list box input, retrieving, 209\u2013210 mouse, from, 72, 209\u2013210, 331 password, 145, 150 random access file, from, 184\u2013185 text box input, retrieving, 208, 331 text file, from, 178\u2013180 user input, prompting for, 65, 71, 75, 145, 344\u2013345 user input, waiting for, 192 variable, assigning to, 86\u201387, 178\u2013180, 192 INPUT command (Liberty BASIC), 74, 178\u2013180, 205, 206 installation software, 48, 56\u201358 INSTR function (Liberty BASIC), 107\u2013108 int command (C/C++), 227 INT function (Liberty BASIC), 100 integer data type, 304\u2013305 International Animated Film Society, 363 International Game Developer\u2019s Association (IGDA),"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "check box input, retrieving, 205, 333\u2013334 introduced, 13\u201314 keyboard, from, 72, 74 list box input, retrieving, 209\u2013210 mouse, from, 72, 209\u2013210, 331 password, 145, 150 random access file, from, 184\u2013185 text box input, retrieving, 208, 331 text file, from, 178\u2013180 user input, prompting for, 65, 71, 75, 145, 344\u2013345 user input, waiting for, 192 variable, assigning to, 86\u201387, 178\u2013180, 192 INPUT command (Liberty BASIC), 74, 178\u2013180, 205, 206 installation software, 48, 56\u201358 INSTR function (Liberty BASIC), 107\u2013108 int command (C/C++), 227 INT function (Liberty BASIC), 100 integer data type, 304\u2013305 International Animated Film Society, 363 International Game Developer\u2019s Association (IGDA), 362 International PGP Home Page, 365 Internet programming, specializing in, 365\u2013366 interpreter BASIC, 62\u201363, 377 compiler versus, 47, 53 described, 51 JavaScript, 51 Linux, 52, 62 p-code, 51\u201353 speed, 51 \u2022 J \u2022 Java. See also Java applet array, 227 case sensitivity, 80\u201381 compiler, 351, 352, 353, 356, 377 cost, 356 downloading, 356 editor, 353 JavaScript, relation to, 339, 352 learning curve, 352 OOP support, 266 p-code, use of, 52, 351, 352 SELECT CASE statement, 126 software development kit, 377 stand-alone, 33 switch statement, 126 variable, declaring, 89 VM, 351 Java applet. See also Java ALIGN attribute, 355 described, 351 downloading free, 358 HEIGHT attribute, 354\u2013355 HSPACE attribute, 356\u2013357 HTML, inserting in, 354 p-code, use of, 351, 352 security, 354 spacing, 356\u2013357 402 Beginning Programming For Dummies, 3rd Edition variable, working with, 354 VM, 351 VSPACE attribute, 356\u2013357 WIDTH attribute, 354\u2013355 window control, 354\u2013355, 356\u2013357 .java files, 352 Java Jobs Web site, 366 JavaScript alert command, 343 background, historical, 339 browser support, 340, 347 close command, 349\u2013350 comment, treating command as, 340, 347 confirm command, 343\u2013344 dialog box, creating, 343\u2013345 directory button, creating, 349 document.write command, 342, 343 editor, 339 event handling, 341 file, storing in separate, 341 function, 345\u2013347 HTML, calling external JavaScript file from, 341 HTML, inserting in, 340 interpreter, 51 Java, relation to, 339, 352 learning curve, 352 menu, creating, 349 object, 341 OOP, 341 open command, 348 prompt command, 344\u2013345 return keyword, 346 scroll bar, displaying, 349 source code, downloading, 382 square function, 346, 347 status bar, creating, 349 text box, creating, 349 text, working with, 342, 347 toolbar, displaying, 349 variable, working with, 342, 345, 347 VBScript, relation to, 339 window control, 347\u2013350 JavaScript Source Web site, 382 JBuilder compiler (on the CD), 353, 356, 374, 377, 391 language, 27, 373 JPEG (Joint Photographic Experts Group) format, 327 \u2022 K \u2022 keyboard input, 72, 74 koth.org Web site, 384 Kylix compiler (on the CD), 27, 39, 377\u2013378, 391 \u2022 L \u2022 language. See also specific language assembly language, 20\u201322, 42 buying, 380\u2013381 choosing appropriate, 34\u201335, 40, 41, 42, 265\u2013266 coding shortcut, language- specific, 305\u2013306 computer access functionality, 23, 24, 26 database programming, specific to, 29\u201330 general-purpose versus specialized, 30\u201331, 32, 41 human language, resemblance to, 26 hybrid, 265\u2013266 interface, 27 learning curve, 26, 34, 39\u201340, 62, 352 machine language, 20, 21, 22, 50\u201351 mixing multiple languages in same program, 42, 306\u2013307 OOP support, 24, 255,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Group) format, 327 \u2022 K \u2022 keyboard input, 72, 74 koth.org Web site, 384 Kylix compiler (on the CD), 27, 39, 377\u2013378, 391 \u2022 L \u2022 language. See also specific language assembly language, 20\u201322, 42 buying, 380\u2013381 choosing appropriate, 34\u201335, 40, 41, 42, 265\u2013266 coding shortcut, language- specific, 305\u2013306 computer access functionality, 23, 24, 26 database programming, specific to, 29\u201330 general-purpose versus specialized, 30\u201331, 32, 41 human language, resemblance to, 26 hybrid, 265\u2013266 interface, 27 learning curve, 26, 34, 39\u201340, 62, 352 machine language, 20, 21, 22, 50\u201351 mixing multiple languages in same program, 42, 306\u2013307 OOP support, 24, 255, 265\u2013266 portability, 21, 23\u201324, 26, 31 proprietary, 378\u2013379 readability, 22, 26 scripting language, 30\u201332, 392 size, 22 sorting functionality, built- in, 283\u2013284 source code, downloading, 381\u2013382 specializing in specific, 34\u201335, 371\u2013372 speed, 22, 24, 26, 50, 306\u2013307 Web programming, specific to, 32\u201334 Last In, First Out (LIFO) linked list, 252 lb400win.exe file, 63 learning curve, 26, 34, 39\u201340, 62, 352 LEFT function (Liberty BASIC), 106\u2013107 Lego Mindstorms software, 385 legOS Web site, 385 LEN command (Liberty BASIC), 182 function (Liberty BASIC), 104\u2013105 less than sign (<) BASIC relational operator, 112 less than sign, equals sign (<=) BASIC relational operator, 112 403 Index less than sign, exclamation mark, dash, dash, (<! -- ) HTML comment prefix, 315 less than sign, greater than sign (<>) BASIC relational operator, 112 LI tag (HTML), 321\u2013323 Liberty BASIC (on the CD) ABS function, 100 ACS function, 100 AND operator, 115\u2013116 APPEND command, 178 ASN function, 100 ATN function, 100 BACKCOLOR command, 169, 170, 172 BackgroundColor command, 194 BEEP command, 173 BMPBUTTON command, 201\u2013202 BOX command, 170\u2013171 BOXFILLED command, 170 BUTTON command, 200\u2013201 BYREF command, 160 CALL command, 153 case sensitivity, 65, 80\u201381, 108, 217 CHECKBOX command, 204\u2013205 CIRCLE command, 168\u2013170 CLOSE command, 176, 182, 186, 193 COLOR command, 167\u2013168, 170, 171\u2013172 COMBOBOX command, 211\u2013213 commenting code, 92\u201394 compiler, 52, 63 CONFIRM command, 192 constant support, 91 COS function, 100 cost, 62 Debugging window, 220\u2013221 DIM command, 88\u201389, 226\u2013227 DOWN command, 163 downloading, 63 DUMP command, 76 editor, 64\u201365, 68\u201369 END command, 85, 149\u2013150, 151 EOF command, 179 EXIT FOR command, 137, 303 EXIT FUNCTION command, 158 EXIT SUB command, 154\u2013155 EXIT WHILE command, 131\u2013132 exiting, 70 EXP function, 100 FIELD command, 182 Filename text box, 66 FLUSH command, 165 FOR NEXT statement, 134\u2013137, 145, 183\u2013184, 229, 303 FOR RANDOM command, 182 FUNCTION command, 155\u2013157 GET command, 184 GO command, 163 GOSUB command, 149 GOTO command, 142\u2013143, 163, 166 GRAPHICBOX command, 162 GROUPBOX command, 213\u2013214 Help system, 69\u201370 IF THEN statement, 119\u2013120, 144\u2013145, 273, 301 IF THEN ELSE statement, 112\u2013113, 120\u2013123 INPUT command, 74, 178\u2013180, 205, 206 installing, 63 INSTR function, 107\u2013108 INT function, 100 interpreter, 62 introduced, 25 keystroke command, entering, 68\u201369 learning curve, 62 LEFT function, 106\u2013107 LEN command, 182 LEN function, 104\u2013105 linked list support, 241 LISTBOX command, 209\u2013211 loading, 64 LOC command, 188 LOG function, 100, 101 LOWER function, 104 LPRINT command, 76\u201377 Macintosh, running on, 61 main window, 65, 72, 75"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "command, 184 GO command, 163 GOSUB command, 149 GOTO command, 142\u2013143, 163, 166 GRAPHICBOX command, 162 GROUPBOX command, 213\u2013214 Help system, 69\u201370 IF THEN statement, 119\u2013120, 144\u2013145, 273, 301 IF THEN ELSE statement, 112\u2013113, 120\u2013123 INPUT command, 74, 178\u2013180, 205, 206 installing, 63 INSTR function, 107\u2013108 INT function, 100 interpreter, 62 introduced, 25 keystroke command, entering, 68\u201369 learning curve, 62 LEFT function, 106\u2013107 LEN command, 182 LEN function, 104\u2013105 linked list support, 241 LISTBOX command, 209\u2013211 loading, 64 LOC command, 188 LOG function, 100, 101 LOWER function, 104 LPRINT command, 76\u201377 Macintosh, running on, 61 main window, 65, 72, 75 MENU command, 195\u2013198 MID function, 106\u2013107 navigating code, 68 NOMAINWIN command, 72, 75 NORTH command, 163 NOT operator, 119 OOP support, 255 OPEN command, opening file using, 176, 177\u2013178, 182, 186 OPEN command, opening window using, 162, 192\u2013193 OR operator, 116\u2013117 p-code, use of, 52 PLACE command, 163, 170 PLAYWAVE command, 173\u2013174 Please Confirm dialog box, 67, 68 POPUPMENU command, 198\u2013200 POSXY command, 163 PRINT command, printing to file using, 176\u2013177, 187 PRINT command, printing to screen using, 72\u201374, 208 404 Beginning Programming For Dummies, 3rd Edition PRINT command, retrieving button input using, 206 PRINT command, retrieving check box input using, 205 PRINT command, retrieving list box input using, 209\u2013210 PRINT command, retrieving text box input using, 208 PROMPT command, 75, 86\u201387 PUT command, 184 RADIOBUTTON command, 205\u2013207 record support, 236 REDIM command, 233 REM command, 92\u201393 RETURN command, 148, 149 RIGHT function, 106\u2013107 saving program written in, 66\u201367, 68 SEEK command, 188 SELECT CASE statement, 121\u2013127 selecting code, 69 shareware version, 63 SIN function, 100 SIZE command, 166 SORT command, 284\u2013285 SPACE function, 76, 77, 106 SQR function, 100 Start menu, 64 STATICTEXT command, 203 STEP command, 136 STR function, 109 SUB command, 151 system requirement, 61 TAN function, 100 text wrap, 65 TEXTBOX command, 207\u2013208 TRACE command, 221\u2013222 trapclose command, 165 TRIM function, 105\u2013106 TURN command, 163 turtle graphic feature, 162\u2013171 UP command, 163 UPPER function, 104 UpperLeftX command, 193 UpperLeftY command, 193 VAL function, 109\u2013110 version, 63 WAIT command, 192 Web site, 63 WHILE-WEND statement, 130\u2013133, 145 WindowHeight command, 193 Windows, running on, 62\u201363 WindowWidth command, 193 XOR operator, 117\u2013118 life cycle of program, 44\u201346 LIFO (Last In, First Out) linked list, 252 line drawing using Liberty BASIC turtle graphic, 162\u2013168 HTML code, treatment of blank line in, 312 HTML page, inserting horizontal line in, 318 HTML page, inserting line break in, 317 wrap, 65 LINK attribute (HTML), 319, 320\u2013321 linked list. See list, linked linker, 42 Linux BASIC, running on, 62 compiler, 375, 377 GNOME project, 368 interpreter, 52, 62 open source movement, role in, 48, 368 programming for, 62, 375 Web site, 368 LISP programming language, 23, 41 list, HTML, 321\u2013325 list, linked array compared, 241 BASIC support, 241 circular, 250 creating, 245\u2013247 data structure, creating using, 249\u2013254 deleting data from, 248 described, 241\u2013242 double, 249\u2013250 FIFO, 252 graph, 254 hash function collision, handling using, 293 LIFO, 252 memory address, 243, 244 neural network, use"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "page, inserting line break in, 317 wrap, 65 LINK attribute (HTML), 319, 320\u2013321 linked list. See list, linked linker, 42 Linux BASIC, running on, 62 compiler, 375, 377 GNOME project, 368 interpreter, 52, 62 open source movement, role in, 48, 368 programming for, 62, 375 Web site, 368 LISP programming language, 23, 41 list, HTML, 321\u2013325 list, linked array compared, 241 BASIC support, 241 circular, 250 creating, 245\u2013247 data structure, creating using, 249\u2013254 deleting data from, 248 described, 241\u2013242 double, 249\u2013250 FIFO, 252 graph, 254 hash function collision, handling using, 293 LIFO, 252 memory address, 243, 244 neural network, use in, 254 nil value, 242 node, 242 node, assigning data to, 245\u2013247 node, creating, 244, 245\u2013247 node, deleting, 248 node, place in tree structure, 253, 254 pointer, 242\u2013243, 244, 250 queue, 252\u2013253 record, 243, 244\u2013245, 247 RPN, use in, 251\u2013252 single, 249, 251 sizing, 241, 242 stack, 251\u2013252 tree structure, 253\u2013254 LISTBOX command (Liberty BASIC), 209\u2013211 LOC command (Liberty BASIC), 188 LOG function (Liberty BASIC), 100, 101 logic error, 215, 219\u2013220 pseudocode, outlining in, 43\u201344, 45 LOGO, 378 405 Index looping array, in, 228\u2013229 commenting loop structure, 130 counter, 134, 135\u2013137 described, 129\u2013130 endless loop, 130, 132\u2013133 exiting loop, 131\u2013132, 137 FOR NEXT statement, using, 134\u2013137, 145, 183\u2013184, 229, 303 nesting loop, 304 optimizing, 303\u2013304 random-access file, through, 184 readability of code, 145 search operation, using in, 291 sort operation, using in, 272\u2013273 sound, 173 text file, through, 179 WHILE-WEND statement, using, 130\u2013133, 145, 179\u2013180, 229 LOWER function (Liberty BASIC), 104 LPRINT command (Liberty BASIC), 76\u201377 \u2022 M \u2022 machine language, 20, 21, 22, 50\u201351 Macintosh BASIC, programming for, 61, 374, 377 compiler, 50, 51\u201352, 374\u2013375 Windows emulation, 61 MacPerl (on the CD), 391 main command (C/C++), 73 window (Liberty BASIC), 65, 72, 75 maintenance cycle, 45\u201346 marketing your software, 370 Massachusetts Institute of Technology Computer Graphics Society, 363 mathematics. See calculation, mathematical memory array, needed for, 232, 241, 247 C, considerations when using, 24, 243 list, linked, 243, 244 optimizing, 299, 305 pointer memory address, 243, 244 menu JavaScript, creating in, 349 pop-up, 198\u2013200 pull-down, 195\u2013198 MENU command (Liberty BASIC), 195\u2013198 method, 258, 262\u2013263 Metrowerks CodeWarrior compiler, 353, 362, 373, 374 MID function (Liberty BASIC), 106\u2013107 minus sign (\u2013) BASIC sub- traction operator, 96 MIT (Massachusetts Institute of Technology) Computer Graphics Society, 363 MOD command, 292 modular programming, 147\u2013150 mouse event handling, 331, 333 input from, 72, 209\u2013210, 331 Mozilla project, 368 multiplication, 82, 85, 95\u201396, 98, 347 \u2022 N \u2022 NAME command (HTML), 327, 331, 333 naming anchor link, 327 array, 226 BASIC program file, 66 button, 201, 335 function, 155 graphic box, 162 list box, 209 subprogram, 148 text box, 207, 331 text file, 176 variable, 80\u201381, 97, 217\u2013218 National Security Agency (NSA), 364 NCCA (National Centre for Computer Animation), 363 .NET framework mixing languages in same program, using when, 42 Visual Basic .NET, 227, 373 Visual C# .NET, 373 Visual C++ .NET, 372, 373 Network Associates Web site, 367 neural network, 254 newsgroup, 382\u2013383 nil value,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "Mozilla project, 368 multiplication, 82, 85, 95\u201396, 98, 347 \u2022 N \u2022 NAME command (HTML), 327, 331, 333 naming anchor link, 327 array, 226 BASIC program file, 66 button, 201, 335 function, 155 graphic box, 162 list box, 209 subprogram, 148 text box, 207, 331 text file, 176 variable, 80\u201381, 97, 217\u2013218 National Security Agency (NSA), 364 NCCA (National Centre for Computer Animation), 363 .NET framework mixing languages in same program, using when, 42 Visual Basic .NET, 227, 373 Visual C# .NET, 373 Visual C++ .NET, 372, 373 Network Associates Web site, 367 neural network, 254 newsgroup, 382\u2013383 nil value, 242 NOMAINWIN command (Liberty BASIC), 72, 75 North American Cryptography Archives, 365 NORTH command (Liberty BASIC), 163 NOT operator (Liberty BASIC), 119 Notice dialog box (Liberty BASIC), 75, 85 406 Beginning Programming For Dummies, 3rd Edition NS BASIC (on the CD), 376, 387 NSA (National Security Agency), 364 number array, 226 comparison, 112\u2013117, 122\u2013125 data type, 83, 108\u2013110, 304\u2013305 random, creating, 288, 294\u2013295 \u2022 O \u2022 object class relation to, 262 creating, 261\u2013262, 263\u2013264 described, 258, 265 file, 42 JavaScript, in, 341 reusing, 258, 260\u2013261 variable, representing in, 263 object oriented programming. See OOP OL tag (HTML), 323 onAbort event (HTML), 330 onBlur event (HTML), 330 onChange event (HTML), 330 onClick event (HTML), 330, 333 onFocus event (HTML), 330, 332 onMouseOut event (HTML), 330 onMouseOver event (HTML), 330 onSelect event (HTML), 330 OOP (object oriented programming) class, 261\u2013262 described, 257 encapsulation, 259, 265 exposing data, 261 hiding data, 261 inheritance, 259, 265 isolating data, 259\u2013260 JavaScript, 341 language support, 24, 255, 265\u2013266 method, 258, 262\u2013263 private data, 261 property, 258 protected data, 261 public data, 261, 262 reliability, improving using, 258 open command (JavaScript), 348 OPEN command (Liberty BASIC) file, opening using, 176, 177\u2013178, 182, 186 window, opening using, 162, 192\u2013193 open source movement, 48, 368 Open Source Web site, 367 operating system, targeting specific, 37, 38\u201339 operator Boolean, 114\u2013119 mathematical, 96\u201398 postfix, 305 precedence, 97\u201398 prefix, 305 relational, 112\u2013113, 125\u2013127 optimization array, 300 Boolean expression, 301\u2013302 command, via using built- in, 306 compiler, 307\u2013308 condition testing, 301\u2013303 data structure, via choos- ing appropriate, 300 data type, via choosing appropriate, 304\u2013305 described, 299 FOR-NEXT statement, 303 goal, 299 IF THEN ELSEIF statement, 302 looping, 303\u2013304 memory, 299, 305 SELECT CASE statement, 302\u2013303 size of program, 299 sort operation, 300\u2013301 speed, for, 299, 306\u2013308 OR operator (Liberty BASIC), 116\u2013117 OrbWorks Web site, 376 output binary file, to, 187 introduced, 13\u201314 printer, to, 72, 76\u201377 random-access file, to, 183\u2013184 screen, to, 72\u201373, 157 sound, 72, 172\u2013174 text file, to, 176\u2013178 \u2022 P \u2022 P tag (HTML), 316\u2013317 Palm OS programming, 374, 375 parameter list, 152 parentheses ( ) BASIC operator delimiters, 99 Pascal BASIC compared, 25 BEGIN command, 247 case sensitivity, 80 compiler, 377\u2013378 constant support, 91 TYPE command, 244\u2013245 VAR command, 244, 245 password, prompting for, 145, 150 patch, 46 407 Index p-code, 51\u201353, 351, 352 Perl (on the CD), 368, 391 PGP (Pretty Good Privacy), 365 picture. See graphic Pixar"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "site, 376 output binary file, to, 187 introduced, 13\u201314 printer, to, 72, 76\u201377 random-access file, to, 183\u2013184 screen, to, 72\u201373, 157 sound, 72, 172\u2013174 text file, to, 176\u2013178 \u2022 P \u2022 P tag (HTML), 316\u2013317 Palm OS programming, 374, 375 parameter list, 152 parentheses ( ) BASIC operator delimiters, 99 Pascal BASIC compared, 25 BEGIN command, 247 case sensitivity, 80 compiler, 377\u2013378 constant support, 91 TYPE command, 244\u2013245 VAR command, 244, 245 password, prompting for, 145, 150 patch, 46 407 Index p-code, 51\u201353, 351, 352 Perl (on the CD), 368, 391 PGP (Pretty Good Privacy), 365 picture. See graphic Pixar Animation Studios, 363 Pizza Server Corewar Web site, 384 PLACE command (Liberty BASIC), 163, 170 Planet Source Code Web site, 381 planning importance of, 141\u2013142 logic, outlining in pseudocode, 43\u201344, 45 prototyping, 41, 42, 306 top-down approach, 44 user, identifying, 38, 45 variable, 80, 88 PLAYWAVE command (Liberty BASIC), 173\u2013174 Please Confirm dialog box (Liberty BASIC), 67, 68 plus sign (+) BASIC addition operator, 96 BASIC concatenation operator, 103 JavaScript concatenation operator, 342 JavaScript variable prefix, 342 pMARS software (on the CD), 387 Pocket C programming language, 376 pointer dangling, 250 file, 187\u2013188 list, linked, 242\u2013243, 244, 250 memory address, 243, 244 POPUPMENU command (Liberty BASIC), 198\u2013200 portability, 21, 23\u201324, 26, 31, 39 positioning button, 201, 202 check box, 204 file pointer, 188 list box, 209 printing start position, 76 text box, 208 text, static, 203 window, 193\u2013194 postfix operator (C/C++), 305 POSXY command (Liberty BASIC), 163 PowerBasic compiler, 376\u2013377 PowerBuilder programming language, 380 PowerPoint Office Assistant, 55\u201356 prefix operator (C/C++), 305 Pretty Good Privacy (PGP), 365 PRINT command (Liberty BASIC) button input, retrieving using, 206 check box input, retrieving using, 205 file, printing to using, 176\u2013177, 187 list box input, retrieving using, 209\u2013210 screen, printing to using, 72\u201373, 208 text box input, retrieving using, 208 printing file, to, 176\u2013177, 187 printer, to, 72, 76\u201377 screen, to, 72\u201373 private data, 261 programmer, hiring freelance, 40 Programmer\u2019s Paradise Web site, 381 \u201cProgramming in Python\u201d bonus chapter (on the CD), 391 Programs \u27aaLiberty BASIC \u27aaLiberty BASIC, 64 Prolog, 41, 378 prompt command (JavaScript), 344\u2013345 PROMPT command (Liberty BASIC), 75, 86\u201387 prototyping, 41, 42, 306 pseudocode, 43\u201344, 45 public data, 261, 262 PUT command (Liberty BASIC), 184 Python programming language (on the CD), 391\u2013392 \u2022 Q \u2022 QBASIC, 62\u201363, 236 queue (linked list type), 252\u2013253 Quicksort algorithm, 280\u2013283 quotation marks, double (\u201c \u201d) BASIC string delimiters, 72 HTML command delimiters, 332 quotation marks, single (\u2018 \u2019) HTML command delimiters, 332 \u2022 R \u2022 RAD (rapid application development), 27\u201329, 373 radio button, creating, 205\u2013207, 335\u2013337 408 Beginning Programming For Dummies, 3rd Edition random-access file, 180\u2013185 readability of code assembly language, 22 C/C++, 23, 305 HTML, 312 importance of, 146 loop structure, 145 REALbasic (on the CD), 27, 39, 48, 374, 387 record adding data to, 237\u2013238 array, using with, 239\u2013240 creating, 236\u2013237 described, 235 Liberty BASIC support, 236 linked list record, 243, 244\u2013245, 247 random-access file record, 180, 182, 183, 184 retrieving data from,"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "BASIC string delimiters, 72 HTML command delimiters, 332 quotation marks, single (\u2018 \u2019) HTML command delimiters, 332 \u2022 R \u2022 RAD (rapid application development), 27\u201329, 373 radio button, creating, 205\u2013207, 335\u2013337 408 Beginning Programming For Dummies, 3rd Edition random-access file, 180\u2013185 readability of code assembly language, 22 C/C++, 23, 305 HTML, 312 importance of, 146 loop structure, 145 REALbasic (on the CD), 27, 39, 48, 374, 387 record adding data to, 237\u2013238 array, using with, 239\u2013240 creating, 236\u2013237 described, 235 Liberty BASIC support, 236 linked list record, 243, 244\u2013245, 247 random-access file record, 180, 182, 183, 184 retrieving data from, 238\u2013239 user-defined data type, as, 236 variable, relation to, 235\u2013236 recursion, 281 Red-Green-Blue (RGB) color, 320 REDIM command (Liberty BASIC), 233 relational operator, 112\u2013113, 125\u2013127 reliability, 256, 258 REM command (Liberty BASIC), 92\u201393 RETURN command (Liberty BASIC), 148, 149 return keyword (JavaScript), 346 Revolution software (on the CD), 380, 387 RGB (Red-Green-Blue) color, 320 RIGHT function (Liberty BASIC), 106\u2013107 Robocode software (on the CD), 391 robot programming, 384\u2013385 RPN (Reverse Polish Notation), 251 RSA Security Web site, 365 Ruby software (on the CD), 392 Run \u27aaDebug (Liberty BASIC), 220 run-time error, 215, 218\u2013219 \u2022 S \u2022 screen, outputting to, 72\u201373, 157 script tag (HTML), 340 scripting language, 30\u201332, 392 scroll bar, displaying using JavaScript, 349 searching array, 288\u2013289, 291, 292\u2013296 binary, 289\u2013292, 297 hashing, using, 292\u2013297 loop, using in, 291 sequential, 287\u2013289, 297 sorting prior to, 287, 289 string within another string, 107\u2013108 security career in, choosing, 364\u2013365, 366\u2013367 Java applet, 354 SEEK command (Liberty BASIC), 188 SELECT CASE statement C, 126 Java, 126 Liberty BASIC, 121\u2013127 optimizing, 302\u2013303 selling your software, 370 semicolon (;) BASIC SPACE function suffix, 77 shortcut coding shortcut, language- specific, 305\u2013306 desktop icon, creating, 64 menu shortcut, creating, 196 showstopper bug, 216 SIN function (Liberty BASIC), 100 SIZE HTML attribute, 331 Liberty BASIC command, 166 sizing array, 227, 230\u2013231, 232\u2013233, 300 button, 201 check box, 204 list box, 209 list, linked, 241, 242 text box, 208, 331 text, static, 203 window, 193\u2013194, 349, 354\u2013355 slash (/) BASIC division operator, 96 HTML end tag suffix, 312 SmallTalk programming language, 266 SNOBOL programming language, 41 Softronics Web site, 378 Sophos Web site, 367 SORT command (Liberty BASIC), 284\u2013285 sorting algorithm, 269, 270, 300\u2013301 array, using in, 272\u2013273, 284 bubble sort, 273\u2013276, 283, 301 insertion sort, 270\u2013273, 283, 300 language built-in functionality, 283\u2013284 409 Index sorting (continued) looping, using in, 272\u2013273 optimizing, 300\u2013301 Quicksort, 280\u2013283 search operation, prior to, 287, 289 shell sort, 276\u2013280, 283 speed, 269, 270, 276, 300 variable, storing data in during, 272\u2013273, 275 sound, outputting, 72, 172\u2013174 source code downloading, 381\u2013382 introduced, 19 ownership, 40 SPACE function (Liberty BASIC), 77, 106 spaghetti coding, 142 speed compiler, 306\u2013308 Internet connection, 34 language, of, 22, 24, 26, 50, 306\u2013307 optimizing, 299, 306\u2013308 sorting, 269, 270, 276, 300 SQR function (Liberty BASIC), 100 square function (JavaScript), 346, 347 square root, 100, 101 SRC attribute (HTML), 328, 341 stack (linked list type), 251\u2013252 Start menu (Liberty BASIC), 64"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "using in, 272\u2013273 optimizing, 300\u2013301 Quicksort, 280\u2013283 search operation, prior to, 287, 289 shell sort, 276\u2013280, 283 speed, 269, 270, 276, 300 variable, storing data in during, 272\u2013273, 275 sound, outputting, 72, 172\u2013174 source code downloading, 381\u2013382 introduced, 19 ownership, 40 SPACE function (Liberty BASIC), 77, 106 spaghetti coding, 142 speed compiler, 306\u2013308 Internet connection, 34 language, of, 22, 24, 26, 50, 306\u2013307 optimizing, 299, 306\u2013308 sorting, 269, 270, 276, 300 SQR function (Liberty BASIC), 100 square function (JavaScript), 346, 347 square root, 100, 101 SRC attribute (HTML), 328, 341 stack (linked list type), 251\u2013252 Start menu (Liberty BASIC), 64 STATICTEXT command (Liberty BASIC), 203 Staz Software Future Basic, 61, 374, 391 STEP command (Liberty BASIC), 136 stepping through code, 54, 219\u2013220 StoryCraft software, 27\u201328 STR function (Liberty BASIC), 109 Strawberry Prolog, 378 string data type, 81, 83, 101\u2013103, 108\u2013110. See also text structured programming, 144\u2013146 SUB command (Liberty BASIC), 151 subprogram, 147\u2013150, 257\u2013258, 259 subroutine, 150\u2013155, 158\u2013160 subtraction, 95\u201396, 98 Sun Microsystems Java Web site, 356, 377 switch statement (C and Java), 126 Sybase Web site, 380 Symantec Web site, 367 syntax error, 215, 216\u2013218 system requirements CD-ROM with this book, 387\u2013388 Liberty BASIC, 61 \u2022 T \u2022 TAN function (Liberty BASIC), 100 testing, 45, 46 text array, string, 209, 226 box, creating, 207\u2013208, 329, 331\u2013332, 349 case, converting, 104 character, removing from string, 106\u2013107 check box text, specifying, 204 color, 171\u2013172, 319\u2013320 concatenating, 84, 103, 342 file, 175\u2013181 graphic control, displaying in, 171\u2013172 HTML, working with in, 312, 315\u2013320 JavaScript, working with in, 342, 347 length of string, returning, 104\u2013105 positioning, 203 screen, outputting to, 72\u201373, 76 searching for string within another string, 107\u2013108 sizing, 203 space, deleting leading/trailing, 105\u2013106 space, inserting, 106 static, 203 string data type, 81, 83, 101\u2013103, 108\u2013110 trimming string, 105\u2013106 window, displaying in, 203 wrap, 65 TEXT attribute (HTML), 319, 320 TEXTBOX command (Liberty BASIC), 207\u2013208 TextPad software (on the CD), 392 time needed for programming, 15, 26 toolbar, displaying using JavaScript, 349 top-down design, 44 TRACE command (Liberty BASIC), 221\u2013222 trapclose command (Liberty BASIC), 165 tree binary, 253 linked list, 253\u2013254 Trend Micro Web site, 367 trial-and-error programming, 256 trigonometry, 100 TRIM function (Liberty BASIC), 105\u2013106 410 Beginning Programming For Dummies, 3rd Edition True Basic, 61 TT tag (HTML), 318 TURN command (Liberty BASIC), 163 turtle graphic feature (Liberty BASIC), 162\u2013171 2600 Web site, 367 TYPE command HTML, 331, 332, 335 Pascal, 244\u2013245 QBASIC, 236 \u2022 U \u2022 U tag (HTML), 318 UL tag (HTML), 321 underscore (_) BASIC line continuation character, 166, 198 UP command (Liberty BASIC), 163 upgrade cycle, 46 UPPER function (Liberty BASIC), 104 UpperLeftX command (Liberty BASIC), 193 UpperLeftY command (Liberty BASIC), 193 Usenet newsgroup, 382\u2013383 user group, 382 identifying, 38, 45 input, prompting for, 65, 71, 75, 145, 344\u2013345 input, waiting for, 192 interface, 74, 191, 329\u2013337 \u2022 V \u2022 VAL function (Liberty BASIC), 109\u2013110 VALUE command (HTML), 332, 333, 336 VAR command (Pascal), 244, 245 variable array, relation to, 226 Boolean expression, using in, 113\u2013114 calculation"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "244\u2013245 QBASIC, 236 \u2022 U \u2022 U tag (HTML), 318 UL tag (HTML), 321 underscore (_) BASIC line continuation character, 166, 198 UP command (Liberty BASIC), 163 upgrade cycle, 46 UPPER function (Liberty BASIC), 104 UpperLeftX command (Liberty BASIC), 193 UpperLeftY command (Liberty BASIC), 193 Usenet newsgroup, 382\u2013383 user group, 382 identifying, 38, 45 input, prompting for, 65, 71, 75, 145, 344\u2013345 input, waiting for, 192 interface, 74, 191, 329\u2013337 \u2022 V \u2022 VAL function (Liberty BASIC), 109\u2013110 VALUE command (HTML), 332, 333, 336 VAR command (Pascal), 244, 245 variable array, relation to, 226 Boolean expression, using in, 113\u2013114 calculation result, assigning to, 84\u201386, 96\u201397 C/C++, working with, 81, 86, 90 counter, 134, 135\u2013137 creating, 81\u201383, 262 data type, assigning, 81\u201383, 84\u201385, 87\u201390 declaring, 81\u201383, 84\u201385, 87\u201390, 102\u2013103 described, 79 HTML, working with, 333, 336 input, assigning to, 86\u201387, 178\u2013180, 192 Java applet, working with, 354 JavaScript, working with, 342, 345, 347 linked list pointer variable, 244, 245 naming, 80\u201381, 97, 217\u2013218 object, representing in, 263 parameter list, 152 planning, 80, 88 record, relation to, 235\u2013236 reusing, 79 SELECT CASE statement, using in, 122 sort operation, using in, 272\u2013273, 275 subroutine, using in, 152 syntax error, 217\u2013218 value, assigning, 81, 82, 83\u201387 value, default, 83 value, displaying, 85 values, comparing, 113\u2013114, 122\u2013125 VBA (Visual Basic for Applications), 31 VBScript, 51, 339 VBXtras Web site, 381 virtual machine (VM), 351 VirtualPC software, 61 virus protection, choosing career in, 366\u2013367 Visual Basic, 27, 42, 49, 255, 306 Visual Basic for Applications (VBA), 31 Visual Basic .NET, 227, 373 Visual C#, 27 Visual C# .NET, 373 Visual C++ .NET, 372, 373 Visual Help Pro software, 57 Visual Prolog, 378 VLINK attribute (HTML), 319, 320\u2013321 VM (virtual machine), 351 void command (C/C++), 264 VSPACE attribute (Java applet), 356\u2013357 \u2022 W \u2022 WAIT command (Liberty BASIC), 192 watchpoint, 54\u201355 WAV files, 173\u2013174 Web Jobs USA Web site, 366 Web programming, 32\u201334, 51, 339. See also specific language WHILE-WEND statement (Liberty BASIC), 130\u2013133, 145, 179\u2013180, 229 WIDTH attribute (Java applet), 354\u2013355 411 Index Wiley Product Technical Support, 393 WinAce software (on the CD), 392 window closing, 192, 193, 347\u2013350 color, 194\u2013195 creating, 162, 192\u2013193 described, 191 graphic, 161\u2013162 Java applet window, controlling, 354\u2013355, 356\u2013357 opening, 162, 192\u2013193, 347\u2013350 positioning, 193\u2013194 sizing, 193\u2013194, 349, 354\u2013355 text, displaying in, 203 title bar, 192, 194 WindowHeight command (Liberty BASIC), 193 Windows CE programming, 376 desktop icon, creating, 64 Liberty BASIC, running on, 62\u201363 Macintosh, emulation software for, 61 WindowWidth command (Liberty BASIC), 193 WinRAR software (on the CD), 392 WinZip software, 370 \u2022 X \u2022 XOR operator (Liberty BASIC), 117\u2013118 \u2022 Y \u2022 YABASIC (Yet Another BASIC) interpreter, 62 412 Beginning Programming For Dummies, 3rd Edition Wiley Publishing, Inc. End-User License Agreement READ THIS. You should carefully read these terms and conditions before opening the software packet(s) included with this book \u201cBook\u201d. This is a license agreement \u201cAgreement\u201d between you and Wiley Publishing, Inc.,\u201cWPI\u201d. By opening the accompanying software packet(s), you acknowl- edge that you have read and accept"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "BASIC, running on, 62\u201363 Macintosh, emulation software for, 61 WindowWidth command (Liberty BASIC), 193 WinRAR software (on the CD), 392 WinZip software, 370 \u2022 X \u2022 XOR operator (Liberty BASIC), 117\u2013118 \u2022 Y \u2022 YABASIC (Yet Another BASIC) interpreter, 62 412 Beginning Programming For Dummies, 3rd Edition Wiley Publishing, Inc. End-User License Agreement READ THIS. You should carefully read these terms and conditions before opening the software packet(s) included with this book \u201cBook\u201d. This is a license agreement \u201cAgreement\u201d between you and Wiley Publishing, Inc.,\u201cWPI\u201d. By opening the accompanying software packet(s), you acknowl- edge that you have read and accept the following terms and conditions. If you do not agree and do not want to be bound by such terms and conditions, promptly return the Book and the unopened software packet(s) to the place you obtained them for a full refund. 1. License Grant. WPI grants to you (either an individual or entity) a nonexclusive license to use one copy of the enclosed software program(s) (collectively, the \u201cSoftware\u201d solely for your own personal or business purposes on a single computer (whether a standard computer or a workstation component of a multi-user network). The Software is in use on a computer when it is loaded into temporary memory (RAM) or installed into permanent memory (hard disk, CD-ROM, or other storage device). WPI reserves all rights not expressly granted herein. 2. Ownership. WPI is the owner of all right, title, and interest, including copyright, in and to the compilation of the Software recorded on the disk(s) or CD-ROM \u201cSoftware Media\u201d. Copyright to the individual programs recorded on the Software Media is owned by the author or other authorized copyright owner of each program. Ownership of the Software and all proprietary rights relating thereto remain with WPI and its licensers. 3. Restrictions On Use and Transfer. (a) You may only (i) make one copy of the Software for backup or archival purposes, or (ii) transfer the Software to a single hard disk, provided that you keep the original for backup or archival purposes. You may not (i) rent or lease the Software, (ii) copy or reproduce the Software through a LAN or other network system or through any computer subscriber system or bulletin- board system, or (iii) modify, adapt, or create derivative works based on the Software. (b) You may not reverse engineer, decompile, or disassemble the Software. You may transfer the Software and user documentation on a permanent basis, provided that the transferee agrees to accept the terms and conditions of this Agreement and you retain no copies. If the Software is an update or has been updated, any transfer must include the most recent update and all prior versions. 4. Restrictions on Use of Individual Programs. You must follow the individual requirements and restrictions detailed for each individual program in the About the CD-ROM appendix of this Book. These limitations are also contained in the individual license agreements recorded on the Software Media. These limitations may include a requirement that after"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "and user documentation on a permanent basis, provided that the transferee agrees to accept the terms and conditions of this Agreement and you retain no copies. If the Software is an update or has been updated, any transfer must include the most recent update and all prior versions. 4. Restrictions on Use of Individual Programs. You must follow the individual requirements and restrictions detailed for each individual program in the About the CD-ROM appendix of this Book. These limitations are also contained in the individual license agreements recorded on the Software Media. These limitations may include a requirement that after using the program for a speci\ufb01ed period of time, the user must pay a registration fee or discontinue use. By open- ing the Software packet(s), you will be agreeing to abide by the licenses and restrictions for these individual programs that are detailed in the About the CD-ROM appendix and on the Software Media. None of the material on this Software Media or listed in this Book may ever be redistributed, in original or modi\ufb01ed form, for commercial purposes. 5. Limited Warranty. (a) WPI warrants that the Software and Software Media are free from defects in materials and workmanship under normal use for a period of sixty (60) days from the date of purchase of this Book. If WPI receives noti\ufb01cation within the warranty period of defects in materials or workmanship, WPI will replace the defective Software Media. (b) WPI AND THE AUTHOR OF THE BOOK DISCLAIM ALL OTHER WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION IMPLIED WARRANTIES OF MERCHANTABIL- ITY AND FITNESS FOR A PARTICULAR PURPOSE, WITH RESPECT TO THE SOFTWARE, THE PROGRAMS, THE SOURCE CODE CONTAINED THEREIN, AND/OR THE TECHNIQUES DESCRIBED IN THIS BOOK. WPI DOES NOT WARRANT THAT THE FUNCTIONS CON- TAINED IN THE SOFTWARE WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE SOFTWARE WILL BE ERROR FREE. (c) This limited warranty gives you speci\ufb01c legal rights, and you may have other rights that vary from jurisdiction to jurisdiction. 6. Remedies. (a) WPI\u2019s entire liability and your exclusive remedy for defects in materials and workman- ship shall be limited to replacement of the Software Media, which may be returned to WPI with a copy of your receipt at the following address: Software Media Ful\ufb01llment Department, Attn.: Beginning Programming For Dummies, 3rd Edition, Wiley Publishing, Inc., 10475 Crosspoint Blvd., Indianapolis, IN 46256, or call 1-800-762-2974. Please allow four to six weeks for delivery. This Limited Warranty is void if failure of the Software Media has resulted from accident, abuse, or misapplication. Any replacement Software Media will be warranted for the remainder of the original warranty period or thirty (30) days, whichever is longer. (b) In no event shall WPI or the author be liable for any damages whatsoever (including without limitation damages for loss of business pro\ufb01ts, business interruption, loss of business information, or any other pecuniary loss) arising from the use of or inability to use the Book or the Software, even if WPI has"}, {"filename": "Beginning Programming for Dummies ( PDFDrive ).pdf", "text": "allow four to six weeks for delivery. This Limited Warranty is void if failure of the Software Media has resulted from accident, abuse, or misapplication. Any replacement Software Media will be warranted for the remainder of the original warranty period or thirty (30) days, whichever is longer. (b) In no event shall WPI or the author be liable for any damages whatsoever (including without limitation damages for loss of business pro\ufb01ts, business interruption, loss of business information, or any other pecuniary loss) arising from the use of or inability to use the Book or the Software, even if WPI has been advised of the possibility of such damages. (c) Because some jurisdictions do not allow the exclusion or limitation of liability for conse- quential or incidental damages, the above limitation or exclusion may not apply to you. 7. U.S. Government Restricted Rights. Use, duplication, or disclosure of the Software for or on behalf of the United States of America, its agencies and/or instrumentalities \u201cU.S. Government\u201d is subject to restrictions as stated in paragraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause of DFARS 252.227-7013, or subparagraphs (c) (1) and (2) of the Commercial Computer Software - Restricted Rights clause at FAR 52.227-19, and in similar clauses in the NASA FAR supplement, as applicable. 8. General. This Agreement constitutes the entire understanding of the parties and revokes and supersedes all prior agreements, oral or written, between them and may not be modi\ufb01ed or amended except in a writing signed by both parties hereto that speci\ufb01cally refers to this Agreement. This Agreement shall take precedence over any other documents that may be in con\ufb02ict herewith. If any one or more provisions contained in this Agreement are held by any court or tribunal to be invalid, illegal, or otherwise unenforceable, each and every other pro- vision shall remain in full force and effect."}, {"filename": "Beginning Programming with Python.pdf", "text": "Beginning Programming with Python \u00ae 2nd Edition by John Paul Mueller Beginning Programming with Python\u00ae For Dummies\u00ae, 2nd Edition Published by: John Wiley & Sons, Inc., 111 River Street, Hoboken, NJ 07030-5774, www.wiley.com Copyright \u00a9 2018 by John Wiley & Sons, Inc., Hoboken, New Jersey Published simultaneously in Canada No part of this publication may be reproduced, stored in a retrieval system or transmitted in any form or by any means, electronic, mechanical, photocopying, recording, scanning or otherwise, except as permitted under Sections 107 or 108 of the 1976 United States Copyright Act, without the prior written permission of the Publisher. Requests to the Publisher for permission should be addressed to the Permissions Department, John Wiley & Sons, Inc., 111 River Street, Hoboken, NJ 07030, (201) 748-6011, fax (201) 748-6008, or online at http://www.wiley.com/go/permissions. Trademarks: Wiley, For Dummies, the Dummies Man logo, Dummies.com, Making Everything Easier, and related trade dress are trademarks or registered trademarks of John Wiley & Sons, Inc. and may not be used without written permission. Python is a registered trademark of Python Software Foundation Corporation. All other trademarks are the property of their respective owners. John Wiley & Sons, Inc. is not associated with any product or vendor mentioned in this book. LIMIT OF LIABILITY/DISCLAIMER OF WARRANTY: THE PUBLISHER AND THE AUTHOR MAKE NO REPRESENTATIONS OR WARRANTIES WITH RESPECT TO THE ACCURACY OR COMPLETENESS OF THE CONTENTS OF THIS WORK AND SPECIFICALLY DISCLAIM ALL WARRANTIES, INCLUDING WITHOUT LIMITATION WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE. NO WARRANTY MAY BE CREATED OR EXTENDED BY SALES OR PROMOTIONAL MATERIALS. THE ADVICE AND STRATEGIES CONTAINED HEREIN MAY NOT BE SUITABLE FOR EVERY SITUATION. THIS WORK IS SOLD WITH THE UNDERSTANDING THAT THE PUBLISHER IS NOT ENGAGED IN RENDERING LEGAL, ACCOUNTING, OR OTHER PROFESSIONAL SERVICES. IF PROFESSIONAL ASSISTANCE IS REQUIRED, THE SERVICES OF A COMPETENT PROFESSIONAL PERSON SHOULD BE SOUGHT. NEITHER THE PUBLISHER NOR THE AUTHOR SHALL BE LIABLE FOR DAMAGES ARISING HEREFROM. THE FACT THAT AN ORGANIZATION OR WEBSITE IS REFERRED TO IN THIS WORK AS A CITATION AND/OR A POTENTIAL SOURCE OF FURTHER INFORMATION DOES NOT MEAN THAT THE AUTHOR OR THE PUBLISHER ENDORSES THE INFORMATION THE ORGANIZATION OR WEBSITE MAY PROVIDE OR RECOMMENDATIONS IT MAY MAKE. FURTHER, READERS SHOULD BE AWARE THAT INTERNET WEBSITES LISTED IN THIS WORK MAY HAVE CHANGED OR DISAPPEARED BETWEEN WHEN THIS WORK WAS WRITTEN AND WHEN IT IS READ. For general information on our other products and services, please contact our Customer Care Department within the U.S. at 877-762-2974, outside the U.S. at 317-572-3993, or fax 317-572-4002. For technical support, please visit https://hub.wiley.com/community/support/dummies. Wiley publishes in a variety of print and electronic formats and by print-on-demand. Some material included with standard print versions of this book may not be included in e-books or in print-on-demand. If this book refers to media such as a CD or DVD that is not included in the version you purchased, you may download this material at http://booksupport.wiley.com. For more information about Wiley products, visit www.wiley.com. Library"}, {"filename": "Beginning Programming with Python.pdf", "text": "on our other products and services, please contact our Customer Care Department within the U.S. at 877-762-2974, outside the U.S. at 317-572-3993, or fax 317-572-4002. For technical support, please visit https://hub.wiley.com/community/support/dummies. Wiley publishes in a variety of print and electronic formats and by print-on-demand. Some material included with standard print versions of this book may not be included in e-books or in print-on-demand. If this book refers to media such as a CD or DVD that is not included in the version you purchased, you may download this material at http://booksupport.wiley.com. For more information about Wiley products, visit www.wiley.com. Library of Congress Control Number: 2017964018 ISBN 978-1-119-45789-3; ISBN 978-1-119-45787-9 (ebk); ISBN 978-1-119-45790-9 (ebk) Manufactured in the United States of America 10 9 8 7 6 5 4 3 2 1 Contents at a Glance Introduction. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Part 1: Getting Started with Python. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 CHAPTER 1: Talking to Your Computer. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 CHAPTER 2: Getting Your Own Copy of Python. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 CHAPTER 3: Interacting with Python. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 CHAPTER 4: Writing Your First Application. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 CHAPTER 5: Working with Anaconda. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 Part 2: Talking the Talk. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101 CHAPTER 6:"}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . 55 CHAPTER 5: Working with Anaconda. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 Part 2: Talking the Talk. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101 CHAPTER 6: Storing and Modifying Information. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103 CHAPTER 7: Managing Information. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113 CHAPTER 8: Making Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135 CHAPTER 9: Performing Repetitive Tasks. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151 CHAPTER 10: Dealing with Errors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165 Part 3: Performing Common Tasks. . . . . . . . . . . . . . . . . . . . . . . . . . . 195 CHAPTER 11: Interacting with Packages. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197 CHAPTER 12: Working with Strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225 CHAPTER 13: Managing Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243 CHAPTER 14: Collecting All Sorts of"}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225 CHAPTER 13: Managing Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243 CHAPTER 14: Collecting All Sorts of Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261 CHAPTER 15: Creating and Using Classes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281 Part 4: Performing Advanced Tasks. . . . . . . . . . . . . . . . . . . . . . . . . . 303 CHAPTER 16: Storing Data in Files. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305 CHAPTER 17: Sending an Email. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323 Part 5: The Part of Tens. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341 CHAPTER 18: Ten Amazing Programming Resources. . . . . . . . . . . . . . . . . . . . . . . . . . . 343 CHAPTER 19: Ten Ways to Make a Living with Python. . . . . . . . . . . . . . . . . . . . . . . . . . 353 CHAPTER 20: Ten Tools That Enhance Your Python Experience. . . . . . . . . . . . . . . . . . 361 CHAPTER 21: Ten (Plus) Libraries You Need to Know About. . . . . . . . . . . . . . . . . . . . . 371 Index. . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": "Living with Python. . . . . . . . . . . . . . . . . . . . . . . . . . 353 CHAPTER 20: Ten Tools That Enhance Your Python Experience. . . . . . . . . . . . . . . . . . 361 CHAPTER 21: Ten (Plus) Libraries You Need to Know About. . . . . . . . . . . . . . . . . . . . . 371 Index. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 379 Table of Contents v Table of Contents INTRODUCTION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 About This Book. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Foolish Assumptions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Icons Used in This Book. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Beyond the Book. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Where to Go from Here. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 PART 1: GETTING STARTED WITH PYTHON. . . . . . . . . . . . . . . . . . . . 5 CHAPTER 1: Talking to Your Computer . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": "3 Where to Go from Here. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 PART 1: GETTING STARTED WITH PYTHON. . . . . . . . . . . . . . . . . . . . 5 CHAPTER 1: Talking to Your Computer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 Understanding Why You Want to Talk to Your Computer. . . . . . . . . . . . 8 Knowing that an Application is a Form of Communication. . . . . . . . . . . 9 Thinking about procedures you use daily. . . . . . . . . . . . . . . . . . . . . . 9 Writing procedures down. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 Seeing applications as being like any other procedure. . . . . . . . . . 11 Understanding that computers take things literally. . . . . . . . . . . . . 11 Defining What an Application Is . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 Understanding that computers use a special language . . . . . . . . . 12 Helping humans speak to the computer. . . . . . . . . . . . . . . . . . . . . . 12 Understanding Why Python Is So Cool. . . . . . . . . . . . . . . . . . . . . . . . . . . 14 Unearthing the reasons for using Python. . . . . . . . . . . . . . . . . . . . . 14 Deciding how you can personally benefit from Python. . . . . . . . . . 15 Discovering which organizations use Python. . . . . . . . . . . . . . . . . . 16 Finding useful Python applications. . . . . . . . . . . . . . . . . . . . . . . . . . . 17 Comparing Python to other languages . . . . . . . . . . . . . . . . . . . . . . . 18 CHAPTER 2:"}, {"filename": "Beginning Programming with Python.pdf", "text": "can personally benefit from Python. . . . . . . . . . 15 Discovering which organizations use Python. . . . . . . . . . . . . . . . . . 16 Finding useful Python applications. . . . . . . . . . . . . . . . . . . . . . . . . . . 17 Comparing Python to other languages . . . . . . . . . . . . . . . . . . . . . . . 18 CHAPTER 2: Getting Your Own Copy of Python. . . . . . . . . . . . . . . . . . . . . 21 Downloading the Version You Need. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 Installing Python. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 Working with Windows. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 Working with the Mac. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 Working with Linux. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 Accessing Python on Your Machine. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 Using Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32 Using the Mac . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34 Using Linux. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . 32 Using the Mac . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34 Using Linux. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 Testing Your Installation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 vi Beginning Programming with Python For Dummies CHAPTER 3: Interacting with Python. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 Opening the Command Line. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 Starting Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 Using the command line to your advantage. . . . . . . . . . . . . . . . . . . 39 Using Python environment variables to your advantage . . . . . . . . 41 Typing a Command. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 Telling the computer what to do. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 Telling the computer you\u2019re done. . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 Seeing the result. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 Using Help . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . 43 Telling the computer you\u2019re done. . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 Seeing the result. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 Using Help . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 Getting into help mode. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 Asking for help. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 Leaving help mode. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 Obtaining help directly. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50 Closing the Command Line. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 CHAPTER 4: Writing Your First Application. . . . . . . . . . . . . . . . . . . . . . . . . . 55 Understanding Why IDEs Are Important. . . . . . . . . . . . . . . . . . . . . . . . . 56 Creating better code. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 Debugging functionality. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 Defining why notebooks are useful. . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . 56 Creating better code. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 Debugging functionality. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 Defining why notebooks are useful. . . . . . . . . . . . . . . . . . . . . . . . . . 57 Obtaining Your Copy of Anaconda. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 Obtaining Analytics Anaconda. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 Installing Anaconda on Linux. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 Installing Anaconda on MacOS. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60 Installing Anaconda on Windows. . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 Downloading the Datasets and Example Code. . . . . . . . . . . . . . . . . . . . 64 Using Jupyter Notebook. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 Defining the code repository. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 Creating the Application. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 Understanding cells. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .71 Adding documentation cells . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 Understanding cells. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .71 Adding documentation cells . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 Other cell content. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 Understanding the Use of Indentation . . . . . . . . . . . . . . . . . . . . . . . . . . 75 Adding Comments. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 Understanding comments. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78 Using comments to leave yourself reminders . . . . . . . . . . . . . . . . . 79 Using comments to keep code from executing . . . . . . . . . . . . . . . . 80 Closing Jupyter Notebook. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .80 Table of Contents vii CHAPTER 5: Working with Anaconda. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 Downloading Your Code. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 Working with Checkpoints. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 Defining the uses of checkpoints . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": "Your Code. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 Working with Checkpoints. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 Defining the uses of checkpoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 Saving a checkpoint. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 Restoring a checkpoint. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 Manipulating Cells. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 Adding various cell types. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 Splitting and merging cells. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 Moving cells around. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88 Running cells . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88 Toggling outputs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 Changing Jupyter Notebook\u2019s Appearance. . . . . . . . . . . . . . . . . . . . . . . 90 Finding commands using the Command Palette. . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . 88 Toggling outputs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 Changing Jupyter Notebook\u2019s Appearance. . . . . . . . . . . . . . . . . . . . . . . 90 Finding commands using the Command Palette. . . . . . . . . . . . . . . 91 Working with line numbers. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92 Using the Cell Toolbar features. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93 Interacting with the Kernel. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94 Obtaining Help. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95 Using the Magic Functions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 Viewing the Running Processes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 PART 2: TALKING THE TALK. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101 CHAPTER 6: Storing and Modifying Information. . . . . . . . . . . . . . . . . 103 Storing Information. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104 Seeing variables as storage boxes . . . . . . . . . . . . . . . . . . . . . . . . . . 104 Using the right box to store the data. . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . 103 Storing Information. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104 Seeing variables as storage boxes . . . . . . . . . . . . . . . . . . . . . . . . . . 104 Using the right box to store the data. . . . . . . . . . . . . . . . . . . . . . . . 104 Defining the Essential Python Data Types. . . . . . . . . . . . . . . . . . . . . . . 105 Putting information into variables. . . . . . . . . . . . . . . . . . . . . . . . . . 105 Understanding the numeric types . . . . . . . . . . . . . . . . . . . . . . . . . . 106 Understanding Boolean values. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110 Understanding strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110 Working with Dates and Times. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 CHAPTER 7: Managing Information. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113 Controlling How Python Views Data. . . . . . . . . . . . . . . . . . . . . . . . . . . . 114 Making comparisons. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114 Understanding how computers make comparisons. . . . . . . . . . . 115 Working with Operators. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115 Defining the operators. . . . . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . . . 114 Understanding how computers make comparisons. . . . . . . . . . . 115 Working with Operators. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115 Defining the operators. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116 Understanding operator precedence. . . . . . . . . . . . . . . . . . . . . . . . 122 viii Beginning Programming with Python For Dummies Creating and Using Functions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123 Viewing functions as code packages. . . . . . . . . . . . . . . . . . . . . . . . .124 Understanding code reusability . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124 Defining a function. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 Accessing functions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126 Sending information to functions. . . . . . . . . . . . . . . . . . . . . . . . . . . 127 Returning information from functions. . . . . . . . . . . . . . . . . . . . . . . 131 Comparing function output. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132 Getting User Input. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132 CHAPTER 8: Making Decisions. . . . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . . . . . . . 132 Getting User Input. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132 CHAPTER 8: Making Decisions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135 Making Simple Decisions by Using the if Statement . . . . . . . . . . . . . . 136 Understanding the if statement. . . . . . . . . . . . . . . . . . . . . . . . . . . . 136 Using the if statement in an application . . . . . . . . . . . . . . . . . . . . . 137 Choosing Alternatives by Using the if. . .else Statement. . . . . . . . . . . 141 Understanding the if. . .else statement. . . . . . . . . . . . . . . . . . . . . . 141 Using the if. . .else statement in an application . . . . . . . . . . . . . . . 142 Using the if. . .elif statement in an application. . . . . . . . . . . . . . . . 143 Using Nested Decision Statements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146 Using multiple if or if. . .else statements. . . . . . . . . . . . . . . . . . . . . 146 Combining other types of decisions. . . . . . . . . . . . . . . . . . . . . . . . . 148 CHAPTER 9: Performing Repetitive Tasks . . . . . . . . . . . . . . . . . . . . . . . . . 151 Processing Data Using the for Statement. . . . . . . . . . . . . . . . . . . . . . . 152 Understanding the for statement. . . . . . . . . . . . . . . . . . . . . . . . . . . 152 Creating a basic for loop. . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . 151 Processing Data Using the for Statement. . . . . . . . . . . . . . . . . . . . . . . 152 Understanding the for statement. . . . . . . . . . . . . . . . . . . . . . . . . . . 152 Creating a basic for loop. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153 Controlling execution with the break statement . . . . . . . . . . . . . . 153 Controlling execution with the continue statement. . . . . . . . . . . . 156 Controlling execution with the pass clause. . . . . . . . . . . . . . . . . . . 157 Controlling execution with the else statement. . . . . . . . . . . . . . . . 158 Processing Data by Using the while Statement . . . . . . . . . . . . . . . . . . 159 Understanding the while statement. . . . . . . . . . . . . . . . . . . . . . . . . 160 Using the while statement in an application. . . . . . . . . . . . . . . . . . 161 Nesting Loop Statements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162 CHAPTER 10: Dealing with Errors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165 Knowing Why Python Doesn\u2019t Understand You. . . . . . . . . . . . . . . . . . 166 Considering the Sources of Errors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167 Classifying when errors occur. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168 Distinguishing error types. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169 Catching Exceptions. . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . . . . . . . 167 Classifying when errors occur. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168 Distinguishing error types. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169 Catching Exceptions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171 Basic exception handling. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171 Handling more specific to less specific exceptions . . . . . . . . . . . . 183 Nested exception handling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185 Table of Contents ix Raising Exceptions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189 Raising exceptions during exceptional conditions. . . . . . . . . . . . . 189 Passing error information to the caller . . . . . . . . . . . . . . . . . . . . . . 190 Creating and Using Custom Exceptions. . . . . . . . . . . . . . . . . . . . . . . . . 191 Using the finally Clause . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192 PART 3: PERFORMING COMMON TASKS. . . . . . . . . . . . . . . . . . . . 195 CHAPTER 11: Interacting with Packages. . . . . . . . . . . . . . . . . . . . . . . . . . . . 197 Creating Code Groupings. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198 Understanding"}, {"filename": "Beginning Programming with Python.pdf", "text": "192 PART 3: PERFORMING COMMON TASKS. . . . . . . . . . . . . . . . . . . . 195 CHAPTER 11: Interacting with Packages. . . . . . . . . . . . . . . . . . . . . . . . . . . . 197 Creating Code Groupings. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198 Understanding the package types . . . . . . . . . . . . . . . . . . . . . . . . . . 200 Considering the package cache. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201 Importing Packages. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202 Using the import statement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203 Using the from. . .import statement. . . . . . . . . . . . . . . . . . . . . . . . . 205 Finding Packages on Disk. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 Downloading Packages from Other Sources. . . . . . . . . . . . . . . . . . . . . 209 Opening the Anaconda Prompt. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210 Working with conda packages. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210 Installing packages by using pip. . . . . . . . . . . . . . . . . . . . . . . . . . . . 215 Viewing the Package Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216 Viewing Package Documentation. . . . . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . 210 Installing packages by using pip. . . . . . . . . . . . . . . . . . . . . . . . . . . . 215 Viewing the Package Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216 Viewing Package Documentation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219 Opening the Pydoc application. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219 Using the quick-access links. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220 Typing a search term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221 Viewing the results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222 CHAPTER 12: Working with Strings. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225 Understanding That Strings Are Different. . . . . . . . . . . . . . . . . . . . . . . 226 Defining a character by using numbers. . . . . . . . . . . . . . . . . . . . . . 226 Using characters to create strings . . . . . . . . . . . . . . . . . . . . . . . . . . 227 Creating Stings with Special Characters. . . . . . . . . . . . . . . . . . . . . . . . . 229 Selecting Individual Characters. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231 Slicing and Dicing Strings. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233"}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . . . . . 229 Selecting Individual Characters. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231 Slicing and Dicing Strings. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233 Locating a Value in a String. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236 Formatting Strings. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238 CHAPTER 13: Managing Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243 Organizing Information in an Application. . . . . . . . . . . . . . . . . . . . . . . 244 Defining organization using lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . 244 Understanding how computers view lists. . . . . . . . . . . . . . . . . . . . 245 Creating Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246 Accessing Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248 Looping through Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249 x Beginning Programming with Python For Dummies Modifying Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . 248 Looping through Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249 x Beginning Programming with Python For Dummies Modifying Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250 Searching Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254 Sorting Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255 Printing Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257 Working with the Counter Object. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259 CHAPTER 14: Collecting All Sorts of Data. . . . . . . . . . . . . . . . . . . . . . . . . . . . 261 Understanding Collections. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262 Working with Tuples. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263 Working with Dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266 Creating and using a dictionary. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267 Replacing the switch statement with a \u00addictionary . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . 263 Working with Dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266 Creating and using a dictionary. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267 Replacing the switch statement with a \u00addictionary . . . . . . . . . . . . . 270 Creating Stacks Using Lists. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273 Working with queues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275 Working with deques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 278 CHAPTER 15: Creating and Using Classes. . . . . . . . . . . . . . . . . . . . . . . . . . . 281 Understanding the Class as a Packaging Method. . . . . . . . . . . . . . . . .282 Considering the Parts of a Class. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284 Creating the class definition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284 Considering the built-in class attributes . . . . . . . . . . . . . . . . . . . . . 285 Working with methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286 Working with constructors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288 Working with variables. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286 Working with constructors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288 Working with variables. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290 Using methods with variable argument lists. . . . . . . . . . . . . . . . . . 293 Overloading operators. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294 Creating a Class. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296 Defining the MyClass class. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296 Saving a class to disk. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297 Using the Class in an Application. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298 Extending Classes to Make New Classes. . . . . . . . . . . . . . . . . . . . . . . . 299 Building the child class. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299 Testing the class in an application . . . . . . . . . . . . . . . . . . . . . . . . . . 301 PART 4: PERFORMING ADVANCED TASKS. . . . . . . . . . . . . . . . . . 303 CHAPTER 16: Storing Data in Files. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305 Understanding"}, {"filename": "Beginning Programming with Python.pdf", "text": "299 Testing the class in an application . . . . . . . . . . . . . . . . . . . . . . . . . . 301 PART 4: PERFORMING ADVANCED TASKS. . . . . . . . . . . . . . . . . . 303 CHAPTER 16: Storing Data in Files. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305 Understanding How Permanent Storage Works. . . . . . . . . . . . . . . . . .306 Creating Content for Permanent Storage. . . . . . . . . . . . . . . . . . . . . . . 308 Creating a File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311 Reading File Content. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314 Updating File Content. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317 Deleting a File. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321 Table of Contents xi CHAPTER 17: Sending an Email . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323 Understanding What Happens When You Send Email . . . . . . . . . . . . 324 Viewing email as you do a letter. . . . . . . . . . . . . . . . . . . . . . . . . . . . 325 Defining the parts of the envelope. . . . . . . . . . . . . . . . . . . . . . . . . . 326 Defining the parts of the letter. . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . 324 Viewing email as you do a letter. . . . . . . . . . . . . . . . . . . . . . . . . . . . 325 Defining the parts of the envelope. . . . . . . . . . . . . . . . . . . . . . . . . . 326 Defining the parts of the letter. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331 Creating the Email Message. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335 Working with a text message. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335 Working with an HTML message. . . . . . . . . . . . . . . . . . . . . . . . . . . . 337 Seeing the Email Output. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338 PART 5: THE PART OF TENS. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341 CHAPTER 18: Ten Amazing Programming Resources. . . . . . . . . . . . . 343 Working with the Python Documentation Online. . . . . . . . . . . . . . . . . 344 Using the LearnPython.org Tutorial. . . . . . . . . . . . . . . . . . . . . . . . . . . . 345 Performing Web Programming by Using Python. . . . . . . . . . . . . . . . . 346 Getting Additional Libraries. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346 Creating Applications Faster by Using an IDE. . . . . . . . . . . . . . . . . . . . 348 Checking Your Syntax with Greater Ease. . . . . . . . . . . . . . . . . . . . . . . . 348 Using XML to Your Advantage. . . . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346 Creating Applications Faster by Using an IDE. . . . . . . . . . . . . . . . . . . . 348 Checking Your Syntax with Greater Ease. . . . . . . . . . . . . . . . . . . . . . . . 348 Using XML to Your Advantage. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 349 Getting Past the Common Python Newbie Errors. . . . . . . . . . . . . . . . 350 Understanding Unicode. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351 Making Your Python Application Fast. . . . . . . . . . . . . . . . . . . . . . . . . . . 352 CHAPTER 19: Ten Ways to Make a Living with Python. . . . . . . . . . . . 353 Working in QA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354 Becoming the IT Staff for a Smaller Organization . . . . . . . . . . . . . . . . 355 Performing Specialty Scripting for Applications. . . . . . . . . . . . . . . . . . 355 Administering a Network. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356 Teaching Programming Skills. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .357 Helping People Decide on Location. . . . . . . . . . . . . . . . . . . . . . . . . . . . 357 Performing Data Mining. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358 Interacting with Embedded Systems. . ."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . .357 Helping People Decide on Location. . . . . . . . . . . . . . . . . . . . . . . . . . . . 357 Performing Data Mining. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358 Interacting with Embedded Systems. . . . . . . . . . . . . . . . . . . . . . . . . . . 358 Carrying Out Scientific Tasks. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 359 Performing Real-Time Analysis of Data. . . . . . . . . . . . . . . . . . . . . . . . . 359 CHAPTER 20: Ten Tools That Enhance Your Python Experience . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361 Tracking Bugs with Roundup Issue Tracker. . . . . . . . . . . . . . . . . . . . . . 362 Creating a Virtual Environment by Using VirtualEnv. . . . . . . . . . . . . . 363 Installing Your Application by Using PyInstaller. . . . . . . . . . . . . . . . . . 364 Building Developer Documentation by Using pdoc. . . . . . . . . . . . . . . 365 Developing Application Code by Using Komodo Edit. . . . . . . . . . . . . . 366 xii Beginning Programming with Python For Dummies Debugging Your Application by Using pydbgr. . . . . . . . . . . . . . . . . . . . 367 Entering an Interactive Environment by Using IPython. . . . . . . . . . . . 368 Testing Python Applications by Using PyUnit. . . . . . . . . . . . . . . . . . . . 368 Tidying Your Code by Using Isort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369 Providing Version Control by Using Mercurial . . . . . . . . . . . . . . . . . . . 370 CHAPTER 21: Ten (Plus)"}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . 368 Testing Python Applications by Using PyUnit. . . . . . . . . . . . . . . . . . . . 368 Tidying Your Code by Using Isort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369 Providing Version Control by Using Mercurial . . . . . . . . . . . . . . . . . . . 370 CHAPTER 21: Ten (Plus) Libraries You Need to Know About. . . . . 371 Developing a Secure Environment by Using PyCrypto . . . . . . . . . . . . 372 Interacting with Databases by Using SQLAlchemy. . . . . . . . . . . . . . . . 372 Seeing the World by Using Google Maps. . . . . . . . . . . . . . . . . . . . . . . . 373 Adding a Graphical User Interface by Using TkInter . . . . . . . . . . . . . . 373 Providing a Nice Tabular Data Presentation by Using PrettyTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 374 Enhancing Your Application with Sound by Using PyAudio . . . . . . . . 374 Manipulating Images by Using PyQtGraph. . . . . . . . . . . . . . . . . . . . . . 375 Locating Your Information by Using IRLib. . . . . . . . . . . . . . . . . . . . . . . 376 Creating an Interoperable Java Environment by Using JPype. . . . . . . 377 Accessing Local Network Resources by Using Twisted Matrix. . . . . . 378 Accessing Internet Resources by Using Libraries. . . . . . . . . . . . . . . . . 378 INDEX. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 379 Introduction 1 Introduction P ython is an example of a language that does everything right within the domain of things that it\u2019s designed to do. This isn\u2019t just me saying it, either: Programmers have voted by using Python enough that it\u2019s now the fifth-ranked language in the world (see https://www.tiobe.com/tiobe-index/ for details)."}, {"filename": "Beginning Programming with Python.pdf", "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 379 Introduction 1 Introduction P ython is an example of a language that does everything right within the domain of things that it\u2019s designed to do. This isn\u2019t just me saying it, either: Programmers have voted by using Python enough that it\u2019s now the fifth-ranked language in the world (see https://www.tiobe.com/tiobe-index/ for details). The amazing thing about Python is that you really can write an \u00adapplication on one platform and use it on every other platform that you need to support. In contrast to other programming languages that promised to provide platform independence, Python really does make that independence possible. In this case, the promise is as good as the result you get. Python emphasizes code readability and a concise syntax that lets you write \u00adapplications using fewer lines of code than other programming languages require. You can also use a coding style that meets your needs, given that Python supports the functional, imperative, object-oriented, and procedural coding styles (see \u00adChapter 3 for details). In addition, because of the way Python works, you find it used in all sorts of fields that are filled with nonprogrammers. Beginning Programming with Python for Dummies, 2nd Edition is designed to help everyone, including nonprogrammers, get up and running with Python quickly. Some people view Python as a scripted language, but it really is so much more. (Chapter 18 gives you just an inkling of the occupations that rely on Python to make things work.) However, Python it does lend itself to educational and other uses for which other programming languages can fall short. In fact, this book uses Jupypter Notebook for examples, which relies on the highly readable literate pro- gramming paradigm advanced by Stanford computer scientist Donald Knuth (see Chapter 4 for details). Your examples end up looking like highly readable reports that almost anyone can understand with ease. About This Book Beginning Programming with Python For Dummies, 2nd Edition is all about getting up and running with Python quickly. You want to learn the language fast so that you can become productive in using it to perform your real job, which could be any- thing. Unlike most books on the topic, this one starts you right at the beginning by showing you what makes Python different from other languages and how it can help you perform useful work in a job other than programming. As a result, you 2 Beginning Programming with Python For Dummies gain an understanding of what you need to do from the start, using hands-on examples and spending a good deal of time performing actually useful tasks. You even get help with installing Python on your particular system. When you have a good installation on whatever platform you\u2019re using, you"}, {"filename": "Beginning Programming with Python.pdf", "text": "thing. Unlike most books on the topic, this one starts you right at the beginning by showing you what makes Python different from other languages and how it can help you perform useful work in a job other than programming. As a result, you 2 Beginning Programming with Python For Dummies gain an understanding of what you need to do from the start, using hands-on examples and spending a good deal of time performing actually useful tasks. You even get help with installing Python on your particular system. When you have a good installation on whatever platform you\u2019re using, you start with the basics and work your way up. By the time you finish working through the examples in this book, you\u2019ll be writing simple programs and performing tasks such as sending an email using Python. No, you won\u2019t be an expert, but you will be able to use Python to meet specific needs in the job environment. To make absorbing the concepts even easier, this book uses the following conventions: \u00bb \u00bb Text that you\u2019re meant to type just as it appears in the book is bold. The exception is when you\u2019re working through a step list: Because each step is bold, the text to type is not bold. \u00bb \u00bb When you see words in italics as part of a typing sequence, you need to replace that value with something that works for you. For example, if you see \u201cType Your Name and press Enter,\u201d you need to replace Your Name with your actual name. \u00bb \u00bb Web addresses and programming code appear in monofont. If you\u2019re reading a digital version of this book on a device connected to the Internet, note that you can click the web address to visit that website, like this: www.dummies.com. \u00bb \u00bb When you need to type command sequences, you see them separated by a special arrow, like this: File \u27aa New File. In this case, you go to the File menu first and then select the New File entry on that menu. The result is that you see a new file created. Foolish Assumptions You might find it difficult to believe that I\u2019ve assumed anything about you \u2014 after all, I haven\u2019t even met you yet! Although most assumptions are indeed foolish, I made these assumptions to provide a starting point for the book. Familiarity with the platform you want to use is important because the book doesn\u2019t provide any guidance in this regard. (Chapter 2 does provide Python instal- lation instructions for various platforms, and Chapter 4 tells you how to install Anaconda, which includes Jupyter Notebook \u2014 the Integrated \u00adDevelopment \u00adEnvironment, or IDE, used for this book.) To provide you with maximum \u00adinformation about Python, this book doesn\u2019t discuss any platform-specific issues. You really do need to know how to install applications, use applications, and \u00adgenerally work with your chosen platform before you begin working with this book. This book also assumes that you can locate information on the"}, {"filename": "Beginning Programming with Python.pdf", "text": "use is important because the book doesn\u2019t provide any guidance in this regard. (Chapter 2 does provide Python instal- lation instructions for various platforms, and Chapter 4 tells you how to install Anaconda, which includes Jupyter Notebook \u2014 the Integrated \u00adDevelopment \u00adEnvironment, or IDE, used for this book.) To provide you with maximum \u00adinformation about Python, this book doesn\u2019t discuss any platform-specific issues. You really do need to know how to install applications, use applications, and \u00adgenerally work with your chosen platform before you begin working with this book. This book also assumes that you can locate information on the Internet. Sprinkled throughout are numerous references to online material that will enhance your Introduction 3 learning experience. However, these added sources are useful only if you actually find and use them. Icons Used in This Book As you read this book, you see icons in the margins that indicate material of interest (or not, as the case may be). This section briefly describes each icon in this book. Tips are nice because they help you save time or perform some task without a lot of extra work. The tips in this book are time-saving techniques or pointers to resources that you should try in order to get the maximum benefit from Python. I don\u2019t want to sound like an angry parent or some kind of maniac, but you should avoid doing anything marked with a Warning icon. Otherwise, you could find that your program only serves to confuse users, who will then refuse to work with it. Whenever you see this icon, think advanced tip or technique. You might find these tidbits of useful information just too boring for words, or they could contain the solution you need to get a program running. Skip these bits of information when- ever you like. If you don\u2019t get anything else out of a particular chapter or section, remember the material marked by this icon. This text usually contains an essential process or a bit of information that you must know to write Python programs successfully. Beyond the Book This book isn\u2019t the end of your Python programming experience \u2014 it\u2019s really just the beginning. I provide online content to make this book more flexible and better able to meet your needs. That way, as I receive email from you, I can do things like address questions and tell you how updates to either Python or its associated libraries affect book content. In fact, you gain access to all these cool additions: \u00bb \u00bb Cheat sheet: You remember using crib notes in school to make a better mark on a test, don\u2019t you? You do? Well, a cheat sheet is sort of like that. It provides you with some special notes about tasks that you can do with Python that not every other developer knows. You can find the cheat sheet for this book by going to www.dummies.com and searching Beginning Programming For Dummies, 2nd Edition Cheat Sheet. It contains really neat information"}, {"filename": "Beginning Programming with Python.pdf", "text": "either Python or its associated libraries affect book content. In fact, you gain access to all these cool additions: \u00bb \u00bb Cheat sheet: You remember using crib notes in school to make a better mark on a test, don\u2019t you? You do? Well, a cheat sheet is sort of like that. It provides you with some special notes about tasks that you can do with Python that not every other developer knows. You can find the cheat sheet for this book by going to www.dummies.com and searching Beginning Programming For Dummies, 2nd Edition Cheat Sheet. It contains really neat information like the top ten mistakes developers make when working with Python and some of the Python syntax that gives most developers problems. 4 Beginning Programming with Python For Dummies \u00bb \u00bb Updates: Sometimes changes happen. For example, I might not have seen an upcoming change when I looked into my crystal ball during the writing of this book. In the past, that simply meant the book would become outdated and less useful, but you can now find updates to the book at by going to www.dummies.com and searching this book\u2019s title. In addition to these updates, check out the blog posts with answers to reader questions and demonstrations of useful book-related techniques at http:// blog.johnmuellerbooks.com/. \u00bb \u00bb Companion files: Hey! Who really wants to type all the code in the book? Most readers would prefer to spend their time actually working through coding examples, rather than typing. Fortunately for you, the source code is available for download, so all you need to do is read the book to learn Python coding tech- niques. Each of the book examples even tells you precisely which example project to use. You can find these files at going to www.dummies.com and searching this book\u2019s title. On the page that appears, scroll down to the graphic of the book\u2019s cover and click it; then click More About This Book. Click the Downloads tab on the page that appears. Where to Go from Here It\u2019s time to start your Programming with Python adventure! If you\u2019re a complete programming novice, you should start with Chapter 1 and progress through the book at a pace that allows you to absorb as much of the material as possible. If you\u2019re a novice who\u2019s in an absolute rush to get going with Python as quickly as possible, you could skip to Chapter 2 with the understanding that you may find some topics a bit confusing later. Skipping to Chapter 3 is possible if you already have Python installed, but be sure to at least skim Chapter 2 so that you know what assumptions were made when writing this book. Readers who have some exposure to Python can save time by moving directly to Chapter 4. It\u2019s essential to install Anaconda to gain access to Jupyter Notebook, which is the IDE used for this book. Otherwise, you won\u2019t be able to use the down- loadable source easily. Anaconda is free, so"}, {"filename": "Beginning Programming with Python.pdf", "text": "to Chapter 2 with the understanding that you may find some topics a bit confusing later. Skipping to Chapter 3 is possible if you already have Python installed, but be sure to at least skim Chapter 2 so that you know what assumptions were made when writing this book. Readers who have some exposure to Python can save time by moving directly to Chapter 4. It\u2019s essential to install Anaconda to gain access to Jupyter Notebook, which is the IDE used for this book. Otherwise, you won\u2019t be able to use the down- loadable source easily. Anaconda is free, so there is no cost involved. Assuming that you already have Jupyter Notebook installed and know how to use it, you can move directly to Chapter 6. You can always go back to earlier chapters as necessary when you have questions. However, it\u2019s important that you under- stand how each example works before moving to the next one. Every example has important lessons for you, and you could miss vital content if you start skipping too much information. 1 Getting Started with Python IN THIS PART . . . Communicate with your computer. Install Python on your Linux, Mac, or Windows system. Interact with the Python-supplied tools. Install and use Anaconda to write your first application. Use Anaconda to perform useful work. CHAPTER 1 Talking to Your Computer 7 Chapter 1 Talking to Your Computer H aving a conversation with your computer might sound like the script of a science fiction movie. After all, the members of the Enterprise on Star Trek regularly talked with their computer. In fact, the computer often talked back. However, with the rise of Apple\u2019s Siri (http://www.apple.com/ios/siri/), Amazon\u2019s Echo (https://www.amazon.com/dp/B00X4WHP5E/), and other \u00adinteractive software, perhaps you really don\u2019t find a conversation so unbelievable. Asking the computer for information is one thing, but providing it with instruc- tions is quite another. This chapter considers why you want to instruct your com- puter about anything and what benefit you gain from it. You also discover the need for a special language when performing this kind of communication and why you want to use Python to accomplish it. However, the main thing to get out of this chapter is that programming is simply a kind of communication that is akin to other forms of communication you already have with your computer. IN THIS CHAPTER \u00bb \u00bb Talking to your computer \u00bb \u00bb Creating programs to talk to your computer \u00bb \u00bb Understanding programs and their creation \u00bb \u00bb Considering why you want to use Python 8 PART 1 Getting Started with Python Understanding Why You Want to Talk to Your Computer Talking to a machine may seem quite odd at first, but it\u2019s necessary because a computer can\u2019t read your mind \u2014 yet. Even if the computer did read your mind, it would still be communicating with you. Nothing can occur without an exchange of information between the machine and you. Activities such as \u00bb \u00bb Reading your email"}, {"filename": "Beginning Programming with Python.pdf", "text": "computer \u00bb \u00bb Creating programs to talk to your computer \u00bb \u00bb Understanding programs and their creation \u00bb \u00bb Considering why you want to use Python 8 PART 1 Getting Started with Python Understanding Why You Want to Talk to Your Computer Talking to a machine may seem quite odd at first, but it\u2019s necessary because a computer can\u2019t read your mind \u2014 yet. Even if the computer did read your mind, it would still be communicating with you. Nothing can occur without an exchange of information between the machine and you. Activities such as \u00bb \u00bb Reading your email \u00bb \u00bb Writing about your vacation \u00bb \u00bb Finding the greatest gift in the world are all examples of communication that occurs between a computer and you. That the computer further communicates with other machines or people to address requests that you make simply extends the basic idea that communication is nec- essary to produce any result. In most cases, the communication takes place in a manner that is nearly invisible to you unless you really think about it. For example, when you visit a chat room online, you might think that you\u2019re communicating with another person. However, you\u2019re communicating with your computer, your computer is communicating with the other person\u2019s computer through the chat room (whatever it consists of), and the other person\u2019s computer is communicating with that person. Figure 1-1 gives you an idea of what is actually taking place. Notice the cloud in the center of Figure 1-1. The cloud could contain anything, but you know that it at least contains other computers running other applications. These computers make it possible for your friend and you to chat. Now, think about how easy the whole process seems when you\u2019re using the chat application. Even though all these things are going on in the background, it seems as if you\u2019re simply chatting with your friend, and the process itself is invisible. FIGURE 1-1: Communication with your computer may be invisible unless you really think about it. CHAPTER 1 Talking to Your Computer 9 Knowing that an Application is a Form of Communication Computer communication occurs through the use of applications. You use one application to answer your email, another to purchase goods, and still another to create a presentation. An application (sometimes called an app) provides the means to express human ideas to the computer in a manner the computer can under- stand and defines the tools needed to shape the data used for the communication in \u00adspecific ways. Data used to express the content of a presentation is different from data used to purchase a present for your mother. The way you view, use, and under- stand the data is \u00addifferent for each task, so you must use different applications to interact with the data in a manner that both the computer and you can understand. You can obtain applications to meet just about any general need you can conceive of today. In fact, you probably have"}, {"filename": "Beginning Programming with Python.pdf", "text": "the computer can under- stand and defines the tools needed to shape the data used for the communication in \u00adspecific ways. Data used to express the content of a presentation is different from data used to purchase a present for your mother. The way you view, use, and under- stand the data is \u00addifferent for each task, so you must use different applications to interact with the data in a manner that both the computer and you can understand. You can obtain applications to meet just about any general need you can conceive of today. In fact, you probably have access to applications for which you haven\u2019t even thought about a purpose yet. Programmers have been busy creating millions of applications of all types for many years now, so it may be hard to understand what you can accomplish by creating some new method for talking with your computer through an application. The answer comes down to thinking about the data and how you want to interact with it. Some data simply isn\u2019t common enough to have attracted the attention of a programmer, or you may need the data in a format that no application currently supports, so you don\u2019t have any way to tell the computer about it unless you create a custom application to do it. The following sections describe applications from the perspective of working with unique data in a manner that is special in some way. For example, you might have access to a video library database but no method to access it in a way that makes sense to you. The data is unique and your access needs are special, so you may want to create an application that addresses both the data and your needs. Thinking about procedures you use daily A procedure is simply a set of steps you follow to perform a task. For example, when making toast, you might use a procedure like this: 1. Get the bread and butter from the refrigerator. 2. Open the bread bag and take out two pieces of toast. 3. Remove the cover from the toaster. 4. Place each piece of bread in its own slot. 5. Push the toaster lever down to start toasting the bread. 10 PART 1 Getting Started with Python 6. Wait for the toasting process to complete. 7. Remove toast from the toaster. 8. Place toast on a plate. 9. Butter the toast. Your procedure might vary from the one presented here, but it\u2019s unlikely that you\u2019d butter the toast before placing it in the toaster. Of course, you do actually have to remove the bread from the wrapper before you toast it (placing the bread, wrapper and all, into the toaster would likely produce undesirable results). Most people never actually think about the procedure for making toast. However, you use a procedure like this one even though you don\u2019t think about it. Computers can\u2019t perform tasks without a procedure. You must tell the computer which steps to perform, the"}, {"filename": "Beginning Programming with Python.pdf", "text": "Butter the toast. Your procedure might vary from the one presented here, but it\u2019s unlikely that you\u2019d butter the toast before placing it in the toaster. Of course, you do actually have to remove the bread from the wrapper before you toast it (placing the bread, wrapper and all, into the toaster would likely produce undesirable results). Most people never actually think about the procedure for making toast. However, you use a procedure like this one even though you don\u2019t think about it. Computers can\u2019t perform tasks without a procedure. You must tell the computer which steps to perform, the order in which to perform them, and any exceptions to the rule that could cause failure. All this information (and more) appears within an application. In short, an application is simply a written procedure that you use to tell the computer what to do, when to do it, and how to do it. Because you\u2019ve been using procedures all your life, all you really need to do is apply the knowl- edge you already possess to what a computer needs to know about specific tasks. Writing procedures down When I was in grade school, our teacher asked us to write a paper about making toast. After we turned in our papers, she brought in a toaster and some loaves of bread. Each paper was read and demonstrated. None of our procedures worked as expected, but they all produced humorous results. In my case, I forgot to tell the teacher to remove the bread from the wrapper, so she dutifully tried to stuff the piece of bread, wrapper and all, into the toaster. The lesson stuck with me. Writing about procedures can be quite hard because we know precisely want we want to do, but often we leave steps out \u2014 we assume that the other person also knows precisely what we want to do. Many experiences in life revolve around procedures. Think about the checklist used by pilots before a plane takes off. Without a good procedure, the plane could crash. Learning to write a great procedure takes time, but it\u2019s doable. You may have to try several times before you get a procedure that works completely, but eventually you can create one. Writing procedures down isn\u2019t really sufficient, though \u2014 you also need to test the procedure by using someone who isn\u2019t familiar with the task involved. When working with computers, the computer is your per- fect test subject. CHAPTER 1 Talking to Your Computer 11 Seeing applications as being like any other procedure A computer acts like the grade school teacher in my example in the previous sec- tion. When you write an application, you\u2019re writing a procedure that defines a series of steps that the computer should perform to accomplish whatever task you have in mind. If you leave out a step, the results won\u2019t be what you expected. The computer won\u2019t know what you mean or that you intended for it to perform cer- tain tasks"}, {"filename": "Beginning Programming with Python.pdf", "text": "with computers, the computer is your per- fect test subject. CHAPTER 1 Talking to Your Computer 11 Seeing applications as being like any other procedure A computer acts like the grade school teacher in my example in the previous sec- tion. When you write an application, you\u2019re writing a procedure that defines a series of steps that the computer should perform to accomplish whatever task you have in mind. If you leave out a step, the results won\u2019t be what you expected. The computer won\u2019t know what you mean or that you intended for it to perform cer- tain tasks automatically. The only thing the computer knows is that you have provided it with a specific procedure and it needs to perform that procedure. Understanding that computers take things literally People eventually get used to the procedures you create. They automatically compen- sate for deficiencies in your procedure or make notes about things that you left out. In other words, people compensate for problems with the procedures that you write. When you begin writing computer programs, you\u2019ll get frustrated because com- puters perform tasks precisely and read your instructions literally. For example, if you tell the computer that a certain value should equal 5, the computer will look for a value of exactly 5. A human might see 4.9 and know that the value is good enough, but a computer doesn\u2019t see things that way. It sees a value of 4.9 and decides that it doesn\u2019t equal 5 exactly. In short, computers are inflexible, unintui- tive, and unimaginative. When you write a procedure for a computer, the com- puter will do precisely as you ask absolutely every time and never modify your procedure or decide that you really meant for it to do something else. Defining What an Application Is As previously mentioned, applications provide the means to define express human ideas in a manner that a computer can understand. To accomplish this goal, the application relies on one or more procedures that tell the computer how to per- form the tasks related to the manipulation of data and its presentation. What you see onscreen is the text from your word processor, but to see that information, the computer requires procedures for retrieving the data from disk, putting it into a form you can understand, and then presenting it to you. The following sections define the specifics of an application in more detail. 12 PART 1 Getting Started with Python Understanding that computers use a special language Human language is complex and difficult to understand. Even applications such as Siri and Alexa have serious limits in understanding what you\u2019re saying. Over the years, computers have gained the capability to input human speech as data and to understand certain spoken words as commands, but computers still don\u2019t quite understand human speech to any significant degree. The difficulty of human speech is exemplified in the way lawyers work. When you read legalese, it appears as a gibberish of sorts. However, the goal"}, {"filename": "Beginning Programming with Python.pdf", "text": "in more detail. 12 PART 1 Getting Started with Python Understanding that computers use a special language Human language is complex and difficult to understand. Even applications such as Siri and Alexa have serious limits in understanding what you\u2019re saying. Over the years, computers have gained the capability to input human speech as data and to understand certain spoken words as commands, but computers still don\u2019t quite understand human speech to any significant degree. The difficulty of human speech is exemplified in the way lawyers work. When you read legalese, it appears as a gibberish of sorts. However, the goal is to state ideas and concepts in a way that isn\u2019t open to interpretation. Lawyers seldom succeed in meeting their objec- tive precisely because human speech is imprecise. Given what you know from previous sections of this chapter, computers could never rely on human speech to understand the procedures you write. Computers always take things literally, so you\u2019d end up with completely unpredictable results if you were to use human language to write applications. That\u2019s why humans use special languages, called programming languages, to communicate with computers. These special languages make it possible to write procedures that are both specific and completely understandable by both humans and computers. Computers don\u2019t actually speak any language. They use binary codes to flip switches internally and to perform math calculations. Computers don\u2019t even understand letters \u2014 they understand only numbers. A special application turns the computer-specific language you use to write a procedure into binary codes. For the purposes of this book, you really don\u2019t need to worry too much about the low- level specifics of how computers work at the binary level. However, it\u2019s interesting to know that computers speak math and numbers, not really a language at all. Helping humans speak to the computer It\u2019s important to keep the purpose of an application in mind as you write it. An application is there to help humans speak to the computer in a certain way. Every application works with some type of data that is input, stored, manipulated, and output so that the humans using the application obtain a desired result. Whether the application is a game or a spreadsheet, the basic idea is the same. Computers work with data provided by humans to obtain a desired result. When you create an application, you\u2019re providing a new method for humans to speak to the computer. The new approach you create will make it possible for other humans to view data in new ways. The communication between human and com- puter should be easy enough that the application actually disappears from view. Think about the kinds of applications you\u2019ve used in the past. The best applica- tions are the ones that let you focus on whatever data you\u2019re interacting with. CHAPTER 1 Talking to Your Computer 13 For example, a game application is considered immersive only if you can focus on the planet you\u2019re trying to save or the ship you\u2019re trying to"}, {"filename": "Beginning Programming with Python.pdf", "text": "to the computer. The new approach you create will make it possible for other humans to view data in new ways. The communication between human and com- puter should be easy enough that the application actually disappears from view. Think about the kinds of applications you\u2019ve used in the past. The best applica- tions are the ones that let you focus on whatever data you\u2019re interacting with. CHAPTER 1 Talking to Your Computer 13 For example, a game application is considered immersive only if you can focus on the planet you\u2019re trying to save or the ship you\u2019re trying to fly, rather than the application that lets you do these things. One of the best ways to start thinking about how you want to create an application is to look at the way other people create applications. Writing down what you like and dislike about other applications is a useful way to start discovering how you want your applications to look and work. Here are some questions you can ask yourself as you work with the applications: \u00bb \u00bb What do I find distracting about the application? \u00bb \u00bb Which features were easy to use? \u00bb \u00bb Which features were hard to use? \u00bb \u00bb How did the application make it easy to interact with my data? \u00bb \u00bb How would I make the data easier to work with? \u00bb \u00bb What do I hope to achieve with my application that this application doesn\u2019t provide? Professional developers ask many other questions as part of creating an applica- tion, but these are good starter questions because they begin to help you think about applications as a means to help humans speak with computers. If you\u2019ve ever found yourself frustrated by an application you used, you already know how other people will feel if you don\u2019t ask the appropriate questions when you create your application. Communication is the most important element of any applica- tion you create. You can also start to think about the ways in which you work. Start writing pro- cedures for the things you do. It\u2019s a good idea to take the process one step at a time and write everything you can think of about that step. When you get fin- ished, ask someone else to try your procedure to see how it actually works. You might be surprised to learn that even with a lot of effort, you can easily forget to include steps. The world\u2019s worst application usually begins with a programmer who doesn\u2019t know what the application is supposed to do, why it\u2019s special, what need it addresses, or whom it is for. When you decide to create an application, make sure that you know why you\u2019re creating it and what you hope to achieve. Just having a plan in place really helps make programming fun. You can work on your new application and see your goals accomplished one at a time until you have a com- pleted application to use and show off"}, {"filename": "Beginning Programming with Python.pdf", "text": "effort, you can easily forget to include steps. The world\u2019s worst application usually begins with a programmer who doesn\u2019t know what the application is supposed to do, why it\u2019s special, what need it addresses, or whom it is for. When you decide to create an application, make sure that you know why you\u2019re creating it and what you hope to achieve. Just having a plan in place really helps make programming fun. You can work on your new application and see your goals accomplished one at a time until you have a com- pleted application to use and show off to your friends (all of whom will think you\u2019re really cool for creating it). 14 PART 1 Getting Started with Python Understanding Why Python is So Cool Many programming languages are available today. In fact, a student can spend an entire semester in college studying computer languages and still not hear about them all. (I did just that during my college days.) You\u2019d think that programmers would be happy with all these programming languages and just choose one to talk to the computer, but they keep inventing more. Programmers keep creating new languages for good reason. Each language has something special to offer \u2014 something it does exceptionally well. In addition, as computer technology evolves, so do the programming languages in order to keep up. Because creating an application is all about efficient communication, many pro- grammers know multiple programming languages so that they can choose just the right language for a particular task. One language might work better to obtain data from a database, and another might create user interface elements especially well. As with every other programming language, Python does some things exception- ally well, and you need to know what they are before you begin using it. You might be amazed by the really cool things you can do with Python. Knowing a program- ming language\u2019s strengths and weaknesses helps you use it better as well as avoid frustration by not using the language for things it doesn\u2019t do well. The following sections help you make these sorts of decisions about Python. Unearthing the reasons for using Python Most programming languages are created with specific goals in mind. These goals help define the language characteristics and determine what you can do with the language. There really isn\u2019t any way to create a programming language that does everything because people have competing goals and needs when creating \u00adapplications. When it comes to Python, the main objective was to create a \u00adprogramming language that would make programmers efficient and productive. With that in mind, here are the reasons that you want to use Python when creating an application: \u00bb \u00bb Less application development time: Python code is usually 2\u201310 times shorter than comparable code written in languages like C/C++ and Java, which means that you spend less time writing your application and more time using it. \u00bb \u00bb Ease of reading: A programming language is like any other language"}, {"filename": "Beginning Programming with Python.pdf", "text": "because people have competing goals and needs when creating \u00adapplications. When it comes to Python, the main objective was to create a \u00adprogramming language that would make programmers efficient and productive. With that in mind, here are the reasons that you want to use Python when creating an application: \u00bb \u00bb Less application development time: Python code is usually 2\u201310 times shorter than comparable code written in languages like C/C++ and Java, which means that you spend less time writing your application and more time using it. \u00bb \u00bb Ease of reading: A programming language is like any other language \u2014 you need to be able to read it to understand what it does. Python code tends to be easier to read than the code written in other languages, which means you spend less time interpreting it and more time making essential changes. CHAPTER 1 Talking to Your Computer 15 \u00bb \u00bb Reduced learning time: The creators of Python wanted to make a program- ming language with fewer odd rules that make the language hard to learn. After all, programmers want to create applications, not learn obscure and difficult languages. Although Python is a popular language, it\u2019s not always the most popular language out there (depending on the site you use for comparison). In fact, it currently ranks fifth on sites such as TIOBE (http://www.tiobe.com/index.php/content/ paperinfo/tpci/index.html), an organization that tracks usage statistics (among other things). However, if you look at sites such as IEEE Spectrum (https:// spectrum.ieee.org/computing/software/the-2017-top-programming- languages), you see that Python is actually the number-one language from that site\u2019s perspective. Tech Rapidly has it as the number-three language (see http:// techrapidly.com/top-10-best-programming-languages-learn-2018/). If you\u2019re looking for a language solely for the purpose of obtaining a job, Python is a great choice, but Java, C/C++, or C# might be better choices, depending on the kind of job you want to get. Visual Basic is also a great choice, even if it isn\u2019t cur- rently quite as popular as Python. Make sure to choose a language you like and one that will address your application-development needs, but also choose on the basis of what you intend to accomplish. Python was the language of the year in both 2007 and 2010 and has ranked as high as the fourth most popular language in February 2011. So it truly is a good choice if you\u2019re looking for a job, but not necessarily the best choice. However, you may be surprised to learn that many colleges now use Python to teach coding, and it has become the most popular lan- guage in that venue. Check out my blog post at http://blog.johnmuellerbooks. com/2014/07/14/python-as-a-learning-tool for details. Deciding how you can personally benefit from Python Ultimately, you can use any programming language to write any sort of applica- tion you want. If you use the wrong programming language for the job, the pro- cess will be slow, error prone, bug ridden, and you\u2019ll absolutely hate it \u2014 but you can get the job done. Of course, most of"}, {"filename": "Beginning Programming with Python.pdf", "text": "choice. However, you may be surprised to learn that many colleges now use Python to teach coding, and it has become the most popular lan- guage in that venue. Check out my blog post at http://blog.johnmuellerbooks. com/2014/07/14/python-as-a-learning-tool for details. Deciding how you can personally benefit from Python Ultimately, you can use any programming language to write any sort of applica- tion you want. If you use the wrong programming language for the job, the pro- cess will be slow, error prone, bug ridden, and you\u2019ll absolutely hate it \u2014 but you can get the job done. Of course, most of us would rather avoid horribly painful experiences, so you need to know what sorts of applications people typically use Python to create. Here\u2019s a list of the most common uses for Python (although people do use it for other purposes): \u00bb \u00bb Creating rough application examples: Developers often need to create a prototype, a rough example of an application, before getting the resources to create the actual application. Python emphasizes productivity, so you can use it to create prototypes of an application quickly. 16 PART 1 Getting Started with Python \u00bb \u00bb Scripting browser-based applications: Even though JavaScript is probably the most popular language used for browser-based application scripting, Python is a close second. Python offers functionality that JavaScript doesn\u2019t provide (see the comparison at https://blog.glyphobet.net/essay/2557 for details) and its high efficiency makes it possible to create browser-based applications faster (a real plus in today\u2019s fast-paced world). \u00bb \u00bb Designing mathematic, scientific, and engineering applications: Interestingly enough, Python provides access to some really cool libraries that make it easier to create math, scientific, and engineering applications. The two most popular libraries are NumPy (http://www.numpy.org/) and SciPy (http://www.scipy. org/). These libraries greatly reduce the time you spend writing specialized code to perform common math, scientific, and engineering tasks. \u00bb \u00bb Working with XML: The eXtensible Markup Language (XML) is the basis of most data storage needs on the Internet and many desktop applications today. Unlike most languages, where XML is just sort of bolted on, Python makes it a first-class citizen. If you need to work with a Web service, the main method for exchanging information on the Internet (or any other XML- intensive application), Python is a great choice. \u00bb \u00bb Interacting with databases: Business relies heavily on databases. Python isn\u2019t quite a query language, like the Structured Query Language (SQL) or Language INtegrated Query (LINQ), but it does do a great job of interacting with databases. It makes creating connections and manipulating data relatively painless. \u00bb \u00bb Developing user interfaces: Python isn\u2019t like some languages like C# where you have a built-in designer and can drag and drop items from a toolbox onto the user interface. However, it does have an extensive array of graphical user interface (GUI) frameworks \u2014 extensions that make graphics a lot easier to create (see https://wiki.python.org/moin/GuiProgramming for details). Some of these frameworks do come with designers that make the user interface creation process easier."}, {"filename": "Beginning Programming with Python.pdf", "text": "(SQL) or Language INtegrated Query (LINQ), but it does do a great job of interacting with databases. It makes creating connections and manipulating data relatively painless. \u00bb \u00bb Developing user interfaces: Python isn\u2019t like some languages like C# where you have a built-in designer and can drag and drop items from a toolbox onto the user interface. However, it does have an extensive array of graphical user interface (GUI) frameworks \u2014 extensions that make graphics a lot easier to create (see https://wiki.python.org/moin/GuiProgramming for details). Some of these frameworks do come with designers that make the user interface creation process easier. The point is that Python isn\u2019t devoted to just one method of creating a user interface \u2014 you can use the method that best suits your needs. Discovering which organizations use Python Python really is quite good at the tasks that it was designed to perform. In fact, that\u2019s why a lot of large organizations use Python to perform at least some application-creation (development) tasks. You want a programming language that has good support from these large organizations because these organizations tend to spend money to make the language better. Table 1-1 lists the large orga- nizations that use Python the most. CHAPTER 1 Talking to Your Computer 17 These are just a few of the many organizations that use Python extensively. You can find a more complete list of organizations at http://www.python.org/about/ success/. The number of success stories has become so large that even this list probably isn\u2019t complete and the people supporting it have had to create categories to better organize it. Finding useful Python applications You might have an application written in Python sitting on your machine right now and not even know it. Python is used in a vast array of applications on the market today. The applications range from utilities that run at the console to full-fledged CAD/CAM suites. Some applications run on mobile devices, while others run on the large services employed by enterprises. In short, there is no limit to what you can do with Python, but it really does help to see what others have done. You can find a number of places online that list applications written in Python, but the best place to look is https://wiki.python.org/moin/ Applications. TABLE 1-1 Large Organizations That Use Python Vendor URL Application Type Alice Educational Software \u2013 Carnegie Mellon University (https://www.alice.org/) Educational applications Fermilab (https://www.fnal.gov/) Scientific applications Go.com (http://go.com/) Browser-based applications Google (https://www.google.com/) Search engine Industrial Light & Magic (http://www.ilm.com/) Just about every programming need Lawrence Livermore National Library (https://www.llnl.gov/) Scientific applications National Space and Aeronautics Administration (NASA) (http://www.nasa.gov/) Scientific applications New York Stock Exchange (https://nyse.nyx.com/) Browser-based applications Redhat (http://www.redhat.com/) Linux installation tools Yahoo! (https://www.yahoo.com/) Parts of Yahoo! mail YouTube (http://www.youtube.com/) Graphics engine Zope \u2013 Digital Creations (http://www.zope.org/en/latest/) Publishing application 18 PART 1 Getting Started with Python As a Python programmer, you\u2019ll also want to know that Python development tools are available to make your life easier. A development tool provides some level of automation"}, {"filename": "Beginning Programming with Python.pdf", "text": "Scientific applications Go.com (http://go.com/) Browser-based applications Google (https://www.google.com/) Search engine Industrial Light & Magic (http://www.ilm.com/) Just about every programming need Lawrence Livermore National Library (https://www.llnl.gov/) Scientific applications National Space and Aeronautics Administration (NASA) (http://www.nasa.gov/) Scientific applications New York Stock Exchange (https://nyse.nyx.com/) Browser-based applications Redhat (http://www.redhat.com/) Linux installation tools Yahoo! (https://www.yahoo.com/) Parts of Yahoo! mail YouTube (http://www.youtube.com/) Graphics engine Zope \u2013 Digital Creations (http://www.zope.org/en/latest/) Publishing application 18 PART 1 Getting Started with Python As a Python programmer, you\u2019ll also want to know that Python development tools are available to make your life easier. A development tool provides some level of automation in writing the procedures needed to tell the computer what to do. Having more development tools means that you have to perform less work in order to obtain a working application. Developers love to share their lists of favor- ite tools, but you can find a great list of tools broken into categories at http:// www.python.org/about/apps/. Of course, this chapter describes a number of tools as well, such as NumPy and SciPy (two scientific libraries). The remainder of the book lists a few other tools; make sure that you copy down your favorite tools for later. Comparing Python to other languages Comparing one language to another is somewhat dangerous because the selection of a language is just as much a matter of taste and personal preference as it is any sort of quantifiable scientific fact. So before I\u2019m attacked by the rabid protectors of the languages that follow, it\u2019s important to realize that I also use a number of languages and find at least some level of overlap among them all. There is no best language in the world, simply the language that works best for a particular appli- cation. With this idea in mind, the following sections provide an overview com- parison of Python to other languages. (You can find comparisons to other languages at https://wiki.python.org/moin/LanguageComparisons.) C# A lot of people claim that Microsoft simply copied Java to create C#. That said, C# does have some advantages (and disadvantages) when compared to Java. The main (undisputed) intent behind C# is to create a better kind of C/C++ language \u2014 one that is easier to learn and use. However, we\u2019re here to talk about C# and Python. When compared to C#, Python has these advantages: \u00bb \u00bb Significantly easier to learn \u00bb \u00bb Smaller (more concise) code \u00bb \u00bb Supported fully as open source \u00bb \u00bb Better multiplatform support \u00bb \u00bb Easily allows use of multiple development environments \u00bb \u00bb Easier to extend using Java and C/C++ \u00bb \u00bb Enhanced scientific and engineering support CHAPTER 1 Talking to Your Computer 19 Java For years, programmers looked for a language that they could use to write an application just once and have it run anywhere. Java is designed to work well on any platform. It relies on some tricks that you\u2019ll discover later in the book to accomplish this magic. For now, all you really need to know is that Java"}, {"filename": "Beginning Programming with Python.pdf", "text": "fully as open source \u00bb \u00bb Better multiplatform support \u00bb \u00bb Easily allows use of multiple development environments \u00bb \u00bb Easier to extend using Java and C/C++ \u00bb \u00bb Enhanced scientific and engineering support CHAPTER 1 Talking to Your Computer 19 Java For years, programmers looked for a language that they could use to write an application just once and have it run anywhere. Java is designed to work well on any platform. It relies on some tricks that you\u2019ll discover later in the book to accomplish this magic. For now, all you really need to know is that Java was so successful at running well everywhere that other languages have sought to emu- late it (with varying levels of success). Even so, Python has some important advantages over Java, as shown in the following list: \u00bb \u00bb Significantly easier to learn \u00bb \u00bb Smaller (more concise) code \u00bb \u00bb Enhanced variables (storage boxes in computer memory) that can hold different kinds of data based on the application\u2019s needs while running (dynamic typing) \u00bb \u00bb Faster development times Perl Perl was originally an acronym for Practical Extraction and Report Language. Today, people simply call it Perl and let it go at that. However, Perl still shows its roots in that it excels at obtaining data from a database and presenting it in report format. Of course, Perl has been extended to do a lot more than that \u2014 you can use it to write all sorts of applications. (I\u2019ve even used it for a Web service application.) In a comparison with Python, you\u2019ll find that Python has these advantages over Perl: \u00bb \u00bb Simpler to learn \u00bb \u00bb Easier to read \u00bb \u00bb Enhanced protection for data \u00bb \u00bb Better Java integration \u00bb \u00bb Fewer platform-specific biases R Data scientists often have a tough time choosing between R and Python because both languages are adept at statistical analysis and the sorts of graphing that data scientists need to understand data patterns. Both languages are also open source 20 PART 1 Getting Started with Python and support a large range of platforms. However, R is a bit more specialized than Python and tends to cater to the academic market. Consequently, Python has these advantages over R in that Python: \u00bb \u00bb Emphasizes productivity and code readability \u00bb \u00bb Is designed for use by enterprises \u00bb \u00bb Offers easier debugging \u00bb \u00bb Uses consistent coding techniques \u00bb \u00bb Has greater flexibility \u00bb \u00bb Is easier to learn CHAPTER 2 Getting Your Own Copy of Python 21 Chapter 2 Getting Your Own Copy of Python C reating applications requires that you have another application, unless you really want to get low level and write applications in machine code \u2014 a decidedly difficult experience that even true programmers avoid if at all possible. If you want to write an application using the Python programming lan- guage, you need the applications required to do so. These applications help you work with Python by creating Python"}, {"filename": "Beginning Programming with Python.pdf", "text": "Uses consistent coding techniques \u00bb \u00bb Has greater flexibility \u00bb \u00bb Is easier to learn CHAPTER 2 Getting Your Own Copy of Python 21 Chapter 2 Getting Your Own Copy of Python C reating applications requires that you have another application, unless you really want to get low level and write applications in machine code \u2014 a decidedly difficult experience that even true programmers avoid if at all possible. If you want to write an application using the Python programming lan- guage, you need the applications required to do so. These applications help you work with Python by creating Python code, providing help information as you need it, and letting you run the code you write. This chapter helps you obtain a copy of the Python application, install it on your hard drive, locate the installed applications so that you can use them, and test your installation so that you can see how it works. Downloading the Version You Need Every platform (combination of computer hardware and operating system \u00adsoftware) has special rules that it follows when running applications. The Python application hides these details from you. You type code that runs on any platform that Python supports, and the Python applications translate that code into some- thing the platform can understand. However, in order for the translation to take IN THIS CHAPTER \u00bb \u00bb Obtaining a copy of Python for your system \u00bb \u00bb Performing the Python installation \u00bb \u00bb Finding and using Python on your system \u00bb \u00bb Ensuring your installation works as planned 22 PART 1 Getting Started with Python place, you must have a version of Python that works on your particular platform. Python supports these platforms (and possibly others): \u00bb \u00bb Advanced IBM Unix (AIX) \u00bb \u00bb Android \u00bb \u00bb BeOS \u00bb \u00bb Berkeley Software Distribution (BSD)/FreeBSD \u00bb \u00bb Hewlett-Packard Unix (HP-UX) \u00bb \u00bb IBM i (formerly Application System 400 or AS/400, iSeries, and System i) \u00bb \u00bb iPhone Operating System (iOS) \u00bb \u00bb Linux \u00bb \u00bb Mac OS X (comes pre-installed with the OS) \u00bb \u00bb Microsoft Disk Operating System (MS-DOS) \u00bb \u00bb MorphOS \u00bb \u00bb Operating System 2 (OS/2) \u00bb \u00bb Operating System 390 (OS/390) and z/OS \u00bb \u00bb PalmOS \u00bb \u00bb PlayStation \u00bb \u00bb Psion \u00bb \u00bb QNX \u00bb \u00bb RISC OS (originally Acorn) \u00bb \u00bb Series 60 \u00bb \u00bb Solaris \u00bb \u00bb Virtual Memory System (VMS) \u00bb \u00bb Windows 32-bit (XP and later) \u00bb \u00bb Windows 64-bit \u00bb \u00bb Windows CE/Pocket PC Wow, that\u2019s a lot of different platforms! This book is tested with the Windows, Mac OS X, and Linux platforms. However, the examples could very well work with these other platforms, too, because the examples don\u2019t rely on any platform- specific code. Let me know if it works on your non-Windows, Mac, or Linux CHAPTER 2 Getting Your Own Copy of Python 23 platform at John@JohnMuellerBooks.com. The current version of Python at the time of this writing is 3.6.2. I\u2019ll talk about any Python updates on my blog at"}, {"filename": "Beginning Programming with Python.pdf", "text": "and later) \u00bb \u00bb Windows 64-bit \u00bb \u00bb Windows CE/Pocket PC Wow, that\u2019s a lot of different platforms! This book is tested with the Windows, Mac OS X, and Linux platforms. However, the examples could very well work with these other platforms, too, because the examples don\u2019t rely on any platform- specific code. Let me know if it works on your non-Windows, Mac, or Linux CHAPTER 2 Getting Your Own Copy of Python 23 platform at John@JohnMuellerBooks.com. The current version of Python at the time of this writing is 3.6.2. I\u2019ll talk about any Python updates on my blog at http://blog.johnmuellerbooks.com. You can find the answers to your Python book-specific questions there, too. To get the right version for your platform, you need to go to https://www.python. org/downloads/release/python-362/. The download section is initially hidden from view, so you need to scroll halfway down the page. You see a page similar to the one shown in Figure 2-1. The main part of the page contains links for Windows, Mac OS X, and Linux downloads. These links provide you with the default setup that is used in this book. The platform-specific links on the left side of the page show you alternative Python configurations that you can use when the need arises. For example, you may want to use a more advanced editor than the one provided with the default Python package, and these alternative configura- tions can provide one for you. If you want to work with another platform, go to https://www.python.org/ download/other/ instead. You see a list of Python installations for other \u00adplatforms, as shown in Figure 2-2. Many of these installations are maintained by volunteers rather than by the people who create the versions of Python for Windows, Mac OS X, and Linux. Make sure you contact these individuals when you have installation questions because they know how best to help you get a good installation on your platform. FIGURE 2-1: The Python download page contains links for all sorts of versions. 24 PART 1 Getting Started with Python Installing Python After you download your copy of Python, it\u2019s time to install it on your system. The downloaded file contains everything needed to get you started: \u00bb \u00bb Python interpreter \u00bb \u00bb Help files (documentation) \u00bb \u00bb Command-line access \u00bb \u00bb Integrated DeveLopment Environment (IDLE) application \u00bb \u00bb Preferred Installer Program (pip) \u00bb \u00bb Uninstaller (only on platforms that require it) This book assumes that you\u2019re using one of the default Python setups found at https://www.python.org/downloads/release/python-362/. If you use a ver- sion other than 3.6.2, some of the examples won\u2019t work as anticipated. The fol- lowing sections describe how to install Python on the three platforms directly supported by this book: Windows, Mac OS X, and Linux. FIGURE 2-2: Volunteers have made Python available on all sorts of \u00adplatforms. CHAPTER 2 Getting Your Own Copy of Python 25 Working with Windows The installation process on a Windows system follows the same procedure that you use for other application types."}, {"filename": "Beginning Programming with Python.pdf", "text": "require it) This book assumes that you\u2019re using one of the default Python setups found at https://www.python.org/downloads/release/python-362/. If you use a ver- sion other than 3.6.2, some of the examples won\u2019t work as anticipated. The fol- lowing sections describe how to install Python on the three platforms directly supported by this book: Windows, Mac OS X, and Linux. FIGURE 2-2: Volunteers have made Python available on all sorts of \u00adplatforms. CHAPTER 2 Getting Your Own Copy of Python 25 Working with Windows The installation process on a Windows system follows the same procedure that you use for other application types. The main difference is in finding the file you downloaded so that you can begin the installation process. The following proce- dure should work fine on any Windows system, whether you use the 32-bit or the 64-bit version of Python. 1. Locate the downloaded copy of Python on your system. The name of this file varies, but normally it appears as python-3.6.2.exe for both 32-bit systems and python-3.6.2-amd64.exe for 64-bit systems. The version number is embedded as part of the filename. In this case, the filename refers to version 3.6.2, which is the version used for this book. 2. Double-click the installation file. (You may see an Open File \u2013 Security Warning dialog box that asks whether you want to run this file. Click Run if you see this dialog box pop up.) You see a Python Setup dialog box similar to the one shown in Figure 2-3. The exact dialog box you see depends on which version of the Python installation program you download. 3. Choose a user installation option (the book uses the default setting of Install for All Users). Using a personalized installation can make it easier to manage systems that have multiple users. In some cases, the personalized installation also reduces the number of Security Warning dialog boxes you see. FIGURE 2-3: The setup process begins by asking you who should have access to Python. 26 PART 1 Getting Started with Python 4. Select Add Python 3.6 to PATH. Adding this setting enables you to access Python from anywhere on your hard drive. If you don\u2019t select this setting, you must manually add Python to the path later. 5. Click Customize Installation. Install asks you to choose which features to use with your copy of Python, as shown in Figure 2-4. Keep all the features selected for this book. However, for your own installation, you may find that you don\u2019t actually require all the Python features. 6. Click Next. You see the Advanced Options dialog box, shown in Figure 2-5. Note that Install for All Users isn\u2019t selected, despite your having requested that feature earlier. Install also asks you to provide the name of an installation directory for Python. Using the default destination will save you time and effort later. However, you can install Python anywhere you desire. FIGURE 2-4: Choose the Python features you want to install. FIGURE 2-5: Decide on an installation location for"}, {"filename": "Beginning Programming with Python.pdf", "text": "for this book. However, for your own installation, you may find that you don\u2019t actually require all the Python features. 6. Click Next. You see the Advanced Options dialog box, shown in Figure 2-5. Note that Install for All Users isn\u2019t selected, despite your having requested that feature earlier. Install also asks you to provide the name of an installation directory for Python. Using the default destination will save you time and effort later. However, you can install Python anywhere you desire. FIGURE 2-4: Choose the Python features you want to install. FIGURE 2-5: Decide on an installation location for your copy of Python. CHAPTER 2 Getting Your Own Copy of Python 27 Using the Windows \\Program Files or \\Program Files (x86) folder is problematic for two reasons. First, the folder name has a space in it, which makes it hard to access from within the application. Second, the folder usually requires administrator access, so you\u2019ll constantly battle the User Account Control (UAC) feature of Windows if you install Python in either folder. 7. Select the Install for All Users option to ensure that the installer makes Python accessible to everyone. Note that selecting this option automatically selects the Precompile Standard Library option, which you should keep selected. 8. Type a destination folder name, if necessary. This book uses an installation folder of C:\\Python36. 9. Click Install. You see the installation process start. At some point, you might see a User Account Control dialog box asking whether you want to perform the install. If you see this dialog box, click Yes. The installation continues and you see an Installation Complete dialog box. 10. Click Close. Python is ready for use. Working with the Mac Your Mac system likely already has Python installed on it. However, this installa- tion is normally a few years old \u2014 or whatever the age of your system happens to be. For the purposes of this book, the installation will likely work fine. You won\u2019t be testing the limits of Python programming technology \u2014 just getting a great start using Python. The Leopard version of OS X (10.5) uses a really old version of Python 2.5.1. This particular version lacks direct access to the IDLE application. As a result, you may find that some book exercises won\u2019t work properly. The article at https://wiki. python.org/moin/MacPython/Leopard tells you more about how to overcome this particular issue. The code in this book is tested with OS X version 10.12 that comes with Python 2.7.10, which is just fine for working through the examples in the book. Later versions of OS X and Python will also likely work fine, but you may see warnings about library use or other potential compatibility issues.\u201d Depending on how you use Python, you might want to update your installation at some point. Part of this process involves installing the GNU Compiler Collection (GCC) tools so that Python has access to the low-level resources it needs. The fol- lowing steps get you started with installing"}, {"filename": "Beginning Programming with Python.pdf", "text": "in this book is tested with OS X version 10.12 that comes with Python 2.7.10, which is just fine for working through the examples in the book. Later versions of OS X and Python will also likely work fine, but you may see warnings about library use or other potential compatibility issues.\u201d Depending on how you use Python, you might want to update your installation at some point. Part of this process involves installing the GNU Compiler Collection (GCC) tools so that Python has access to the low-level resources it needs. The fol- lowing steps get you started with installing a new version of Python on your Mac OS X 10.6 or above system. 28 PART 1 Getting Started with Python 1. Navigate to https://www.python.org/downloads/release/python-362/ with your browser. You see information regarding the latest version of Python, as shown previously in Figure 2-1. 2. Click the Mac OS X 64-bit/32-bit installer link. The Python disk image begins downloading. Be patient: The disk image requires several minutes to download. Most browsers provide a method for monitoring the download process so that you can easily see how long the download will take. 3. Double-click python-3.6.2-macosx10.6.pkg in the download folder. You see a Welcome dialog box that tells you about this particular Python build. 4. Click Continue three times. The installation program displays late-breaking notes about Python, licensing information (click Agree when asked about the licensing information), and, finally, a destination dialog box. 5. Click Install. The installer may request your administrator password. Type the administrator name and password, if required, into the dialog box and click OK. You see an Installing Python dialog box. The contents of this dialog box will change as the installation process proceeds so that you know what part of Python the installer is working with. After the installation is completed, you see an Install Succeeded dialog box. 6. Click Close. Python is ready to use. (You can close the disk image at this point and remove it from your system.) Working with Linux Some versions of Linux come with Python installed. For example, if you have a Red Hat Package Manager (RPM)-based distribution (such as SUSE, Red Hat, \u00adYellow Dog, Fedora Core, and CentOS), you likely already have Python on your system and don\u2019t need to do anything else. Depending on which version of Linux you use, the version of Python varies and some systems don\u2019t include the Interactive DeveLopment Environment (IDLE) application. If you have an older version of Python (2.5.1 or earlier), you might want to install a newer version so that you have access to IDLE. Many of the book exercises require use of IDLE. CHAPTER 2 Getting Your Own Copy of Python 29 You actually have two techniques to use to install Python on Linux. The following sections discuss both techniques. The first technique works on any Linux distri- bution; the second technique has special criteria that you must meet. Using the standard Linux installation The standard Linux installation works on any system."}, {"filename": "Beginning Programming with Python.pdf", "text": "the Interactive DeveLopment Environment (IDLE) application. If you have an older version of Python (2.5.1 or earlier), you might want to install a newer version so that you have access to IDLE. Many of the book exercises require use of IDLE. CHAPTER 2 Getting Your Own Copy of Python 29 You actually have two techniques to use to install Python on Linux. The following sections discuss both techniques. The first technique works on any Linux distri- bution; the second technique has special criteria that you must meet. Using the standard Linux installation The standard Linux installation works on any system. However, it requires you to work at the Terminal and type commands to complete it. Some of the actual com- mands may vary by version of Linux. The information at http://docs.python. org/3/install/ provides some helpful tips that you can use in addition to the procedure that follows. 1. Navigate to https://www.python.org/downloads/release/python-362/ with your browser. You see information regarding the latest version of Python, as shown previ- ously in Figure 2-1. 2. Click the appropriate link for your version of Linux: a. Gzipped source tarball (any version of Linux) b. XZ compressed source tarball (better compression and faster download) 3. When asked whether you want to open or save the file, choose Save. The Python source files begin downloading. Be patient: The source files require a minute or two to download. 4. Double-click the downloaded file. The Archive Manager window opens. After the files are extracted, you see the Python 3.6.2 folder in the Archive Manager window. 5. Double-click the Python 3.6.2 folder. The Archive Manager extracts the files to the Python 3.6.2 subfolder of your home folder. 6. Open a copy of Terminal. The Terminal window appears. If you have never built any software on your system before, you must install the build essentials, SQLite, and bzip2 or the Python installation will fail. Otherwise, you can skip to Step 10 to begin working with Python immediately. 7. Type sudo apt-get install build-essential and press Enter. Linux installs the Build Essential support required to build packages (see https://packages.debian.org/squeeze/build-essential for details). 30 PART 1 Getting Started with Python 8. Type sudo apt-get install libsqlite3-dev and press Enter. Linux installs the SQLite support required by Python for database manipulation (see https://packages.debian.org/squeeze/libsqlite3-dev for details). 9. Type sudo apt-get install libbz2-dev and press Enter. Linux installs the bzip2 support required by Python for archive manipulation (see https://packages.debian.org/sid/libbz2-dev for details). 10. Type CD Python 3.6.2 in the Terminal window and press Enter. Terminal changes directories to the Python 3.6.2 folder on your system. 11. Type ./configure and press Enter. The script begins by checking the system build type and then performs a series of tasks based on the system you\u2019re using. This process can require a minute or two because there is a large list of items to check. 12. Type make and press Enter. Linux executes the make script to create the Python application software. The make process can require up to a minute \u2014"}, {"filename": "Beginning Programming with Python.pdf", "text": "(see https://packages.debian.org/sid/libbz2-dev for details). 10. Type CD Python 3.6.2 in the Terminal window and press Enter. Terminal changes directories to the Python 3.6.2 folder on your system. 11. Type ./configure and press Enter. The script begins by checking the system build type and then performs a series of tasks based on the system you\u2019re using. This process can require a minute or two because there is a large list of items to check. 12. Type make and press Enter. Linux executes the make script to create the Python application software. The make process can require up to a minute \u2014 it depends on the processing speed of your system. 13. Type sudo make altinstall and press Enter. The system may ask you for your administrator password. Type your password and press Enter. At this point, a number of tasks take place as the system installs Python on your system. Using the graphical Linux installation All versions of Linux support the standard installation discussed in the \u201cUsing the standard Linux installation\u201d section of this chapter. However, a few versions of Debian-based Linux distributions, such as Ubuntu 12.x and later, provide a graph- ical installation technique as well. You need the administrator group (sudo) pass- word to use this procedure, so having it handy will save you time. The following steps outline the graphical installation technique for Ubuntu, but the technique is similar for other Linux installations: 1. Open the Ubuntu Software Center folder. (The folder may be named Synaptics on other platforms.) You see a listing of the most popular software available for download and installation. 2. Select Developer Tools (or Development) from the All Software drop- down list box. You see a listing of developer tools, including Python. CHAPTER 2 Getting Your Own Copy of Python 31 3. Double-click the Python 3.6.2 entry. The Ubuntu Software Center provides details about the Python 3.6.2 entry and offers to install it for you. 4. Click Install. Ubuntu begins the process of installing Python. A progress bar shows the download and installation status. When the installation is complete, the Install button changes to a Remove button. 5. Close the Ubuntu Software Center folder. You see a Python icon added to the desktop. Python is ready for use. Accessing Python on Your Machine After you have Python installed on your system, you need to know where to find it. In some respects, Python does everything it can to make this process easy by performing certain tasks, such as adding the Python path to the machine\u2019s path information during installation. Even so, you need to know how to access the installation, which the following sections describe. A WORD ABOUT THE SCREENSHOTS As you work your way through the book, you\u2019ll use either IDLE or the Python command- line shell to work with Python in the beginning. Later, you use Anaconda because it \u00adprovides a significantly enhanced and easier-to-use method of interacting with Python. The name of the graphical (GUI) environment, IDLE or Anaconda, is precisely"}, {"filename": "Beginning Programming with Python.pdf", "text": "everything it can to make this process easy by performing certain tasks, such as adding the Python path to the machine\u2019s path information during installation. Even so, you need to know how to access the installation, which the following sections describe. A WORD ABOUT THE SCREENSHOTS As you work your way through the book, you\u2019ll use either IDLE or the Python command- line shell to work with Python in the beginning. Later, you use Anaconda because it \u00adprovides a significantly enhanced and easier-to-use method of interacting with Python. The name of the graphical (GUI) environment, IDLE or Anaconda, is precisely the same across all three platforms, and you won\u2019t even see any significant difference in the \u00adpresentation. The differences you do see are minor, and you should ignore them as you work through the book. With this in mind, the book does rely heavily on Windows screenshots \u2014 all the screenshots you see were obtained from a Windows system for the sake of consistency. The command-line shell also works precisely the same across all three platforms. The presentation may vary a little more than IDLE or Anaconda does simply because the shell used for each platform varies slightly. However, the commands you type for one platform are precisely the same on another platform. The output is the same as well. When viewing the screenshot, look at the content rather than for specific differences in the presentation of the shell. 32 PART 1 Getting Started with Python Using Windows A Windows installation creates a new folder in the Start menu that contains your Python installation. You can access it by choosing Start \u27aa All Programs \u27aa Python 3.6. The two items of interest in the folder when creating new applications are IDLE (Python GUI) and Python (command line). (Chapter 4 helps you install, con- figure, and use Anaconda to create your first real application, but you should know how to use both IDLE and the command-line version of Python.) Clicking IDLE (Python GUI) produces a graphical interactive environment like the one shown in Figure 2-6. When you open this environment, IDLE automatically displays some information so that you know you have the right application open. For example, you see the Python version number (which is 3.6.2 in this case). It also tells you what sort of system you\u2019re using to run Python. The Python (command line) option opens a command prompt and executes the Python command, as shown in Figure 2-7. Again, the environment automatically displays information such as the Python version and the host platform. A third method to access Python is to open a command prompt, type Python, and press Enter. You can use this approach when you want to gain additional flexibility over the Python environment, automatically load items, or execute Python in a FIGURE 2-6: Use IDLE when you want the comforts of a graphical \u00adenvironment. FIGURE 2-7: Use the \u00adcommand prompt when you want the speed and flexibility of a command-line interface. CHAPTER 2 Getting Your"}, {"filename": "Beginning Programming with Python.pdf", "text": "and executes the Python command, as shown in Figure 2-7. Again, the environment automatically displays information such as the Python version and the host platform. A third method to access Python is to open a command prompt, type Python, and press Enter. You can use this approach when you want to gain additional flexibility over the Python environment, automatically load items, or execute Python in a FIGURE 2-6: Use IDLE when you want the comforts of a graphical \u00adenvironment. FIGURE 2-7: Use the \u00adcommand prompt when you want the speed and flexibility of a command-line interface. CHAPTER 2 Getting Your Own Copy of Python 33 higher-privilege environment (in which you gain additional security rights). Python provides a significant array of command-line options that you can see by typing Python /? at the command prompt and pressing Enter. Figure 2-8 shows what you typically see. Don\u2019t worry too much about these command-line options \u2014 you won\u2019t need them for this book, but it\u2019s helpful to know they exist. To use this third method of executing Python, you must include Python in the Windows path. This is why you want to choose the Add Python 3.6 to PATH option when installing Python on Windows. If you didn\u2019t add the path during installa- tion, you can add it afterward using the instructions found in the Adding a Loca- tion to the Windows Path article on my blog at http://blog.johnmuellerbooks. com/2014/02/17/adding-a-location-to-the-windows-path/. This same tech- nique works for adding Python-specific environment variables such as \u00bb \u00bb PYTHONSTARTUP \u00bb \u00bb PYTHONPATH \u00bb \u00bb PYTHONHOME \u00bb \u00bb PYTHONCASEOK FIGURE 2-8: Using a standard command line offers the flexibility of using switches to change the way Python works. 34 PART 1 Getting Started with Python \u00bb \u00bb PYTHONIOENCODING \u00bb \u00bb PYTHONFAULTHANDLER \u00bb \u00bb PYTHONHASHSEED None of these environment variables is used in the book. However, you can find out more about them at https://docs.python.org/3.6/using/cmdline. html#environment-variables. Using the Mac When working with a Mac, you probably have Python already installed and don\u2019t need to install it for this book. However, you still need to know where to find Python. The following sections tell you how to access Python depending on the kind of installation you performed. Locating the default installation The default OS X installation doesn\u2019t include a Python-specific folder in most cases. Instead, you must open Terminal by choosing Applications \u27aa Utilities \u27aa Terminal. After Terminal is open, you can type Python and press Enter to access the command-line version of Python. The display you see is similar to the one shown previously in Figure 2-7. As with Windows (see the \u201cUsing Windows\u201d sec- tion of the chapter), using Terminal to open Python offers the advantage of using command-line switches to modify the manner in which Python works. Locating the updated version of Python you installed After you perform the installation on your Mac system, open the Applications folder. Within this folder, you find a Python 3.6 folder that contains the following: \u00bb \u00bb Extras folder \u00bb \u00bb"}, {"filename": "Beginning Programming with Python.pdf", "text": "you can type Python and press Enter to access the command-line version of Python. The display you see is similar to the one shown previously in Figure 2-7. As with Windows (see the \u201cUsing Windows\u201d sec- tion of the chapter), using Terminal to open Python offers the advantage of using command-line switches to modify the manner in which Python works. Locating the updated version of Python you installed After you perform the installation on your Mac system, open the Applications folder. Within this folder, you find a Python 3.6 folder that contains the following: \u00bb \u00bb Extras folder \u00bb \u00bb IDLE application (GUI development) \u00bb \u00bb Python Launcher (interactive command development) \u00bb \u00bb Update Sh. . . command Double-clicking IDLE application opens a graphical interactive environment that looks similar to the environment shown previously in Figure 2-6. There are some small cosmetic differences, but the content of the window is the same. Double- clicking Python Launcher opens a command-line environment similar to the one CHAPTER 2 Getting Your Own Copy of Python 35 shown previously in Figure 2-7. This environment uses all the Python defaults to provide a standard execution environment. Even if you install a new version of Python on your Mac, you don\u2019t have to settle for using the default environment. It\u2019s still possible to open Terminal to gain access to the Python command-line switches. However, when you access Python from the Mac Terminal application, you need to ensure that you\u2019re not accessing the default installation. Make sure to add /usr/local/bin/Python3.6 to your shell search path. Using Linux After the installation process is complete, you can find a Python 3.6 subfolder in your home folder. The physical location of Python 3.6 on your Linux system is normally the /usr/local/bin/Python3.6 folder. This is important information because you may need to modify the path for your system manually. Linux devel- opers need to type Python3.6, rather than just Python, when working at the Terminal window to obtain access to the Python 3.6.2 installation. Testing Your Installation To ensure that you have a usable installation, you need to test it. It\u2019s important to know that your installation will work as expected when you need it. Of course, this means writing your first Python application. To get started, open a copy of IDLE. As previously mentioned, IDLE automatically displays the Python version and host information when you open it (refer to Figure 2-6). To see Python work, type print(\u201cThis is my first Python program.\u201d) and press Enter. Python displays the message you just typed, as shown in Figure 2-9. The print() command displays onscreen whatever you tell it to display. You see the print() command used quite often in this book to display the results of tasks you ask Python to perform, so this is one of the commands you work with frequently. FIGURE 2-9: The print() command displays whatever information you tell it to print. 36 PART 1 Getting Started with Python Notice that IDLE color codes the various entries for"}, {"filename": "Beginning Programming with Python.pdf", "text": "2-6). To see Python work, type print(\u201cThis is my first Python program.\u201d) and press Enter. Python displays the message you just typed, as shown in Figure 2-9. The print() command displays onscreen whatever you tell it to display. You see the print() command used quite often in this book to display the results of tasks you ask Python to perform, so this is one of the commands you work with frequently. FIGURE 2-9: The print() command displays whatever information you tell it to print. 36 PART 1 Getting Started with Python Notice that IDLE color codes the various entries for you so that they\u2019re easier to see and understand. The colors codes are your indicator that you\u2019ve done some- thing right. Four color codes are shown in Figure 2-9 (although they\u2019re not visible in the print edition of the book): \u00bb \u00bb Purple: Indicates that you have typed a command \u00bb \u00bb Green: Specifies the content sent to a command \u00bb \u00bb Blue: Shows the output from a command \u00bb \u00bb Black: Defines non-command entries You know that Python works now because you were able to issue a command to it, and it responded by reacting to that command. It might be interesting to see one more command. Type 3 + 4 and press Enter. Python responds by outputting 7, as shown in Figure 2-10. Notice that 3 + 4 appears in black type because it isn\u2019t a command. However, the 7 is still in blue type because it\u2019s output. It\u2019s time to end your IDLE session. Type quit( ) and press Enter. IDLE may display a message such as the one shown in Figure 2-11. Well, you never intended to kill anything, but you will now. Click OK, and the session dies. Notice that the quit() command has parentheses after it, just as the print() command does. All commands have parentheses like these two. That\u2019s how you know they\u2019re commands. However, you don\u2019t need to tell the quit() command anything, so you simply leave the area between the parentheses blank. FIGURE 2-10: Python supports math directly as part of the interactive environment. FIGURE 2-11: IDLE seems to get a little dramatic about ending a session! CHAPTER 3 Interacting with Python 37 Chapter 3 Interacting with Python U ltimately, any application you create interacts with the computer and the data it contains. The focus is on data because without data, there isn\u2019t a good reason to have an application. Any application you use (even one as simple as Solitaire) manipulates data in some way. In fact, the acronym CRUD sums up what most applications do: \u00bb \u00bb Create \u00bb \u00bb Read \u00bb \u00bb Update \u00bb \u00bb Delete If you remember CRUD, you\u2019ll be able to summarize what most applications do with the data your computer contains (and some applications really are quite cruddy). However, before your application accesses the computer, you have to interact with a programming language that creates a list of tasks to perform in a language the"}, {"filename": "Beginning Programming with Python.pdf", "text": "there isn\u2019t a good reason to have an application. Any application you use (even one as simple as Solitaire) manipulates data in some way. In fact, the acronym CRUD sums up what most applications do: \u00bb \u00bb Create \u00bb \u00bb Read \u00bb \u00bb Update \u00bb \u00bb Delete If you remember CRUD, you\u2019ll be able to summarize what most applications do with the data your computer contains (and some applications really are quite cruddy). However, before your application accesses the computer, you have to interact with a programming language that creates a list of tasks to perform in a language the computer understands. That\u2019s the purpose of this chapter. You begin interacting with Python. Python takes the list of steps you want to perform on the computer\u2019s data and changes those steps into bits the computer understands. IN THIS CHAPTER \u00bb \u00bb Accessing the command line \u00bb \u00bb Using commands to perform tasks \u00bb \u00bb Obtaining help about Python \u00bb \u00bb Ending a command-line session 38 PART 1 Getting Started with Python Opening the Command Line Python offers a number of ways to interact with the underlying language. For example, you worked a bit with the Integrated DeveLopment Environment (IDLE) in Chapter 2. (In Chapter 4, you begin seeing how to use a full-featured Integrated Development Environment, IDE, named Anaconda.) IDLE makes developing full- fledged applications easy. However, sometimes you simply want to experiment or to run an existing application. Often, using the command-line version of Python works better in these cases because it offers better control over the Python envi- ronment through command-line switches, uses fewer resources, and relies on a minimalistic interface so that you can focus on trying out code rather than playing with a GUI. Starting Python Depending on your platform, you might have multiple ways to start the command line. Here are the methods that are commonly available: \u00bb \u00bb Select the Python (command-line) option found in the Python36 folder. This option starts a command-line session that uses the default settings. \u00bb \u00bb Open a command prompt or terminal, type Python, and press Enter. Use this option when you want greater flexibility in configuring the Python environ- ment using command-line switches. UNDERSTANDING THE IMPORTANCE OF THE README FILE Many applications include a README file. The README file usually provides updated infor- mation that didn\u2019t make it into the documentation before the application was put into a production status. Unfortunately, most people ignore the README file and some don\u2019t even know it exists. As a result, people who should know something interesting about their shiny new product never find out. Python has a NEWS.txt file in the \\Python36 directory. When you open this file, you find all sorts of really interesting information, most of which centers on upgrades to Python that you really need to know about. Opening and reading the README file (named NEWS.txt because people were appar- ently ignoring the other file) will help you become a Python genius. People will be amazed that you"}, {"filename": "Beginning Programming with Python.pdf", "text": "production status. Unfortunately, most people ignore the README file and some don\u2019t even know it exists. As a result, people who should know something interesting about their shiny new product never find out. Python has a NEWS.txt file in the \\Python36 directory. When you open this file, you find all sorts of really interesting information, most of which centers on upgrades to Python that you really need to know about. Opening and reading the README file (named NEWS.txt because people were appar- ently ignoring the other file) will help you become a Python genius. People will be amazed that you really do know something interesting about Python and will ask you all sorts of questions (deferring to your wisdom). Of course, you could always just sit there, thinking that the README is just too much effort to read. CHAPTER 3 Interacting with Python 39 \u00bb \u00bb Locate the Python folder, such as C:\\Python36 in Windows, and open the Python.exe file directly. This option also opens a command-line session that uses the default settings, but you can do things like open it with increased privileges (for applications that require access to secured resources) or modify the executable file properties (to add command-line switches). No matter how you start Python at the command line, you eventually end up with a prompt similar to the one shown in Figure 3-1. (Your screen may look slightly different from the one shown in Figure 3-1 if you rely on a platform other than Windows, you\u2019re using IDLE instead of the command-line version of Python, your system is configured differently from mine, or you have a different version of Python.) This prompt tells you the Python version, the host operating system, and how to obtain additional information. Using the command line to your advantage This section will seem a little complicated at first, and you won\u2019t normally need this information when using the book. However, it\u2019s still good information, and you\u2019ll eventually need it. For now, you can browse the information so that you know what\u2019s available and then come back to it later when you really do need the information. To start Python at a command prompt, type Python and press Enter. However, that\u2019s not all you can do. You can also provide some additional information to change how Python works: \u00bb \u00bb Options: An option, or command-line switch, begins with a minus sign followed by one or more letters. For example, if you want to obtain help about Python, you type Python \u2013h and press Enter. You see additional information about how to work with Python at the command line. The options are described later in this section. FIGURE 3-1: The Python command prompt tells you a bit about the Python \u00adenvironment. 40 PART 1 Getting Started with Python \u00bb \u00bb Filename: Providing a filename as input tells Python to load that file and run it. You can run any of the example applications from the downloadable code by providing the name of the"}, {"filename": "Beginning Programming with Python.pdf", "text": "by one or more letters. For example, if you want to obtain help about Python, you type Python \u2013h and press Enter. You see additional information about how to work with Python at the command line. The options are described later in this section. FIGURE 3-1: The Python command prompt tells you a bit about the Python \u00adenvironment. 40 PART 1 Getting Started with Python \u00bb \u00bb Filename: Providing a filename as input tells Python to load that file and run it. You can run any of the example applications from the downloadable code by providing the name of the file containing the example as input. For example, say that you have an example named SayHello.py. To run this example, you type Python SayHello.py and press Enter. \u00bb \u00bb Arguments: An application can accept additional information as input to control how it runs. This additional information is called an argument. Don\u2019t worry too much about arguments right now \u2014 they appear later in the book. Most of the options won\u2019t make sense right now. They\u2019re here so that you can find them later when you need them (this is the most logical place to include them in the book). Reading through them will help you gain an understanding of what\u2019s available, but you can also skip this material until you need it later. Python uses case-sensitive options. For example, -s is a completely different option from -S. The Python options are \u00bb \u00bb -b: Add warnings to the output when your application uses certain Python features that include: str(bytes_instance), str(bytearray_instance), and comparing bytes or bytearray with str(). \u00bb \u00bb -bb: Add errors to the output when your application uses certain Python features that include: str(bytes_instance), str(bytearray_instance), and comparing bytes or bytearray with str(). \u00bb \u00bb -B: Don\u2019t write .py or .pyco files when performing a module import. \u00bb \u00bb -c cmd: Use the information provided by cmd to start a program. This option also tells Python to stop processing the rest of the information as options (it\u2019s treated as part of the command). \u00bb \u00bb -d: Start the debugger (used to locate errors in your application). \u00bb \u00bb -E: Ignore all the Python environment variables, such as PYTHONPATH, that are used to configure Python for use. \u00bb \u00bb -h: Display help about the options and basic environment variables onscreen. Python always exits after it performs this task without doing anything else so that you can see the help information. \u00bb \u00bb -i: Force Python to let you inspect the code interactively after running a script. It forces a prompt even if stdin (the standard input device) doesn\u2019t appear to be a terminal. \u00bb \u00bb -m mod: Run the library module specified by mod as a script. This option also tells Python to stop processing the rest of the information as options (the rest of the information is treated as part of the command). CHAPTER 3 Interacting with Python 41 \u00bb \u00bb -O: Optimize the generated bytecode slightly (makes it run"}, {"filename": "Beginning Programming with Python.pdf", "text": "else so that you can see the help information. \u00bb \u00bb -i: Force Python to let you inspect the code interactively after running a script. It forces a prompt even if stdin (the standard input device) doesn\u2019t appear to be a terminal. \u00bb \u00bb -m mod: Run the library module specified by mod as a script. This option also tells Python to stop processing the rest of the information as options (the rest of the information is treated as part of the command). CHAPTER 3 Interacting with Python 41 \u00bb \u00bb -O: Optimize the generated bytecode slightly (makes it run faster). \u00bb \u00bb -OO: Perform additional optimization by removing doc-strings. \u00bb \u00bb -q: Tell Python not to print the version and copyright messages on interactive startup. \u00bb \u00bb -s: Force Python not to add the user site directory to sys.path (a variable that tells Python where to find modules). \u00bb \u00bb -S: Don\u2019t run 'import site' on initialization. Using this option means that Python won\u2019t look for paths that may contain modules it needs. \u00bb \u00bb -u: Allow unbuffered binary input for the stdout (standard output) and stderr (standard error) devices. The stdin device is always buffered. \u00bb \u00bb -v: Place Python in verbose mode so that you can see all the import state- ments. Using this option multiple times increases the level of verbosity. \u00bb \u00bb -V: Display the Python version number and exit. \u00bb \u00bb --version: Display the Python version number and exit. \u00bb \u00bb -W arg: Modify the warning level so that Python displays more or fewer warnings. The valid arg values are \u2022 action \u2022 message \u2022 category \u2022 module \u2022 lineno \u00bb \u00bb -x: Skip the first line of a source code file, which allows the use of non-Unix forms of #!cmd. \u00bb \u00bb -X opt: Set an implementation-specific option. (The documentation for your version of Python discusses these options, if there are any.) Using Python environment variables to your advantage Environment variables are special settings that are part of the command line or terminal environment for your operating system. They serve to configure Python in a consistent manner. Environment variables perform many of the same tasks as do the options that you supply when you start Python, but you can make environ- ment variables permanent so that you can configure Python the same way every time you start it without having to manually supply the option. 42 PART 1 Getting Started with Python As with options, most of these environment variables won\u2019t make any sense right now. You can read through them to see what is available. You find some of the environment variables used later in the book. Feel free to skip the rest of this sec- tion and come back to it later when you need it. Most operating systems provide the means to set environment variables tempo- rarily, by configuring them during a particular session, or permanently, by con- figuring them as part of the operating system setup. Precisely how you"}, {"filename": "Beginning Programming with Python.pdf", "text": "the option. 42 PART 1 Getting Started with Python As with options, most of these environment variables won\u2019t make any sense right now. You can read through them to see what is available. You find some of the environment variables used later in the book. Feel free to skip the rest of this sec- tion and come back to it later when you need it. Most operating systems provide the means to set environment variables tempo- rarily, by configuring them during a particular session, or permanently, by con- figuring them as part of the operating system setup. Precisely how you perform this task depends on the operating system. For example, when working with Win- dows, you can use the Set command (see my blog post at http://blog.john muellerbooks.com/2014/02/24/using-the-set-command-to-your-advantage/ for details) or rely on a special Windows configuration feature (see my post at http://blog.johnmuellerbooks.com/2014/02/17/adding-a-location-to- the-windows-path/ for setting the Path environment variable as an example). Using environment variables makes sense when you need to configure Python the same way on a regular basis. The following list describes the Python environment variables: \u00bb \u00bb PYTHONCASEOK=x: Forces Python to ignore case when parsing import statements. This is a Windows-only environment variable. \u00bb \u00bb PYTHONDEBUG=x: Performs the same task as the -d option. \u00bb \u00bb PYTHONDONTWRITEBYTECODE=x: Performs the same task as the -B option. \u00bb \u00bb PYTHONFAULTHANDLER=x: Forces Python to dump the Python traceback (list of calls that led to an error) on fatal errors. \u00bb \u00bb PYTHONHASHSEED=arg: Determines the seed value used to generate hash values from various kinds of data. When this variable is set to random, Python uses a random value to seed the hashes of str, bytes, and datetime objects. The valid integer range is 0 to 4294967295. Use a specific seed value to obtain predictable hash values for testing purposes. \u00bb \u00bb PYTHONHOME=arg: Defines the default search path that Python uses to look for modules. \u00bb \u00bb PYTHONINSPECT=x: Performs the same task as the -i option. \u00bb \u00bb PYTHONIOENCODING=arg: Specifies the encoding[:errors] (such as utf-8) used for the stdin, stdout, and stderr devices. \u00bb \u00bb PYTHONNOUSERSITE: Performs the same task as the -s option. \u00bb \u00bb PYTHONOPTIMIZE=x: Performs the same task as the -O option. \u00bb \u00bb PYTHONPATH=arg: Provides a semicolon (;) separated list of directories to search for modules. This value is stored in the sys.path variable in Python. CHAPTER 3 Interacting with Python 43 \u00bb \u00bb PYTHONSTARTUP=arg: Defines the name of a file to execute when Python starts. There is no default value for this environment variable. \u00bb \u00bb PYTHONUNBUFFERED=x: Performs the same task as the -u option. \u00bb \u00bb PYTHONVERBOSE=x: Performs the same task as the -v option. \u00bb \u00bb PYTHONWARNINGS=arg: Performs the same task as the -W option. Typing a Command After you start the command-line version of Python, you can begin typing com- mands. Using commands makes it possible to perform tasks, test ideas that you have for writing your application, and discover more about Python. Using the command line lets you gain hands-on experience"}, {"filename": "Beginning Programming with Python.pdf", "text": "the name of a file to execute when Python starts. There is no default value for this environment variable. \u00bb \u00bb PYTHONUNBUFFERED=x: Performs the same task as the -u option. \u00bb \u00bb PYTHONVERBOSE=x: Performs the same task as the -v option. \u00bb \u00bb PYTHONWARNINGS=arg: Performs the same task as the -W option. Typing a Command After you start the command-line version of Python, you can begin typing com- mands. Using commands makes it possible to perform tasks, test ideas that you have for writing your application, and discover more about Python. Using the command line lets you gain hands-on experience with how Python actually works \u2014 details that could be hidden by an interactive IDE such as IDLE. The fol- lowing sections get you started using the command line. Telling the computer what to do Python, like every other programming language in existence, relies on commands. A command is simply a step in a procedure. In Chapter 1, you see how \u201cGet the bread and butter from the refrigerator\u201d is a step in a procedure for making toast. When working with Python, a command, such as print(), is simply the same thing: a step in a procedure. To tell the computer what to do, you issue one or more commands that Python understands. Python translates these commands into instructions that the com- puter understands, and then you see the result. A command such as print() can display the results onscreen so that you get an instant result. However, Python supports all sorts of commands, many of which don\u2019t display any results onscreen but still do something important. As the book progresses, you use commands to perform all sorts of tasks. Each of these tasks will help you accomplish a goal, just as the steps in a procedure do. When it seems as if all the Python commands become far too complex, simply remember to look at them as steps in a procedure. Even human procedures become complex at times, but if you take them one step at a time, you begin to see how they work. Python commands are the same way. Don\u2019t get overwhelmed by them; instead, look at them one at a time and focus on just that step in your procedure. 44 PART 1 Getting Started with Python Telling the computer you\u2019re done At some point, the procedure you create ends. When you make toast, the proce- dure ends when you finish buttering the toast. Computer procedures work pre- cisely the same way. They have a starting and an ending point. When typing commands, the ending point for a particular step is the Enter key. You press Enter to tell the computer that you\u2019re done typing the command. As the book progresses, you find that Python provides a number of ways to signify that a step, group of steps, or even an entire application is complete. No matter how the task is accom- plished, computer programs always have a distinct starting and stopping point. Seeing the result"}, {"filename": "Beginning Programming with Python.pdf", "text": "dure ends when you finish buttering the toast. Computer procedures work pre- cisely the same way. They have a starting and an ending point. When typing commands, the ending point for a particular step is the Enter key. You press Enter to tell the computer that you\u2019re done typing the command. As the book progresses, you find that Python provides a number of ways to signify that a step, group of steps, or even an entire application is complete. No matter how the task is accom- plished, computer programs always have a distinct starting and stopping point. Seeing the result You now know that a command is a step in a procedure and that each command has a distinct starting and ending point. In addition, groups of commands and entire applications also have a distinct starting and ending point. So, take a look at how this works. The following procedure helps you see the result of using a command: 1. Start a copy of the Python command-line version. You see a command prompt where you can type commands, as shown previously in Figure 3-1. 2. Type print(\u201cThis is a line of text.\u201d) at the command line. Notice that nothing happens. Yes, you typed a command, but you haven\u2019t signified that the command is complete. 3. Press Enter. The command is complete, so you see a result like the one shown in Figure 3-2. This exercise shows you how things work within Python. Each command that you type performs some task, but only after you tell Python that the command is com- plete in some way. The print() command displays data onscreen. In this case, FIGURE 3-2: Issuing \u00adcommands tells Python what to tell the computer to do. CHAPTER 3 Interacting with Python 45 you supplied text to display. Notice that the output shown in Figure 3-2 comes immediately after the command because this is an interactive environment \u2014 one in which you see the result of any given command immediately after Python per- forms it. Later, as you start creating applications, you notice that sometimes a result doesn\u2019t appear immediately because the application environment delays it. Even so, the command is executed by Python immediately after the application tells Python that the command is complete. PYTHON\u2019S CODING STYLES Most programming languages are dedicated to using just one coding style, which reduces flexibility for the programmer. However, Python is different. You can use a number of coding styles to achieve differing effects with Python. The four commonly used Python coding styles are \u2022 Functional: Every statement is a kind of math equation. This style lends itself well to use in parallel processing activities. \u2022 Imperative: Computations occur as changes to program state. This style is most used for manipulating data structures. \u2022 Object-oriented: This is the style commonly used with other languages to simplify the coding environment by using objects to model the real world. Python doesn\u2019t fully implement this coding style because it doesn\u2019t support features like data hiding, but"}, {"filename": "Beginning Programming with Python.pdf", "text": "can use a number of coding styles to achieve differing effects with Python. The four commonly used Python coding styles are \u2022 Functional: Every statement is a kind of math equation. This style lends itself well to use in parallel processing activities. \u2022 Imperative: Computations occur as changes to program state. This style is most used for manipulating data structures. \u2022 Object-oriented: This is the style commonly used with other languages to simplify the coding environment by using objects to model the real world. Python doesn\u2019t fully implement this coding style because it doesn\u2019t support features like data hiding, but you can still use this approach to a significant degree. You see this style used later in the book. \u2022 Procedural: All the code you\u2019ve written so far (and much of the initial code in this book) is procedural, meaning that tasks proceed a step at a time. This style is most used for iteration, sequencing, selection, and modularization. It\u2019s the simplest form of coding you can use. Even though this book doesn\u2019t cover all these coding styles (and others that Python sup- ports), it\u2019s useful to know that you aren\u2019t trapped using a particular coding style. Because Python supports multiple coding styles and you can mix and match those styles in a single application, you have the advantage of being able to use Python in the manner that works best for a particular need. You can read more about the coding styles at https://blog.newrelic.com/2015/04/01/python-programming-styles/. 46 PART 1 Getting Started with Python Using Help Python is a computer language, not a human language. As a result, you won\u2019t speak it fluently at first. If you think about it for a moment, it makes sense that you won\u2019t speak Python fluently (and as with most human languages, you won\u2019t know every command even after you do become fluent). Having to discover Python commands a little at a time is the same thing that happens when you learn to speak another human language. If you normally speak English and try to say something in German, you find that you must have some sort of guide to help you along. Otherwise, anything you say is gibberish and people will look at you quite oddly. Even if you manage to say something that makes sense, it may not be what you want. You might go to a restaurant and order hot hubcaps for dinner when what you really wanted was a steak. Likewise, when you try to speak Python, you need a guide to help you. Fortunately, Python is quite accommodating and provides immediate help to keep you from ordering something you really don\u2019t want. The help provided inside Python works at two levels: \u00bb \u00bb Help mode, in which you can browse the available commands \u00bb \u00bb Direct help, in which you ask about a specific command There isn\u2019t a correct way to use help \u2014 just the method that works best for you at a particular time. The following sections describe how"}, {"filename": "Beginning Programming with Python.pdf", "text": "when what you really wanted was a steak. Likewise, when you try to speak Python, you need a guide to help you. Fortunately, Python is quite accommodating and provides immediate help to keep you from ordering something you really don\u2019t want. The help provided inside Python works at two levels: \u00bb \u00bb Help mode, in which you can browse the available commands \u00bb \u00bb Direct help, in which you ask about a specific command There isn\u2019t a correct way to use help \u2014 just the method that works best for you at a particular time. The following sections describe how to obtain help. Getting into help mode When you first start Python, you see a display similar to the one shown previously in Figure 3-1. Notice that Python provides you with four commands at the outset (which is actually your first piece of help information): \u00bb \u00bb help \u00bb \u00bb copyright \u00bb \u00bb credits \u00bb \u00bb license All four commands provide you with help, of a sort, about Python. For example, the copyright() command tells you about who holds the right to copy, license, or otherwise distribute Python. The credits() command tells you who put Python together. The license() command describes the usage agreement between you and the copyright holder. However, the command you most want to know about is simply help(). CHAPTER 3 Interacting with Python 47 To enter help mode, type help() and press Enter. Notice that you must include the parentheses after the command even though they don\u2019t appear in the help text. Every Python command has parentheses associated with it. After you enter this command, Python goes into help mode and you see a display similar to the one shown in Figure 3-3. You can always tell that you\u2019re in help mode by the help> prompt that you see in the Python window. As long as you see the help> prompt, you know that you\u2019re in help mode. Asking for help To obtain help, you need to know what question to ask. The initial help message that you see when you go into help mode (refer to Figure 3-3) provides some help- ful tips about the kinds of questions you can ask. If you want to explore Python, the four basic topics are \u00bb \u00bb modules \u00bb \u00bb keywords \u00bb \u00bb symbols \u00bb \u00bb topics The first two topics won\u2019t tell you much for now. You won\u2019t need the modules topic until Chapter 10. The keywords topic will begin proving useful in Chapter 4. However, the symbols and topics keywords are already useful because they help you understand where to begin your Python adventure. When you type symbols and press Enter, you see a list of symbols used in Python. To see what topics are available, type topics and press Enter. You see a list of topics similar to those shown in Figure 3-4. FIGURE 3-3: You ask Python about other commands in help mode. 48 PART 1 Getting Started with Python Chapter 7 begins the"}, {"filename": "Beginning Programming with Python.pdf", "text": "won\u2019t need the modules topic until Chapter 10. The keywords topic will begin proving useful in Chapter 4. However, the symbols and topics keywords are already useful because they help you understand where to begin your Python adventure. When you type symbols and press Enter, you see a list of symbols used in Python. To see what topics are available, type topics and press Enter. You see a list of topics similar to those shown in Figure 3-4. FIGURE 3-3: You ask Python about other commands in help mode. 48 PART 1 Getting Started with Python Chapter 7 begins the discussion of symbols when you explore the use of operators in Python. When you see a topic that you like, such as FUNCTIONS, simply type that topic and press Enter. To see how this works, type FUNCTIONS and press Enter (you must type the word in uppercase \u2014 don\u2019t worry, Python won\u2019t think you\u2019re shouting). You see help information similar to that shown in Figure 3-5. As you work through examples in the book, you use commands that look interest- ing, and you might want more information about them. For example, in the \u201cSee- ing the result\u201d section of this chapter, you use the print() command. To see more information about the print() command, type print and press Enter (notice that you don\u2019t include the parentheses this time because you\u2019re requesting help about print(), not actually using the command). Figure 3-6 shows typical help information for the print() command. FIGURE 3-4: The topics help topic provides you with a starting point for your Python adventure. FIGURE 3-5: You must use uppercase when requesting topic information. CHAPTER 3 Interacting with Python 49 Unfortunately, reading the help information probably doesn\u2019t help much yet because you need to know more about Python. However, you can ask for more information. For example, you might wonder what sys.stdout means \u2014 and the help topic certainly doesn\u2019t tell you anything about it. Type sys.stdout and press Enter. You see the help information shown in Figure 3-7. You may still not find the information as helpful as you need, but at least you know a little more. In this case, help has a lot to say and it can\u2019t all fit on one screen. Notice the following entry at the bottom of the screen: -- More -- To see the additional information, press the spacebar. The next page of help appears. As you read to the bottom of each page of help, you can press the space- bar to see the next page. The pages don\u2019t go away \u2014 you can scroll up to see pre- vious material. Leaving help mode At some point, you need to leave help mode to perform useful work. All you have to do is press Enter without typing anything. When you press Enter, you see a message about leaving help, and then the prompt changes to the standard Python prompt, as shown in Figure 3-8. FIGURE 3-6: Request command help information"}, {"filename": "Beginning Programming with Python.pdf", "text": "page of help appears. As you read to the bottom of each page of help, you can press the space- bar to see the next page. The pages don\u2019t go away \u2014 you can scroll up to see pre- vious material. Leaving help mode At some point, you need to leave help mode to perform useful work. All you have to do is press Enter without typing anything. When you press Enter, you see a message about leaving help, and then the prompt changes to the standard Python prompt, as shown in Figure 3-8. FIGURE 3-6: Request command help information by typing the command using whatever case it actually uses. FIGURE 3-7: You can ask for help on the help you receive. 50 PART 1 Getting Started with Python Obtaining help directly Entering help mode isn\u2019t necessary unless you want to browse, which is always a good idea, or unless you don\u2019t actually know what you need to find. If you have a good idea of what you need, all you need to do is ask for help directly (a really nice thing for Python to do). So, instead of fiddling with help mode, you simply type the word help, followed by a left parenthesis and single quote, whatever you want to find, another single quote, and the right parenthesis. For example, if you want to know more about the print() command, you type help(\u2018print\u2019) and press Enter. Figure 3-9 shows typical output when you access help this way. You can browse at the Python prompt, too. For example, when you type help(\u2018topics\u2019) and press Enter, you see a list of topics like the one that appears in Figure 3-10. You can compare this list with the one shown in Figure 3-4. The two lists are identical, even though you typed one while in help mode and the other while at the Python prompt. FIGURE 3-8: Exit help mode by pressing Enter without typing anything. FIGURE 3-9: Python lets you obtain help whenever you need it without leaving the Python prompt. FIGURE 3-10: You can browse at the Python prompt if you really want to. CHAPTER 3 Interacting with Python 51 You might wonder why Python has a help mode at all if you can get the same results at the Python prompt. The answer is convenience. It\u2019s easier to browse in the help mode. In addition, even though you don\u2019t do a lot of extra typing at the prompt, you do perform less typing while in help mode. Help mode also provides additional helps, such as by listing commands that you can type, as shown previ- ously in Figure 3-3. So you have all kinds of good reasons to enter help mode when you plan to ask Python a lot of help questions. No matter where you ask for help, you need to observe the correct capitalization of help topics. For example, if you want general information about functions, you must type help(\u2018FUNCTIONS\u2019) and not help('Functions') or help('functions'). When"}, {"filename": "Beginning Programming with Python.pdf", "text": "don\u2019t do a lot of extra typing at the prompt, you do perform less typing while in help mode. Help mode also provides additional helps, such as by listing commands that you can type, as shown previ- ously in Figure 3-3. So you have all kinds of good reasons to enter help mode when you plan to ask Python a lot of help questions. No matter where you ask for help, you need to observe the correct capitalization of help topics. For example, if you want general information about functions, you must type help(\u2018FUNCTIONS\u2019) and not help('Functions') or help('functions'). When you use the wrong capitalization, Python will tell you that it doesn\u2019t know what you mean or that it couldn\u2019t find the help topic. It won\u2019t know to tell you that you used the wrong capitalization. Someday computers will know what you meant to type, rather than what you did type, but that hasn\u2019t happened yet. Closing the Command Line Eventually, you want to leave Python. Yes, it\u2019s hard to believe, but people have other things to do besides playing with Python all day long. You have two standard methods for leaving Python and a whole bunch of nonstandard methods. Gener- ally, you want to use one of the standard methods to ensure that Python behaves as you expect it to, but the nonstandard methods work just fine when you simply want to play around with Python and not perform any productive work. The two standard methods are \u00bb \u00bb quit() \u00bb \u00bb exit() Either of these methods will close the interactive version of Python. The shell (the Python program) is designed to allow either command. Both of these commands can accept an optional argument. For example, you can type quit(5) or exit(5) and press Enter to exit the shell. The numeric argument sets the command prompt\u2019s ERRORLEVEL environment variable, which you can then intercept at the command line or as part of a batch file. Standard practice is to simply use quit() or exit() when nothing has gone wrong with the applica- tion. To see this way of exiting at work, you must 52 PART 1 Getting Started with Python 1. Open a command prompt or terminal. You see a prompt. 2. Type Python and press Enter to start Python. You see the Python prompt. 3. Type quit(5) and press Enter. You see the prompt again. 4. Type echo %ERRORLEVEL% and press Enter. You see the error code, as shown in Figure 3-11. When working with platforms other than Windows, you may need to type something other than echo %ERRORLEVEL%. For example, when working with a bash script, you type echo $ instead. One of the most common nonstandard exit methods is to simply click the com- mand prompt\u2019s or terminal\u2019s Close button. Using this approach means that your application may not have time to perform any required cleanup, which can result in odd behaviors. It\u2019s always better to close Python using an expected approach if you\u2019ve been doing"}, {"filename": "Beginning Programming with Python.pdf", "text": "%ERRORLEVEL% and press Enter. You see the error code, as shown in Figure 3-11. When working with platforms other than Windows, you may need to type something other than echo %ERRORLEVEL%. For example, when working with a bash script, you type echo $ instead. One of the most common nonstandard exit methods is to simply click the com- mand prompt\u2019s or terminal\u2019s Close button. Using this approach means that your application may not have time to perform any required cleanup, which can result in odd behaviors. It\u2019s always better to close Python using an expected approach if you\u2019ve been doing anything more than simply browsing. You also have access to a number of other commands for closing the command prompt when needed. In most cases, you won\u2019t need these special commands, so you can skip the rest of this section if desired. When you use quit() or exit(), Python performs a number of tasks to ensure that everything is neat and tidy before the session ends. If you suspect that a ses- sion might not end properly anyway, you can always rely on one of these two commands to close the command prompt: \u00bb \u00bb sys.exit() \u00bb \u00bb os._exit() FIGURE 3-11: Add an error code when needed to tell others the Python exit status. CHAPTER 3 Interacting with Python 53 Both of these commands are used in emergency situations only. The first, sys. exit(), provides special error-handling features that you discover in Chapter 9. The second, os._exit(), exits Python without performing any of the usual cleanup tasks. In both cases, you must import the required module, either sys or os, before you can use the associated command. Consequently, to use the sys. exit() command, you actually use this code: import sys sys.exit() You must provide an error code when using os._exit() because this command is used only when an extreme error has occurred. The call to this command will fail if you don\u2019t provide an error code. To use the os._exit() command, you actually use this code (where the error code is 5): import os os._exit(5) Chapter 10 discusses importing modules in detail. For now, just know that these two commands are for special uses only and you won\u2019t normally use them in an application. CHAPTER 4 Writing Your First Application 55 Chapter 4 Writing Your First Application M any people view application development as some sort of magic prac- ticed by wizards called geeks who wave their keyboard to produce soft- ware both great and small. However, the truth is a lot more mundane. Application development follows a number of processes. It\u2019s more than a strict procedure, but is most definitely not magic of any sort. As Arthur C. Clark once noted, \u201cAny sufficiently advanced technology is indistinguishable from magic.\u201d This chapter is all about removing the magic from the picture and introducing you to the technology. By the time you\u2019re finished with this chapter, you too will be able to develop a simple application (and you won\u2019t use"}, {"filename": "Beginning Programming with Python.pdf", "text": "ticed by wizards called geeks who wave their keyboard to produce soft- ware both great and small. However, the truth is a lot more mundane. Application development follows a number of processes. It\u2019s more than a strict procedure, but is most definitely not magic of any sort. As Arthur C. Clark once noted, \u201cAny sufficiently advanced technology is indistinguishable from magic.\u201d This chapter is all about removing the magic from the picture and introducing you to the technology. By the time you\u2019re finished with this chapter, you too will be able to develop a simple application (and you won\u2019t use magic to do it). As with any other task, people use tools to write applications. In the case of Python, you don\u2019t have to use a tool, but using a tool makes the task so much easier that you really will want to use one. In this chapter, you use a commonly available Integrated Development Environment (IDE) named Jupyter Notebook that appears as part of the Anaconda tool collection. An IDE is a special kind of application that makes writing, testing, and debugging code significantly easier. In the previous chapter, you use the command-line tool to play around with IN THIS CHAPTER \u00bb \u00bb Using Jupyter Notebook in Anaconda as an IDE \u00bb \u00bb Writing and running the first application \u00bb \u00bb Formatting your application code \u00bb \u00bb Using comments effectively \u00bb \u00bb Managing applications using Anaconda 56 PART 1 Getting Started with Python Python a little. However, the Anaconda offerings go further than the \u00adcommand-line tool and enables you to write applications with greater ease. A vast number of other tools are available for you to use when writing Python applications. This book doesn\u2019t tell you much about them because Anaconda per- forms every task needed and it\u2019s readily available free of charge. However, as your skills increase, you might find the features in other tools such as Komodo Edit (http://www.activestate.com/komodo-edit/downloads) more to your liking. You can find a great list of these tools at https://wiki.python.org/moin/ IntegratedDevelopmentEnvironments. Understanding Why IDEs Are Important A good question to ask is, why do you need an IDE to work with Python if the command-line tool works fine? For that matter, Python actually comes with a \u00adlimited IDE called Integrated DeveLopement Environment (IDLE). Most people probably question the need for anything more during the learning process and possibly to develop full-fledged applications. Unfortunately, the tools that come with Python are interesting and even helpful in getting started, but they won\u2019t help you create useful applications with any ease. If you choose to work with Python long term, you really need a better tool for the reasons described in the following sections. Creating better code A good IDE contains a certain amount of intelligence. For example, the IDE can sug- gest alternatives when you type the incorrect keyword, or it can tell you that a cer- tain line of code simply won\u2019t work as written. The more intelligence that an IDE contains, the less"}, {"filename": "Beginning Programming with Python.pdf", "text": "the tools that come with Python are interesting and even helpful in getting started, but they won\u2019t help you create useful applications with any ease. If you choose to work with Python long term, you really need a better tool for the reasons described in the following sections. Creating better code A good IDE contains a certain amount of intelligence. For example, the IDE can sug- gest alternatives when you type the incorrect keyword, or it can tell you that a cer- tain line of code simply won\u2019t work as written. The more intelligence that an IDE contains, the less hard you have to work to write better code. Writing better code is essential because no one wants to spend hours looking for errors, called bugs. IDEs vary greatly in the level and kind of intelligence they provide, which is why so many IDEs exist. You may find the level of help obtained from one IDE to be insuf- ficient to your needs, but another IDE hovers over you like a mother hen. Every developer has different needs and, therefore, different IDE requirements. The point is to obtain an IDE that helps you write clean, efficient code quickly and easily. Debugging functionality Finding bugs (errors) in your code is a process called debugging. Even the most expert developer in the world spends time debugging. Writing perfect code on the first pass is nearly impossible. When you do, it\u2019s cause for celebration because it CHAPTER 4 Writing Your First Application 57 won\u2019t happen often. Consequently, the debugging capabilities of your IDE are critical. Unfortunately, the debugging capabilities of the native Python tools are almost nonexistent. If you spend any time at all debugging, you quickly find the native tools annoying because of what they don\u2019t tell you about your code. The best IDEs double as training tools. Given enough features, an IDE can help you explore code written by true experts. Tracing through applications is a time-honored method of learning new skills and honing the skills you already \u00adpossess. A seemingly small advance in knowledge can often become a huge savings in time later. When looking for an IDE, don\u2019t just look at debugging features as a means to remove errors \u2014 see them also as a means to learn new things about Python. Defining why notebooks are useful Most IDEs look like fancy text editors, and that\u2019s precisely what they are. Yes, you get all sorts of intelligent features, hints, tips, code coloring, and so on, but at the end of the day, they\u2019re all text editors. There\u2019s nothing wrong with text editors, and this chapter isn\u2019t telling you anything of the sort. However, given that Python developers often focus on scientific applications that require something better than pure text presentation, using notebooks instead can be helpful. A notebook differs from a text editor in that it focuses on a technique advanced by Stanford computer scientist Donald Knuth called literate programming. You use literate programming to create a kind of"}, {"filename": "Beginning Programming with Python.pdf", "text": "are. Yes, you get all sorts of intelligent features, hints, tips, code coloring, and so on, but at the end of the day, they\u2019re all text editors. There\u2019s nothing wrong with text editors, and this chapter isn\u2019t telling you anything of the sort. However, given that Python developers often focus on scientific applications that require something better than pure text presentation, using notebooks instead can be helpful. A notebook differs from a text editor in that it focuses on a technique advanced by Stanford computer scientist Donald Knuth called literate programming. You use literate programming to create a kind of presentation of code, notes, math equa- tions, and graphics. In short, you wind up with a scientist\u2019s notebook full of everything needed to understand the code completely. You commonly see literate programming techniques used in high-priced packages such as Mathematica and MATLAB. Notebook development excels at \u00bb \u00bb Demonstration \u00bb \u00bb Collaboration \u00bb \u00bb Research \u00bb \u00bb Teaching objectives \u00bb \u00bb Presentation This book uses the Anaconda tool collection because it provides you with a great Python coding experience, but also helps you discover the enormous potential of literate programming techniques. If you spend a lot of time performing scientific tasks, Anaconda and products like it are essential. In addition, Anaconda is free, so you get the benefits of the literate programming style without the cost of other packages. 58 PART 1 Getting Started with Python Obtaining Your Copy of Anaconda As mentioned in the previous section, Anaconda doesn\u2019t come with your Python installation. You can follow the essential book examples using IDLE if you\u2019d rather, but you really do want to try Anaconda if possible. With this in mind, the following sections help you obtain and install Anaconda on the three major plat- forms supported by this book. Obtaining Analytics Anaconda The basic Anaconda package is a free download that you obtain at https://store. continuum.io/cshop/anaconda/. Simply click Download Anaconda to obtain access to the free product. You do need to provide an email address to get a copy of Anaconda. After you put in your email address, you go to another page, where you can choose your platform and the installer for that platform. Anaconda sup- ports the following platforms: \u00bb \u00bb Windows 32-bit and 64-bit (the installer may offer you only the 64-bit or 32-bit version, depending on which version of Windows it detects) \u00bb \u00bb Linux 32-bit and 64-bit \u00bb \u00bb Mac OS X 64-bit This book uses Anaconda version 4.4.0, which supports Python 3.6.2. If you don\u2019t use this version of Anaconda, you may find that some examples don\u2019t work well and that what you see on your screen doesn\u2019t match what you see in the book, even if you\u2019re working with Windows. The screenshots in this book are taken using a Windows 64-bit system, but they should be very close to what you see on other platforms when you use Anaconda 4.4.0. You can obtain Anaconda with older versions of Python. If you want to"}, {"filename": "Beginning Programming with Python.pdf", "text": "and 64-bit \u00bb \u00bb Mac OS X 64-bit This book uses Anaconda version 4.4.0, which supports Python 3.6.2. If you don\u2019t use this version of Anaconda, you may find that some examples don\u2019t work well and that what you see on your screen doesn\u2019t match what you see in the book, even if you\u2019re working with Windows. The screenshots in this book are taken using a Windows 64-bit system, but they should be very close to what you see on other platforms when you use Anaconda 4.4.0. You can obtain Anaconda with older versions of Python. If you want to use an older version of Python, click the installer archive link near the bottom of the page. You should use an older version of Python only when you have a pressing need to do so. The Miniconda installer can potentially save time by limiting the number of fea- tures you install. However, trying to figure out precisely which packages you do need is an error-prone and time-consuming process. In general, you want to perform a full installation to ensure that you have everything needed for your projects. Even a full install doesn\u2019t require much time or effort to download and install on most systems. The free product is all you need for this book. However, when you look on the site, you see that many other add-on products are available. These products can help you create robust applications. For example, when you add Accelerate to the mix, CHAPTER 4 Writing Your First Application 59 you obtain the capability to perform multicore and GPU-enabled operations. The use of these add-on products is outside the scope of this book, but the Anaconda site gives you details on using them. Installing Anaconda on Linux You have to use the command line to install Anaconda on Linux; you\u2019re given no graphical installation option. Before you can perform the install, you must down- load a copy of the Linux software from the Continuum Analytics site. You can find the required download information in the \u201cObtaining Analytics Anaconda\u201d \u00adsection, earlier in this chapter. The following procedure should work fine on any Linux system, whether you use the 32-bit or 64-bit version of Anaconda: 1. Open a copy of Terminal. The Terminal window appears. 2. Change directories to the downloaded copy of Anaconda on your system. The name of this file varies, but normally it appears as Anaconda3-4.4.0- Linux-x86.sh for 32-bit systems and Anaconda3-4.4.0-Linux-x86_64.sh for 64-bit systems. The version number is embedded as part of the filename. In this case, the filename refers to version 4.4.0, which is the version used for this book. If you use some other version, you may experience problems with the source code and need to make adjustments when working with it. 3. Type bash Anaconda3-4.4.0-Linux-x86.sh (for the 32-bit version) or bash Anaconda3-4.4.0-Linux-x86_64.sh (for the 64-bit version) and press Enter. An installation wizard starts that asks you to accept the licensing terms for using Anaconda. 4. Read the licensing agreement and accept"}, {"filename": "Beginning Programming with Python.pdf", "text": "Anaconda3-4.4.0- Linux-x86.sh for 32-bit systems and Anaconda3-4.4.0-Linux-x86_64.sh for 64-bit systems. The version number is embedded as part of the filename. In this case, the filename refers to version 4.4.0, which is the version used for this book. If you use some other version, you may experience problems with the source code and need to make adjustments when working with it. 3. Type bash Anaconda3-4.4.0-Linux-x86.sh (for the 32-bit version) or bash Anaconda3-4.4.0-Linux-x86_64.sh (for the 64-bit version) and press Enter. An installation wizard starts that asks you to accept the licensing terms for using Anaconda. 4. Read the licensing agreement and accept the terms using the method required for your version of Linux. The wizard asks you to provide an installation location for Anaconda. The book assumes that you use the default location of ~/anaconda. If you choose some other location, you may have to modify some procedures later in the book to work with your setup. 5. Provide an installation location (if necessary) and press Enter (or click Next). The application extraction process begins. After the extraction is complete, you see a completion message. 6. Add the installation path to your PATH statement using the method required for your version of Linux. You\u2019re ready to begin using Anaconda. 60 PART 1 Getting Started with Python Installing Anaconda on MacOS The Mac OS X installation comes in only one form: 64-bit. Before you can perform the install, you must download a copy of the Mac software from the Continuum Analytics site. You can find the required download information in the \u201cObtaining Analytics Anaconda\u201d section, earlier in this chapter. The installation files come in two forms. The first depends on a graphical installer; the second relies on the command line. The command-line version works much like the Linux version described in the \u201cUsing the standard Linux installation\u201d section of Chapter 2. The following steps help you install Anaconda 64-bit on a Mac system using the graphical installer: 1. Locate the downloaded copy of Anaconda on your system. The name of this file varies, but normally it appears as Anaconda3-4.4.0- MacOSX-x86_64.pkg. The version number is embedded as part of the filename. In this case, the filename refers to version 4.4.0, which is the version used for this book. If you use some other version, you may experience problems with the source code and need to make adjustments when working with it. 2. Double-click the installation file. An introduction dialog box appears. 3. Click Continue. The wizard asks whether you want to review the Read Me materials. You can read these materials later. For now, you can safely skip the information. 4. Click Continue. The wizard displays a licensing agreement. Be sure to read through the licensing agreement so that you know the terms of usage. 5. Click I Agree if you agree to the licensing agreement. The wizard asks you to provide a destination for the installation. The destina- tion controls whether the installation is for an individual user or a group. You may"}, {"filename": "Beginning Programming with Python.pdf", "text": "installation file. An introduction dialog box appears. 3. Click Continue. The wizard asks whether you want to review the Read Me materials. You can read these materials later. For now, you can safely skip the information. 4. Click Continue. The wizard displays a licensing agreement. Be sure to read through the licensing agreement so that you know the terms of usage. 5. Click I Agree if you agree to the licensing agreement. The wizard asks you to provide a destination for the installation. The destina- tion controls whether the installation is for an individual user or a group. You may see an error message stating that you can\u2019t install Anaconda on the system. The error message occurs because of a bug in the installer and has nothing to do with your system. To get rid of the error message, choose the Install Only for Me option. You can\u2019t install Anaconda for a group of users on a Mac system. 6. Click Continue. The installer displays a dialog box containing options for changing the installa- tion type. Click Change Install Location if you want to modify where Anaconda is installed on your system. (The book assumes that you use the default path CHAPTER 4 Writing Your First Application 61 of ~/anaconda.) Click Customize if you want to modify how the installer works. For example, you can choose not to add Anaconda to your PATH statement. However, the book assumes that you have chosen the default install options, and no good reason exists to change them unless you have another copy of Python 3.6.2 installed somewhere else. 7. Click Install. The installation begins. A progress bar tells you how the installation process is progressing. When the installation is complete, you see a completion dialog box. 8. Click Continue. You\u2019re ready to begin using Anaconda. Installing Anaconda on Windows Anaconda comes with a graphical installation application for Windows, so getting a good install means using a wizard, as you would for any other installation. Of course, you need a copy of the installation file before you begin, and you can find the required download information in the \u201cObtaining Analytics Anaconda\u201d \u00adsection, earlier in this chapter. The following procedure (which can require a while to complete) should work fine on any Windows system, whether you use the 32-bit or the 64-bit version of Anaconda: 1. Locate the downloaded copy of Anaconda on your system. The name of this file varies, but normally it appears as Anaconda3-4.4.0- Windows-x86.exe for 32-bit systems and Anaconda3-4.4.0-Windows-x86_ 64.exe for 64-bit systems. The version number is embedded as part of the filename. In this case, the filename refers to version 4.4.0, which is the version used for this book. If you use some other version, you may experience problems with the source code and need to make adjustments when working with it. 2. Double-click the installation file. (You may see an Open File \u2013 Security Warning dialog box that asks whether you want to run this file. Click Run if"}, {"filename": "Beginning Programming with Python.pdf", "text": "The name of this file varies, but normally it appears as Anaconda3-4.4.0- Windows-x86.exe for 32-bit systems and Anaconda3-4.4.0-Windows-x86_ 64.exe for 64-bit systems. The version number is embedded as part of the filename. In this case, the filename refers to version 4.4.0, which is the version used for this book. If you use some other version, you may experience problems with the source code and need to make adjustments when working with it. 2. Double-click the installation file. (You may see an Open File \u2013 Security Warning dialog box that asks whether you want to run this file. Click Run if you see this dialog box pop up.) You see an Anaconda3 4.4.0 Setup dialog box similar to the one shown in Figure 4-1. The exact dialog box that you see depends on which version of the Anaconda installation program you download. If you have a 64-bit operating system, using the 64-bit version of Anaconda is always best so that you obtain the best possible performance. This first dialog box tells you when you have the 64-bit version of the product. 62 PART 1 Getting Started with Python 3. Click Next. The wizard displays a licensing agreement. Be sure to read through the licensing agreement so that you know the terms of usage. 4. Click I Agree if you agree to the licensing agreement. You\u2019re asked what sort of installation type to perform, as shown in Figure 4-2. In most cases, you want to install the product just for yourself. The exception is if you have multiple people using your system and they all need access to Anaconda. FIGURE 4-1: The setup process begins by telling you whether you have the 64-bit version. FIGURE 4-2: Tell the wizard how to install Anaconda on your system. CHAPTER 4 Writing Your First Application 63 5. Choose one of the installation types and then click Next. The wizard asks where to install Anaconda on disk, as shown in Figure 4-3. The book assumes that you use the default location. If you choose some other location, you may have to modify some procedures later in the book to work with your setup. 6. Choose an installation location (if necessary) and then click Next. You see the Advanced Installation Options, shown in Figure 4-4. These options are selected by default, and no good reason exists to change them in most cases. You might need to change them if Anaconda won\u2019t provide your default Python 3.6 (or Python 2.7) setup. However, the book assumes that you\u2019ve set up Anaconda using the default options. FIGURE 4-3: Specify an installation location. FIGURE 4-4: Configure the advanced installation options. 64 PART 1 Getting Started with Python 7. Change the advanced installation options (if necessary) and then click Install. You see an Installing dialog box with a progress bar. The installation process can take a few minutes, so get yourself a cup of coffee and read the comics for a while. When the installation process is over, you see a Next"}, {"filename": "Beginning Programming with Python.pdf", "text": "them if Anaconda won\u2019t provide your default Python 3.6 (or Python 2.7) setup. However, the book assumes that you\u2019ve set up Anaconda using the default options. FIGURE 4-3: Specify an installation location. FIGURE 4-4: Configure the advanced installation options. 64 PART 1 Getting Started with Python 7. Change the advanced installation options (if necessary) and then click Install. You see an Installing dialog box with a progress bar. The installation process can take a few minutes, so get yourself a cup of coffee and read the comics for a while. When the installation process is over, you see a Next button enabled. 8. Click Next. The wizard tells you that the installation is complete. 9. Click Finish. You\u2019re ready to begin using Anaconda. Downloading the Datasets and Example Code This book is about using Python to perform basic programming tasks. Of course, you can spend all your time creating the example code from scratch, debugging it, and only then discovering how it relates to discovering the wonders of Python, or you can take the easy way and download the prewritten code from the Dummies site as described in the book\u2019s Introduction so that you can get right to work. The following sections show how to work with Jupyter Notebook, the name of the Anaconda IDE. These sections emphasize the capability to manage application code, including importing the downloadable source and exporting your amazing applications to show friends. Using Jupyter Notebook To make working with the code in this book easier, you use Jupyter Notebook. This interface lets you easily create Python notebook files that can contain any number of examples, each of which can run individually. The program runs in your browser, so which platform you use for development doesn\u2019t matter; as long as it has a browser, you should be okay. Starting Jupyter Notebook Most platforms provide an icon to access Jupyter Notebook. Just click this icon to access Jupyter Notebook. For example, on a Windows system, you choose Start \u27aa All Programs \u27aa Anaconda 3 \u27aa Jupyter Notebook. Figure 4-5 shows how the interface looks when viewed in a Firefox browser. The precise appearance on your system depends on the browser you use and the kind of platform you have installed. CHAPTER 4 Writing Your First Application 65 Stopping the Jupyter Notebook server No matter how you start Jupyter Notebook (or just Notebook, as it appears in the remainder of the book), the system generally opens a command prompt or termi- nal window to host Jupyter Notebook. This window contains a server that makes the application work. After you close the browser window when a session is com- plete, select the server window and press Ctrl+C or Ctrl+Break to stop the server. Defining the code repository The code you create and use in this book will reside in a repository on your hard drive. Think of a repository as a kind of filing cabinet where you put your code. Notebook opens a drawer, takes out the folder, and"}, {"filename": "Beginning Programming with Python.pdf", "text": "remainder of the book), the system generally opens a command prompt or termi- nal window to host Jupyter Notebook. This window contains a server that makes the application work. After you close the browser window when a session is com- plete, select the server window and press Ctrl+C or Ctrl+Break to stop the server. Defining the code repository The code you create and use in this book will reside in a repository on your hard drive. Think of a repository as a kind of filing cabinet where you put your code. Notebook opens a drawer, takes out the folder, and shows the code to you. You can modify it, run individual examples within the folder, add new examples, and sim- ply interact with your code in a natural manner. The following sections get you started with Notebook so that you can see how this whole repository concept works. Defining the book\u2019s folder It pays to organize your files so that you can access them more easily later. This book keeps its files in the BPPD (Beginning Programming with Python For Dummies) folder. Use these steps within Notebook to create a new folder: 1. Choose New \u27aa Folder. Notebook creates a new folder named Untitled Folder, as shown in Figure 4-6. The file appears in alphanumeric order, so you may not initially see it. You must scroll down to the correct location. FIGURE 4-5: Jupyter Notebook provides an easy method to create machine learning examples. 66 PART 1 Getting Started with Python 2. Select the box next to the Untitled Folder entry. 3. Click Rename at the top of the page. You see a Rename Directory dialog box like the one shown in Figure 4-7. 4. Type BPPD and click Rename. Notebook changes the name of the folder for you. 5. Click the new BPPD entry in the list. Notebook changes the location to the BPPD folder in which you perform tasks related to the exercises in this book. FIGURE 4-6: New folders appear with a name of Untitled Folder. FIGURE 4-7: Rename the folder so that you remember the kinds of entries it contains. CHAPTER 4 Writing Your First Application 67 Creating a new notebook Every new notebook is like a file folder. You can place individual examples within the file folder, just as you would sheets of paper into a physical file folder. Each example appears in a cell. You can put other sorts of things in the file folder, too, but you see how these things work as the book progresses. Use these steps to cre- ate a new notebook: 1. Click New \u27aa Python 3. A new tab opens in the browser with the new notebook, as shown in Figure 4-8. Notice that the notebook contains a cell and that Notebook has highlighted the cell so that you can begin typing code in it. The title of the notebook is Untitled right now. That\u2019s not a particularly helpful title, so you need to change it. 2. Click"}, {"filename": "Beginning Programming with Python.pdf", "text": "You can put other sorts of things in the file folder, too, but you see how these things work as the book progresses. Use these steps to cre- ate a new notebook: 1. Click New \u27aa Python 3. A new tab opens in the browser with the new notebook, as shown in Figure 4-8. Notice that the notebook contains a cell and that Notebook has highlighted the cell so that you can begin typing code in it. The title of the notebook is Untitled right now. That\u2019s not a particularly helpful title, so you need to change it. 2. Click Untitled on the page. Notebook asks what you want to use as a new name, as shown in Figure 4-9. 3. Type BPPD_04_Sample and press Enter. The new name tells you that this is a file for Beginning Programming with Python For Dummies, Chapter 4, Sample.ipynb. Using this naming convention lets you easily differentiate these files from other files in your repository. FIGURE 4-8: A notebook contains cells that you use to hold code. 68 PART 1 Getting Started with Python Of course, the Sample notebook doesn\u2019t contain anything just yet. Place the cursor in the cell, type print(\u2018Python is really cool!\u2019), and then click the Run button (the button with the right-pointing arrow on the toolbar). You see the output shown in Figure 4-10. The output is part of the same cell as the code (the code resides in a square box and the output resides outside that square box, but both are within the cell). However, Notebook visually separates the output from the code so that you can tell them apart. Notebook automatically creates a new cell for you. When you finish working with a notebook, shutting it down is important. To close a notebook, choose File \u27aa Close and Halt. You return to the Home page, where you can see that the notebook you just created is added to the list, as shown in Figure 4-11. FIGURE 4-10: Notebook uses cells to store your code. FIGURE 4-9: Provide a new name for your notebook. CHAPTER 4 Writing Your First Application 69 Exporting a notebook Creating notebooks and keeping them all to yourself isn\u2019t much fun. At some point, you want to share them with other people. To perform this task, you must export your notebook from the repository to a file. You can then send the file to someone else, who will import it into his or her repository. The previous section shows how to create a notebook named BPPD_04_Sample. ipynb. You can open this notebook by clicking its entry in the repository list. The file reopens so that you can see your code again. To export this code, choose File \u27aa Download As \u27aa Notebook (.ipynb). What you see next depends on your browser, but you generally see some sort of dialog box for saving the notebook as a file. Use the same method for saving the Jupyter Notebook file as you use for any other"}, {"filename": "Beginning Programming with Python.pdf", "text": "to someone else, who will import it into his or her repository. The previous section shows how to create a notebook named BPPD_04_Sample. ipynb. You can open this notebook by clicking its entry in the repository list. The file reopens so that you can see your code again. To export this code, choose File \u27aa Download As \u27aa Notebook (.ipynb). What you see next depends on your browser, but you generally see some sort of dialog box for saving the notebook as a file. Use the same method for saving the Jupyter Notebook file as you use for any other file you save by using your browser. Remember to choose File \u27aa Close and Halt when you finish so that the application is shut down. Removing a notebook Sometimes notebooks get outdated or you simply don\u2019t need to work with them any longer. Rather than allow your repository to get clogged with files that you don\u2019t need, you can remove these unwanted notebooks from the list. Use these steps to remove the file: 1. Select the box next to the BPPD_04_Sample.ipynb entry. 2. Click the trash can icon (Delete) at the top of the page. You see a Delete notebook warning message like the one shown in Figure 4-12. 3. Click Delete. The file gets removed from the list. FIGURE 4-11: Any notebooks you create appear in the repository list. 70 PART 1 Getting Started with Python Importing a notebook To use the source code from this book, you must import the downloaded files into your repository. The source code comes in an archive file that you extract to a location on your hard drive. The archive contains a list of .ipynb (IPython Note- book) files containing the source code for this book (see the Introduction for details on downloading the source code). The following steps tell how to import these files into your repository: 1. Click Upload at the top of the page. What you see depends on your browser. In most cases, you see some type of File Upload dialog box that provides access to the files on your hard drive. 2. Navigate to the directory containing the files that you want to import into Notebook. 3. Highlight one or more files to import and click the Open (or other, similar) button to begin the upload process. You see the file added to an upload list, as shown in Figure 4-13. The file isn\u2019t part of the repository yet \u2014 you\u2019ve simply selected it for upload. 4. Click Upload. Notebook places the file in the repository so that you can begin using it. FIGURE 4-12: Notebook warns you before removing any files from the repository. CHAPTER 4 Writing Your First Application 71 Creating the Application You\u2019ve actually created your first Anaconda application by using the steps in the \u201cCreating a new notebook\u201d section, earlier in this chapter. The print() method may not seem like much, but you use it quite often. However, the literate pro- gramming approach provided"}, {"filename": "Beginning Programming with Python.pdf", "text": "in Figure 4-13. The file isn\u2019t part of the repository yet \u2014 you\u2019ve simply selected it for upload. 4. Click Upload. Notebook places the file in the repository so that you can begin using it. FIGURE 4-12: Notebook warns you before removing any files from the repository. CHAPTER 4 Writing Your First Application 71 Creating the Application You\u2019ve actually created your first Anaconda application by using the steps in the \u201cCreating a new notebook\u201d section, earlier in this chapter. The print() method may not seem like much, but you use it quite often. However, the literate pro- gramming approach provided by Anaconda requires a little more knowledge than you currently have. The following sections don\u2019t tell you everything about this approach, but they do help you gain an understanding of what literate program- ming can provide in the way of functionality. However, before you begin, make sure you have the BPPD_04_Sample.ipynb file open for use because you need it to explore Notebook. Understanding cells If Notebook were a standard IDE, you wouldn\u2019t have cells. What you\u2019d have is a document containing a single, contiguous series of statements. To separate vari- ous coding elements, you need separate files. Cells are different because each cell is separate. Yes, the results of things you do in previous cells matter, but if a cell is meant to work alone, you can simply go to that cell and run it. To see how this FIGURE 4-13: The files that you want to add to the repository appear as part of an upload list consisting of one or more filenames. 72 PART 1 Getting Started with Python works for yourself, type the following code into the next cell of the BPPD_04_ Sample file: myVar = 3 + 4 print(myVar) Now click Run (the right-pointing arrow). The code executes, and you see the output, as shown in Figure 4-14. The output is 7, as expected. However, notice the In [1]: entry. This entry tells you that this is the first cell executed. Note that the first cell also has a In [1]: entry. This entry is still from the previous session. Place your cursor in that cell and click Run. Now the cell contains In [2]:, as shown in Figure 4-15. However, note that the next cell hasn\u2019t been selected and still contains the In [1]: entry. Now place the cursor in the third cell \u2014 the one that is currently blank \u2014 and type print(\"This is myVar: \", myVar). Click Run. The output in Figure 4-16 shows that the cells have executed in anything but a rigid order, but that myVar is global to the notebook. What you do in other cells with data affects every other cell, no matter what order the execution takes place. FIGURE 4-14: Cells execute individually in Notebook. CHAPTER 4 Writing Your First Application 73 FIGURE 4-15: Cells can execute in any order in Notebook. FIGURE 4-16: Data changes do affect every cell that uses the modified variable. 74 PART 1"}, {"filename": "Beginning Programming with Python.pdf", "text": "one that is currently blank \u2014 and type print(\"This is myVar: \", myVar). Click Run. The output in Figure 4-16 shows that the cells have executed in anything but a rigid order, but that myVar is global to the notebook. What you do in other cells with data affects every other cell, no matter what order the execution takes place. FIGURE 4-14: Cells execute individually in Notebook. CHAPTER 4 Writing Your First Application 73 FIGURE 4-15: Cells can execute in any order in Notebook. FIGURE 4-16: Data changes do affect every cell that uses the modified variable. 74 PART 1 Getting Started with Python Adding documentation cells Cells come in a number of different forms. This book doesn\u2019t use them all. However, knowing how to use the documentation cells can come in handy. Select the first cell (the one currently marked with a 2). Choose Insert \u27aa Insert Cell Above. You see a new cell added to the notebook. Note the drop-down list that currently has Code in it. This list allows you to choose the kind of cell to create. Select Mark- down from the list and type # This is a level 1 heading. Click Run (which may seem like an extremely odd thing to do, but give it a try). You see the text change into a heading, as shown in Figure 4-17. About now, you may be thinking that these special cells act just like HTML pages, and you\u2019d be right. Choose Insert \u27aa Insert Cell Below, select Markdown in the drop-down list, and then type ## This is a level 2 heading. Click Run. As you can see in Figure 4-18, the number of hashes (#) you add to the text affects the head- ing level, but the hashes don\u2019t show up in the actual heading. FIGURE 4-17: Adding headings helps you separate and document your code. CHAPTER 4 Writing Your First Application 75 Other cell content This chapter (and book) doesn\u2019t demonstrate all the kinds of cell content that you can see by using Notebook. However, you can add things like graphics to your notebooks, too. When the time comes, you can output (print) your notebook as a report and use it in presentations of all sorts. The literate programming technique is different from what you may have used in the past, but it has definite advan- tages, as you see in upcoming chapters. Understanding the Use of Indentation As you work through the examples in this book, you see that certain lines are indented. In fact, the examples also provide a fair amount of white space (such as extra lines between lines of code). Python ignores any indentation in your appli- cation. The main reason to add indentation is to provide visual cues about your code. In the same way that indentation is used for book outlines, indentation in code shows the relationships between various code elements. FIGURE 4-18: Using heading levels provides emphasis for cell content. 76 PART 1 Getting Started with"}, {"filename": "Beginning Programming with Python.pdf", "text": "Understanding the Use of Indentation As you work through the examples in this book, you see that certain lines are indented. In fact, the examples also provide a fair amount of white space (such as extra lines between lines of code). Python ignores any indentation in your appli- cation. The main reason to add indentation is to provide visual cues about your code. In the same way that indentation is used for book outlines, indentation in code shows the relationships between various code elements. FIGURE 4-18: Using heading levels provides emphasis for cell content. 76 PART 1 Getting Started with Python The various uses of indentation will become more familiar as you work your way through the examples in the book. However, you should know at the outset why indentation is used and how it gets put in place. So it\u2019s time for another example. The following steps help you create a new example that uses indentation to make the relationship between application elements a lot more apparent and easier to figure out later. 1. Choose New \u27aa Python3. Jupyter Notebook creates a new notebook for you. The downloadable source uses the filename BPPD_04_Indentation.ipynb, but you can use any name desired. 2. Type print(\u201cThis is a really long line of text that will\u201d +. You see the text displayed normally onscreen, just as you expect. The plus sign (+) tells Python that there is additional text to display. Adding text from multiple lines together into a single long piece of text is called concatenation. You learn more about using this feature later in the book, so you don\u2019t need to worry about it now. 3. Press Enter. The insertion point doesn\u2019t go back to the beginning of the line, as you might expect. Instead, it ends up directly under the first double quote, as shown in Figure 4-19. This feature is called automatic indention and it\u2019s one of the features that differentiates a regular text editor from one designed to write code. 4. Type \u201cappear on multiple lines in the source code file.\u201d) and press Enter. Notice that the insertion point goes back to the beginning of the line. When Notebook senses that you have reached the end of the code, it automatically outdents the text to its original position. FIGURE 4-19: The Edit window automatically indents some types of text. CHAPTER 4 Writing Your First Application 77 5. Click Run. You see the output shown in Figure 4-20. Even though the text appears on multiple lines in the source code file, it appears on just one line in the output. The line does break because of the size of the window, but it\u2019s actually just one line. Adding Comments People create notes for themselves all the time. When you need to buy groceries, you look through your cabinets, determine what you need, and write it down on a list. When you get to the store, you review your list to remember what you need. Using notes comes in handy"}, {"filename": "Beginning Programming with Python.pdf", "text": "Run. You see the output shown in Figure 4-20. Even though the text appears on multiple lines in the source code file, it appears on just one line in the output. The line does break because of the size of the window, but it\u2019s actually just one line. Adding Comments People create notes for themselves all the time. When you need to buy groceries, you look through your cabinets, determine what you need, and write it down on a list. When you get to the store, you review your list to remember what you need. Using notes comes in handy for all sorts of needs, such as tracking the course of a conversation between business partners or remembering the essential points of a lecture. Humans need notes to jog their memories. Comments in source code are just another form of note. You add them to the code so that you can remember what task the code performs later. The following sections describe comments in more detail. You can find these examples in the BPPD_04_Comments.ipynb file in the downloadable source. FIGURE 4-20: Use \u00adconcatenation to make multiple lines of text appear on a single line in the output. HEADINGS VERSUS COMMENTS You may find headings and comments a bit confusing at first. Headings appear in \u00adseparate cells; comments appear with the source code. They serve different purposes. Headings serve to tell you about an entire code grouping, and individual comments tell you about individual code steps or even lines of code. Even though you use both of them for documentation, each serves a unique purpose. Comments are generally more detailed than headings. 78 PART 1 Getting Started with Python Understanding comments Computers need some special way to determine that the text you\u2019re writing is a comment, not code to execute. Python provides two methods of defining text as a comment and not as code. The first method is the single-line comment. It uses the number sign (#), like this: # This is a comment. print(\"Hello from Python!\") #This is also a comment. A single-line comment can appear on a line by itself or it can appear after execut- able code. It appears on only one line. You typically use a single-line comment for short descriptive text, such as an explanation of a particular bit of code. Notebook shows comments in a distinctive color (usually blue) and in italics. Python doesn\u2019t actually support a multiline comment directly, but you can create one using a triple-quoted string. A multiline comment both starts and ends with three double quotes (\"\"\") or three single quotes (\u2019\u2019\u2019) like this: \"\"\" Application: Comments.py Written by: John Purpose: Shows how to use comments. \"\"\" These lines aren\u2019t executed. Python won\u2019t display an error message when they appear in your code. However, Notebook treats them differently, as shown in \u00adFigure 4-21. Note that the actual Python comments, those preceded by a hash (#) in cell 1, don\u2019t generate any output. The triple-quote strings, however, do gener- ate output. If"}, {"filename": "Beginning Programming with Python.pdf", "text": "support a multiline comment directly, but you can create one using a triple-quoted string. A multiline comment both starts and ends with three double quotes (\"\"\") or three single quotes (\u2019\u2019\u2019) like this: \"\"\" Application: Comments.py Written by: John Purpose: Shows how to use comments. \"\"\" These lines aren\u2019t executed. Python won\u2019t display an error message when they appear in your code. However, Notebook treats them differently, as shown in \u00adFigure 4-21. Note that the actual Python comments, those preceded by a hash (#) in cell 1, don\u2019t generate any output. The triple-quote strings, however, do gener- ate output. If you plan to output your notebook as a report, you need to avoid using triple-quoted strings. (Some IDEs, such as IDLE, ignore the triple-quoted strings completely.) Unlike standard comments, triple quoted text appears in red, rather than blue and the text isn\u2019t in italics. You typically use multiline comments for longer explana- tions of who created an application, why it was created, and what tasks it per- forms. Of course, there aren\u2019t any hard rules on precisely how you use comments. The main goal is to tell the computer precisely what is and isn\u2019t a comment so that it doesn\u2019t become confused. CHAPTER 4 Writing Your First Application 79 Using comments to leave yourself reminders A lot of people don\u2019t really understand comments \u2014 they don\u2019t quite know what to do with notes in code. Keep in mind that you might write a piece of code today and then not look at it for years. You need notes to jog your memory so that you remember what task the code performs and why you wrote it. In fact, here are some common reasons to use comments in your code: \u00bb \u00bb Reminding yourself about what the code does and why you wrote it \u00bb \u00bb Telling others how to maintain your code \u00bb \u00bb Making your code accessible to other developers \u00bb \u00bb Listing ideas for future updates \u00bb \u00bb Providing a list of documentation sources you used to write the code \u00bb \u00bb Maintaining a list of improvements you\u2019ve made You can use comments in a lot of other ways, too, but these are the most common ways. Look at the way comments are used in the examples in the book, especially as you get to later chapters where the code becomes more complex. As your code becomes more complex, you need to add more comments and make the comments pertinent to what you need to remember about it. FIGURE 4-21: Multiline comments do work, but they also provide output. 80 PART 1 Getting Started with Python Using comments to keep code from executing Developers also sometimes use the commenting feature to keep lines of code from executing (referred to as commenting out). You might need to do this in order to determine whether a line of code is causing your application to fail. As with any other comment, you can use either single line commenting or multiline com-"}, {"filename": "Beginning Programming with Python.pdf", "text": "complex, you need to add more comments and make the comments pertinent to what you need to remember about it. FIGURE 4-21: Multiline comments do work, but they also provide output. 80 PART 1 Getting Started with Python Using comments to keep code from executing Developers also sometimes use the commenting feature to keep lines of code from executing (referred to as commenting out). You might need to do this in order to determine whether a line of code is causing your application to fail. As with any other comment, you can use either single line commenting or multiline com- menting. However, when using multiline commenting, you do see the code that isn\u2019t executing as part of the output (and it can actually be helpful to see where the code affects the output). Figure 4-22 shows an example of code commenting techniques. Closing Jupyter Notebook After you have used the File \u27aa Close and Halt command to close each of the note- books you have open, you can simply close the browser window to end your ses- sion. However, the server continues to run in the background. Normally, a Jupyter Notebook window opens, like the one shown in Figure 4-23. This window remains open until you stop the server. Simply press Ctrl+C to end the server session, and the window will close. FIGURE 4-22: Use comments to keep code from executing. CHAPTER 4 Writing Your First Application 81 Look again at Figure 4-23 to note a number of commands. These commands tell you what the user interface is doing. By monitoring this window, you can deter- mine what might go wrong during a session. Even though you won\u2019t use this feature very often, it\u2019s a handy trick to know. FIGURE 4-23: Make sure to close the server window. CHAPTER 5 Working with Anaconda 83 Chapter 5 Working with Anaconda A naconda provides a powerful Integrated Development Environment (IDE) in the form of Jupyter Notebook. In fact, you can perform every task in this book using just this one utility. That\u2019s why this chapter focuses on Jupyter Notebook (simply called Notebook in most places). Unlike most IDEs, Notebook relies on a principle called literate programming that the \u201cDefining why note- books are useful\u201d section of Chapter 4 describes. This chapter helps you under- stand how literate programming can help you become more productive when writing Python code. As part of discovering more about Notebook, you see how to download your code in various forms and how to create code checkpoints to make recovering from errors easier. Working with files effectively is an important part of the develop- ment process. Chapter 4 shows only the basics of working with code files; this chapter fills in the details. Chapter 4 also shows you a few things about cells. You\u2019re probably already think- ing that cells definitely make certain kinds of coding efforts easier because you can move blocks of code around easily. However, cells can do a lot more, and this chapter tells"}, {"filename": "Beginning Programming with Python.pdf", "text": "more about Notebook, you see how to download your code in various forms and how to create code checkpoints to make recovering from errors easier. Working with files effectively is an important part of the develop- ment process. Chapter 4 shows only the basics of working with code files; this chapter fills in the details. Chapter 4 also shows you a few things about cells. You\u2019re probably already think- ing that cells definitely make certain kinds of coding efforts easier because you can move blocks of code around easily. However, cells can do a lot more, and this chapter tells you about these techniques. This chapter also helps you understand the mechanics of using Notebook \u00adeffectively. For example, you might not like how Notebook is configured, so this chapter tells you how to change the configuration. You also need to know how to restart the kernel when things freeze up, and how to obtain help. In addition, IN THIS CHAPTER \u00bb \u00bb Interacting with code files \u00bb \u00bb Making cells useful \u00bb \u00bb Configuring the user interface \u00bb \u00bb Changing the code appearance 84 PART 1 Getting Started with Python Notebook has features called magic functions that really do seem magical. Using these functions doesn\u2019t affect your code, but they do affect how you see your code in Notebook and how certain features such as graphics appear. Finally, you need to know how to interact with running processes. In some cases, you need to know what a process is doing in order to make a decision about how to interact with it. Downloading Your Code Notebook provides you with a particular kind of coding environment, one that isn\u2019t text based, in contrast to many other IDEs. If you were to open an IPython Notebook File (.ipynb, which is the same extension used by Jupyter Notebook), what you would find would be sort of readable, but not really usable. To obtain the special features that Notebook provides, the file must contain additional informa- tion not found in a normal text file. Consequently, you find that you must down- load your code to use it in other environments. The \u201cExporting a notebook\u201d section of Chapter 4 tells how to export your note- book in a form that Notebook understands. However, you may want to download the code into other formats that other applications can use. In fact, the File \u27aa Down- load As menu contains options for downloading your code in these formats: \u00bb \u00bb Python (.py) \u00bb \u00bb HTML (.html) \u00bb \u00bb Markdown (.md) \u00bb \u00bb reST (.rst) \u00bb \u00bb LaTeX (.tex) \u00bb \u00bb PDF via LaTeX (.pdf) Not all the formats are available all the time. For example, if you want to create a PDF using LaTeX, you must install XeTeX by using the instructions found at https://nbconvert.readthedocs.io/en/latest/install.html#installing- tex. XeTeX provides a rendering engine for creating PDFs. Depending on your setup, some of the formats might actually open directly in your browser. For example, Figure 5-1 shows how one of"}, {"filename": "Beginning Programming with Python.pdf", "text": "As menu contains options for downloading your code in these formats: \u00bb \u00bb Python (.py) \u00bb \u00bb HTML (.html) \u00bb \u00bb Markdown (.md) \u00bb \u00bb reST (.rst) \u00bb \u00bb LaTeX (.tex) \u00bb \u00bb PDF via LaTeX (.pdf) Not all the formats are available all the time. For example, if you want to create a PDF using LaTeX, you must install XeTeX by using the instructions found at https://nbconvert.readthedocs.io/en/latest/install.html#installing- tex. XeTeX provides a rendering engine for creating PDFs. Depending on your setup, some of the formats might actually open directly in your browser. For example, Figure 5-1 shows how one of the examples from Chapter 4 might look when presented in HTML format. Note that the output will appear precisely as it appears in the file, so what you end up with is a sort of elec- tronic printout. In addition, the content won\u2019t always lend itself to modification, such as when using the HTML format. CHAPTER 5 Working with Anaconda 85 Working with Checkpoints Checkpoints are a Notebook-specific feature that can save you a huge amount of time and embarrassment when used correctly. A checkpoint is a kind of interim save and source control combined into a single package. What you get is a picture of your application at a specific point in time. Defining the uses of checkpoints Unlike many application saves, a checkpoint is an individual entry. Every time you create a checkpoint, you also create a hidden file. This file resides in a special folder of your project folder. For example, when looking at this book\u2019s code, you find the checkpoints in the \\BPPD\\.ipynb_checkpoints folder. You can go back to this specific checkpoint later, if necessary, to turn back the clock of your develop- ment efforts. Checkpoint-type saves occur at these times: \u00bb \u00bb Automatic: Notebook automatically creates a save for you every 120 seconds by default unless you change this interval using the %autosave magic function (see the \u201cUsing the Magic Functions\u201d section of the chapter for details). \u00bb \u00bb Manual checkpoint save: Generates a separate manually created save file. All the save options use a single file. Consequently, each save overwrites the pre- vious file. Any save is useful for general backup, ensuring that you have an FIGURE 5-1: Some output formats can open directly in your browser. 86 PART 1 Getting Started with Python alternative if an entity damages the original file between occurrences of major events (such as running or closing the application). The manual checkpoint save helps you create a special kind of save. For example, you might get your application to a stable point at which everything runs, even if the application isn\u2019t feature complete. Consequently, you want to create a manual save, a checkpoint, to ensure that you can get back to this point should future edits cause application damage. Checkpoints can also come in handy at other times. For example, you might add a risky feature to your application and want to protect the application against dam- age should"}, {"filename": "Beginning Programming with Python.pdf", "text": "of major events (such as running or closing the application). The manual checkpoint save helps you create a special kind of save. For example, you might get your application to a stable point at which everything runs, even if the application isn\u2019t feature complete. Consequently, you want to create a manual save, a checkpoint, to ensure that you can get back to this point should future edits cause application damage. Checkpoints can also come in handy at other times. For example, you might add a risky feature to your application and want to protect the application against dam- age should the addition prove fatal. You use checkpoints whenever you want to be able to go back to a specific point in time during application development. It\u2019s a kind of insurance that works in addition to automatic saves. Even though Notebook won\u2019t display multiple checkpoints, you can keep multiple checkpoints if desired. Simply rename the existing checkpoint and then create a new one. For example, if you name the existing checkpoint BPPD_04_Comments- checkpoint.ipynb, you might rename it to BPPD_04_Comments-checkpoint1. ipynb before you create a new save. To use an older checkpoint, you must rename it back to the original name of checkpoint.ipynb. Saving a checkpoint To save a checkpoint, you choose File \u27aa Save and Checkpoint. Notebook automati- cally saves a copy of the existing notebook in the .ipynb_checkpoints folder using the same name with -checkpoint added. Unless you specifically rename the existing checkpoint, the manual or automatic save will overwrite the existing file. Consequently, all you ever see is a single checkpoint file unless you rename older files manually. Restoring a checkpoint To restore a checkpoint, choose the entry found on the File \u27aa Revert to Checkpoint menu. This menu makes it appear that you can have more than one checkpoint file, but the menu never has more than one entry in it. The entry does contain the date and time that you created the checkpoint. Manipulating Cells Cells are what make Notebook considerably different from using other IDEs. By using the functionality that cells provide, you can perform all sorts of application CHAPTER 5 Working with Anaconda 87 manipulations that would otherwise be difficult or error prone using other IDEs, such as moving related code around as a chunk, rather than line-by-line. Chapter 4 shows you a few quick tricks for working with cells. The following sec- tions provide additional techniques that you can use to make cells truly useful. Adding various cell types Notebook gives you access to several different cell types. You find out the two types used in this book in Chapter 4. Here\u2019s a rundown of all the types that you can use with Notebook: \u00bb \u00bb Code: Contains interpreted Python code that provides an input and an output area. \u00bb \u00bb Markdown: Displays special documentation text using the GitHub markup technique, as described at https://help.github.com/categories/ writing-on-github/. This book mainly uses markdown cells for headings, but you can include all sorts of information in cells"}, {"filename": "Beginning Programming with Python.pdf", "text": "additional techniques that you can use to make cells truly useful. Adding various cell types Notebook gives you access to several different cell types. You find out the two types used in this book in Chapter 4. Here\u2019s a rundown of all the types that you can use with Notebook: \u00bb \u00bb Code: Contains interpreted Python code that provides an input and an output area. \u00bb \u00bb Markdown: Displays special documentation text using the GitHub markup technique, as described at https://help.github.com/categories/ writing-on-github/. This book mainly uses markdown cells for headings, but you can include all sorts of information in cells of this type. \u00bb \u00bb Raw NBConvert: Provides a method for including uninterpreted content within a notebook that affects certain kinds of downloaded output, such as LaTeX. This book doesn\u2019t use these kinds of cells because this is a specialty output. You can read more about this topic at https://ipython.org/ ipython-doc/3/notebook/nbconvert.html#nbconvert. \u00bb \u00bb Heading (obsolete): This is an older method of creating headings that you shouldn\u2019t use any longer. Whenever you execute the content of a cell using the Run Cell button or by choos- ing Cell \u27aa Run Cells and Select Below, and the insertion point is on the last cell, Notebook automatically adds a new cell for you. However, this isn\u2019t the only way to add a new cell. For example, you might want to add a new cell in the middle of the notebook. To perform this task, you choose Insert \u27aa Insert Cell Above or Insert \u27aa Insert Cell Below, depending on whether you want to insert a cell above or below the current cell. Splitting and merging cells Notebook treats cells as distinct entities. Whatever you do in a cell will affect the application as a whole. However, you can execute or manipulate that individual cell without changing any other cell. In addition, you can execute cells in any order and execute some cells more often than you do others. That\u2019s why you need to focus on cell construction: You need to determine whether a cell is independent enough, yet complete enough, to perform a desired task. With this in mind, you may find it necessary to split and merge cells. 88 PART 1 Getting Started with Python Splitting a cell means to create two cells from an existing cell. The split occurs at the current cursor location within the cell. To perform the split, you choose Edit \u27aa Split Cell. Merging a cell means to create a single cell from two existing cells. The cells are merged in the order in which they appear in the notebook, so you must be sure that the cells are in the correct order before you merge them. To perform the merge, you choose Edit \u27aa Merge Cell Above or Edit \u27aa Merge Cell Below. Moving cells around Cells need not stay in the order in which you originally create them. You may find that you need to perform a particular task sooner or later in the process."}, {"filename": "Beginning Programming with Python.pdf", "text": "you choose Edit \u27aa Split Cell. Merging a cell means to create a single cell from two existing cells. The cells are merged in the order in which they appear in the notebook, so you must be sure that the cells are in the correct order before you merge them. To perform the merge, you choose Edit \u27aa Merge Cell Above or Edit \u27aa Merge Cell Below. Moving cells around Cells need not stay in the order in which you originally create them. You may find that you need to perform a particular task sooner or later in the process. The sim- plest way to move a cell is to select the cell and then choose Edit \u27aa Move Cell Up or Edit \u27aa Move Cell Down. However, these two commands simply move the cells. You might decide to do something completely different. As do most editors, Notebook comes with a full selection of editing commands. All these commands appear on the Edit menu. Following are editing commands that Notebook provides in addition to the standard movement commands: \u00bb \u00bb Cut Cells: Removes the selected cell but places it on the Clipboard for later reuse. \u00bb \u00bb Copy Cells: Places a copy of the selected cell on the Clipboard without removing it. \u00bb \u00bb Paste Cells Above: Inserts a copy of the cell that appears on the Clipboard above the selected cell. \u00bb \u00bb Paste Cells Below: Inserts a copy of the cell that appears on the Clipboard below the selected cell. \u00bb \u00bb Delete Cells: Removes the selected cell without creating any copy. \u00bb \u00bb Undo Delete Cells: Adds a deleted cell back onto the notebook (there is only one level of undelete, so you must perform this task immediately after a deletion). Running cells To see the result of interpreting a cell, even those markdown cells, you need to run the cell. The most common way to perform this task is to click the Run Cell button on the toolbar (the one with the right pointing arrow). However, you might decide CHAPTER 5 Working with Anaconda 89 that you don\u2019t want to run your cells in the default manner. In this case, you have a number of options to choose from on the Cell menu: \u00bb \u00bb Run Cells: Runs the selected cell while maintaining the current selection. \u00bb \u00bb Run Cells and Select Below (default): Runs the selected cell and then selects the cell below it. If this is the last cell, Notebook creates a new cell to select. \u00bb \u00bb Run Cells and Insert Below: Runs the selected cell and then inserts a new cell below it. This is a good option to choose if you\u2019re adding new cells in the middle of an application because you get a new cell regardless of whether this is the last cell. \u00bb \u00bb Run All: Starts at the top and runs every cell in the notebook. When Notebook reaches the bottom, it selects the last cell, but doesn\u2019t"}, {"filename": "Beginning Programming with Python.pdf", "text": "selected cell and then selects the cell below it. If this is the last cell, Notebook creates a new cell to select. \u00bb \u00bb Run Cells and Insert Below: Runs the selected cell and then inserts a new cell below it. This is a good option to choose if you\u2019re adding new cells in the middle of an application because you get a new cell regardless of whether this is the last cell. \u00bb \u00bb Run All: Starts at the top and runs every cell in the notebook. When Notebook reaches the bottom, it selects the last cell, but doesn\u2019t insert a new one. \u00bb \u00bb Run All Above: Starts from the current cell and executes all the cells above it in reverse order. You won\u2019t find this option in most other IDEs! \u00bb \u00bb Run All Below: Starts from the current cell and executes all the cells below it in order. When Notebook reaches the bottom, it selects the last cell but doesn\u2019t insert a new one. TRUSTING YOUR NOTEBOOK In the upper-right corner of Notebook, you see a little square box with the words Not Trusted. In most cases, it doesn\u2019t matter that your notebook is untrusted because of how Python works. However, when dealing with some local or secure resources on a web- site, you may find that you really do need to place some trust in your notebook. The fastest, easiest method of overriding the trust issue is to click the Not Trusted button. You see a dialog box that gives you the option of trusting the notebook. Unfortunately, this is also a good way to cause yourself woe with security issues and isn\u2019t recommended unless you know that you can trust the source. Anaconda provides a number of other ways to ensure safe access to secure resources. Performing the extended setup is outside the scope of this book, but you can read about it at https://jupyter-notebook.readthedocs.io/en/latest/security. html. None of the examples in this book require you to run in trusted mode, so you can safely ignore that Not Trusted button for the moment. 90 PART 1 Getting Started with Python Toggling outputs Sometimes seeing the output from a cell is helpful, but in other cases, the output just gets in the way. In addition, situations that call for starting with a clean out- put can arise, so you may want to clear the old information. The Cell \u27aa Current Outputs menu has options that affect just the selected cell, and the Cell \u27aa All Out- put menu has options that affect all the cells in the notebook. Here are the options you have for controlling output: \u00bb \u00bb Toggle: Turns the output on or off, based on a previous condition. The output is still present in its entirety. \u00bb \u00bb Toggle Scrolling: Reduces the size of long outputs to just the default number of lines. In this way, you can see enough information to know how the cell worked, but not get every detail. \u00bb"}, {"filename": "Beginning Programming with Python.pdf", "text": "The Cell \u27aa Current Outputs menu has options that affect just the selected cell, and the Cell \u27aa All Out- put menu has options that affect all the cells in the notebook. Here are the options you have for controlling output: \u00bb \u00bb Toggle: Turns the output on or off, based on a previous condition. The output is still present in its entirety. \u00bb \u00bb Toggle Scrolling: Reduces the size of long outputs to just the default number of lines. In this way, you can see enough information to know how the cell worked, but not get every detail. \u00bb \u00bb Clear: Removes the current output. You must rerun the cell in order to generate new output after using this option. Changing Jupyter Notebook\u2019s Appearance You can modify Notebook\u2019s appearance to an extent. In this one respect, you don\u2019t get quite as much flexibility with Notebook as you do with other IDEs, but the flexibility is good enough to make the interface usable in most cases. The various options you use are on the View menu: \u00bb \u00bb Toggle Header: The header is at the top of the display and contains the name of the notebook. (You change the notebook name in the \u201cCreating a new notebook\u201d section of Chapter 4.) It also provides access to the Notebook dashboard when you click Jupyter in the upper left, plus it shows the current save status and lets you log out of Notebook by clicking Logout. \u00bb \u00bb Toggle Toolbar: The toolbar contains a series of icons that let you perform tasks quickly. The following list describes these icons as they appear from left to right: \u2022 Save and Checkpoint: Saves the current notebook and creates a check- point for it. \u2022 Insert Cell Below: Adds a new cell below the selected cell. \u2022 Cut Selected Cells: Removes the current cell and places it on the Clipboard. CHAPTER 5 Working with Anaconda 91 \u2022 Copy Selected Cells: Places a copy of the current cell on the Clipboard without removing it. \u2022 Paste Cells Below: Creates a copy of the cell on the Clipboard and places it below the currently selected cell. \u2022 Move Selected Cells Up: Moves the selected cell up one position. \u2022 Move Selected Cells Down: Moves the selected cell down one position. \u2022 Run Cell: Interprets the content of the current cell and selects the next cell. If this is the last cell, Notebook creates a new cell below it. Notebook doesn\u2019t interpret Raw NBConvert cells, so nothing happens in this case. \u2022 Interrupt Kernel: Stops the kernel from completing the instructions in the current cell. \u2022 Restart the Kernel: Stops and then starts the kernel. All variable data is lost during this process. \u2022 Cell Type Selection: Chooses one of the cell types described in the \u201cAdding various cell types\u201d section, earlier in this chapter. \u2022 Open the Command Palette: Displays the Command Palette dialog box, in which you can search for a particular command. The \u201cFinding com-"}, {"filename": "Beginning Programming with Python.pdf", "text": "is the last cell, Notebook creates a new cell below it. Notebook doesn\u2019t interpret Raw NBConvert cells, so nothing happens in this case. \u2022 Interrupt Kernel: Stops the kernel from completing the instructions in the current cell. \u2022 Restart the Kernel: Stops and then starts the kernel. All variable data is lost during this process. \u2022 Cell Type Selection: Chooses one of the cell types described in the \u201cAdding various cell types\u201d section, earlier in this chapter. \u2022 Open the Command Palette: Displays the Command Palette dialog box, in which you can search for a particular command. The \u201cFinding com- mands using the Command Palette\u201d section that follows explains this feature in more detail. \u00bb \u00bb Toggle Line Numbers: Adds or removes line numbers from the code listings. This setting doesn\u2019t affect other cell types. The \u201cWorking with line numbers\u201d section that follows explains this feature in more detail. \u00bb \u00bb Cell Toolbar: Adds a specific command to the cell toolbar. These commands help you interact in specific ways with the individual cells. The \u201cUsing the Cell Toolbar features\u201d section that follows explains this feature in more detail. Finding commands using the Command Palette The Command Palette dialog box provides access to the command-mode com- mands that Notebook supports. Click Open the Command Palette icon on the Tool- bar to see the dialog shown in Figure 5-2. To locate the command you need, simply start typing a phrase that you feel defines the command. For example, you might type cell to locate specific cell-related commands. After you find the command you need, you can click it to execute it. 92 PART 1 Getting Started with Python Working with line numbers Longer listings are hard to work with at times, and when you need to collaborate with others, having a reference can be useful. To display line numbers, choose View \u27aa Toggle Line Numbers. You see line numbers added to all input code cells, as shown in Figure 5-3. Note that the line numbers don\u2019t appear in the output. FIGURE 5-2: Use the \u00adCommand Palette dialog box to locate commands you need. FIGURE 5-3: Line numbers make \u00adcollaborating with others easier. CHAPTER 5 Working with Anaconda 93 Using the Cell Toolbar features Each cell has specific features associated with it. You can add a cell toolbar button to make these features accessibly by using the options on the View \u27aa Cell Toolbar menu. Figure 5-4 shows how a cell appears with the Edit Metadata button in place. The metadata affects how the cell works. The default settings control both whether the cell is trusted and Notebook will scroll long content. Some of these settings affect only certain kinds of cells. For example, the Raw Cell Format setting affects only Raw NBConvert cells. You can display only one Cell Toolbar button at a time. So, you can\u2019t configure the cells for a slideshow while also adding tags. You must select one feature or the other. Choosing View \u27aa Cell Toolbar \u27aa None"}, {"filename": "Beginning Programming with Python.pdf", "text": "Toolbar menu. Figure 5-4 shows how a cell appears with the Edit Metadata button in place. The metadata affects how the cell works. The default settings control both whether the cell is trusted and Notebook will scroll long content. Some of these settings affect only certain kinds of cells. For example, the Raw Cell Format setting affects only Raw NBConvert cells. You can display only one Cell Toolbar button at a time. So, you can\u2019t configure the cells for a slideshow while also adding tags. You must select one feature or the other. Choosing View \u27aa Cell Toolbar \u27aa None removes all the buttons from the dis- play. Here are the Cell Toolbar menu options: \u00bb \u00bb None: Removes all the Cell Toolbar buttons from the notebook. \u00bb \u00bb Edit Metadata: Allows configuration of the cell functionality using both standard and custom metadata. \u00bb \u00bb Raw Cell Format: Selects the kind of data that a Raw NTConvert cell contains. The options include None, LaTeX, reST, HTML, Markdown, Python, and Custom. \u00bb \u00bb Slideshow: Defines the kind of slide that the cell contains. The options are Slide, Sub-slide, Fragment, Skip, and Notes. FIGURE 5-4: Use the cell toolbar buttons to modify underlying code content. 94 PART 1 Getting Started with Python \u00bb \u00bb Attachments: Presents a list of attachments for the current cell. For example, you can add images or pictures to markdown cells. \u00bb \u00bb Tags: Manages tags associated with each cell. A tag is a piece of information that you provide that helps you understand and classify the cell. The tags are for your use; they mean nothing to Notebook. When you use tags correctly, they enable you to interact with cells in new ways, but you must use the tags consistently to allow tags to work properly. Interacting with the Kernel The kernel is the server that enables you to run cells within Notebook. You typi- cally see the kernel commands in a separate command or terminal window, such as the one shown in Figure 5-5. Each entry shows the time the kernel executed the task, which application the command executed, the task it performed, and any resources affected. In most cases, you don\u2019t need to do anything with this window, but viewing it can be help- ful when you run into problems because you often see error messages that can help you resolve an issue. You control the kernel in a number of ways. For example, saving a file issues a command to the kernel, which carries the task out for you. However, you also find some kernel-specific commands on the Kernel menu, which are described in the following list: \u00bb \u00bb Interrupt: Causes the kernel to stop performing the current task without actually shutting the kernel down. You can use this option when you want to do something like stop processing a large dataset. FIGURE 5-5: The kernel displays its commands in a separate Jupyter Notebook window. CHAPTER 5 Working with Anaconda 95 \u00bb \u00bb Restart:"}, {"filename": "Beginning Programming with Python.pdf", "text": "the kernel in a number of ways. For example, saving a file issues a command to the kernel, which carries the task out for you. However, you also find some kernel-specific commands on the Kernel menu, which are described in the following list: \u00bb \u00bb Interrupt: Causes the kernel to stop performing the current task without actually shutting the kernel down. You can use this option when you want to do something like stop processing a large dataset. FIGURE 5-5: The kernel displays its commands in a separate Jupyter Notebook window. CHAPTER 5 Working with Anaconda 95 \u00bb \u00bb Restart: Stops the kernel and starts it again. This option causes you to lose all the variable data. However, in some cases, this is precisely what you need to do when the environment has become dirty with old data. \u00bb \u00bb Restart & Clear Output: Stops the kernel, starts it again, and clears all the existing cell outputs. \u00bb \u00bb Restart & Run All: Stops the kernel, starts it again, and then runs every cell starting from the top cell and ending with the last cell. When Notebook reaches the bottom, it selects the last cell but doesn\u2019t insert a new one. \u00bb \u00bb Reconnect: Recreates the connection to the kernel. In some cases, environ- mental or other issues could cause the application to lose its connection, so you use this option to reestablish the connection without loss of variable data. \u00bb \u00bb Shutdown: Shuts the kernel down. You may perform this step in preparation for using a different kernel. \u00bb \u00bb Change Kernel: Selects a different kernel from the list of kernels you have installed. For example, you may want to test an application using various Python versions to ensure that it runs on all of them. Obtaining Help The help system in Notebook is designed to provide a certain level of interactivity. For example, when you choose Help \u27aa User Interface Tour, a wizard actually points to various elements of your current notebook and tells you what they are. In this way, you see precisely what each element is used for in a way that also helps you with your current task. The Help \u27aa Keyboard Shortcuts command provides you with a chart listing the various shortcut commands. To enter command mode, you press Esc first and then type whatever is needed to execute a command. For example, Esc \u27aa F displays the Find and Replace dialog box. As part of using keyboard shortcuts, you can choose Help \u27aa Edit Keyboard Shortcuts to display the Edit Command Mode Short- cuts dialog box, shown in Figure 5-6. You use this dialog box to change how Note- book reacts in command mode. The Help menu contains two other user interface-specific help entries. The first, Notebook Help, offers extensive online help at http://nbviewer.jupyter.org/ github/ipython/ipython/blob/3.x/examples/Notebook/Index.ipynb. This site contains tutorials and other aids in more effectively using Notebook to perform useful work. The second, Markdown, takes you to https://help.github.com/ articles/getting-started-with-writing-and-formatting-on-github/, where you discover more"}, {"filename": "Beginning Programming with Python.pdf", "text": "\u27aa F displays the Find and Replace dialog box. As part of using keyboard shortcuts, you can choose Help \u27aa Edit Keyboard Shortcuts to display the Edit Command Mode Short- cuts dialog box, shown in Figure 5-6. You use this dialog box to change how Note- book reacts in command mode. The Help menu contains two other user interface-specific help entries. The first, Notebook Help, offers extensive online help at http://nbviewer.jupyter.org/ github/ipython/ipython/blob/3.x/examples/Notebook/Index.ipynb. This site contains tutorials and other aids in more effectively using Notebook to perform useful work. The second, Markdown, takes you to https://help.github.com/ articles/getting-started-with-writing-and-formatting-on-github/, where you discover more about formatting the content of markdown cells. 96 PART 1 Getting Started with Python FIGURE 5-6: Modify the command mode shortcuts to meet your specific needs. CONSIDERING THE IPYTHON ALTERNATIVE Chapters 1 through 3 of the book provide insights into using the command-line version of Python. The command shell IPython looks and acts much like the command line pro- vided with Python, but it has a number of interesting add-ons. The most noticeable of these add-ons is the use of color coding for code you type (reducing your chances of making an error). For example, commands appear in green and text appears in yellow. The interface also highlights matching parentheses and other block elements so that you can actually see which block element you\u2019re closing. The help system is another difference between the Python command line and IPython. You get additional access to help, and the information you receive is more detailed. One of the more interesting features in this case is the use of the question mark after the name of any Python object. For example, if you type print? and press Enter, you see a quick overview of the print() command. Type ? and press Enter to see the IPython- specific help overview. In contrast to the Python command line, IPython also supports many of the Notebook advanced features, such as magic functions, which the \u201cUsing the Magic Functions\u201d sec- tion of the chapter discusses. These special functions enable you to change how IPython and Notebook display various kinds of Python output, among other things. In sum, when you do need to use a command line, use IPython instead of the command line supplied with Python to obtain added functionality. CHAPTER 5 Working with Anaconda 97 At the bottom of the Help menu, you see the usual About entry. This entry displays a dialog box telling you all about your installation. In some cases, you need this information to obtain help from other Anaconda users. The most important bits of information are the version of Python and Anaconda that you\u2019re currently using. The remainder of the Help menu entries will depend on what you have installed at any given time. Each of these entries is for a specific Python feature (starting with the Python language itself). You generally see all the common libraries as well, such as NumPy and SciPy. All these help entries are designed to make"}, {"filename": "Beginning Programming with Python.pdf", "text": "entry. This entry displays a dialog box telling you all about your installation. In some cases, you need this information to obtain help from other Anaconda users. The most important bits of information are the version of Python and Anaconda that you\u2019re currently using. The remainder of the Help menu entries will depend on what you have installed at any given time. Each of these entries is for a specific Python feature (starting with the Python language itself). You generally see all the common libraries as well, such as NumPy and SciPy. All these help entries are designed to make it easier for you to obtain help in creating great code. Using the Magic Functions Notebook and its counterpart, IPython, provide you with some special functional- ity in the form of magic functions. It\u2019s kind of amazing to think that these appli- cations offer you magic, but that\u2019s precisely what you get with the magic functions. The magic is in the output. For example, instead of displaying graphic output in a separate window, you can chose to display it within the cell, as if by magic (because the cells appear to hold only text). Or you can use magic to check the performance of your application, without all the usual added code that such performance checks require. A magic function begins with either a % or %% sign. Those with a % sign work within the environment and those with a %% sign work at the cell level. For example, if you want to obtain a list of magic functions, type %lsmagic and then press Enter in IPython (or run the command in Notebook) to see them, as shown in Figure 5-7. (Note that IPython uses the same input, In, and output, Out, prompts that Notebook uses.) FIGURE 5-7: The %lsmagic function displays a list of magic functions for you. 98 PART 1 Getting Started with Python Not every magic function works with IPython. For example, the %autosave func- tion has no purpose in IPython because IPython doesn\u2019t automatically save anything. Table 5-1 lists a few of the most common magic functions and their purpose. To obtain a full listing, type %quickref and press Enter in Notebook (or the IPython console) or check out the full listing at https://damontallen.github.io/ IPython-quick-ref-sheets/. TABLE 5-1 Common Notebook and IPython Magic Functions Magic Function Type Alone Provides Status? Description %alias Yes Assigns or displays an alias for a system command. %autocall Yes Enables you to call functions without including the parentheses. The settings are Off, Smart (default), and Full. The Smart setting applies the parentheses only if you include an argument with the call. %automagic Yes Enables you to call the line magic functions without including the percent (%) sign. The settings are False (default) and True. %autosave Yes Displays or modifies the intervals between automatic Notebook saves. The default setting is every 120 seconds. %cd Yes Changes directory to a new storage location. You can also use this command to move through the"}, {"filename": "Beginning Programming with Python.pdf", "text": "an alias for a system command. %autocall Yes Enables you to call functions without including the parentheses. The settings are Off, Smart (default), and Full. The Smart setting applies the parentheses only if you include an argument with the call. %automagic Yes Enables you to call the line magic functions without including the percent (%) sign. The settings are False (default) and True. %autosave Yes Displays or modifies the intervals between automatic Notebook saves. The default setting is every 120 seconds. %cd Yes Changes directory to a new storage location. You can also use this command to move through the directory history or to change directories to a bookmark. %cls No Clears the screen. %colors No Specifies the colors used to display text associated with prompts, the information system, and exception handlers. You can choose between NoColor (black and white), Linux (default), and LightBG. %config Yes Enables you to configure IPython. %dhist Yes Displays a list of directories visited during the current session. %file No Outputs the name of the file that contains the source code for the object. %hist Yes Displays a list of magic function commands issued during the current session. %install_ext No Installs the specified extension. %load No Loads application code from another source, such as an online example. CHAPTER 5 Working with Anaconda 99 Viewing the Running Processes The main Notebook page, where you choose which notebooks to open, actually has three tabs. You normally interact with the Files tab. The Clusters tab is no longer used, so you don\u2019t need to worry about it. However, the Running tab, shown in Figure 5-8, does contain some useful information in the form of terminals and open notebooks. Magic Function Type Alone Provides Status? Description %load_ext No Loads a Python extension using its module name. %lsmagic Yes Displays a list of the currently available magic functions. %magic Yes Displays a help screen showing information about the magic functions. %matplotlib Yes Sets the backend processor used for plots. Using the inline value displays the plot within the cell for an IPython Notebook file. The possible values are: 'gtk', 'gtk3', 'inline', 'nbagg', 'osx', 'qt', 'qt4', 'qt5', 'tk', and 'wx'. %paste No Pastes the content of the clipboard into the IPython environment. %pdef No Shows how to call the object (assuming that the object is callable). %pdoc No Displays the docstring for an object. %pinfo No Displays detailed information about the object (often more than provided by help alone). %pinfo2 No Displays extra detailed information about the object (when available). %reload_ext No Reloads a previously installed extension. %source No Displays the source code for the object (assuming the source is available). %timeit No Calculates the best performance time for an instruction. %%timeit No Calculates the best time performance for all the instructions in a cell, apart from the one placed on the same cell line as the cell magic (which could therefore be an initialization instruction). %unalias No Removes a previously created alias from the list. %unload_ext No Unloads the specified"}, {"filename": "Beginning Programming with Python.pdf", "text": "object (often more than provided by help alone). %pinfo2 No Displays extra detailed information about the object (when available). %reload_ext No Reloads a previously installed extension. %source No Displays the source code for the object (assuming the source is available). %timeit No Calculates the best performance time for an instruction. %%timeit No Calculates the best time performance for all the instructions in a cell, apart from the one placed on the same cell line as the cell magic (which could therefore be an initialization instruction). %unalias No Removes a previously created alias from the list. %unload_ext No Unloads the specified extension. %%writefile No Writes the contents of a cell to the specified file. 100 PART 1 Getting Started with Python The terminals\u2019 part of the equation only comes into play when you configure your server to allow multiple users. You won\u2019t use this feature in this book, so it isn\u2019t discussed. However, you can get information about using terminals at sites such as https://software.intel.com/en-us/dl-training-tool-devguide-using- jupyter-notebook-terminal-console and http://jupyter-notebook.readthe docs.io/en/latest/examples/Notebook/Connecting%20with%20the%20Qt% 20Console.html. The other element on the Running tab is the Notebooks list, shown in Figure 5-8. Whenever you run a new notebook, you see its entry added to the list. In this case, a single notebook is running. You can see that the notebook relies on a Python 3 kernel. You also have the option of shutting the notebook down. Generally, you want to use the File \u27aa Close and Halt command to shut down a notebook instead of closing it this way to prevent data loss, but this option can be helpful when the notebook isn\u2019t responding for whatever reason. FIGURE 5-8: View the terminals connected to your system and the open notebooks. 2 Talking the Talk IN THIS PART . . . Store and manage data in memory. Interact with data and use functions. Determine which path to take. Perform tasks more than one time. Locate, understand, and react to application errors. CHAPTER 6 Storing and Modifying Information 103 Chapter 6 Storing and Modifying Information C hapter 3 introduces you to CRUD, Create, Read, Update, and Delete \u2014 not that Chapter 3 contains cruddy material. This acronym provides an easy method to remember precisely what tasks all computer programs perform with information you want to manage. Of course, geeks use a special term for information \u2014 data, but either information or data works fine for this book. To make information useful, you have to have some means of storing it perma- nently. Otherwise, every time you turned the computer off, all your information would be gone and the computer would provide limited value. In addition, Python must provide some rules for modifying information. The alternative is to have applications running amok, changing information in any and every conceivable manner. This chapter is about controlling information \u2014 defining how informa- tion is stored permanently and manipulated by applications you create. You can find the source code for this chapter in the BPPD_06_Storing_And_Modifying_ Information.ipynb file provided with the downloadable source code, as"}, {"filename": "Beginning Programming with Python.pdf", "text": "useful, you have to have some means of storing it perma- nently. Otherwise, every time you turned the computer off, all your information would be gone and the computer would provide limited value. In addition, Python must provide some rules for modifying information. The alternative is to have applications running amok, changing information in any and every conceivable manner. This chapter is about controlling information \u2014 defining how informa- tion is stored permanently and manipulated by applications you create. You can find the source code for this chapter in the BPPD_06_Storing_And_Modifying_ Information.ipynb file provided with the downloadable source code, as described in the book\u2019s Introduction. IN THIS CHAPTER \u00bb \u00bb Understanding data storage \u00bb \u00bb Considering the kinds of data storage \u00bb \u00bb Adding dates and times to applications 104 PART 2 Talking the Talk Storing Information An application requires fast access to information or else it will take a long time to complete tasks. As a result, applications store information in memory. However, memory is temporary. When you turn off the machine, the information must be stored in some permanent form, such as on your hard drive, a Universal Serial Bus (USB) flash drive, a Secure Digital (SD) card, or on the Internet using something like Anaconda Cloud. In addition, you must also consider the form of the information, such as whether it\u2019s a number or text. The following sections discuss the issue of storing information as part of an application in more detail. Seeing variables as storage boxes When working with applications, you store information in variables. A variable is a kind of storage box. Whenever you want to work with the information, you access it using the variable. If you have new information you want to store, you put it in a variable. Changing information means accessing the variable first and then storing the new value in the variable. Just as you store things in boxes in the real world, so you store things in variables (a kind of storage box) when working with applications. Computers are actually pretty tidy. Each variable stores just one piece of information. Using this technique makes it easy to find the particular piece of information you need \u2014 unlike in your closet, where things from ancient Egypt could be \u00adhidden. Even though the examples you work with in previous chapters don\u2019t use variables, most applications rely heavily on variables to make working with information easier. Using the right box to store the data People tend to store things in the wrong sort of box. For example, you might find a pair of shoes in a garment bag and a supply of pens in a shoebox. However, Python likes to be neat. As a result, you find numbers stored in one sort of variable and text stored in an entirely different kind of variable. Yes, you use variables in both cases, but the variable is designed to store a particular kind of information. Using specialized variables makes it possible to work with"}, {"filename": "Beginning Programming with Python.pdf", "text": "working with information easier. Using the right box to store the data People tend to store things in the wrong sort of box. For example, you might find a pair of shoes in a garment bag and a supply of pens in a shoebox. However, Python likes to be neat. As a result, you find numbers stored in one sort of variable and text stored in an entirely different kind of variable. Yes, you use variables in both cases, but the variable is designed to store a particular kind of information. Using specialized variables makes it possible to work with the information inside in particular ways. You don\u2019t need to worry about the details just yet \u2014 just keep in mind that each kind of information is stored in a special kind of variable. Python uses specialized variables to store information to make things easy for the programmer and to ensure that the information remains safe. However, comput- ers don\u2019t actually know about information types. All that the computer knows about are 0s and 1s, which is the absence or presence of a voltage. At a higher level, computers do work with numbers, but that\u2019s the extent of what computers do. Numbers, letters, dates, times, and any other kind of information you can think CHAPTER 6 Storing and Modifying Information 105 about all come down to 0s and 1s in the computer system. For example, the letter A is actually stored as 01000001 or the number 65. The computer has no concept of the letter A or of a date such as 8/31/2017. Defining the Essential Python Data Types Every programming language defines variables that hold specific kinds of infor- mation, and Python is no exception. The specific kind of variable is called a data type. Knowing the data type of a variable is important because it tells you what kind of information you find inside. In addition, when you want to store informa- tion in a variable, you need a variable of the correct data type to do it. Python doesn\u2019t allow you to store text in a variable designed to hold numeric information. Doing so would damage the text and cause problems with the application. You can generally classify Python data types as numeric, string, and Boolean, although there really isn\u2019t any limit on just how you can view them. The following sections describe each of the standard Python data types within these classifications. Putting information into variables To place a value into any variable, you make an assignment using the assignment operator (=). Chapter 7 discusses the whole range of basic Python operators in more detail, but you need to know how to use this particular operator to some extent now. For example, to place the number 5 into a variable named myVar, you type myVar = 5 and press Enter at the Python prompt. Even though Python doesn\u2019t provide any additional information to you, you can always type the variable name and press Enter to see"}, {"filename": "Beginning Programming with Python.pdf", "text": "Python data types within these classifications. Putting information into variables To place a value into any variable, you make an assignment using the assignment operator (=). Chapter 7 discusses the whole range of basic Python operators in more detail, but you need to know how to use this particular operator to some extent now. For example, to place the number 5 into a variable named myVar, you type myVar = 5 and press Enter at the Python prompt. Even though Python doesn\u2019t provide any additional information to you, you can always type the variable name and press Enter to see the value it contains, as shown in Figure 6-1. FIGURE 6-1: Use the \u00adassignment operator to place information into a variable. 106 PART 2 Talking the Talk Understanding the numeric types Humans tend to think about numbers in general terms. We view 1 and 1.0 as being the same number \u2014 one of them simply has a decimal point. However, as far as we\u2019re concerned, the two numbers are equal and we could easily use them inter- changeably. Python views them as being different kinds of numbers because each form requires a different kind of processing. The following sections describe the integer, floating-point, and complex number classes of data types that Python supports. Integers Any whole number is an integer. For example, the value 1 is a whole number, so it\u2019s an integer. On the other hand, 1.0 isn\u2019t a whole number; it has a decimal part to it, so it\u2019s not an integer. Integers are represented by the int data type. As with storage boxes, variables have capacity limits. Trying to stuff a value that\u2019s too large into a storage box results in an error. On most platforms, you can store numbers between \u20139,223,372,036,854,775,808 and 9,223,372,036,854,775,807 within an int (which is the maximum value that fits in a 64-bit variable). Even though that\u2019s a really large number, it isn\u2019t infinite. When working with the int type, you have access to a number of interesting fea- tures. Many of them appear later in the book, but one feature is the ability to use different numeric bases: \u00bb \u00bb Base 2: Uses only 0 and 1 as numbers. \u00bb \u00bb Base 8: Uses the numbers 0 through 7. \u00bb \u00bb Base 10: Uses the usual numeric system. \u00bb \u00bb Base 16: Is also called hex and uses the numbers 0 through 9 and the letters A through F to create 16 different possible values. To tell Python when to use bases other than base 10, you add a 0 and a special let- ter to the number. For example, 0b100 is the value one-zero-zero in base 2. Here are the letters you normally use: \u00bb \u00bb b: Base 2 \u00bb \u00bb o: Base 8 \u00bb \u00bb x: Base 16 You can also convert numeric values to other bases by using the bin(), oct(), and hex() commands. So, putting everything together, you can see how to convert CHAPTER 6 Storing and Modifying"}, {"filename": "Beginning Programming with Python.pdf", "text": "9 and the letters A through F to create 16 different possible values. To tell Python when to use bases other than base 10, you add a 0 and a special let- ter to the number. For example, 0b100 is the value one-zero-zero in base 2. Here are the letters you normally use: \u00bb \u00bb b: Base 2 \u00bb \u00bb o: Base 8 \u00bb \u00bb x: Base 16 You can also convert numeric values to other bases by using the bin(), oct(), and hex() commands. So, putting everything together, you can see how to convert CHAPTER 6 Storing and Modifying Information 107 between bases using the commands shown in Figure 6-2. Try the command shown in the figure yourself so that you can see how the various bases work. Using a different base actually makes things easier in many situations, and you\u2019ll encounter some of those situations later in the book. For now, all you really need to know is that integers support different numeric bases. Floating-point values Any number that includes a decimal portion is a floating-point value. For exam- ple, 1.0 has a decimal part, so it\u2019s a floating-point value. Many people get con- fused about whole numbers and floating-point numbers, but the difference is easy to remember. If you see a decimal in the number, then it\u2019s a floating-point value. Python stores floating-point values in the float data type. Floating-point values have an advantage over integer values in that you can store immensely large or incredibly small values in them. As with integer variables, floating-point variables have a storage capacity. In their case, the maximum value that a variable can contain is \u00b11.7976931348623157 \u00d7 10308 and the minimum value that a variable can contain is \u00b12.2250738585072014 \u00d7 10-308 on most platforms. When working with floating-point values, you can assign the information to the variable in a number of ways. The two most common methods are to provide the number directly and to use scientific notation. When using scientific notation, an e separates the number from its exponent. Figure 6-3 shows both methods of making an assignment. Notice that using a negative exponent results in a \u00adfractional value. FIGURE 6-2: Integers have many interesting features, including the capability to use different numeric bases. 108 PART 2 Talking the Talk UNDERSTANDING THE NEED FOR MULTIPLE NUMBER TYPES A lot of new developers (and even some older ones) have a hard time understanding why there is a need for more than one numeric type. After all, humans can use just one kind of number. To understand the need for multiple number types, you have to \u00adunderstand a little about how a computer works with numbers. An integer is stored in the computer as simply a series of bits that the computer reads directly. A value of 0100 in binary equates to a value of 4 in decimal. On the other hand, numbers that have decimal points are stored in an entirely different manner. Think back to all those classes you"}, {"filename": "Beginning Programming with Python.pdf", "text": "hard time understanding why there is a need for more than one numeric type. After all, humans can use just one kind of number. To understand the need for multiple number types, you have to \u00adunderstand a little about how a computer works with numbers. An integer is stored in the computer as simply a series of bits that the computer reads directly. A value of 0100 in binary equates to a value of 4 in decimal. On the other hand, numbers that have decimal points are stored in an entirely different manner. Think back to all those classes you slept through on exponents in school \u2014 they actually come in handy sometimes. A floating-point number is stored as a sign bit (plus or minus), mantissa (the fractional part of the number), and exponent (the power of 2). (Some texts use the term significand in place of mantissa \u2014 the terms are interchangeable.) To obtain the floating-point value, you use the equation: Value = Mantissa * 2^Exponent At one time, computers all used different floating-point representations, but they all use the IEEE-754 standard now. You can read about this standard at http://grouper. ieee.org/groups/754/. A full explanation of precisely how floating-point numbers work is outside the scope of this book, but you can read a fairly understandable \u00addescription at http://www.cprogramming.com/tutorial/floating_point/ understanding_floating_point_representation.html. Nothing helps you understand a concept like playing with the values. You can find a really interesting \u00adfloating-point number converter at http://www.h-schmidt.net/FloatConverter/ IEEE754.html, where you can click the individual bits (to turn them off or on) and see the floating-point number that results. As you might imagine, floating-point numbers tend to consume more space in memory because of their complexity. In addition, they use an entirely different area of the \u00adprocessor \u2014 one that works more slowly than the part used for integer math. Finally, integers are precise, as contrasted to floating-point numbers, which can\u2019t precisely \u00adrepresent some numbers, so you get an approximation instead. However, floating-point variables can store much larger numbers. The bottom line is that decimals are unavoid- able in the real world, so you need floating-point numbers, but using integers when you can reduces the amount of memory your application consumes and helps it work faster. Computer systems have many trade-offs, and this one is unavoidable. CHAPTER 6 Storing and Modifying Information 109 Complex numbers You may or may not remember complex numbers from school. A complex number consists of a real number and an imaginary number that are paired together. Just in case you\u2019ve completely forgotten about complex numbers, you can read about them at http://www.mathsisfun.com/numbers/complex-numbers.html. Real- world uses for complex numbers include: \u00bb \u00bb Electrical engineering \u00bb \u00bb Fluid dynamics \u00bb \u00bb Quantum mechanics \u00bb \u00bb Computer graphics \u00bb \u00bb Dynamic systems Complex numbers have other uses, too, but this list should give you some ideas. In general, if you aren\u2019t involved in any of these disciplines, you probably won\u2019t ever encounter complex numbers. However, Python is one of the few languages that provides"}, {"filename": "Beginning Programming with Python.pdf", "text": "complex number consists of a real number and an imaginary number that are paired together. Just in case you\u2019ve completely forgotten about complex numbers, you can read about them at http://www.mathsisfun.com/numbers/complex-numbers.html. Real- world uses for complex numbers include: \u00bb \u00bb Electrical engineering \u00bb \u00bb Fluid dynamics \u00bb \u00bb Quantum mechanics \u00bb \u00bb Computer graphics \u00bb \u00bb Dynamic systems Complex numbers have other uses, too, but this list should give you some ideas. In general, if you aren\u2019t involved in any of these disciplines, you probably won\u2019t ever encounter complex numbers. However, Python is one of the few languages that provides a built-in data type to support them. As you progress through the book, you find other ways in which Python lends itself especially well to science and engineering. The imaginary part of a complex number always appears with a j after it. So, if you want to create a complex number with 3 as the real part and 4 as the imaginary part, you make an assignment like this: myComplex = 3 + 4j If you want to see the real part of the variable, you simply type myComplex.real at the Python prompt and press Enter. Likewise, if you want to see the imaginary part of the variable, you type myComplex.imag at the Python prompt and press Enter. FIGURE 6-3: Floating-point values provide multiple assignment techniques. 110 PART 2 Talking the Talk Understanding Boolean values It may seem amazing, but computers always give you a straight answer! A com- puter will never provide \u201cmaybe\u201d as output. Every answer you get is either True or False. In fact, there is an entire branch of mathematics called Boolean algebra that was originally defined by George Boole (a super-geek of his time) that com- puters rely upon to make decisions. Contrary to common belief, Boolean algebra has existed since 1854 \u2014 long before the time of computers. When using Boolean value in Python, you rely on the bool type. A variable of this type can contain only two values: True or False. You can assign a value by using the True or False keywords, or you can create an expression that defines a logical idea that equates to true or false. For example, you could say, myBool = 1 > 2, which would equate to False because 1 is most definitely not greater than 2. You see the bool type used extensively in the book, so don\u2019t worry about understand- ing this concept right now. Understanding strings Of all the data types, strings are the most easily understood by humans and not understood at all by computers. If you have read the previous chapters in this book, you have already seen strings used quite often. For example, all the example code in Chapter 4 relies on strings. A string is simply any grouping of characters you place within double quotes. For example, myString = \"Python is a great language.\" assigns a string of characters to myString. The computer doesn\u2019t see letters at all."}, {"filename": "Beginning Programming with Python.pdf", "text": "the book, so don\u2019t worry about understand- ing this concept right now. Understanding strings Of all the data types, strings are the most easily understood by humans and not understood at all by computers. If you have read the previous chapters in this book, you have already seen strings used quite often. For example, all the example code in Chapter 4 relies on strings. A string is simply any grouping of characters you place within double quotes. For example, myString = \"Python is a great language.\" assigns a string of characters to myString. The computer doesn\u2019t see letters at all. Every letter you use is represented by a number in memory. For example, the letter A is actually the number 65. To see this for yourself, type print(ord(\u201cA\u201d)) at the Python prompt and press Enter. You see 65 as output. You can convert any single letter to its numeric equivalent by using the ord() command. DETERMINING A VARIABLE\u2019S TYPE Sometimes you might want to know the variable type. Perhaps the type isn\u2019t obvious from the code or you\u2019ve received the information from a source whose code isn\u2019t acces- sible. Whenever you want to see the type of a variable, use the type() method. For example, if you start by placing a value of 5 in myInt by typing myInt = 5 and pressing Enter, you can find the type of myInt by typing type(myInt) and pressing Enter. The output will be <class 'int'>, which means that myInt contains an int value. CHAPTER 6 Storing and Modifying Information 111 Because the computer doesn\u2019t really understand strings, but strings are so useful in writing applications, you sometimes need to convert a string to a number. You can use the int() and float() commands to perform this conversion. For exam- ple, if you type myInt = int(\u201c123\u201d) and press Enter at the Python prompt, you create an int named myInt that contains the value 123. Figure 6-4 shows how you can perform this task and validate the content and type of myInt. You can convert numbers to a string as well by using the str() command. For example, if you type myStr = str(1234.56) and press Enter, you create a string con- taining the value \"1234.56\" and assign it to myStr. Figure 6-5 shows this type of conversion and the test you can perform on it. The point is that you can go back and forth between strings and numbers with great ease. Later chapters demonstrate how these conversions make a lot of seemingly impossible tasks quite doable. Working with Dates and Times Dates and times are items that most people work with quite a bit. Society bases almost everything on the date and time that a task needs to be or was completed. We make appointments and plan events for specific dates and times. Most of our day revolves around the clock. Because of the time-oriented nature of humans, it\u2019s a good idea to look at how Python deals with interacting with"}, {"filename": "Beginning Programming with Python.pdf", "text": "back and forth between strings and numbers with great ease. Later chapters demonstrate how these conversions make a lot of seemingly impossible tasks quite doable. Working with Dates and Times Dates and times are items that most people work with quite a bit. Society bases almost everything on the date and time that a task needs to be or was completed. We make appointments and plan events for specific dates and times. Most of our day revolves around the clock. Because of the time-oriented nature of humans, it\u2019s a good idea to look at how Python deals with interacting with dates and time (especially storing these values for later use). As with everything else, computers understand only numbers \u2014 the date and time don\u2019t really exist. FIGURE 6-4: Converting a string to a number is easy by using the int() and float() commands. FIGURE 6-5: You can convert numbers to strings as well. 112 PART 2 Talking the Talk To work with dates and times, you need to perform a special task in Python. When writing computer books, chicken-and-egg scenarios always arise, and this is one of them. To use dates and times, you must issue a special import datetime com- mand. Technically, this act is called importing a package, and you learn more about it in Chapter 11. Don\u2019t worry how the command works right now \u2014 just use it whenever you want to do something with date and time. Computers do have clocks inside them, but the clocks are for the humans using the computer. Yes, some software also depends on the clock, but again, the emphasis is on human needs rather than anything the computer might require. To get the current time, you can simply type datetime.datetime.now() and press Enter. You see the full date and time information as found on your computer\u2019s clock (see Figure 6-6). You may have noticed that the date and time are a little hard to read in the existing format. Say that you want to get just the current date, in a readable format. It\u2019s time to combine a few things you discovered in previous sections to accomplish that task. Type str(datetime.datetime.now().date()) and press Enter. Figure 6-7 shows that you now have something a little more usable. Interestingly enough, Python also has a time() command, which you can use to obtain the current time. You can obtain separate values for each of the compo- nents that make up date and time by using the day, month, year, hour, minute, second, and microsecond values. Later chapters help you understand how to use these various date and time features to keep application users informed about the current date and time on their system. FIGURE 6-7: Make the date and time more readable by using the str() command. FIGURE 6-6: Get the current date and time by using the now() command. CHAPTER 7 Managing Information 113 Chapter 7 Managing Information W hether you use the term information or data to refer to the content"}, {"filename": "Beginning Programming with Python.pdf", "text": "of the compo- nents that make up date and time by using the day, month, year, hour, minute, second, and microsecond values. Later chapters help you understand how to use these various date and time features to keep application users informed about the current date and time on their system. FIGURE 6-7: Make the date and time more readable by using the str() command. FIGURE 6-6: Get the current date and time by using the now() command. CHAPTER 7 Managing Information 113 Chapter 7 Managing Information W hether you use the term information or data to refer to the content that applications manage, the fact is that you must provide some means of working with it or your application really doesn\u2019t have a purpose. Throughout the rest of the book, you see information and data used interchange- ably because they really are the same thing, and in real-world situations, you\u2019ll encounter them both, so getting used to both is a good idea. No matter which term you use, you need some means of assigning data to variables, modifying the con- tent of those variables to achieve specific goals, and comparing the result you receive with desired results. This chapter addresses all three requirements so that you can start to control data within your applications. Also essential is to start working through methods of keeping your code under- standable. Yes, you could write your application as a really long procedure, but trying to understand such a procedure is incredibly hard, and you\u2019d find yourself repeating some steps because they must be done more than once. Functions are one way for you to package code so that you can more easily understand and reuse as needed. Applications also need to interact with the user. Yes, some perfectly usable appli- cations are out there that don\u2019t really interact with the user, but they\u2019re extremely rare and don\u2019t really do much, for the most part. In order to provide a useful IN THIS CHAPTER \u00bb \u00bb Understanding the Python view of data \u00bb \u00bb Using operators to assign, modify, and compare data \u00bb \u00bb Organizing code using functions \u00bb \u00bb Interacting with the user 114 PART 2 Talking the Talk service, most applications interact with the user to discover how the user wants to manage data. You get an overview of this process in this chapter. Of course, you visit the topic of user interaction quite often throughout the book because it\u2019s an important topic. Controlling How Python Views Data As discussed in Chapter 6, all data on your computer is stored as 0s and 1s. The computer doesn\u2019t understand the concept of letters, Boolean values, dates, times, or any other kind of information except numbers. In addition, a computer\u2019s capa- bility to work with numbers is both inflexible and relatively simplistic. When you work with a string in Python, you\u2019re depending on Python to translate the concept of a string into a form the computer can understand. The storage containers that your application"}, {"filename": "Beginning Programming with Python.pdf", "text": "interaction quite often throughout the book because it\u2019s an important topic. Controlling How Python Views Data As discussed in Chapter 6, all data on your computer is stored as 0s and 1s. The computer doesn\u2019t understand the concept of letters, Boolean values, dates, times, or any other kind of information except numbers. In addition, a computer\u2019s capa- bility to work with numbers is both inflexible and relatively simplistic. When you work with a string in Python, you\u2019re depending on Python to translate the concept of a string into a form the computer can understand. The storage containers that your application creates and uses in the form of variables tell Python how to treat the 0s and 1s that the computer has stored. So, you need to understand that the Python view of data isn\u2019t the same as your view of data or the computer\u2019s view of data \u2014 Python acts as an intermediary to make your applications functional. To manage data within an application, the application must control the way in which Python views the data. The use of operators, packaging methods such as functions, and the introduction of user input all help applications control data. All these techniques rely, in part, on making comparisons. Determining what to do next means understanding what state the data is in now as compared to some other state. If the variable contains the name John now, but you really want it to contain Mary instead, then you first need to know that it does in fact contain John. Only then can you make the decision to change the content of the variable to Mary. Making comparisons Python\u2019s main method for making comparisons is through the use of operators. In fact, operators play a major role in manipulating data as well. The upcoming \u201cWorking with Operators\u201d section discusses how operators work and how you can use them in applications to control data in various ways. Later chapters use oper- ators extensively as you discover techniques for creating applications that can make decisions, perform tasks repetitively, and interact with the user in interest- ing ways. However, the basic idea behind operators is that they help applications perform various types of comparisons. CHAPTER 7 Managing Information 115 In some cases, you use some fancy methods for performing comparisons in an application. For example, you can compare the output of two functions (as described in the \u201cComparing function output\u201d section, later in this chapter). With Python, you can perform comparisons at a number of levels so that you can man- age data without a problem in your application. Using these techniques hides detail so that you can focus on the point of the comparison and define how to react to that comparison rather than become mired in detail. Your choice of techniques for performing comparisons affects the manner in which Python views the data and determines the sorts of things you can do to manage the data after the com- parison is made. All this functionality might"}, {"filename": "Beginning Programming with Python.pdf", "text": "function output\u201d section, later in this chapter). With Python, you can perform comparisons at a number of levels so that you can man- age data without a problem in your application. Using these techniques hides detail so that you can focus on the point of the comparison and define how to react to that comparison rather than become mired in detail. Your choice of techniques for performing comparisons affects the manner in which Python views the data and determines the sorts of things you can do to manage the data after the com- parison is made. All this functionality might seem absurdly complex at the moment, but the important point to remember is that applications require com- parisons in order to interact with data correctly. Understanding how computers make comparisons Computers don\u2019t understand packaging, such as functions, or any of the other structures that you create with Python. All this packaging is for your benefit, not the computer\u2019s. However, computers do directly support the concept of oper- ators. Most Python operators have a direct corollary with a command that the computer understands directly. For example, when you ask whether one number is greater than another number, the computer can actually perform this computa- tion directly, using an operator. (The upcoming section explains operators in detail.) Some comparisons aren\u2019t direct. Computers work only with numbers. So, when you ask Python to compare two strings, what Python actually does is compare the numeric value of each character in the string. For example, the letter A is actually the number 65 in the computer. A lowercase letter a has a different numeric value \u2014 97. As a result, even though you might see ABC as being equal to abc, the computer doesn\u2019t agree \u2014 it sees them as different because the numeric values of their individual letters are different. Working with Operators Operators are the basis for both control and management of data within applica- tions. You use operators to define how one piece of data is compared to another and to modify the information within a single variable. In fact, operators are 116 PART 2 Talking the Talk essential to performing any sort of math-related task and to assigning data to variables in the first place. When using an operator, you must supply either a variable or an expression. You already know that a variable is a kind of storage box used to hold data. An expres- sion is an equation or formula that provides a description of a mathematical con- cept. In most cases, the result of evaluating an expression is a Boolean (true or false) value. The following sections describe operators in detail because you use them everywhere throughout the rest of the book. Defining the operators An operator accepts one or more inputs in the form of variables or expressions, performs a task (such as comparison or addition), and then provides an output consistent with that task. Operators are classified partially by their effect and par- tially by the"}, {"filename": "Beginning Programming with Python.pdf", "text": "to hold data. An expres- sion is an equation or formula that provides a description of a mathematical con- cept. In most cases, the result of evaluating an expression is a Boolean (true or false) value. The following sections describe operators in detail because you use them everywhere throughout the rest of the book. Defining the operators An operator accepts one or more inputs in the form of variables or expressions, performs a task (such as comparison or addition), and then provides an output consistent with that task. Operators are classified partially by their effect and par- tially by the number of elements they require. For example, a unary operator works with a single variable or expression; a binary operator requires two. The elements provided as input to an operator are called operands. The operand on the left side of the operator is called the left operand, while the operand on the right side of the operator is called the right operand. The following list shows the categories of operators that you use within Python: \u00bb \u00bb Unary \u00bb \u00bb Arithmetic \u00bb \u00bb Relational \u00bb \u00bb Logical \u00bb \u00bb Bitwise \u00bb \u00bb Assignment \u00bb \u00bb Membership \u00bb \u00bb Identity Each of these categories performs a specific task. For example, the arithmetic operators perform math-based tasks, while relational operators perform com- parisons. The following sections describe the operators based on the category in which they appear. CHAPTER 7 Managing Information 117 UNDERSTANDING PYTHON\u2019S ONE TERNARY OPERATOR A ternary operator requires three elements. Python supports just one such operator, and you use it to determine the truth value of an expression. This ternary operator takes the following form (it apparently has no actual name, but you can call it the if. . .else operator if desired): TrueValue if Expression else FalseValue When the Expression is true, the operator outputs TrueValue. When the expression is false, it outputs FalseValue. As an example, if you type \"Hello\" if True else \"Goodbye\" the operator outputs a response of 'Hello'. However, if you type \"Hello\" if False else \"Goodbye\" the operator outputs a response of 'Goodbye'. This is a handy operator for times when you need to make a quick decision and don\u2019t want to write a lot of code to do it. One of the advantages of using Python is that it normally has more than one way to do things. Python has an alternative form of this ternary operator \u2014 an even shorter short- cut. It takes the following form: (FalseValue, TrueValue)[Expression] As before, when Expression is true, the operator outputs TrueValue; otherwise, it outputs FalseValue. Notice that the TrueValue and FalseValue elements are reversed in this case. An example of this version is (\"Hello\", \"Goodbye\")[True] In this case, the output of the operator is 'Goodbye' because that\u2019s the value in the True Value position. Of the two forms, the first is a little clearer, while the second is shorter. Unary Unary operators require a single variable or expression as input. You often use"}, {"filename": "Beginning Programming with Python.pdf", "text": "form of this ternary operator \u2014 an even shorter short- cut. It takes the following form: (FalseValue, TrueValue)[Expression] As before, when Expression is true, the operator outputs TrueValue; otherwise, it outputs FalseValue. Notice that the TrueValue and FalseValue elements are reversed in this case. An example of this version is (\"Hello\", \"Goodbye\")[True] In this case, the output of the operator is 'Goodbye' because that\u2019s the value in the True Value position. Of the two forms, the first is a little clearer, while the second is shorter. Unary Unary operators require a single variable or expression as input. You often use these operators as part of a decision-making process. For example, you might want to find something that isn\u2019t like something else. Table 7-1 shows the unary operators. 118 PART 2 Talking the Talk Arithmetic Computers are known for their capability to perform complex math. However, the complex tasks that computers perform are often based on much simpler math tasks, such as addition. Python provides access to libraries that help you perform complex math tasks, but you can always create your own libraries of math func- tions using the simple operators found in Table 7-2. Relational The relational operators compare one value to another and tell you when the relationship you\u2019ve provided is true. For example, 1 is less than 2, but 1 is never greater than 2. The truth value of relations is often used to make decisions in your applications to ensure that the condition for performing a specific task is met. Table 7-3 describes the relational operators. TABLE 7-2 Python Arithmetic Operators Operator Description Example + Adds two values together 5 + 2 = 7 - Subtracts the right operand from the left operand 5 \u2013 2 = 3 * Multiplies the right operand by the left operand 5 * 2 = 10 / Divides the left operand by the right operand 5 / 2 = 2.5 % Divides the left operand by the right operand and returns the remainder 5 % 2 = 1 ** Calculates the exponential value of the right operand by the left operand 5 ** 2 = 25 // Performs integer division, in which the left operand is divided by the right operand and only the whole number is returned (also called floor division) 5 // 2 = 2 TABLE 7-1 Python Unary Operators Operator Description Example ~ Inverts the bits in a number so that all the 0 bits become 1 bits and vice versa. ~4 results in a value of \u20135 - Negates the original value so that positive becomes negative and vice versa. \u2013(\u20134) results in 4 and \u20134 results in \u20134 + Is provided purely for the sake of completeness. This operator returns the same value that you provide as input. +4 results in a value of 4 CHAPTER 7 Managing Information 119 Logical The logical operators combine the true or false value of variables or expressions so that you can determine their resultant truth value. You use the"}, {"filename": "Beginning Programming with Python.pdf", "text": "number so that all the 0 bits become 1 bits and vice versa. ~4 results in a value of \u20135 - Negates the original value so that positive becomes negative and vice versa. \u2013(\u20134) results in 4 and \u20134 results in \u20134 + Is provided purely for the sake of completeness. This operator returns the same value that you provide as input. +4 results in a value of 4 CHAPTER 7 Managing Information 119 Logical The logical operators combine the true or false value of variables or expressions so that you can determine their resultant truth value. You use the logical operators to create Boolean expressions that help determine whether to perform tasks. Table 7-4 describes the logical operators. TABLE 7-3 Python Relational Operators Operator Description Example == Determines whether two values are equal. Notice that the relational operator uses two equals signs. A mistake many developers make is using just one equals sign, which results in one value being assigned to another. 1 == 2 is False != Determines whether two values are not equal. Some older versions of Python allowed you to use the <> operator in place of the != operator. Using the <> operator results in an error in current versions of Python. 1 != 2 is True > Verifies that the left operand value is greater than the right operand value. 1 > 2 is False < Verifies that the left operand value is less than the right operand value. 1 < 2 is True >= Verifies that the left operand value is greater than or equal to the right operand value. 1 >= 2 is False <= Verifies that the left operand value is less than or equal to the right operand value. 1 <= 2 is True TABLE 7-4 Python Logical Operators Operator Description Example and Determines whether both operands are true. True and True is True True and False is False False and True is False False and False is False or Determines when one of two operands is true. True or True is True True or False is True False or True is True False or False is False not Negates the truth value of a single operand. A true value becomes false and a false value becomes true. not True is False not False is True 120 PART 2 Talking the Talk Bitwise The bitwise operators interact with the individual bits in a number. For example, the number 6 is actually 0b0110 in binary. If your binary is a little rusty, you can use the handy Binary to Decimal to Hexadeci- mal Converter at http://www.mathsisfun.com/binary-decimal-hexadecimal- converter.html. You need to enable JavaScript to make the site work. A bitwise operator would interact with each bit within the number in a specific way. When working with a logical bitwise operator, a value of 0 counts as false and a value of 1 counts as true. Table 7-5 describes the bitwise operators. Assignment The assignment operators place data within a variable. The simple"}, {"filename": "Beginning Programming with Python.pdf", "text": "bits in a number. For example, the number 6 is actually 0b0110 in binary. If your binary is a little rusty, you can use the handy Binary to Decimal to Hexadeci- mal Converter at http://www.mathsisfun.com/binary-decimal-hexadecimal- converter.html. You need to enable JavaScript to make the site work. A bitwise operator would interact with each bit within the number in a specific way. When working with a logical bitwise operator, a value of 0 counts as false and a value of 1 counts as true. Table 7-5 describes the bitwise operators. Assignment The assignment operators place data within a variable. The simple assignment operator appears in previous chapters of the book, but Python offers a number of other interesting assignment operators that you can use. These other assignment TABLE 7-5 Python Bitwise Operators Operator Description Example & (And) Determines whether both individual bits within two operators are true and sets the resulting bit to true when they are. 0b1100 & 0b0110 = 0b0100 | (Or) Determines whether either of the individual bits within two operators is true and sets the resulting bit to true when one of them is. 0b1100 | 0b0110 = 0b1110 ^ (Exclusive or) Determines whether just one of the individual bits within two operators is true and sets the resulting bit to true when one is. When both bits are true or both bits are false, the result is false. 0b1100 ^ 0b0110 = 0b1010 ~ (One\u2019s complement) Calculates the one\u2019s complement value of a number. ~0b1100 = \u20130b1101 ~0b0110 = \u20130b0111 << (Left shift) Shifts the bits in the left operand left by the value of the right operand. All new bits are set to 0 and all bits that flow off the end are lost. 0b00110011 << 2 = 0b11001100 >> (Right shift) Shifts the bits in the left operand right by the value of the right operand. All new bits are set to 0 and all bits that flow off the end are lost. 0b00110011 >> 2 = 0b00001100 CHAPTER 7 Managing Information 121 operators can perform mathematical tasks during the assignment process, which makes it possible to combine assignment with a math operation. Table 7-6 describes the assignment operators. For this particular table, the initial value of MyVar in the Example column is 5. Membership The membership operators detect the appearance of a value within a list or sequence and then output the truth value of that appearance. Think of the mem- bership operators as you would a search routine for a database. You enter a value that you think should appear in the database, and the search routine finds it for you or reports that the value doesn\u2019t exist in the database. Table 7-7 describes the membership operators. TABLE 7-6 Python Assignment Operators Operator Description Example = Assigns the value found in the right operand to the left operand. MyVar = 5 results in MyVar containing 5 += Adds the value found in the right operand to the value found in the left"}, {"filename": "Beginning Programming with Python.pdf", "text": "value of that appearance. Think of the mem- bership operators as you would a search routine for a database. You enter a value that you think should appear in the database, and the search routine finds it for you or reports that the value doesn\u2019t exist in the database. Table 7-7 describes the membership operators. TABLE 7-6 Python Assignment Operators Operator Description Example = Assigns the value found in the right operand to the left operand. MyVar = 5 results in MyVar containing 5 += Adds the value found in the right operand to the value found in the left operand and places the result in the left operand. MyVar += 2 results in MyVar containing 7 -= Subtracts the value found in the right operand from the value found in the left operand and places the result in the left operand. MyVar \u2212= 2 results in MyVar containing 3 *= Multiplies the value found in the right operand by the value found in the left operand and places the result in the left operand. MyVar *= 2 results in MyVar containing 10 /= Divides the value found in the left operand by the value found in the right operand and places the result in the left operand. MyVar /= 2 results in MyVar containing 2.5 %= Divides the value found in the left operand by the value found in the right operand and places the remainder in the left operand. MyVar %= 2 results in MyVar containing 1 **= Determines the exponential value found in the left operand when raised to the power of the value found in the right operand and places the result in the left operand. MyVar **= 2 results in MyVar containing 25 //= Divides the value found in the left operand by the value found in the right operand and places the integer (whole number) result in the left operand. MyVar //= 2 results in MyVar containing 2 122 PART 2 Talking the Talk Identity The identity operators determine whether a value or expression is of a certain class or type. You use identity operators to ensure that you\u2019re actually working with the sort of information that you think you are. Using the identity operators can help you avoid errors in your application or determine the sort of processing a value requires. Table 7-8 describes the identity operators. Understanding operator precedence When you create simple statements that contain just one operator, the order of determining the output of that operator is also simple. However, when you start working with multiple operators, it becomes necessary to determine which opera- tor to evaluate first. For example, you should know whether 1 + 2 * 3 evaluates to 7 (where the multiplication is done first) or 9 (where the addition is done first). An order of operator precedence tells you that the answer is 7 unless you use paren- theses to override the default order. In this case, (1 + 2) * 3 would evaluate to 9"}, {"filename": "Beginning Programming with Python.pdf", "text": "simple statements that contain just one operator, the order of determining the output of that operator is also simple. However, when you start working with multiple operators, it becomes necessary to determine which opera- tor to evaluate first. For example, you should know whether 1 + 2 * 3 evaluates to 7 (where the multiplication is done first) or 9 (where the addition is done first). An order of operator precedence tells you that the answer is 7 unless you use paren- theses to override the default order. In this case, (1 + 2) * 3 would evaluate to 9 because the parentheses have a higher order of precedence than multiplication does. Table 7-9 defines the order of operator precedence for Python. TABLE 7-8 Python Identity Operators Operator Description Example Is Evaluates to true when the type of the value or expression in the right operand points to the same type in the left operand. type(2) is int is True is not Evaluates to true when the type of the value or expression in the right operand points to a different type than the value or expression in the left operand. type(2) is not int is False TABLE 7-7 Python Membership Operators Operator Description Example In Determines whether the value in the left operand appears in the sequence found in the right operand. \u201cHello\u201d in \u201cHello Goodbye\u201d is True not in Determines whether the value in the left operand is missing from the sequence found in the right operand. \u201cHello\u201d not in \u201cHello Goodbye\u201d is False CHAPTER 7 Managing Information 123 Creating and Using Functions To manage information properly, you need to organize the tools used to perform the required tasks. Each line of code that you create performs a specific task, and you combine these lines of code to achieve a desired result. Sometimes you need to repeat the instructions with different data, and in some cases your code becomes so long that keeping track of what each part does is hard. Functions serve as orga- nization tools that keep your code neat and tidy. In addition, functions make it easy to reuse the instructions you\u2019ve created as needed with different data. This section TABLE 7-9 Python Operator Precedence Operator Description () You use parentheses to group expressions and to override the default precedence so that you can force an operation of lower precedence (such as addition) to take precedence over an operation of higher precedence (such as multiplication). ** Exponentiation raises the value of the left operand to the power of the right operand. ~ + - Unary operators interact with a single variable or expression. * / % // Multiply, divide, modulo, and floor division. + - Addition and subtraction. >> << Right and left bitwise shift. & Bitwise AND. ^ | Bitwise exclusive OR and standard OR. <= < > >= Comparison operators. == != Equality operators. = %= /= //= -= += *= **= Assignment operators. Is is not Identity operators. In not in Membership"}, {"filename": "Beginning Programming with Python.pdf", "text": "precedence over an operation of higher precedence (such as multiplication). ** Exponentiation raises the value of the left operand to the power of the right operand. ~ + - Unary operators interact with a single variable or expression. * / % // Multiply, divide, modulo, and floor division. + - Addition and subtraction. >> << Right and left bitwise shift. & Bitwise AND. ^ | Bitwise exclusive OR and standard OR. <= < > >= Comparison operators. == != Equality operators. = %= /= //= -= += *= **= Assignment operators. Is is not Identity operators. In not in Membership operators. not or and Logical operators. 124 PART 2 Talking the Talk of the chapter tells you all about functions. More important, in this section you start creating your first serious applications in the same way that professional developers do. Viewing functions as code packages You go to your closet, open the door, and everything spills out. In fact, it\u2019s an avalanche, and you\u2019re lucky that you\u2019ve survived. That bowling ball in the top shelf could have done some severe damage! However, you\u2019re armed with storage boxes and soon you have everything in the closet in neatly organized boxes. The shoes go in one box, games in another, and old cards and letters in yet another. After you\u2019re done, you can find anything you want in the closet without fear of injury. Functions are just like that: They take messy code and place it in packages that make it easy to see what you have and understand how it works. Commentaries abound on just what functions are and why they\u2019re necessary, but when you boil down all that text, it comes down to a single idea: Functions provide a means of packaging code to make it easy to find and access. If you can think of functions as organizers, you find that working with them is much easier. For example, you can avoid the problem that many developers have of stuffing the wrong items in a function. All your functions will have a single purpose, just like those storage boxes in the closet. Understanding code reusability You go to your closet, take out new pants and shirt, remove the labels, and put them on. At the end of the day, you take everything off and throw it in the trash. Hmmm . . . That really isn\u2019t what most people do. Most people take the clothes off, wash them, and then put them back into the closet for reuse. Functions are reus- able, too. No one wants to keep repeating the same task; it becomes monotonous and boring. When you create a function, you define a package of code that you can use over and over to perform the same task. All you need to do is tell the computer to perform a specific task by telling it which function to use. The computer faith- fully executes each instruction in the function absolutely every time you ask it to do"}, {"filename": "Beginning Programming with Python.pdf", "text": "do. Most people take the clothes off, wash them, and then put them back into the closet for reuse. Functions are reus- able, too. No one wants to keep repeating the same task; it becomes monotonous and boring. When you create a function, you define a package of code that you can use over and over to perform the same task. All you need to do is tell the computer to perform a specific task by telling it which function to use. The computer faith- fully executes each instruction in the function absolutely every time you ask it to do so. When you work with functions, the code that needs services from the function is named the caller, and it calls upon the function to perform tasks for it. Much of the information you see about functions refers to the caller. The caller must supply information to the function, and the function returns information to the caller. CHAPTER 7 Managing Information 125 At one time, computer programs didn\u2019t include the concept of code reusability. As a result, developers had to keep reinventing the same code. It didn\u2019t take long for someone to come up with the idea of functions, though, and the concept has evolved over the years until functions have become quite flexible. You can make functions do anything you want. Code reusability is a necessary part of applica- tions to \u00bb \u00bb Reduce development time \u00bb \u00bb Reduce programmer error \u00bb \u00bb Increase application reliability \u00bb \u00bb Allow entire groups to benefit from the work of one programmer \u00bb \u00bb Make code easier to understand \u00bb \u00bb Improve application efficiency In fact, functions do a whole list of things for applications in the form of reus- ability. As you work through the examples in this book, you see how reusability makes your life significantly easier. If not for reusability, you\u2019d still be program- ming by plugging 0s and 1s into the computer by hand. Defining a function Creating a function doesn\u2019t require much work. Python tends to make things fast and easy for you. The following steps show you the process of creating a function that you can later access: 1. Create a new notebook in Notebook. The book uses the filename BPPD_07_Managing_Information.ipynb, which is where you find all the source code for this chapter. See the Introduction for information on using the downloadable source. 2. Type def Hello(): and press Enter. This step tells Python to define a function named Hello. The parentheses are important because they define any requirements for using the function. (There aren\u2019t any requirements in this case.) The colon at the end tells Python that you\u2019re done defining the way in which people will access the function. Notice that the insertion pointer is now indented, as shown in Figure 7-1. This indentation is a reminder that you must give the function a task to perform. 126 PART 2 Talking the Talk 3. Type print(\u201cThis is my first Python function!\u201d) and press Enter. You"}, {"filename": "Beginning Programming with Python.pdf", "text": "Hello(): and press Enter. This step tells Python to define a function named Hello. The parentheses are important because they define any requirements for using the function. (There aren\u2019t any requirements in this case.) The colon at the end tells Python that you\u2019re done defining the way in which people will access the function. Notice that the insertion pointer is now indented, as shown in Figure 7-1. This indentation is a reminder that you must give the function a task to perform. 126 PART 2 Talking the Talk 3. Type print(\u201cThis is my first Python function!\u201d) and press Enter. You should notice something special, as shown in Figure 7-2. The insertion pointer is still indented because Notebook is waiting for you to provide the next step in the function. 4. Click Run Cell. The function is now complete. Even though this is a really simple function, it demonstrates the pattern you use when creating any Python function. You define a name, provide any requirements for using the function (none in this case), and provide a series of steps for using the function. A function ends when the insertion point is at the left side or you move to the next cell. Accessing functions After you define a function, you probably want to use it to perform useful work. Of course, this means knowing how to access the function. In the previous section, you create a new function named Hello(). To access this function, you type FIGURE 7-1: Define the name of your function. FIGURE 7-2: Notebook awaits your next instruction. CHAPTER 7 Managing Information 127 Hello() and click Run Cell. Figure 7-3 shows the output you see when you execute this function. Every function you create will provide a similar pattern of usage. You type the function name, an open parenthesis, any required input, and a close parenthesis; then you press Enter. In this case, you have no input, so all you type is Hello(). As the chapter progresses, you see other examples for which input is required. Sending information to functions The Hello() example in the previous section is nice because you don\u2019t have to keep typing that long string every time you want to say Hello(). However, it\u2019s also quite limited because you can use it to say only one thing. Functions should be flexible and allow you to do more than just one thing. Otherwise, you end up writing a lot of functions that vary by the data they use rather than the function- ality they provide. Using arguments helps you create functions that are flexible and can use a wealth of data. Understanding arguments The term argument doesn\u2019t mean that you\u2019re going to have a fight with the func- tion; it means that you supply information to the function to use in processing a request. Perhaps a better word for it would be input, but the term input has been used for so many other purposes that developers decided to use something a bit different: argument."}, {"filename": "Beginning Programming with Python.pdf", "text": "up writing a lot of functions that vary by the data they use rather than the function- ality they provide. Using arguments helps you create functions that are flexible and can use a wealth of data. Understanding arguments The term argument doesn\u2019t mean that you\u2019re going to have a fight with the func- tion; it means that you supply information to the function to use in processing a request. Perhaps a better word for it would be input, but the term input has been used for so many other purposes that developers decided to use something a bit different: argument. Although the purpose of an argument might not be clear from its name, understanding what it does is relatively straightforward. An argument makes it possible for you to send data to the function so that the function can use it when performing a task. Using arguments makes your function more flexible. The Hello() function is currently inflexible because it prints just one string. Add- ing an argument to the function can make it a lot more flexible because you can send strings to the function to say anything you want. To see how arguments work, create a new function in the notebook. This version of Hello(), Hello2(), requires an argument: def Hello2( Greeting ): print(Greeting) FIGURE 7-3: Whenever you type the function\u2019s name, you get the output the function provides. 128 PART 2 Talking the Talk Notice that the parentheses are no longer empty. They contain a word, Greeting, which is the argument for Hello2(). The Greeting argument is actually a variable that you can pass to print() in order to see it onscreen. Sending required arguments You have a new function, Hello2(). This function requires that you provide an argument to use it. At least, that\u2019s what you\u2019ve heard so far. Type Hello2() and click Run Cell. You see an error message, as shown in Figure 7-4, telling you that Hello2() requires an argument. Not only does Python tell you that the argument is missing, it tells you the name of the argument as well. Creating a function the way you have done so far means that you must supply an argument. Type Hello2(\u201cThis is an interesting func- tion.\u201d) and click Run Cell. This time, you see the expected output. However, you still don\u2019t know whether Hello2() is flexible enough to print multiple messages. Type Hello2(\u201cAnother message. . .\u201d) and click Run Cell. You see the expected output again, as shown in Figure 7-5, so Hello2() is indeed an improvement over Hello(). You might easily to assume that Greeting will accept only a string from the tests you have performed so far. Type Hello2(1234), click Run Cell, and you see 1234 as the output. Likewise, type Hello2(5 + 5) and click Run Cell. This time you see the result of the expression, which is 10. FIGURE 7-4: You must supply an argument or you get an error message. FIGURE 7-5: Use Hello2() to print any message you desire. CHAPTER"}, {"filename": "Beginning Programming with Python.pdf", "text": "and click Run Cell. You see the expected output again, as shown in Figure 7-5, so Hello2() is indeed an improvement over Hello(). You might easily to assume that Greeting will accept only a string from the tests you have performed so far. Type Hello2(1234), click Run Cell, and you see 1234 as the output. Likewise, type Hello2(5 + 5) and click Run Cell. This time you see the result of the expression, which is 10. FIGURE 7-4: You must supply an argument or you get an error message. FIGURE 7-5: Use Hello2() to print any message you desire. CHAPTER 7 Managing Information 129 Sending arguments by keyword As your functions become more complex and the methods to use them do as well, you may want to provide a little more control over precisely how you call the func- tion and provide arguments to it. Up until now, you have positional arguments, which means that you have supplied values in the order in which they appear in the argument list for the function definition. However, Python also has a method for sending arguments by keyword. In this case, you supply the name of the argu- ment followed by an equals sign (=) and the argument value. To see how this works, type the following function in the notebook: def AddIt(Value1, Value2): print(Value1, \" + \", Value2, \" = \", (Value1 + Value2)) Notice that the print() function argument includes a list of items to print and that those items are separated by commas. In addition, the arguments are of dif- ferent types. Python makes it easy to mix and match arguments in this manner. Time to test AddIt(). Of course, you want to try the function using positional arguments first, so type AddIt(2, 3) and click Run Cell. You see the expected out- put of 2 + 3 = 5. Now type AddIt(Value2 = 3, Value1 = 2) and click Run Cell. Again, you receive the output 2 + 3 = 5 even though the position of the arguments has been reversed. Giving function arguments a default value Whether you make the call using positional arguments or keyword arguments, the functions to this point have required that you supply a value. Sometimes a func- tion can use default values when a common value is available. Default values make the function easier to use and less likely to cause errors when a developer doesn\u2019t provide an input. To create a default value, you simply follow the argument name with an equals sign and the default value. To see how this works, type the follow- ing function in the notebook: def Hello3(Greeting = \"No Value Supplied\"): print(Greeting) This is yet another version of the original Hello() and updated Hello2() func- tions, but Hello3() automatically compensates for individuals who don\u2019t supply a value. When someone tries to call Hello3() without an argument, it doesn\u2019t raise an error. Type Hello3() and press Enter to see for yourself. Type Hello3(\u201cThis is a string.\u201d) to see"}, {"filename": "Beginning Programming with Python.pdf", "text": "a developer doesn\u2019t provide an input. To create a default value, you simply follow the argument name with an equals sign and the default value. To see how this works, type the follow- ing function in the notebook: def Hello3(Greeting = \"No Value Supplied\"): print(Greeting) This is yet another version of the original Hello() and updated Hello2() func- tions, but Hello3() automatically compensates for individuals who don\u2019t supply a value. When someone tries to call Hello3() without an argument, it doesn\u2019t raise an error. Type Hello3() and press Enter to see for yourself. Type Hello3(\u201cThis is a string.\u201d) to see a normal response. Lest you think the function is now unable to use other kinds of data, type Hello3(5) and press Enter; then Hello3(2 + 7) and press Enter. Figure 7-6 shows the output from all these tests. 130 PART 2 Talking the Talk Creating functions with a variable number of arguments In most cases, you know precisely how many arguments to provide with your function. It pays to work toward this goal whenever you can because functions with a fixed number of arguments are easier to troubleshoot later. However, sometimes you simply can\u2019t determine how many arguments the function will receive at the outset. For example, when you create a Python application that works at the command line, the user might provide no arguments, the maximum number of arguments (assuming there is more than one), or any number of argu- ments in between. Fortunately, Python provides a technique for sending a variable number of argu- ments to a function. You simply create an argument that has an asterisk in front of it, such as *VarArgs. The usual technique is to provide a second argument that contains the number of arguments passed as an input. Here is an example of a function that can print a variable number of elements. (Don\u2019t worry too much if you don\u2019t understand it completely now \u2014 you haven\u2019t seen some of these tech- niques used before.) def Hello4(ArgCount, *VarArgs): print(\"You passed \", ArgCount, \" arguments.\") for Arg in VarArgs: print(Arg) This example uses something called a for loop. You meet this structure in \u00adChapter 9. For now, all you really need to know is that it takes the arguments out of VarArgs one at a time, places the individual argument into Arg, and then prints Arg using print(). What should interest you most is seeing how a variable num- ber of arguments can work. After you type the function into the notebook, type Hello4(1, \u201cA Test String.\u201d) and click Run Cell. You should see the number of arguments and the test string as output \u2014 nothing too exiting there. However, now type Hello4(3, \u201cOne\u201d, \u201cTwo\u201d, \u201cThree\u201d) and click Run Cell. As shown in Figure 7-7, the function handles the variable number of arguments without any problem at all. FIGURE 7-6: Supply default arguments when possible to make your functions easier to use. CHAPTER 7 Managing Information 131 Returning information from functions Functions can display"}, {"filename": "Beginning Programming with Python.pdf", "text": "seeing how a variable num- ber of arguments can work. After you type the function into the notebook, type Hello4(1, \u201cA Test String.\u201d) and click Run Cell. You should see the number of arguments and the test string as output \u2014 nothing too exiting there. However, now type Hello4(3, \u201cOne\u201d, \u201cTwo\u201d, \u201cThree\u201d) and click Run Cell. As shown in Figure 7-7, the function handles the variable number of arguments without any problem at all. FIGURE 7-6: Supply default arguments when possible to make your functions easier to use. CHAPTER 7 Managing Information 131 Returning information from functions Functions can display data directly or they can return the data to the caller so that the caller can do something more with it. In some cases, a function displays data directly as well as returns data to the caller, but more commonly, a function either displays the data directly or returns it to the caller. Just how functions work depends on the kind of task the function is supposed to perform. For example, a function that performs a math-related task is more likely to return the data to the caller than certain other functions. To return data to a caller, a function needs to include the keyword return, fol- lowed by the data to return. You have no limit on what you can return to a caller. Here are some types of data that you commonly see returned by a function to a caller: \u00bb \u00bb Values: Any value is acceptable. You can return numbers, such as 1 or 2.5; strings, such as \u201cHello There!\u201d; or Boolean values, such as True or False. \u00bb \u00bb Variables: The content of any variable works just as well as a direct value. The caller receives whatever data is stored in the variable. \u00bb \u00bb Expressions: Many developers use expressions as a shortcut. For example, you can simply return A + B rather than perform the calculation, place the result in a variable, and then return the variable to the caller. Using the expression is faster and accomplishes the same task. \u00bb \u00bb Results from other functions: You can actually return data from another function as part of the return of your function. It\u2019s time to see how return values work. Type the following code into the notebook: def DoAdd(Value1, Value2): return Value1 + Value2 FIGURE 7-7: Variable argument functions can make your applications more flexible. 132 PART 2 Talking the Talk This function accepts two values as input and then returns the sum of those two values. Yes, you could probably perform this task without using a function, but this is how many functions start. To test this function, type print(\u201cThe sum of 3 + 4 is \u201d, DoAdd(3, 4)) and click Run Cell. You see the output shown in Figure 7-8. Comparing function output You use functions with return values in a number of ways. For example, the previ- ous section of this chapter shows how you can use functions to provide input for"}, {"filename": "Beginning Programming with Python.pdf", "text": "132 PART 2 Talking the Talk This function accepts two values as input and then returns the sum of those two values. Yes, you could probably perform this task without using a function, but this is how many functions start. To test this function, type print(\u201cThe sum of 3 + 4 is \u201d, DoAdd(3, 4)) and click Run Cell. You see the output shown in Figure 7-8. Comparing function output You use functions with return values in a number of ways. For example, the previ- ous section of this chapter shows how you can use functions to provide input for another function. You use functions to perform all sorts of tasks. One of the ways to use functions is for comparison purposes. You can actually create expressions from them that define a logical output. To see how this might work, use the DoAdd() function from the previous section. Type print(\u201c3 + 4 equals 2 + 5 is \u201d, (DoAdd(3, 4) == DoAdd(2, 5))) and click Run Cell. You see the truth value of the statement that 3 + 4 equals 2 + 5, as shown in Figure 7-9. The point is that functions need not provide just one use or that you view them in just one way. Functions can make your code quite versatile and flexible. Getting User Input Very few applications exist in their own world \u2014 that is, apart from the user. In fact, most applications interact with users in a major way because computers are designed to serve user needs. To interact with a user, an application must provide some means of obtaining user input. Fortunately, the most commonly used tech- nique for obtaining input is also relatively easy to implement. You simply use the input() function to do it. FIGURE 7-8: Return values can make your functions even more useful. FIGURE 7-9: Use your functions to perform a wide variety of tasks. CHAPTER 7 Managing Information 133 The input() function always outputs a string. Even if a user types a number, the output from the input() function is a string. This means that if you are expecting a number, you need to convert it after receiving the input. The input() function also lets you provide a string prompt. This prompt is displayed to tell the user what to provide in the way of information. The following example shows how to use the input() function in a simple way: Name = input(\"Tell me your name: \") print(\"Hello \", Name) In this case, the input() function asks the user for a name. After the user types a name and presses Enter, the example outputs a customized greeting to the user. Try running this example. Figure 7-10 shows typical results when you input John as the username. You can use input() for other kinds of data; all you need is the correct conversion function. For example, the code in the following example provides one technique for performing such a conversion, as shown here: ANumber = float(input(\"Type a number:"}, {"filename": "Beginning Programming with Python.pdf", "text": "a simple way: Name = input(\"Tell me your name: \") print(\"Hello \", Name) In this case, the input() function asks the user for a name. After the user types a name and presses Enter, the example outputs a customized greeting to the user. Try running this example. Figure 7-10 shows typical results when you input John as the username. You can use input() for other kinds of data; all you need is the correct conversion function. For example, the code in the following example provides one technique for performing such a conversion, as shown here: ANumber = float(input(\"Type a number: \")) print(\"You typed: \", ANumber) When you run this example, the application asks for a numeric input. The call to float() converts the input to a number. After the conversion, print() outputs the result. When you run the example using a value such as 5.5, you obtain the desired result. Understand that data conversion isn\u2019t without risk. If you attempt to type some- thing other than a number, you get an error message, as shown in Figure 7-11. Chapter 10 helps you understand how to detect and fix errors before they cause a system crash. FIGURE 7-10: Provide a username and see a greeting as output. FIGURE 7-11: Data conversion changes the input type to whatever you need, but could cause errors. CHAPTER 8 Making Decisions 135 Chapter 8 Making Decisions T he ability to make a decision, to take one path or another, is an essential element of performing useful work. Math gives the computer the capability to obtain useful information. Decisions enable you to do something with the information after obtaining it. Without the capability to make decisions, a com- puter would be useless. So any language you use will include the capability to make decisions in some manner. This chapter explores the techniques that Python uses to make decisions. You can find the downloadable source code for this chap- ter in the BPPD_08_Making_Decisions.ipynb file, as described in the book\u2019s Introduction. Think through the process you use when making a decision. You obtain the actual value of something, compare it to a desired value, and then act accordingly. For example, when you see a signal light and see that it\u2019s red, you compare the red light to the desired green light, decide that the light isn\u2019t green, and then stop. Most people don\u2019t take time to consider the process they use because they use it so many times every day. Decision making comes naturally to humans, but com- puters must perform the following tasks every time: 1. Obtain the actual or current value of something. 2. Compare the actual or current value to a desired value. 3. Perform an action that corresponds to the desired outcome of the comparison. IN THIS CHAPTER \u00bb \u00bb Using the if statement to make simple decisions \u00bb \u00bb Making advanced decisions using if...else \u00bb \u00bb Nesting statements 136 PART 2 Talking the Talk Making Simple Decisions by Using the if Statement The"}, {"filename": "Beginning Programming with Python.pdf", "text": "process they use because they use it so many times every day. Decision making comes naturally to humans, but com- puters must perform the following tasks every time: 1. Obtain the actual or current value of something. 2. Compare the actual or current value to a desired value. 3. Perform an action that corresponds to the desired outcome of the comparison. IN THIS CHAPTER \u00bb \u00bb Using the if statement to make simple decisions \u00bb \u00bb Making advanced decisions using if...else \u00bb \u00bb Nesting statements 136 PART 2 Talking the Talk Making Simple Decisions by Using the if Statement The if statement is the easiest method for making a decision in Python. It simply states that if something is true, Python should perform the steps that follow. The following sections tell you how you can use the if statement to make decisions of various sorts in Python. You may be surprised at what this simple statement can do for you. Understanding the if statement You use if statements regularly in everyday life. For example, you may say to yourself, \u201cIf it\u2019s Wednesday, I\u2019ll eat tuna salad for lunch.\u201d The Python if state- ment is a little less verbose, but it follows precisely the same pattern. Say you create a variable, TestMe, and place a value of 6 in it, like this: TestMe = 6 You can then ask the computer to check for a value of 6 in TestMe, like this: if TestMe == 6: print(\"TestMe does equal 6!\") Every Python if statement begins, oddly enough, with the word if. When Python sees if, it knows that you want it to make a decision. After the word if comes a condition. A condition simply states what sort of comparison you want Python to make. In this case, you want Python to determine whether TestMe contains the value 6. Notice that the condition uses the relational equality operator, ==, and not the assignment operator, =. A common mistake that developers make is to use the assignment operator rather than the equality operator. You can see a list of rela- tional operators in Chapter 7. The condition always ends with a colon (:). If you don\u2019t provide a colon, Python doesn\u2019t know that the condition has ended and will continue to look for additional conditions on which to base its decision. After the colon come any tasks you want Python to perform. In this case, Python prints a statement saying that TestMe is equal to 6. CHAPTER 8 Making Decisions 137 Using the if statement in an application You can use the if statement in a number of ways in Python. However, you imme- diately need to know about three common ways to use it: \u00bb \u00bb Use a single condition to execute a single statement when the condition is true. \u00bb \u00bb Use a single condition to execute multiple statements when the condition is true. \u00bb \u00bb Combine multiple conditions into a single decision and execute one or more statements when"}, {"filename": "Beginning Programming with Python.pdf", "text": "In this case, Python prints a statement saying that TestMe is equal to 6. CHAPTER 8 Making Decisions 137 Using the if statement in an application You can use the if statement in a number of ways in Python. However, you imme- diately need to know about three common ways to use it: \u00bb \u00bb Use a single condition to execute a single statement when the condition is true. \u00bb \u00bb Use a single condition to execute multiple statements when the condition is true. \u00bb \u00bb Combine multiple conditions into a single decision and execute one or more statements when the combined condition is true. The following sections explore these three possibilities and provide you with examples of their use. You see additional examples of how to use the if statement throughout the book because it\u2019s such an important method of making decisions. Working with relational operators A relational operator determines how a value on the left side of an expression compares to the value on the right side of an expression. After it makes the deter- mination, it outputs a value of true or false that reflects the truth value of the expression. For example, 6 == 6 is true, while 5 == 6 is false. Table 7-3 in Chapter 7 lists the relational operators. The following steps show how to create and use an if statement. 1. Open a new notebook. You can also use the downloadable source file, BPPD_08_Making_Decisions. ipynb. 2. Type TestMe = 6 and press Enter. This step assigns a value of 6 to TestMe. Notice that it uses the assignment operator and not the equality operator. 3. Type if TestMe == 6: and press Enter. This step creates an if statement that tests the value of TestMe by using the equality operator. You should notice two features of Notebook at this point: \u2022 The word if is highlighted in a different color than the rest of the statement. \u2022 The next line is automatically indented. 138 PART 2 Talking the Talk 4. Type print(\u201cTestMe does equal 6!\u201d) and press Enter. Notice that Python doesn\u2019t execute the if statement yet. It does indent the next line. The word print appears in a special color because it\u2019s a function name. In addition, the text appears in another color to show you that it\u2019s a string value. Color coding makes it much easier to see how Python works. 5. Click Run Cell. Notebook executes the if statement, as shown in Figure 8-1. Notice that the output is in yet another color. Because TestMe contains a value of 6, the if statement works as expected. Performing multiple tasks Sometimes you want to perform more than one task after making a decision. Python relies on indentation to determine when to stop executing tasks as part of an if statement. As long as the next line is indented, it\u2019s part of the if statement. When the next line is outdented, it becomes the first line of code outside the if"}, {"filename": "Beginning Programming with Python.pdf", "text": "works. 5. Click Run Cell. Notebook executes the if statement, as shown in Figure 8-1. Notice that the output is in yet another color. Because TestMe contains a value of 6, the if statement works as expected. Performing multiple tasks Sometimes you want to perform more than one task after making a decision. Python relies on indentation to determine when to stop executing tasks as part of an if statement. As long as the next line is indented, it\u2019s part of the if statement. When the next line is outdented, it becomes the first line of code outside the if block. A code block consists of a statement and the tasks associated with that state- ment. The same term is used no matter what kind of statement you\u2019re working with, but in this case, you\u2019re working with an if statement that is part of a code block. The following steps show how to use indentation to execute multiple steps as part of an if statement. 1. Type the following code into the notebook \u2014 pressing Enter after each line: TestMe = 6 if TestMe == 6: print(\"TestMe does equal 6!\") print(\"All done!\") FIGURE 8-1: Simple if statements can help your application know what to do in certain conditions. CHAPTER 8 Making Decisions 139 Notice that the shell continues to indent lines as long as you continue to type code. Each line you type is part of the current if statement code block. When working in the shell, you create a block by typing one line of code after another. If you press Enter twice in a row without entering any text, the code block is ended, and Python executes the entire code block at one time. Of course, when working in Notebook, you must click Run Cell to execute the code within that cell. 2. Click Run Cell. Python executes the entire code block. You see the output shown in Figure 8-2. Making multiple comparisons by using logical operators So far, the examples have all shown a single comparison. Real life often requires that you make multiple comparisons to account for multiple requirements. For example, when baking cookies, if the timer has gone off and the edges are brown, it\u2019s time to take the cookies out of the oven. To make multiple comparisons, you create multiple conditions by using relational operators and combine them by using logical operators (see Table 7-4 in \u00adChapter 7). A logical operator describes how to combine conditions. For example, you might say x == 6 and y == 7 as two conditions for performing one or more tasks. The and keyword is a logical operator that states that both conditions must be true. One of the most common uses for making multiple comparisons is to determine when a value is within a certain range. In fact, range checking, the act of determin- ing whether data is between two values, is an important part of making your application secure and user friendly. The following steps help"}, {"filename": "Beginning Programming with Python.pdf", "text": "7-4 in \u00adChapter 7). A logical operator describes how to combine conditions. For example, you might say x == 6 and y == 7 as two conditions for performing one or more tasks. The and keyword is a logical operator that states that both conditions must be true. One of the most common uses for making multiple comparisons is to determine when a value is within a certain range. In fact, range checking, the act of determin- ing whether data is between two values, is an important part of making your application secure and user friendly. The following steps help you see how to per- form this task. In this case, you create a file so that you can run the application multiple times. 1. Type the following code into the notebook \u2014 pressing Enter after each line: FIGURE 8-2: A code block can contain multiple lines of code \u2014 one for each task. 140 PART 2 Talking the Talk Value = int(input(\"Type a number between 1 and 10: \")) if (Value > 0) and (Value <= 10): print(\"You typed: \", Value) The example begins by obtaining an input value. You have no idea what the user has typed other than that it\u2019s a value of some sort. The use of the int() function means that the user must type a whole number (one without a decimal portion). Otherwise, the application will raise an exception (an error indication; Chapter 10 describes exceptions). This first check ensures that the input is at least of the correct type. The if statement contains two conditions. The first states that Value must be greater than 0. You could also present this condition as Value >= 1. The second condition states that Value must be less than or equal to 10. Only when Value meets both of these conditions will the if statement succeed and print the value the user typed. 2. Click Run Cell. Python prompts you to type a number between 1 and 10. 3. Type 5 and press Enter. The application determines that the number is in the right range and outputs the message shown in Figure 8-3. 4. Select the cell again. Repeat Steps 2 and 3, but type 22 instead of 5. The application doesn\u2019t output anything because the number is in the wrong range. Whenever you type a value that\u2019s outside the programmed range, the statements that are part of the if block aren\u2019t executed. Note that the input value updates by one. Each time you execute a cell, the input value will change. Given that the input value is at 4 in Figure 8-3, you now see In [5]: in the Notebook margin. 5. Select the cell again. Repeat Steps 2 and 3, but type 5.5 instead of 5. Python displays the error message shown in Figure 8-4. Even though you may think of 5.5 and 5 as both being numbers, Python sees the first number as a floating-point value and the second as an integer. (Note also"}, {"filename": "Beginning Programming with Python.pdf", "text": "of the if block aren\u2019t executed. Note that the input value updates by one. Each time you execute a cell, the input value will change. Given that the input value is at 4 in Figure 8-3, you now see In [5]: in the Notebook margin. 5. Select the cell again. Repeat Steps 2 and 3, but type 5.5 instead of 5. Python displays the error message shown in Figure 8-4. Even though you may think of 5.5 and 5 as both being numbers, Python sees the first number as a floating-point value and the second as an integer. (Note also that the input value is now at 6.) FIGURE 8-3: The application verifies the value is in the right range and outputs a message. CHAPTER 8 Making Decisions 141 6. Repeat Steps 2 and 3, but type Hello instead of 5. Python displays about the same error message as before. Python doesn\u2019t differentiate between types of wrong input. It knows only that the input type is incorrect and therefore unusable. The best applications use various kinds of range checking to ensure that the appli- cation behaves in a predictable manner. The more predictable an application becomes, the less the user thinks about the application and the more time the user spends on performing useful work. Productive users tend to be a lot happier than those who constantly fight with their applications. Choosing Alternatives by Using the if. . .else Statement Many of the decisions you make in an application fall into a category of choosing one of two options based on conditions. For example, when looking at a signal light, you choose one of two options: press on the brake to stop or press the accelerator to con- tinue. The option you choose depends on the conditions. A green light signals that you can continue on through the light; a red light tells you to stop. The following sections describe how Python makes choosing between two alternatives possible. Understanding the if. . .else statement With Python, you choose one of two alternatives by using the else clause of the if statement. A clause is an addition to a code block that modifies the way in which it works. Most code blocks support multiple clauses. In this case, the else clause enables you to perform an alternative task, which increases the usefulness of the if statement. Most developers refer to the form of the if statement that has the else clause included as the if...else statement, with the ellipsis implying that something happens between if and else. FIGURE 8-4: Typing the wrong type of information results in an error message. 142 PART 2 Talking the Talk Sometimes developers encounter problems with the if...else statement because they forget that the else clause always executes when the conditions for the if statement aren\u2019t met. Be sure to think about the consequences of always execut- ing a set of tasks when the conditions are false. Sometimes doing so can lead to unintended consequences. Using"}, {"filename": "Beginning Programming with Python.pdf", "text": "form of the if statement that has the else clause included as the if...else statement, with the ellipsis implying that something happens between if and else. FIGURE 8-4: Typing the wrong type of information results in an error message. 142 PART 2 Talking the Talk Sometimes developers encounter problems with the if...else statement because they forget that the else clause always executes when the conditions for the if statement aren\u2019t met. Be sure to think about the consequences of always execut- ing a set of tasks when the conditions are false. Sometimes doing so can lead to unintended consequences. Using the if. . .else statement in an application The example in the previous section is a little less helpful than it could be when the user enters a value that\u2019s outside the intended range. Even entering data of the wrong type produces an error message, but entering the correct type of data out- side the range tells the user nothing. In this example, you discover the means for correcting this problem by using an else clause. The following steps demonstrate just one reason to provide an alternative action when the condition for an if statement is false: 1. Type the following code into the notebook \u2014 pressing Enter after each line: Value = int(input(\"Type a number between 1 and 10: \")) if (Value > 0) and (Value <= 10): print(\"You typed: \", Value) else: print(\"The value you typed is incorrect!\") As before, the example obtains input from the user and then determines whether that input is in the correct range. However, in this case, the else clause provides an alternative output message when the user enters data outside the desired range. Notice that the else clause ends with a colon, just as the if statement does. Most clauses that you use with Python statements have a colon associated with them so that Python knows when the clause has ended. If you receive a coding error for your application, make sure that you check for the presence of the colon as needed. 2. Click Run Cell. Python prompts you to type a number between 1 and 10. 3. Type 5 and press Enter. The application determines that the number is in the right range and outputs the message shown previously in Figure 8-3. CHAPTER 8 Making Decisions 143 4. Repeat Steps 2 and 3, but type 22 instead of 5. This time the application outputs the error message shown in Figure 8-5. The user now knows that the input is outside the desired range and knows to try entering it again. Using the if. . .elif statement in an application You go to a restaurant and look at the menu. The restaurant offers eggs, pancakes, waffles, and oatmeal for breakfast. After you choose one of the items, the server brings it to you. Creating a menu selection requires something like an if...else statement, but with a little extra oomph. In this case, you use the elif clause to create another set"}, {"filename": "Beginning Programming with Python.pdf", "text": "time the application outputs the error message shown in Figure 8-5. The user now knows that the input is outside the desired range and knows to try entering it again. Using the if. . .elif statement in an application You go to a restaurant and look at the menu. The restaurant offers eggs, pancakes, waffles, and oatmeal for breakfast. After you choose one of the items, the server brings it to you. Creating a menu selection requires something like an if...else statement, but with a little extra oomph. In this case, you use the elif clause to create another set of conditions. The elif clause is a combination of the else clause and a separate if statement. The following steps describe how to use the if...elif statement to create a menu. 1. Type the following code into the notebook \u2014 pressing Enter after each line: print(\"1. Red\") print(\"2. Orange\") print(\"3. Yellow\") print(\"4. Green\") print(\"5. Blue\") print(\"6. Purple\") Choice = int(input(\"Select your favorite color: \")) if (Choice == 1): print(\"You chose Red!\") elif (Choice == 2): print(\"You chose Orange!\") FIGURE 8-5: Providing feedback for incorrect input is always a good idea. 144 PART 2 Talking the Talk elif (Choice == 3): print(\"You chose Yellow!\") elif (Choice == 4): print(\"You chose Green!\") elif (Choice == 5): print(\"You chose Blue!\") elif (Choice == 6): print(\"You chose Purple!\") else: print(\"You made an invalid choice!\") The example begins by displaying a menu. The user sees a list of choices for the application. It then asks the user to make a selection, which it places inside Choice. The use of the int() function ensures that the user can\u2019t type anything other than a number. After the user makes a choice, the application looks for it in the list of potential values. In each case, Choice is compared against a particular value to create a condition for that value. When the user types 1, the application outputs the message \"You chose Red!\". If none of the options is correct, the else clause is executed by default to tell the user that the input choice is invalid. 2. Click Run Cell. Python displays the menu. The application asks you to select your favorite color. 3. Type 1 and press Enter. The application displays the appropriate output message, as shown in Figure 8-6. 4. Repeat Steps 3 and 4, but type 5 instead of 1. The application displays a different output message \u2014 the one associated with the requested color. 5. Repeat Steps 3 and 4, but type 8 instead of 1. The application tells you that you made an invalid choice. 6. Repeat Steps 3 and 4, but type Red instead of 1. The application displays the expected error message, as shown in Figure 8-7. Any application you create should be able to detect errors and incorrect inputs. Chapter 10 shows you how to handle errors so that they\u2019re user friendly. CHAPTER 8 Making Decisions 145 FIGURE 8-6: Menus let you choose one option from a list of"}, {"filename": "Beginning Programming with Python.pdf", "text": "different output message \u2014 the one associated with the requested color. 5. Repeat Steps 3 and 4, but type 8 instead of 1. The application tells you that you made an invalid choice. 6. Repeat Steps 3 and 4, but type Red instead of 1. The application displays the expected error message, as shown in Figure 8-7. Any application you create should be able to detect errors and incorrect inputs. Chapter 10 shows you how to handle errors so that they\u2019re user friendly. CHAPTER 8 Making Decisions 145 FIGURE 8-6: Menus let you choose one option from a list of options. FIGURE 8-7: Every application you create should include some means of detecting errant input. 146 PART 2 Talking the Talk Using Nested Decision Statements The decision-making process often happens in levels. For example, when you go to the restaurant and choose eggs for breakfast, you have made a first-level deci- sion. Now the server asks you what type of toast you want with your eggs. The server wouldn\u2019t ask this question if you had ordered pancakes, so the selection of toast becomes a second-level decision. When the breakfast arrives, you decide whether you want to use jelly on your toast. This is a third-level decision. If you had selected a kind of toast that doesn\u2019t work well with jelly, you might not have had to make this decision at all. This process of making decisions in levels, with each level reliant on the decision made at the previous level, is called nesting. Developers often use nesting techniques to create applications that can make complex decisions based on various inputs. The following sections describe sev- eral kinds of nesting you can use within Python to make complex decisions. Using multiple if or if. . .else statements The most commonly used multiple selection technique is a combination of if and if...else statements. This form of selection is often called a selection tree because of its resemblance to the branches of a tree. In this case, you follow a particular path to obtain a desired result. The following steps show how to create a selection tree: 1. Type the following code into the notebook \u2014 pressing Enter after each line: One = int(input(\"Type a number between 1 and 10: \")) Two = int(input(\"Type a number between 1 and 10: \")) NO SWITCH STATEMENT? If you\u2019ve worked with other languages, you might notice that Python lacks a switch statement (if you haven\u2019t, there is no need to worry about it with Python). Developers commonly use the switch statement in other languages to create menu-based applica- tions. The if...elif statement is generally used for the same purpose in Python. However, the if...elif statement doesn\u2019t provide quite the same functionality as a switch statement because it doesn\u2019t enforce the use of a single variable for comparison purposes. As a result, some developers rely on Python\u2019s dictionary functionality to stand in for the switch statement. Chapter 14 describes how to work with dictionaries. CHAPTER 8 Making"}, {"filename": "Beginning Programming with Python.pdf", "text": "that Python lacks a switch statement (if you haven\u2019t, there is no need to worry about it with Python). Developers commonly use the switch statement in other languages to create menu-based applica- tions. The if...elif statement is generally used for the same purpose in Python. However, the if...elif statement doesn\u2019t provide quite the same functionality as a switch statement because it doesn\u2019t enforce the use of a single variable for comparison purposes. As a result, some developers rely on Python\u2019s dictionary functionality to stand in for the switch statement. Chapter 14 describes how to work with dictionaries. CHAPTER 8 Making Decisions 147 if (One >= 1) and (One <= 10): if (Two >= 1) and (Two <= 10): print(\"Your secret number is: \", One * Two) else: print(\"Incorrect second value!\") else: print(\"Incorrect first value!\") This is simply an extension of the example you see in the \u201cUsing the if. . .else statement in an application\u201d section of the chapter. However, notice that the indentation is different. The second if...else statement is indented within the first if...else statement. The indentation tells Python that this is a second-level statement. 2. Click Run Cell. You see a Python Shell window open with a prompt to type a number between 1 and 10. 3. Type 5 and press Enter. The shell asks for another number between 1 and 10. 4. Type 2 and press Enter. You see the combination of the two numbers as output, as shown in Figure 8-8. This example has the same input features as the previous if. . .else example. For example, if you attempt to provide a value that\u2019s outside the requested range, you see an error message. The error message is tailored for either the first or second input value so that the user knows which value was incorrect. FIGURE 8-8: Adding multiple levels lets you perform tasks with greater complexity. 148 PART 2 Talking the Talk Providing specific error messages is always useful because users tend to become confused and frustrated otherwise. In addition, a specific error message helps you find errors in your application much faster. Combining other types of decisions You can use any combination of if, if...else, and if...elif statements to pro- duce a desired outcome. You can nest the code blocks as many levels deep as needed to perform the required checks. For example, Listing 8-1 shows what you might accomplish for a breakfast menu. LISTING 8-1: Creating a Breakfast Menu print(\"1. Eggs\") print(\"2. Pancakes\") print(\"3. Waffles\") print(\"4. Oatmeal\") MainChoice = int(input(\"Choose a breakfast item: \")) if (MainChoice == 2): Meal = \"Pancakes\" elif (MainChoice == 3): Meal = \"Waffles\" if (MainChoice == 1): print(\"1. Wheat Toast\") print(\"2. Sour Dough\") print(\"3. Rye Toast\") print(\"4. Pancakes\") Bread = int(input(\"Choose a type of bread: \")) if (Bread == 1): print(\"You chose eggs with wheat toast.\") elif (Bread == 2): print(\"You chose eggs with sour dough.\") elif (Bread == 3): print(\"You chose eggs with rye toast.\") elif (Bread == 4): print(\"You chose eggs with pancakes.\") else:"}, {"filename": "Beginning Programming with Python.pdf", "text": "breakfast menu. LISTING 8-1: Creating a Breakfast Menu print(\"1. Eggs\") print(\"2. Pancakes\") print(\"3. Waffles\") print(\"4. Oatmeal\") MainChoice = int(input(\"Choose a breakfast item: \")) if (MainChoice == 2): Meal = \"Pancakes\" elif (MainChoice == 3): Meal = \"Waffles\" if (MainChoice == 1): print(\"1. Wheat Toast\") print(\"2. Sour Dough\") print(\"3. Rye Toast\") print(\"4. Pancakes\") Bread = int(input(\"Choose a type of bread: \")) if (Bread == 1): print(\"You chose eggs with wheat toast.\") elif (Bread == 2): print(\"You chose eggs with sour dough.\") elif (Bread == 3): print(\"You chose eggs with rye toast.\") elif (Bread == 4): print(\"You chose eggs with pancakes.\") else: print(\"We have eggs, but not that kind of bread.\") elif (MainChoice == 2) or (MainChoice == 3): print(\"1. Syrup\") print(\"2. Strawberries\") print(\"3. Powdered Sugar\") Topping = int(input(\"Choose a topping: \")) CHAPTER 8 Making Decisions 149 if (Topping == 1): print (\"You chose \" + Meal + \" with syrup.\") elif (Topping == 2): print (\"You chose \" + Meal + \" with strawberries.\") elif (Topping == 3): print (\"You chose \" + Meal + \" with powdered sugar.\") else: print (\"We have \" + Meal + \", but not that topping.\") elif (MainChoice == 4): print(\"You chose oatmeal.\") else: print(\"We don't serve that breakfast item!\") This example has some interesting features. For one thing, you might assume that an if...elif statement always requires an else clause. This example shows a situation that doesn\u2019t require such a clause. You use an if...elif statement to ensure that Meal contains the correct value, but you have no other options to consider. The selection technique is the same as you saw for the previous examples. A user enters a number in the correct range to obtain a desired result. Three of the selec- tions require a secondary choice, so you see the menu for that choice. For example, when ordering eggs, it isn\u2019t necessary to choose a topping, but you do want a top- ping for pancakes or waffles. Notice that this example also combines variables and text in a specific way. Because a topping can apply equally to waffles or pancakes, you need some method for defining precisely which meal is being served as part of the output. The Meal variable that the application defines earlier is used as part of the output after the topping choice is made. The best way to understand this example is to play with it. Try various menu com- binations to see how the application works. CHAPTER 9 Performing Repetitive Tasks 151 Chapter 9 Performing Repetitive Tasks A ll the examples in the book so far have performed a series of steps just one time and then stopped. However, the real world doesn\u2019t work this way. Many of the tasks that humans perform are repetitious. For example, the doctor might state that you need to exercise more and tell you to do 100 push-ups each day. If you just do one push-up, you won\u2019t get much benefit from the exer- cise and you definitely won\u2019t be following"}, {"filename": "Beginning Programming with Python.pdf", "text": "menu com- binations to see how the application works. CHAPTER 9 Performing Repetitive Tasks 151 Chapter 9 Performing Repetitive Tasks A ll the examples in the book so far have performed a series of steps just one time and then stopped. However, the real world doesn\u2019t work this way. Many of the tasks that humans perform are repetitious. For example, the doctor might state that you need to exercise more and tell you to do 100 push-ups each day. If you just do one push-up, you won\u2019t get much benefit from the exer- cise and you definitely won\u2019t be following the doctor\u2019s orders. Of course, because you know precisely how many push-ups to do, you can perform the task a specific number of times. Python allows the same sort of repetition by using the for statement. Unfortunately, you don\u2019t always know how many times to perform a task. For example, consider needing to check a stack of coins for one of extreme rarity. Tak- ing just the first coin from the top, examining it, and deciding that it either is or isn\u2019t the rare coin doesn\u2019t complete the task. Instead, you must examine each coin in turn, looking for the rare coin. Your stack may contain more than one. Only after you have looked at every coin in the stack can you say that the task is com- plete. However, because you don\u2019t know how many coins are in the stack, you don\u2019t know how many times to perform the task at the outset. You only know the task is done when the stack is gone. Python performs this kind of repetition by using the while statement. IN THIS CHAPTER \u00bb \u00bb Performing a task a specific number of times \u00bb \u00bb Performing a task until completion \u00bb \u00bb Placing one task loop within another 152 PART 2 Talking the Talk Most programming languages call any sort of repeating sequence of events a loop. The idea is to picture the repetition as a circle, with the code going round and round executing tasks until the loop ends. Loops are an essential part of applica- tion elements such as menus. In fact, writing most modern applications without using loops would be impossible. In some cases, you must create loops within loops. For example, to create a multiplication table, you use a loop within a loop. The inner loop calculates the column values and the outer loop moves between rows. You see such an example later in the chapter, so don\u2019t worry too much about understanding precisely how such things work right now. You can find the downloadable source code for this chapter in the BPPD_09_Performing_Repetitive_Tasks.ipynb file, as described in the book\u2019s Introduction. Processing Data Using the for Statement The first looping code block that most developers encounter is the for statement. It\u2019s hard to imagine creating a conventional programming language that lacks such a statement. In this case, the loop executes a fixed number of times, and you know the number"}, {"filename": "Beginning Programming with Python.pdf", "text": "values and the outer loop moves between rows. You see such an example later in the chapter, so don\u2019t worry too much about understanding precisely how such things work right now. You can find the downloadable source code for this chapter in the BPPD_09_Performing_Repetitive_Tasks.ipynb file, as described in the book\u2019s Introduction. Processing Data Using the for Statement The first looping code block that most developers encounter is the for statement. It\u2019s hard to imagine creating a conventional programming language that lacks such a statement. In this case, the loop executes a fixed number of times, and you know the number of times it will execute before the loop even begins. Because everything about a for loop is known at the outset, for loops tend to be the easiest kind of loop to use. However, in order to use one, you need to know how many times to execute the loop. The following sections describe the for loop in greater detail. Understanding the for statement A for loop begins with a for statement. The for statement describes how to per- form the loop. The Python for loop works through a sequence of some type. It doesn\u2019t matter whether the sequence is a series of letters in a string or items within a collection. You can even specify a range of values to use by specifying the range() function. Here\u2019s a simple for statement. for Letter in \"Howdy!\": The statement begins with the keyword for. The next item is a variable that holds a single element of a sequence. In this case, the variable name is Letter. The in keyword tells Python that the sequence comes next. In this case, the sequence is the string \"Howdy\". The for statement always ends with a colon, just as the decision-making statements described in Chapter 8 do. CHAPTER 9 Performing Repetitive Tasks 153 Indented under the for statement are the tasks you want performed within the for loop. Python considers every following indented statement part of the code block that composes the for loop. Again, the for loop works just like the decision- making statements in Chapter 8. Creating a basic for loop The best way to see how a for loop actually works is to create one. In this case, the example uses a string for the sequence. The for loop processes each of the char- acters in the string in turn until it runs out of characters. 1. Open a new notebook. You can also use the downloadable source file, BPPD_09_Performing_ Repetitive_Tasks.ipynb. 2. Type the following code into the notebook \u2014 pressing Enter after each line: LetterNum = 1 for Letter in \"Howdy!\": print(\"Letter \", LetterNum, \" is \", Letter) LetterNum+=1 The example begins by creating a variable, LetterNum, to track the number of letters that have been processed. Every time the loop completes, LetterNum is updated by 1. The for statement works through the sequence of letters in the string \"Howdy!\". It places each letter, in turn, in Letter. The code that"}, {"filename": "Beginning Programming with Python.pdf", "text": "runs out of characters. 1. Open a new notebook. You can also use the downloadable source file, BPPD_09_Performing_ Repetitive_Tasks.ipynb. 2. Type the following code into the notebook \u2014 pressing Enter after each line: LetterNum = 1 for Letter in \"Howdy!\": print(\"Letter \", LetterNum, \" is \", Letter) LetterNum+=1 The example begins by creating a variable, LetterNum, to track the number of letters that have been processed. Every time the loop completes, LetterNum is updated by 1. The for statement works through the sequence of letters in the string \"Howdy!\". It places each letter, in turn, in Letter. The code that follows displays the current LetterNum value and its associated character found in Letter. 3. Click Run Cell. The application displays the letter sequence along with the letter number, as shown in Figure 9-1. Controlling execution with the break statement Life is often about exceptions to the rule. For example, you might want an assem- bly line to produce a number of clocks. However, at some point, the assembly line runs out of a needed part. If the part isn\u2019t available, the assembly line must stop in the middle of the processing cycle. The count hasn\u2019t completed, but the line must be stopped anyway until the missing part is restocked. 154 PART 2 Talking the Talk Interruptions also occur in computers. You might be streaming data from an online source when a network glitch occurs and breaks the connection; the stream temporarily runs dry, so the application runs out of things to do even though the set number of tasks isn\u2019t completed. The break clause makes breaking out of a loop possible. However, you don\u2019t sim- ply place the break clause in your code \u2014 you surround it with an if statement that defines the condition for issuing a break. The statement might say some- thing like this: If the stream runs dry, then break out of the loop. In this example, you see what happens when the count reaches a certain level when processing a string. The example is a little contrived in the interest of keep- ing things simple, but it reflects what could happen in the real world when a data element is too long to process (possibly indicating an error condition). 1. Type the following code into the notebook \u2014 pressing Enter after each line: Value = input(\"Type less than 6 characters: \") LetterNum = 1 for Letter in Value: print(\"Letter \", LetterNum, \" is \", Letter) LetterNum+=1 if LetterNum > 6: print(\"The string is too long!\") break FIGURE 9-1: Use the for loop to process the characters in a string one at a time. CHAPTER 9 Performing Repetitive Tasks 155 This example builds on the one found in the previous section. However, it lets the user provide a variable-length string. When the string is longer than six characters, the application stops processing it. The if statement contains the conditional code. When LetterNum is greater than 6, it means that the string is too long. Notice the"}, {"filename": "Beginning Programming with Python.pdf", "text": "Letter in Value: print(\"Letter \", LetterNum, \" is \", Letter) LetterNum+=1 if LetterNum > 6: print(\"The string is too long!\") break FIGURE 9-1: Use the for loop to process the characters in a string one at a time. CHAPTER 9 Performing Repetitive Tasks 155 This example builds on the one found in the previous section. However, it lets the user provide a variable-length string. When the string is longer than six characters, the application stops processing it. The if statement contains the conditional code. When LetterNum is greater than 6, it means that the string is too long. Notice the second level of indenta- tion used for the if statement. In this case, the user sees an error message stating that the string is too long, and then the code executes a break to end the loop. 2. Click Run Cell. Python displays a prompt asking for input. 3. Type Hello and press Enter. The application lists each character in the string, as shown in Figure 9-2. 4. Perform Steps 2 and 3 again, but type I am too long. instead of Hello. The application displays the expected error message and stops processing the string at character 6, as shown in Figure 9-3. FIGURE 9-2: A short string is successfully processed by the application. FIGURE 9-3: Long strings are truncated to ensure that they remain a certain size. 156 PART 2 Talking the Talk This example adds length checking to your repertoire of application data error checks. Chapter 8 shows how to perform range checks, which ensure that a value meets specific limits. The length check is necessary to ensure that data, especially strings, aren\u2019t going to overrun the size of data fields. In addition, a small input size makes it harder for intruders to perform certain types of hacks on your sys- tem, which makes your system more secure. Controlling execution with the continue statement Sometimes you want to check every element in a sequence, but don\u2019t want to pro- cess certain elements. For example, you might decide that you want to process all the information for every car in a database except brown cars. Perhaps you simply don\u2019t need the information about that particular color of car. The break clause simply ends the loop, so you can\u2019t use it in this situation. Otherwise, you won\u2019t see the remaining elements in the sequence. The break clause alternative that many developers use is the continue clause. As with the break clause, the continue clause appears as part of an if statement. However, processing continues with the next element in the sequence rather than ending completely. The following steps help you see how the continue clause differs from the break clause. In this case, the code refuses to process the letter w, but will process every other letter in the alphabet. 1. Type the following code into the notebook \u2014 pressing Enter after each line: LetterNum = 1 for Letter in \"Howdy!\": if Letter == \"w\": continue print(\"Encountered w, not processed.\")"}, {"filename": "Beginning Programming with Python.pdf", "text": "developers use is the continue clause. As with the break clause, the continue clause appears as part of an if statement. However, processing continues with the next element in the sequence rather than ending completely. The following steps help you see how the continue clause differs from the break clause. In this case, the code refuses to process the letter w, but will process every other letter in the alphabet. 1. Type the following code into the notebook \u2014 pressing Enter after each line: LetterNum = 1 for Letter in \"Howdy!\": if Letter == \"w\": continue print(\"Encountered w, not processed.\") print(\"Letter \", LetterNum, \" is \", Letter) LetterNum+=1 This example is based on the one found in the \u201cCreating a basic for loop\u201d section, earlier in this chapter. However, this example adds an if statement with the continue clause in the if code block. Notice the print() function that is part of the if code block. You never see this string printed because the current loop iteration ends immediately. CHAPTER 9 Performing Repetitive Tasks 157 2. Click Run Cell. Python displays the letter sequence along with the letter number, as shown in Figure 9-4. However, notice the effect of the continue clause \u2014 the letter w isn\u2019t processed. Controlling execution with the pass clause The Python language includes something not commonly found in other languages: a second sort of continue clause. The pass clause works almost the same way as the continue clause does, except that it allows completion of the code in the if code block in which it appears. The following steps use an example that is pre- cisely the same as the one found in the previous section, \u201cControlling execution with the continue statement,\u201d except that it uses a pass clause instead. 1. Type the following code into the notebook \u2014 pressing Enter after each line: LetterNum = 1 for Letter in \"Howdy!\": if Letter == \"w\": pass print(\"Encountered w, not processed.\") print(\"Letter \", LetterNum, \" is \", Letter) LetterNum+=1 2. Click Run Cell. You see a Python Shell window open. The application displays the letter sequence along with the letter number, as shown in Figure 9-5. However, notice the effect of the pass clause \u2014 the letter w isn\u2019t processed. In addition, the example displays the string that wasn\u2019t displayed for the continue clause example. FIGURE 9-4: Use the continue clause to avoid processing specific elements. 158 PART 2 Talking the Talk The continue clause enables you to silently bypass specific elements in a sequence and avoid executing any additional code for that element. Use the pass clause when you need to perform some sort of post processing on the element, such as logging the element in an error log, displaying a message to the user, or handling the problem element in some other way. The continue and pass clauses both do the same thing, but they\u2019re used in distinctly different situations. Controlling execution with the else statement Python has another loop clause that you won\u2019t"}, {"filename": "Beginning Programming with Python.pdf", "text": "158 PART 2 Talking the Talk The continue clause enables you to silently bypass specific elements in a sequence and avoid executing any additional code for that element. Use the pass clause when you need to perform some sort of post processing on the element, such as logging the element in an error log, displaying a message to the user, or handling the problem element in some other way. The continue and pass clauses both do the same thing, but they\u2019re used in distinctly different situations. Controlling execution with the else statement Python has another loop clause that you won\u2019t find with other languages: else. The else clause makes executing code possible even if you have no elements to process in a sequence. For example, you might need to convey to the user that there simply isn\u2019t anything to do. In fact, that\u2019s what the following example does. This example also appears with the downloadable source code as ForElse.py. 1. Type the following code into the notebook \u2014 pressing Enter after each line: Value = input(\"Type less than 6 characters: \") LetterNum = 1 for Letter in Value: print(\"Letter \", LetterNum, \" is \", Letter) LetterNum+=1 else: print(\"The string is blank.\") This example is based on the one found in the \u201cCreating a basic for loop\u201d section, earlier in the chapter. However, when a user presses Enter without typing something, the else clause is executed. FIGURE 9-5: Using the pass clause allows for post processing of an unwanted input. CHAPTER 9 Performing Repetitive Tasks 159 2. Click Run Cell. Python displays a prompt asking for input. 3. Type Hello and press Enter. The application lists each character in the string, as shown previously in Figure 9-2. However, notice that you also see a statement saying that the string is blank, which seems counterintuitive. When using an else clause with a for loop, the else clause always executes. However, if the iterator isn\u2019t valid, then the else clause still executes, so you can use it as an ending statement for any for loop. See the article at http://python-notes.curiousefficiency. org/en/latest/python_concepts/break_else.html for additional details. 4. Repeat Steps 2 and 3. However, simply press Enter instead of entering any sort of text. You see the alternative message shown in Figure 9-6 that tells you the string is blank. You can easily misuse the else clause because an empty sequence doesn\u2019t always signify a simple lack of input. An empty sequence can also signal an application error or other conditions that need to be handled differently from a simple omis- sion of data. Make sure you understand how the application works with data to ensure that the else clause doesn\u2019t end up hiding potential error conditions, rather than making them visible so that they can be fixed. Processing Data by Using the while Statement You use the while statement for situations when you\u2019re not sure how much data the application will have to process. Instead of instructing Python to process a static number of items,"}, {"filename": "Beginning Programming with Python.pdf", "text": "lack of input. An empty sequence can also signal an application error or other conditions that need to be handled differently from a simple omis- sion of data. Make sure you understand how the application works with data to ensure that the else clause doesn\u2019t end up hiding potential error conditions, rather than making them visible so that they can be fixed. Processing Data by Using the while Statement You use the while statement for situations when you\u2019re not sure how much data the application will have to process. Instead of instructing Python to process a static number of items, you use the while statement to tell Python to continue processing items until it runs out of items. This kind of loop is useful when you need to perform tasks such as downloading files of unknown size or streaming FIGURE 9-6: The else clause makes it possible to perform tasks based on an empty sequence. 160 PART 2 Talking the Talk data from a source such as a radio station. Any situation in which you can\u2019t define at the outset how much data the application will process is a good candidate for the while statement, which the following sections describe more fully. Understanding the while statement The while statement works with a condition rather than a sequence. The condi- tion states that the while statement should perform a task until the condition is no longer true. For example, imagine a deli with a number of customers standing in front of the counter. The salesperson continues to service customers until no more customers are left in line. The line could (and probably will) grow as the other customers are handled, so it\u2019s impossible to know at the outset how many customers will be served. All the salesperson knows is that continuing to serve customers until no more are left is important. Here is how a while statement might look: while Sum < 5: The statement begins with the while keyword. It then adds a condition. In this case, a variable, Sum, must be less than 5 for the loop to continue. Nothing speci- fies the current value of Sum, nor does the code define how the value of Sum will change. The only thing that is known when Python executes the statement is that Sum must be less than 5 for the loop to continue performing tasks. The statement ends with a colon and the tasks are indented below the statement. Because the while statement doesn\u2019t perform a series of tasks a set number of times, creating an endless loop is possible, meaning that the loop never ends. For example, say that Sum is set to 0 when the loop begins, and the ending condition is that Sum must be less than 5. If the value of Sum never increases, the loop will continue executing forever (or at least until the computer is shut down). Endless loops can cause all sorts of bizarre problems on systems, such as slowdowns and even"}, {"filename": "Beginning Programming with Python.pdf", "text": "a colon and the tasks are indented below the statement. Because the while statement doesn\u2019t perform a series of tasks a set number of times, creating an endless loop is possible, meaning that the loop never ends. For example, say that Sum is set to 0 when the loop begins, and the ending condition is that Sum must be less than 5. If the value of Sum never increases, the loop will continue executing forever (or at least until the computer is shut down). Endless loops can cause all sorts of bizarre problems on systems, such as slowdowns and even computer freezes, so it\u2019s best to avoid them. You must always provide a method for the loop to end when using a while loop (contrasted with the for loop, in which the end of the sequence determines the end of the loop). So, when work- ing with the while statement, you must perform three tasks: 1. Create the environment for the condition (such as setting Sum to 0). 2. State the condition within the while statement (such as Sum < 5). 3. Update the condition as needed to ensure that the loop eventually ends (such as adding Sum+=1 to the while code block). CHAPTER 9 Performing Repetitive Tasks 161 As with the for statement, you can modify the default behavior of the while statement. In fact, you have access to the same four clauses to modify the while statement behavior: \u00bb \u00bb break: Ends the current loop. \u00bb \u00bb continue: Immediately ends processing of the current element. \u00bb \u00bb pass: Ends processing of the current element after completing the statements in the if block. \u00bb \u00bb else: Provides an alternative processing technique when conditions aren\u2019t met for the loop. Using the while statement in an application You can use the while statement in many ways, but this first example is straight- forward. It simply displays a count based on the starting and ending condition of a variable named Sum. The following steps help you create and test the example code. 1. Type the following code into the notebook \u2014 pressing Enter after each line: Sum = 0 while Sum < 5: print(Sum) Sum+=1 The example code demonstrates the three tasks you must perform when working with a while loop in a straightforward manner. It begins by setting Sum to 0, which is the first step of setting the condition environment. The condition itself appears as part of the while statement. The end of the while code block accomplishes the third step. Of course, the code displays the current value of Sum before it updates the value of Sum. A while statement provides flexibility that you don\u2019t get with a for statement. This example shows a relatively straightforward way to update Sum. However, you can use any update method required to meet the goals of the application. Nothing says that you have to update Sum in a specific manner. In addition, the condition can be as complex as you want it"}, {"filename": "Beginning Programming with Python.pdf", "text": "The condition itself appears as part of the while statement. The end of the while code block accomplishes the third step. Of course, the code displays the current value of Sum before it updates the value of Sum. A while statement provides flexibility that you don\u2019t get with a for statement. This example shows a relatively straightforward way to update Sum. However, you can use any update method required to meet the goals of the application. Nothing says that you have to update Sum in a specific manner. In addition, the condition can be as complex as you want it to be. For example, you can track the current value of three or four variables if you want. Of course, the more complex you make the condition, the more likely you are to create an endless loop, so you have a practical limit as to how complex you should make the while loop condition. 162 PART 2 Talking the Talk 2. Click Run Cell. Python executes the while loop and displays the numeric sequence shown in Figure 9-7. Nesting Loop Statements In some cases, you can use either a for loop or a while loop to achieve the same effect. The loop statements work differently, but the effect is the same. In this example, you create a multiplication table generator by nesting a while loop within a for loop. Because you want the output to look nice, you use a little for- matting as well. (Chapter 12 gives you the details.) 1. Type the following code into the notebook \u2014 pressing Enter after each line: X = 1 Y = 1 print ('{:>4}'.format(' '), end= ' ') for X in range(1, 11): print('{:>4}'.format(X), end=' ') print() for X in range(1,11): print('{:>4}'.format(X), end=' ') while Y <= 10: print('{:>4}'.format(X * Y), end=' ') Y+=1 print() Y=1 FIGURE 9-7: The simple while loop displays a sequence of numbers. CHAPTER 9 Performing Repetitive Tasks 163 This example begins by creating two variables, X and Y, to hold the row and column value of the table. X is the row variable and Y is the column variable. To make the table readable, this example must create a heading at the top and another along the side. When users see a 1 at the top and a 1 at the side, and follow these values to where they intersect in the table, they can see the value of the two numbers when multiplied. The first print() statement adds a space (because nothing appears in the corner of the table; see Figure 9-8 to more easily follow this discussion). All the formatting statement says is to create a space 4 characters wide and place a space within it. The {:>4} part of the code determines the size of the column. The format(' ') function determines what appears in that space. The end attribute of the print() statement changes the ending character from a carriage return to a simple space. The first for loop displays the numbers"}, {"filename": "Beginning Programming with Python.pdf", "text": "the value of the two numbers when multiplied. The first print() statement adds a space (because nothing appears in the corner of the table; see Figure 9-8 to more easily follow this discussion). All the formatting statement says is to create a space 4 characters wide and place a space within it. The {:>4} part of the code determines the size of the column. The format(' ') function determines what appears in that space. The end attribute of the print() statement changes the ending character from a carriage return to a simple space. The first for loop displays the numbers 1 through 10 at the top of the table. The range() function creates the sequence of numbers for you. When using the range() function, you specify the starting value, which is 1 in this case, and one more than the ending value, which is 11 in this case. At this point, the cursor is sitting at the end of the heading row. To move it to the next line, the code issues a print() call with no other information. Even though the next bit of code looks quite complex, you can figure it out if you look at it a line at a time. The multiplication table shows the values from 1 * 1 to 10 * 10, so you need ten rows and ten columns to display the informa- tion. The for statement tells Python to create ten rows. Look again at Figure 9-8 to note the row heading. The first print() call displays the row heading value. Of course, you have to format this information, and the code uses a space of four characters that end with a space, rather than a carriage return, in order to continue printing information in that row. The while loop comes next. This loop prints the columns in an individual row. The column values are the multiplied values of X * Y. Again, the output is formatted to take up four spaces. The while loop ends when Y is updated to the next value by using Y+=1. Now you\u2019re back into the for loop. The print() statement ends the current row. In addition, Y must be reset to 1 so that it\u2019s ready for the beginning of the next row, which begins with 1. 164 PART 2 Talking the Talk 2. Click Run Cell. You see the multiplication table shown in Figure 9-8. FIGURE 9-8: The multiplication table is pleasing to the eye thanks to its formatting. CHAPTER 10 Dealing with Errors 165 Chapter 10 Dealing with Errors M ost application code of any complexity has errors in it. When your appli- cation suddenly freezes for no apparent reason, that\u2019s an error. Seeing one of those obscure message dialog boxes is another kind of error. However, errors can occur that don\u2019t provide you with any sort of notification. An application might perform the wrong computation on a series of numbers you provide, resulting in incorrect output that you may never know about"}, {"filename": "Beginning Programming with Python.pdf", "text": "9-8. FIGURE 9-8: The multiplication table is pleasing to the eye thanks to its formatting. CHAPTER 10 Dealing with Errors 165 Chapter 10 Dealing with Errors M ost application code of any complexity has errors in it. When your appli- cation suddenly freezes for no apparent reason, that\u2019s an error. Seeing one of those obscure message dialog boxes is another kind of error. However, errors can occur that don\u2019t provide you with any sort of notification. An application might perform the wrong computation on a series of numbers you provide, resulting in incorrect output that you may never know about unless someone tells you that something is wrong or you check for the issue yourself. Errors need not be consistent, either. You may see them on some occasions and not on others. For example, an error can occur only when the weather is bad or the network is overloaded. In short, errors occur in all sorts of situations and for all sorts of reasons. This chapter tells you about various kinds of errors and what to do when your application encounters them. It shouldn\u2019t surprise you that errors occur. Applications are written by humans, and humans make mistakes. Most developers call application errors exceptions, meaning that they\u2019re the exception to the rule. Because exceptions do occur in applications, you need to detect and do something about them whenever possible. The act of detecting and processing an exception is called error handling or exception handling. To properly detect errors, you need to know about error sources and why errors occur in the first place. When you do detect the error, you must process it by catching the exception. Catching an exception means examining it and possibly IN THIS CHAPTER \u00bb \u00bb Understanding error sources \u00bb \u00bb Handling error conditions \u00bb \u00bb Specifying that an error has occurred \u00bb \u00bb Developing your own error indicators \u00bb \u00bb Performing tasks even after an error occurs 166 PART 2 Talking the Talk doing something about it. So, another part of this chapter is about discovering how to perform exception handling in your own application. Sometimes your code detects an error in the application. When this happens, you need to raise or throw an exception. You see both terms used for the same thing, which simply means that your code encountered an error it couldn\u2019t handle, so it passed the error information onto another piece of code to handle (interpret, pro- cess, and, with luck, fix the exception). In some cases, you use custom error mes- sage objects to pass on the information. Even though Python has a wealth of generic message objects that cover most situations, some situations are special. For example, you might want to provide special support for a database applica- tion, and Python won\u2019t normally cover that contingency with a generic message object. You need to know when to handle exceptions locally, when to send them to the code that called your code, and when to create special exceptions so that"}, {"filename": "Beginning Programming with Python.pdf", "text": "of code to handle (interpret, pro- cess, and, with luck, fix the exception). In some cases, you use custom error mes- sage objects to pass on the information. Even though Python has a wealth of generic message objects that cover most situations, some situations are special. For example, you might want to provide special support for a database applica- tion, and Python won\u2019t normally cover that contingency with a generic message object. You need to know when to handle exceptions locally, when to send them to the code that called your code, and when to create special exceptions so that every part of the application knows how to handle the exception \u2014 all of which are top- ics covered by this chapter. Sometimes you also must ensure that your application handles an exception gracefully, even if that means shutting the application down. Fortunately, Python provides the finally clause, which always executes, even when an exception occurs. You can place code to close files or perform other essential tasks in the code block associated with this clause. Even though you won\u2019t perform this task all the time, it\u2019s the last topic discussed in the chapter. You can find the \u00addownloadable source code for this chapter in the BPPD_10_Dealing_with_Errors. ipynb file, as described in the book\u2019s Introduction. Knowing Why Python Doesn\u2019t Understand You Developers often get frustrated with programming languages and computers because they seemingly go out of their way to cause communication problems. Of course, programming languages and computers are both inanimate \u2014 they don\u2019t \u201cwant\u201d anything. Programming languages and computers also don\u2019t think; they literally accept whatever the developer says. Therein lies the problem. Neither Python nor the computer will \u201cknow what you mean\u201d when you type instructions as code. Both follow whatever instructions you provide to the letter and literally as you provide them. You may not have meant to tell Python to delete a data file unless some absurd condition occurred. However, if you don\u2019t make the conditions clear, Python will delete the file whether the condition exists or not. When an error of this sort happens, people commonly say that the application has a bug in it. Bugs are simply coding errors that you can remove by using a debugger. CHAPTER 10 Dealing with Errors 167 (A debugger is a special kind of tool that lets you stop or pause application execu- tion, examine the content of variables, and generally dissect the application to see what makes it tick.) Errors occur in many cases when the developer makes assumptions that simply aren\u2019t true. Of course, this includes assumptions about the application user, who probably doesn\u2019t care about the extreme level of care you took when crafting your application. The user will enter bad data. Again, Python won\u2019t know or care that the data is bad and will process it even when your intent was to disallow the bad input. Python doesn\u2019t understand the concepts of good or bad data; it simply pro- cesses incoming data according to"}, {"filename": "Beginning Programming with Python.pdf", "text": "variables, and generally dissect the application to see what makes it tick.) Errors occur in many cases when the developer makes assumptions that simply aren\u2019t true. Of course, this includes assumptions about the application user, who probably doesn\u2019t care about the extreme level of care you took when crafting your application. The user will enter bad data. Again, Python won\u2019t know or care that the data is bad and will process it even when your intent was to disallow the bad input. Python doesn\u2019t understand the concepts of good or bad data; it simply pro- cesses incoming data according to any rules you set, which means that you must set rules to protect users from themselves. Python isn\u2019t proactive or creative \u2014 those qualities exist only in the developer. When a network error occurs or the user does something unexpected, Python doesn\u2019t create a solution to fix the problem. It only processes code. If you don\u2019t provide code to handle the error, the application is likely to fail and crash \u00adungracefully \u2014 possibly taking all of the user\u2019s data with it. Of course, the devel- oper can\u2019t anticipate every potential error situation, either, which is why most complex applications have errors in them \u2014 errors of omission, in this case. Some developers out there think they can create bulletproof code, despite the absurdity of thinking that such code is even possible. Smart developers assume that some number of bugs will get through the code-screening process, that nature and users will continue to perform unexpected actions, and that even the smartest developer can\u2019t anticipate every possible error condition. Always assume that your application is subject to errors that will cause exceptions; that way, you\u2019ll have the mindset required to actually make your application more reliable. Keeping \u00adMurphy\u2019s Law, \u201cIf anything can go wrong, it will\u201d in mind will help more than you think. (See more about Murphy\u2019s laws at http://www.murphys-laws.com/.) Considering the Sources of Errors You might be able to divine the potential sources of error in your application by reading tea leaves, but that\u2019s hardly an efficient way to do things. Errors actually fall into well-defined categories that help you predict (to some degree) when and where they\u2019ll occur. By thinking about these categories as you work through your application, you\u2019re far more likely to discover potential errors sources before they occur and cause potential damage. The two principle categories are \u00bb \u00bb Errors that occur at a specific time \u00bb \u00bb Errors that are of a specific type 168 PART 2 Talking the Talk The following sections discuss these two categories in greater detail. The overall concept is that you need to think about error classifications in order to start find- ing and fixing potential errors in your application before they become a problem. Classifying when errors occur Errors occur at specific times. The two major time frames are \u00bb \u00bb Compile time \u00bb \u00bb Runtime No matter when an error occurs, it causes your application to misbehave. The"}, {"filename": "Beginning Programming with Python.pdf", "text": "are \u00bb \u00bb Errors that occur at a specific time \u00bb \u00bb Errors that are of a specific type 168 PART 2 Talking the Talk The following sections discuss these two categories in greater detail. The overall concept is that you need to think about error classifications in order to start find- ing and fixing potential errors in your application before they become a problem. Classifying when errors occur Errors occur at specific times. The two major time frames are \u00bb \u00bb Compile time \u00bb \u00bb Runtime No matter when an error occurs, it causes your application to misbehave. The fol- lowing sections describe each time frame. Compile time A compile time error occurs when you ask Python to run the application. Before Python can run the application, it must interpret the code and put it into a form that the computer can understand. A computer relies on machine code that is spe- cific to that processor and architecture. If the instructions you write are mal- formed or lack needed information, Python can\u2019t perform the required conversion. It presents an error that you must fix before the application can run. Fortunately, compile-time errors are the easiest to spot and fix. Because the application won\u2019t run with a compile-time error in place, user never sees this error category. You fix this sort of error as you write your code. The appearance of a compile-time error should tell you that other typos or omis- sions could exist in the code. It always pays to check the surrounding code to ensure that no other potential problems exist that might not show up as part of the compile cycle. Runtime A runtime error occurs after Python compiles the code you write and the computer begins to execute it. Runtime errors come in several different types, and some are harder to find than others. You know you have a runtime error when the applica- tion suddenly stops running and displays an exception dialog box or when the user complains about erroneous output (or at least instability). CHAPTER 10 Dealing with Errors 169 Not all runtime errors produce an exception. Some runtime errors cause instabil- ity (the application freezes), errant output, or data damage. Runtime errors can affect other applications or create unforeseen damage to the platform on which the application is running. In short, runtime errors can cause you quite a bit of grief, depending on precisely the kind of error you\u2019re dealing with at the time. Many runtime errors are caused by errant code. For example, you can misspell the name of a variable, preventing Python from placing information in the correct variable during execution. Leaving out an optional but necessary argument when calling a method can also cause problems. These are examples of errors of commission, which are specific errors associated with your code. In general, you can find these kinds of errors by using a debugger or by simply reading your code line by line to check for errors. Runtime errors can"}, {"filename": "Beginning Programming with Python.pdf", "text": "on precisely the kind of error you\u2019re dealing with at the time. Many runtime errors are caused by errant code. For example, you can misspell the name of a variable, preventing Python from placing information in the correct variable during execution. Leaving out an optional but necessary argument when calling a method can also cause problems. These are examples of errors of commission, which are specific errors associated with your code. In general, you can find these kinds of errors by using a debugger or by simply reading your code line by line to check for errors. Runtime errors can also be caused by external sources not associated with your code. For example, the user can input incorrect information that the application isn\u2019t expecting, causing an exception. A network error can make a required resource inaccessible. Sometimes even the computer hardware has a glitch that causes a nonrepeatable application error. These are all examples of errors of omission, from which the application might recover if your application has error- trapping code in place. It\u2019s important that you consider both kinds of runtime errors \u2014 errors of commission and omission \u2014 when building your application. Distinguishing error types You can distinguish errors by type, that is, by how they\u2019re made. Knowing the error types helps you understand where to look in an application for potential problems. Exceptions work like many other things in life. For example, you know that electronic devices don\u2019t work without power. So, when you try to turn your television on and it doesn\u2019t do anything, you might look to ensure that the power cord is firmly seated in the socket. Understanding the error types helps you locate errors faster, earlier, and more consistently, resulting in fewer misdiagnoses. The best developers know that fix- ing errors while an application is in development is always easier than fixing it when the application is in production because users are inherently impatient and want errors fixed immediately and correctly. In addition, fixing an error earlier in the development cycle is always easier than fixing it when the application nears completion because less code exists to review. 170 PART 2 Talking the Talk The trick is to know where to look. With this in mind, Python (and most other programming languages) breaks errors into the following types: \u00bb \u00bb Syntactical \u00bb \u00bb Semantic \u00bb \u00bb Logical The following sections examine each of these error types in more detail. I\u2019ve arranged the sections in order of difficulty, starting with the easiest to find. A syntactical error is generally the easiest; a logical error is generally the hardest. Syntactical Whenever you make a typo of some sort, you create a syntactical error. Some Python syntactical errors are quite easy to find because the application simply doesn\u2019t run. The interpreter may even point out the error for you by highlighting the errant code and displaying an error message. However, some syntactical errors are quite hard to find. Python is case sensitive, so you may use"}, {"filename": "Beginning Programming with Python.pdf", "text": "these error types in more detail. I\u2019ve arranged the sections in order of difficulty, starting with the easiest to find. A syntactical error is generally the easiest; a logical error is generally the hardest. Syntactical Whenever you make a typo of some sort, you create a syntactical error. Some Python syntactical errors are quite easy to find because the application simply doesn\u2019t run. The interpreter may even point out the error for you by highlighting the errant code and displaying an error message. However, some syntactical errors are quite hard to find. Python is case sensitive, so you may use the wrong case for a variable in one place and find that the variable isn\u2019t quite working as you thought it would. Finding the one place where you used the wrong capitalization can be quite challenging. Most syntactical errors occur at compile time and the interpreter points them out for you. Fixing the error is made easy because the interpreter generally tells you what to fix, and with considerable accuracy. Even when the interpreter doesn\u2019t find the problem, syntactical errors prevent the application from running cor- rectly, so any errors the interpreter doesn\u2019t find show up during the testing phase. Few syntactical errors should make it into production as long as you perform adequate application testing. Semantic When you create a loop that executes one too many times, you don\u2019t generally receive any sort of error information from the application. The application will happily run because it thinks that it\u2019s doing everything correctly, but that one additional loop can cause all sorts of data errors. When you create an error of this sort in your code, it\u2019s called a semantic error. Semantic errors occur because the meaning behind a series of steps used to per- form a task is wrong \u2014 the result is incorrect even though the code apparently runs precisely as it should. Semantic errors are tough to find, and you sometimes need some sort of debugger to find them. (Chapter 20 provides a discussion of CHAPTER 10 Dealing with Errors 171 tools that you can use with Python to perform tasks such as debugging applica- tions. You can also find blog posts about debugging on my blog at http://blog. johnmuellerbooks.com.) Logical Some developers don\u2019t create a division between semantic and logical errors, but they are different. A semantic error occurs when the code is essentially correct but the implementation is wrong (such as having a loop execute once too often). \u00adLogical errors occur when the developer\u2019s thinking is faulty. In many cases, this sort of error happens when the developer uses a relational or logical operator incorrectly. However, logical errors can happen in all sorts of other ways, too. For example, a developer might think that data is always stored on the local hard drive, which means that the application may behave in an unusual manner when it attempts to load data from a network drive instead. Logical errors are quite hard to fix because the problem"}, {"filename": "Beginning Programming with Python.pdf", "text": "the implementation is wrong (such as having a loop execute once too often). \u00adLogical errors occur when the developer\u2019s thinking is faulty. In many cases, this sort of error happens when the developer uses a relational or logical operator incorrectly. However, logical errors can happen in all sorts of other ways, too. For example, a developer might think that data is always stored on the local hard drive, which means that the application may behave in an unusual manner when it attempts to load data from a network drive instead. Logical errors are quite hard to fix because the problem isn\u2019t with the actual code, yet the code itself is incorrectly defined. The thought process that went into creat- ing the code is faulty; therefore, the developer who created the error is less likely to find it. Smart developers use a second pair of eyes to help spot logical errors. Having a formal application specification also helps because the logic behind the tasks the application performs is usually given a formal review. Catching Exceptions Generally speaking, a user should never see an exception dialog box. Your applica- tion should always catch the exception and handle it before the user sees it. Of course, the real world is different \u2014 users do see unexpected exceptions from time to time. However, catching every potential exception is still the goal when developing an application. The following sections describe how to catch excep- tions and handle them. Basic exception handling To handle exceptions, you must tell Python that you want to do so and then pro- vide code to perform the handling tasks. You have a number of ways in which you can perform this task. The following sections start with the simplest method first and then move on to more complex methods that offer added flexibility. 172 PART 2 Talking the Talk Handling a single exception In Chapter 8, the IfElse.py and other examples have a terrible habit of spitting out exceptions when the user inputs unexpected values. Part of the solution is to provide range checking. However, range checking doesn\u2019t overcome the problem of a user typing text such as Hello in place of an expected numeric value. Excep- tion handling provides a more complex solution to the problem, as described in the following steps. UNDERSTANDING THE BUILT-IN EXCEPTIONS Python comes with a host of built-in exceptions \u2014 far more than you might think \u00adpossible. You can see a list of these exceptions at https://docs.python.org/3.6/ library/exceptions.html. The documentation breaks the exception list down into categories. Here is a brief overview of the Python exception categories that you work with regularly: \u2022 Base classes: The base classes provide the essential building blocks (such as the Exception exception) for other exceptions. However, you might actually see some of these exceptions, such as the ArithmeticError exception, when working with an application. \u2022 Concrete exceptions: Applications can experience hard errors \u2014 errors that are hard to overcome because there really isn\u2019t a good way to handle"}, {"filename": "Beginning Programming with Python.pdf", "text": "might think \u00adpossible. You can see a list of these exceptions at https://docs.python.org/3.6/ library/exceptions.html. The documentation breaks the exception list down into categories. Here is a brief overview of the Python exception categories that you work with regularly: \u2022 Base classes: The base classes provide the essential building blocks (such as the Exception exception) for other exceptions. However, you might actually see some of these exceptions, such as the ArithmeticError exception, when working with an application. \u2022 Concrete exceptions: Applications can experience hard errors \u2014 errors that are hard to overcome because there really isn\u2019t a good way to handle them or they signal an event that the application must handle. For example, when a system runs out of memory, Python generates a MemoryError exception. Recovering from this error is hard because it isn\u2019t always possible to release memory from other uses. When the user presses an interrupt key (such as Ctrl+C or Delete), Python gener- ates a KeyboardInterrupt exception. The application must handle this exception before proceeding with any other tasks. \u2022 OS exceptions: The operating system can generate errors that Python then passes along to your application. For example, if your application tries to open a file that doesn\u2019t exist, the operating system generates a FileNotFoundError exception. \u2022 Warnings: Python tries to warn you about unexpected events or actions that could result in errors later. For example, if you try to inappropriately use a resource, such as an icon, Python generates a ResourceWarning exception. You want to remem- ber that this particular category is a warning and not an actual error: Ignoring it can cause you woe later, but you can ignore it. CHAPTER 10 Dealing with Errors 173 1. Open a new notebook. You can also use the downloadable source file, BPPD_10_Dealing_with_ Errors.ipynb. 2. Type the following code into the notebook \u2014 pressing Enter after each line: try: Value = int(input(\"Type a number between 1 and 10: \")) except ValueError: print(\"You must type a number between 1 and 10!\") else: if (Value > 0) and (Value <= 10): print(\"You typed: \", Value) else: print(\"The value you typed is incorrect!\") The code within the try block has its exceptions handled. In this case, handling the exception means getting input from the user by using the int(input()) calls. If an exception occurs outside this block, the code doesn\u2019t handle it. With reliability in mind, the temptation might be to enclose all the executable code in a try block so that every exception would be handled. However, you want to make your exception handling small and specific to make locating the problem easier. The except block looks for a specific exception in this case: ValueError. When the user creates a ValueError exception by typing Hello instead of a numeric value, this particular exception block is executed. If the user were to generate some other exception, this except block wouldn\u2019t handle it. The else block contains all the code that is executed when the try block code is successful (doesn\u2019t generate"}, {"filename": "Beginning Programming with Python.pdf", "text": "enclose all the executable code in a try block so that every exception would be handled. However, you want to make your exception handling small and specific to make locating the problem easier. The except block looks for a specific exception in this case: ValueError. When the user creates a ValueError exception by typing Hello instead of a numeric value, this particular exception block is executed. If the user were to generate some other exception, this except block wouldn\u2019t handle it. The else block contains all the code that is executed when the try block code is successful (doesn\u2019t generate an exception). The remainder of the code is in this block because you don\u2019t want to execute it unless the user does provide valid input. When the user provides a whole number as input, the code can then range check it to ensure that it\u2019s correct. 3. Click Run Cell. Python asks you to type a number between 1 and 10. 4. Type Hello and press Enter. The application displays an error message, as shown in Figure 10-1. 174 PART 2 Talking the Talk 5. Perform Steps 3 and 4 again, but type 5.5 instead of Hello. The application generates the same error message, as shown in Figure 10-1. 6. Perform Steps 3 and 4 again, but type 22 instead of Hello. The application outputs the expected range error message, as shown in Figure 10-2. Exception handling doesn\u2019t weed out range errors. You must still check for them separately. 7. Perform Steps 3 and 4 again, but type 7 instead of Hello. This time, the application finally reports that you\u2019ve provided a correct value of 7. Even though it seems like a lot of work to perform this level of checking, you can\u2019t really be certain that your application is working correctly without it. You may have to check for other sorts of issues, depending on the environment you choose to use for testing. For example, if you had been using IDLE instead of Notebook for testing purposes, pressing a Ctrl+C, Cmd+C, or an alternative type of unexpected interrupt would have resulted in a KeyboardInterrupt exception. Because Notebook automatically checks for this sort of exception, nothing FIGURE 10-1: Typing the wrong input type generates an error instead of an exception. FIGURE 10-2: Exception handling doesn\u2019t ensure that the value is in the correct range. CHAPTER 10 Dealing with Errors 175 happens when you press these interrupt keys, so you\u2019re saved from having to perform yet another check. Obviously, this strategy works only when everyone uses an IDE, such as Notebook, that provides the required built-in protection. Using the except clause without an exception You can create an exception handling block in Python that\u2019s generic because it doesn\u2019t look for a specific exception. In most cases, you want to provide a specific exception when performing exception handling for these reasons: \u00bb \u00bb To avoid hiding an exception you didn\u2019t consider when designing the application \u00bb \u00bb To ensure that others know"}, {"filename": "Beginning Programming with Python.pdf", "text": "happens when you press these interrupt keys, so you\u2019re saved from having to perform yet another check. Obviously, this strategy works only when everyone uses an IDE, such as Notebook, that provides the required built-in protection. Using the except clause without an exception You can create an exception handling block in Python that\u2019s generic because it doesn\u2019t look for a specific exception. In most cases, you want to provide a specific exception when performing exception handling for these reasons: \u00bb \u00bb To avoid hiding an exception you didn\u2019t consider when designing the application \u00bb \u00bb To ensure that others know precisely which exceptions your application will handle \u00bb \u00bb To handle the exceptions correctly by using specific code for that exception However, sometimes you may need a generic exception-handling capability, such as when you\u2019re working with third-party libraries or interacting with an external service. The following steps demonstrate how to use an except clause without a specific exception attached to it. 1. Type the following code into the notebook \u2014 pressing Enter after each line: try: Value = int(input(\"Type a number between 1 and 10: \")) except: print(\"This is the generic error!\") except ValueError: print(\"You must type a number between 1 and 10!\") else: if (Value > 0) and (Value <= 10): print(\"You typed: \", Value) else: print(\"The value you typed is incorrect!\") The only difference between this example and the previous example is that the except clause doesn\u2019t have the ValueError exception specifically associated with it. The result is that this except clause will also catch any other exception that occurs. 2. Click Run Cell. You see the error message shown in Figure 10-3. Python automatically detects that you have placed the exception handlers in the wrong order. (You discover 176 PART 2 Talking the Talk more about this issue in the \u201cHandling more specific to less specific excep- tions\u201d section later in the chapter.) Reverse the order of the two exceptions so that they appear like this: try: Value = int(input(\"Type a number between 1 and 10: \")) except ValueError: print(\"You must type a number between 1 and 10!\") except: print(\"This is the generic error!\") else: if (Value > 0) and (Value <= 10): print(\"You typed: \", Value) else: print(\"The value you typed is incorrect!\") 3. Click Run Cell. Python asks you to type a number between 1 and 10. 4. Type Hello and press Enter. The application displays an error message (refer to Figure 10-1). When the exceptions are in the right order, the code detects specific errors first and then uses less specific handlers only when necessary. 5. Click Run Cell. Python asks you to type a number between 1 and 10. 6. Choose Kernel \u27aa Interrupt. This act is akin to pressing Ctrl+C or Cmd+C in other IDEs. However, nothing actually appears to happen. Look at the server window, however, and you see a Kernel Interrupted message. FIGURE 10-3: The exception handlers are in the wrong order. CHAPTER 10 Dealing with Errors 177 7. Type"}, {"filename": "Beginning Programming with Python.pdf", "text": "displays an error message (refer to Figure 10-1). When the exceptions are in the right order, the code detects specific errors first and then uses less specific handlers only when necessary. 5. Click Run Cell. Python asks you to type a number between 1 and 10. 6. Choose Kernel \u27aa Interrupt. This act is akin to pressing Ctrl+C or Cmd+C in other IDEs. However, nothing actually appears to happen. Look at the server window, however, and you see a Kernel Interrupted message. FIGURE 10-3: The exception handlers are in the wrong order. CHAPTER 10 Dealing with Errors 177 7. Type 5.5 and press Enter. You see the generic error message shown in Figure 10-4 because Notebook is reacting to the interrupt, rather than the incorrect input; the reason is that the interrupt came first. Python queues errors in the order in which it receives them. Consequently, you may find that an application outputs what appears to be the wrong error message at times. 8. Perform Steps 3 and 4 again, but type 5.5 instead of Hello. The application generates the same error message as before (again, refer to Figure 10-1). In this case, no interrupt occurred, so you see the error message you expected. Working with exception arguments Most exceptions don\u2019t provide arguments (a list of values that you can check for additional information). The exception either occurs or it doesn\u2019t. However, a few exceptions do provide arguments, and you see them used later in the book. The arguments tell you more about the exception and provide details that you need to correct it. For the sake of completeness, this chapter includes a simple example that \u00adgenerates an exception with an argument. You can safely skip the remainder of this section if desired because the information is covered in more detail later in the book. 1. Type the following code into the notebook \u2014 pressing Enter after each line: import sys try: File = open('myfile.txt') FIGURE 10-4: Generic exception handling traps the Keyboard Interrupt exception. 178 PART 2 Talking the Talk except IOError as e: print(\"Error opening file!\\r\\n\" + \"Error Number: {0}\\r\\n\".format(e.errno) + \"Error Text: {0}\".format(e.strerror)) else: print(\"File opened as expected.\") File.close(); This example uses some advanced features. The import statement obtains code from another file. Chapter 11 tells you how to use this Python feature. The open() function opens a file and provides access to the file through the File variable. Chapter 16 tells you how file access works. Given that myfile. txt doesn\u2019t exist in the application directory, the operating system can\u2019t open it and will tell Python that the file doesn\u2019t exist. Trying to open a nonexistent file generates an IOError exception. This particular exception provides access to two arguments: \u2022 errno: Provides the operating system error number as an integer \u2022 strerror: Contains the error information as a human-readable string The as clause places the exception information into a variable, e, that you can access as needed for additional information. The except block contains a print()"}, {"filename": "Beginning Programming with Python.pdf", "text": "File variable. Chapter 16 tells you how file access works. Given that myfile. txt doesn\u2019t exist in the application directory, the operating system can\u2019t open it and will tell Python that the file doesn\u2019t exist. Trying to open a nonexistent file generates an IOError exception. This particular exception provides access to two arguments: \u2022 errno: Provides the operating system error number as an integer \u2022 strerror: Contains the error information as a human-readable string The as clause places the exception information into a variable, e, that you can access as needed for additional information. The except block contains a print() call that formats the error information into an easily read error message. If you should decide to create the myfile.txt file, the else clause executes. In this case, you see a message stating that the file opened normally. The code then closes the file without doing anything with it. 2. Click Run Cell. The application displays the Error opening file information, as shown in Figure 10-5. FIGURE 10-5: Attempting to open a \u00adnonexistent file never works. CHAPTER 10 Dealing with Errors 179 OBTAINING A LIST OF EXCEPTION ARGUMENTS The list of arguments supplied with exceptions varies by exception and by what the sender provides. It isn\u2019t always easy to figure out what you can hope to obtain in the way of additional information. One way to handle the problem is to simply print \u00adeverything by using code like this: import sys try: File = open('myfile.txt') except IOError as e: for Arg in e.args: print(Arg) else: print(\"File opened as expected.\") File.close(); The args property always contains a list of the exception arguments in string format. You can use a simple for loop to print each of the arguments. The only problem with this approach is that you\u2019re missing the argument names, so you know the output infor- mation (which is obvious in this case), but you don\u2019t know what to call it. A more complex method of dealing with the issue is to print both the names and the contents of the arguments. The following code displays both the names and the values of each of the arguments: import sys try: File = open('myfile.txt') except IOError as e: for Entry in dir(e): if (not Entry.startswith(\"_\")): try: print(Entry, \" = \", e.__getattribute__(Entry)) except AttributeError: print(\"Attribute \", Entry, \" not accessible.\") else: print(\"File opened as expected.\") File.close(); In this case, you begin by getting a listing of the attributes associated with the error argument object using the dir() function. The output of the dir() function is a list of (continued) 180 PART 2 Talking the Talk Handling multiple exceptions with a single except clause Most applications can generate multiple exceptions for a single line of code. This fact demonstrated in the \u201cUsing the except clause without an exception\u201d section of the chapter. How you handle the multiple exceptions depends on your goals for the application, the types of exceptions, and the relative skill of your users. \u00adSometimes when working with a less skilled"}, {"filename": "Beginning Programming with Python.pdf", "text": "getting a listing of the attributes associated with the error argument object using the dir() function. The output of the dir() function is a list of (continued) 180 PART 2 Talking the Talk Handling multiple exceptions with a single except clause Most applications can generate multiple exceptions for a single line of code. This fact demonstrated in the \u201cUsing the except clause without an exception\u201d section of the chapter. How you handle the multiple exceptions depends on your goals for the application, the types of exceptions, and the relative skill of your users. \u00adSometimes when working with a less skilled user, it\u2019s simply easier to say that the application experienced a nonrecoverable error and then log the details into a log file in the application directory or a central location. Using a single except clause to handle multiple exceptions works only when a common source of action fulfills the needs of all the exception types. Otherwise, you need to handle each exception individually. The following steps show how to handle multiple exceptions by using a single except clause. 1. Type the following code into the notebook \u2014 pressing Enter after each line: strings containing the names of the attributes that you can print. Only those arguments that don\u2019t start with an underscore (_) contain useful information about the exception. However, even some of those entries are inaccessible, so you must encase the output code in a second try . . . except block (see the \u201cNested exception handling\u201d section, later in the chapter, for details). The attribute name is easy because it\u2019s contained in Entry. To obtain the value associ- ated with that attribute, you must use the __getattribute() function and supply the name of the attribute you want. When you run this code, you see both the name and the value of each of the attributes supplied with a particular error argument object. In this case, the actual output is as follows: args = (2, 'No such file or directory') Attribute characters_written not accessible. errno = 2 filename = myfile.txt filename2 = None strerror = No such file or directory winerror = None with_traceback = <built-in method with_traceback of FileNotFoundError object at 0x0000000003416DC8> (continued) CHAPTER 10 Dealing with Errors 181 try: Value = int(input(\"Type a number between 1 and 10: \")) except (ValueError, KeyboardInterrupt): print(\"You must type a number between 1 and 10!\") else: if (Value > 0) and (Value <= 10): print(\"You typed: \", Value) else: print(\"The value you typed is incorrect!\") Note that the except clause now sports both a ValueError and a Keyboard Interrupt exception. These exceptions appear within parentheses and are separated by commas. 2. Click Run Cell. Python asks you to type a number between 1 and 10. 3. Type Hello and press Enter. The application displays an error message (refer to Figure 10-1). 4. Click Run Cell. Python asks you to type a number between 1 and 10. 5. Choose Kernel \u27aa Interrupt. This act is akin to pressing Ctrl+C or Cmd+C in"}, {"filename": "Beginning Programming with Python.pdf", "text": "(Value <= 10): print(\"You typed: \", Value) else: print(\"The value you typed is incorrect!\") Note that the except clause now sports both a ValueError and a Keyboard Interrupt exception. These exceptions appear within parentheses and are separated by commas. 2. Click Run Cell. Python asks you to type a number between 1 and 10. 3. Type Hello and press Enter. The application displays an error message (refer to Figure 10-1). 4. Click Run Cell. Python asks you to type a number between 1 and 10. 5. Choose Kernel \u27aa Interrupt. This act is akin to pressing Ctrl+C or Cmd+C in other IDEs. 6. Type 5.5 and press Enter. The application displays an error message (refer to Figure 10-1). 7. Perform Steps 2 and 3 again, but type 7 instead of Hello. This time, the application finally reports that you\u2019ve provided a correct value of 7. Handling multiple exceptions with multiple except clauses When working with multiple exceptions, it\u2019s usually a good idea to place each exception in its own except clause. This approach allows you to provide custom handling for each exception and makes it easier for the user to know precisely what went wrong. Of course, this approach is also a lot more work. The following steps demonstrate how to perform exception handling by using multiple except clauses. 182 PART 2 Talking the Talk 1. Type the following code into the window \u2014 pressing Enter after each line: try: Value = int(input(\"Type a number between 1 and 10: \")) except ValueError: print(\"You must type a number between 1 and 10!\") except KeyboardInterrupt: print(\"You pressed Ctrl+C!\") else: if (Value > 0) and (Value <= 10): print(\"You typed: \", Value) else: print(\"The value you typed is incorrect!\") Notice the use of multiple except clauses in this case. Each except clause handles a different exception. You can use a combination of techniques, with some except clauses handling just one exception and other except clauses handling multiple exceptions. Python lets you use the approach that works best for the error-handling situation. 2. Click Run Cell. Python asks you to type a number between 1 and 10. 3. Type Hello and press Enter. The application displays an error message (refer to Figure 10-1). 4. Perform Steps 2 and 3 again, but type 22 instead of Hello. The application outputs the expected range error message (refer to Figure 10-2). 5. Perform Steps 2 and 3 again, but choose Kernel \u27aa Interrupt, and then type 5.5 and press Enter. The application outputs a specific message that tells the user what went wrong, as shown in Figure 10-6. FIGURE 10-6: Using multiple except clauses makes specific error messages possible. CHAPTER 10 Dealing with Errors 183 6. Perform Steps 2 and 3 again, but type 7 instead of Hello. This time, the application finally reports that you\u2019ve provided a correct value of 7. Handling more specific to less specific exceptions One strategy for handling exceptions is to provide specific except clauses for all known exceptions and generic except"}, {"filename": "Beginning Programming with Python.pdf", "text": "again, but choose Kernel \u27aa Interrupt, and then type 5.5 and press Enter. The application outputs a specific message that tells the user what went wrong, as shown in Figure 10-6. FIGURE 10-6: Using multiple except clauses makes specific error messages possible. CHAPTER 10 Dealing with Errors 183 6. Perform Steps 2 and 3 again, but type 7 instead of Hello. This time, the application finally reports that you\u2019ve provided a correct value of 7. Handling more specific to less specific exceptions One strategy for handling exceptions is to provide specific except clauses for all known exceptions and generic except clauses to handle unknown exceptions. You can see the exception hierarchy that Python uses at https://docs.python. org/3/library/exceptions.html#exception-hierarchy. When viewing this chart, BaseException is the uppermost exception. Most exceptions are derived from Exception. When working through math errors, you can use the generic ArithmeticError or a more specific ZeroDivisionError exception. Python evaluates except clauses in the order in which they appear in the source code file. The first clause is examined first, the second clause is examined second, and so on. The following steps help you examine an example that demonstrates the importance of using the correct exception order. In this case, you perform tasks that result in math errors. 1. Type the following code into the notebook \u2014 pressing Enter after each line: try: Value1 = int(input(\"Type the first number: \")) Value2 = int(input(\"Type the second number: \")) Output = Value1 / Value2 except ValueError: print(\"You must type a whole number!\") except KeyboardInterrupt: print(\"You pressed Ctrl+C!\") except ArithmeticError: print(\"An undefined math error occurred.\") except ZeroDivisionError: print(\"Attempted to divide by zero!\") else: print(Output) The code begins by obtaining two inputs: Value1 and Value2. The first two except clauses handle unexpected input. The second two except clauses handle math exceptions, such as dividing by zero. If everything goes well with the application, the else clause executes, which prints the result of the operation. 184 PART 2 Talking the Talk 2. Click Run Cell. Python asks you to type the first number. 3. Type Hello and press Enter. As expected, Python displays the ValueError exception message. However, it always pays to check for potential problems. 4. Click Run Cell again. Python asks you to type the first number. 5. Type 8 and press Enter. The application asks you to enter the second number. 6. Type 0 and press Enter. You see the error message for the ArithmeticError exception, as shown in Figure 10-7. What you should actually see is the ZeroDivisionError excep- tion because it\u2019s more specific than the ArithmeticError exception. 7. Reverse the order of the two exceptions so that they look like this: except ZeroDivisionError: print(\"Attempted to divide by zero!\") except ArithmeticError: print(\"An undefined math error occurred.\") 8. Perform Steps 4 through 6 again. This time, you see the ZeroDivisionError exception message because the exceptions appear in the correct order. FIGURE 10-7: The order in which Python processes exceptions is important. CHAPTER 10 Dealing with Errors 185 9. Perform Steps 4"}, {"filename": "Beginning Programming with Python.pdf", "text": "message for the ArithmeticError exception, as shown in Figure 10-7. What you should actually see is the ZeroDivisionError excep- tion because it\u2019s more specific than the ArithmeticError exception. 7. Reverse the order of the two exceptions so that they look like this: except ZeroDivisionError: print(\"Attempted to divide by zero!\") except ArithmeticError: print(\"An undefined math error occurred.\") 8. Perform Steps 4 through 6 again. This time, you see the ZeroDivisionError exception message because the exceptions appear in the correct order. FIGURE 10-7: The order in which Python processes exceptions is important. CHAPTER 10 Dealing with Errors 185 9. Perform Steps 4 through 5 again, but type 2 for the second number instead of 0. This time, the application finally reports an output value of 4.0, as shown in Figure 10-8. Notice that the output shown in Figure 10-8 is a floating-point value. Division results in a floating-point value unless you specify that you want an integer output by using the floor division operator (//). Nested exception handling Sometimes you need to place one exception-handling routine within another in a process called nesting. When you nest exception-handling routines, Python tries to find an exception handler in the nested level first and then moves to the outer layers. You can nest exception-handling routines as deeply as needed to make your code safe. One of the more common reasons to use a dual layer of exception-handling code is when you want to obtain input from a user and need to place the input code in a loop to ensure that you actually get the required information. The following steps demonstrate how this sort of code might work. 1. Type the following code into the notebook \u2014 pressing Enter after each line: TryAgain = True while TryAgain: try: Value = int(input(\"Type a whole number. \")) except ValueError: print(\"You must type a whole number!\") FIGURE 10-8: Providing usable input results in a usable output. 186 PART 2 Talking the Talk try: DoOver = input(\"Try again (y/n)? \") except: print(\"OK, see you next time!\") TryAgain = False else: if (str.upper(DoOver) == \"N\"): TryAgain = False except KeyboardInterrupt: print(\"You pressed Ctrl+C!\") print(\"See you next time!\") TryAgain = False else: print(Value) TryAgain = False The code begins by creating an input loop. Using loops for this type of purpose is actually quite common in applications because you don\u2019t want the applica- tion to end every time an input error is made. This is a simplified loop, and normally you create a separate function to hold the code. When the loop starts, the application asks the user to type a whole number. It can be any integer value. If the user types any non-integer value or presses Ctrl+C, Cmd+C, or another interrupt key combination, the exception-handling code takes over. Otherwise, the application prints the value that the user supplied and sets TryAgain to False, which causes the loop to end. A ValueError exception can occur when the user makes a mistake. Because you don\u2019t know why the user input the"}, {"filename": "Beginning Programming with Python.pdf", "text": "is made. This is a simplified loop, and normally you create a separate function to hold the code. When the loop starts, the application asks the user to type a whole number. It can be any integer value. If the user types any non-integer value or presses Ctrl+C, Cmd+C, or another interrupt key combination, the exception-handling code takes over. Otherwise, the application prints the value that the user supplied and sets TryAgain to False, which causes the loop to end. A ValueError exception can occur when the user makes a mistake. Because you don\u2019t know why the user input the wrong value, you have to ask if the user wants to try again. Of course, getting more input from the user could generate another exception. The inner try...except code block handles this second- ary input. Notice the use of the str.upper() function when getting character input from the user. This function makes it possible to receive y or Y as input and accept them both. Whenever you ask the user for character input, converting lowercase characters to uppercase is a good idea so that you can perform a single comparison (reducing the potential for error). The KeyboardInterrupt exception displays two messages and then exits automatically by setting TryAgain to False. The KeyboardInterrupt occurs only when the user presses a specific key combination designed to end the application. The user is unlikely to want to continue using the application at this point. CHAPTER 10 Dealing with Errors 187 2. Click Run Cell. Python asks the user to input a whole number. 3. Type Hello and press Enter. The application displays an error message and asks whether you want to try again. 4. Type Y and press Enter. The application asks you to input a whole number again, as shown in Figure 10-9. 5. Type 5.5 and press Enter. The application again displays the error message and asks whether you want to try again. 6. Choose Kernel \u27aa Interrupt to interrupt the application, type Y, and then press Enter. The application ends, as shown in Figure 10-10. Notice that the message is the one from the inner exception. The application never gets to the outer exception because the inner exception handler provides generic exception handling. FIGURE 10-9: Using a loop means that the application can recover from the error. 188 PART 2 Talking the Talk 7. Click Run Cell. Python asks the user to input a whole number. 8. Choose Kernel \u27aa Interrupt to interrupt the application, type 5.5, and then press Enter. The application ends, as shown in Figure 10-11. Notice that the message is the one from the outer exception. In Steps 6 and 8, the user ends the application by pressing an interrupt key. However, the application uses two different exception handlers to address the problem. FIGURE 10-10: The inner exception handler provides secondary input support. FIGURE 10-11: The outer exception handler provides primary input support. CHAPTER 10 Dealing with Errors 189 Raising Exceptions So far, the examples in"}, {"filename": "Beginning Programming with Python.pdf", "text": "user to input a whole number. 8. Choose Kernel \u27aa Interrupt to interrupt the application, type 5.5, and then press Enter. The application ends, as shown in Figure 10-11. Notice that the message is the one from the outer exception. In Steps 6 and 8, the user ends the application by pressing an interrupt key. However, the application uses two different exception handlers to address the problem. FIGURE 10-10: The inner exception handler provides secondary input support. FIGURE 10-11: The outer exception handler provides primary input support. CHAPTER 10 Dealing with Errors 189 Raising Exceptions So far, the examples in this chapter have reacted to exceptions. Something hap- pens and the application provides error-handling support for that event. How- ever, situations arise for which you may not know how to handle an error event during the application design process. Perhaps you can\u2019t even handle the error at a particular level and need to pass it up to some other level to handle. In short, in some situations, your application must generate an exception. This act is called raising (or sometimes throwing) the exception. The following sections describe common scenarios in which you raise exceptions in specific ways. Raising exceptions during exceptional conditions The example in this section demonstrates how you raise a simple exception \u2014 that it doesn\u2019t require anything special. The following steps simply create the exception and then handle it immediately. 1. Type the following code into the notebook \u2014 pressing Enter after each line: try: raise ValueError except ValueError: print(\"ValueError Exception!\") You wouldn\u2019t ever actually create code that looks like this, but it shows you how raising an exception works at its most basic level. In this case, the raise call appears within a try...except block. A basic raise call simply provides the name of the exception to raise (or throw). You can also provide arguments as part of the output to provide additional information. Notice that this try...except block lacks an else clause because there is nothing to do after the call. Although you rarely use a try...except block in this manner, you can. You may encounter situations like this one sometimes and need to remember that adding the else clause is purely optional. On the other hand, you must add at least one except clause. 2. Click Run Cell. Python displays the expected exception text, as shown in Figure 10-12. 190 PART 2 Talking the Talk Passing error information to the caller Python provides exceptionally flexible error handling in that you can pass \u00adinformation to the caller (the code that is calling your code) no matter which exception you use. Of course, the caller may not know that the information is available, which leads to a lot of discussion on the topic. If you\u2019re working with someone else\u2019s code and don\u2019t know whether additional information is available, you can always use the technique described in the \u201cObtaining a list of exception arguments\u201d sidebar earlier in this chapter to find it. You may have wondered whether"}, {"filename": "Beginning Programming with Python.pdf", "text": "Talk Passing error information to the caller Python provides exceptionally flexible error handling in that you can pass \u00adinformation to the caller (the code that is calling your code) no matter which exception you use. Of course, the caller may not know that the information is available, which leads to a lot of discussion on the topic. If you\u2019re working with someone else\u2019s code and don\u2019t know whether additional information is available, you can always use the technique described in the \u201cObtaining a list of exception arguments\u201d sidebar earlier in this chapter to find it. You may have wondered whether you could provide better information when working with a ValueError exception than with an exception provided natively by Python. The following steps show that you can modify the output so that it does include helpful information. 1. Type the following code into the notebook \u2014 pressing Enter after each line: try: Ex = ValueError() Ex.strerror = \"Value must be within 1 and 10.\" raise Ex except ValueError as e: print(\"ValueError Exception!\", e.strerror) The ValueError exception normally doesn\u2019t provide an attribute named strerror (a common name for string error), but you can add it simply by assigning a value to it as shown. When the example raises the exception, the except clause handles it as usual but obtains access to the attributes using e. You can then access the e.strerror member to obtain the added information. 2. Click Run Cell. Python displays an expanded ValueError exception, as shown in Figure 10-13. FIGURE 10-12: Raising an exception requires only a call to raise. CHAPTER 10 Dealing with Errors 191 Creating and Using Custom Exceptions Python provides a wealth of standard exceptions that you should use whenever possible. These exceptions are incredibly flexible, and you can even modify them as needed (within reason) to meet specific needs. For example, the \u201cPassing error information to the caller\u201d section of this chapter demonstrates how to modify a ValueError exception to allow for additional data. However, sometimes you \u00adsimply must create a custom exception because none of the standard exceptions will work. Perhaps the exception name just doesn\u2019t tell the viewer the purpose that the exception serves. You may need a custom exception for specialized \u00addatabase work or when working with a service. The example in this section is going to seem a little complicated for now because you haven\u2019t worked with classes before. Chapter 15 introduces you to classes and helps you understand how they work. If you want to skip this section until after you read Chapter 15, you can do so without any problem. The example in this section shows a quick method for creating your own excep- tions. To perform this task, you must create a class that uses an existing exception as a starting point. To make things a little easier, this example creates an excep- tion that builds upon the functionality provided by the ValueError exception. The advantage of using this approach rather than the one shown in the \u201cPassing"}, {"filename": "Beginning Programming with Python.pdf", "text": "introduces you to classes and helps you understand how they work. If you want to skip this section until after you read Chapter 15, you can do so without any problem. The example in this section shows a quick method for creating your own excep- tions. To perform this task, you must create a class that uses an existing exception as a starting point. To make things a little easier, this example creates an excep- tion that builds upon the functionality provided by the ValueError exception. The advantage of using this approach rather than the one shown in the \u201cPassing error information to the caller\u201d section, the preceding section in this chapter, is that this approach tells anyone who follows you precisely what the addition to the Val- ueError exception is; additionally, it makes the modified exception easier to use. 1. Type the following code into the notebook \u2014 pressing Enter after each line: class CustomValueError(ValueError): def __init__(self, arg): self.strerror = arg self.args = {arg} try: raise CustomValueError(\"Value must be within 1 and 10.\") except CustomValueError as e: print(\"CustomValueError Exception!\", e.strerror) FIGURE 10-13: You can add error information to any exception. 192 PART 2 Talking the Talk This example essentially replicates the functionality of the example in the \u201cPassing error information to the caller\u201d section of the chapter. However, it places the same error in both strerror and args so that the developer has access to either (as would normally happen). The code begins by creating the CustomValueError class that uses the ValueError exception class as a starting point. The __init__() function provides the means for creating a new instance of that class. Think of the class as a blueprint and the instance as the building created from the blueprint. Notice that the strerror attribute has the value assigned directly to it, but args receives it as an array. The args member normally contains an array of all the exception values, so this is standard procedure, even when args contains just one value as it does now. The code for using the exception is considerably easier than modifying ValueError directly. All you do is call raise with the name of the exception and the arguments you want to pass, all on one line. 2. Click Run Cell. The application displays the letter sequence, along with the letter number, as shown in Figure 10-14. Using the finally Clause Normally you want to handle any exception that occurs in a way that doesn\u2019t cause the application to crash. However, sometimes you can\u2019t do anything to fix the problem, and the application is most definitely going to crash. At this point, your goal is to cause the application to crash gracefully, which means closing files so that the user doesn\u2019t lose data and performing other tasks of that nature. \u00adAnything you can do to keep damage to data and the system to a minimum is an essential part of handling data for a crashing application. FIGURE 10-14: Custom exceptions can make your code"}, {"filename": "Beginning Programming with Python.pdf", "text": "to handle any exception that occurs in a way that doesn\u2019t cause the application to crash. However, sometimes you can\u2019t do anything to fix the problem, and the application is most definitely going to crash. At this point, your goal is to cause the application to crash gracefully, which means closing files so that the user doesn\u2019t lose data and performing other tasks of that nature. \u00adAnything you can do to keep damage to data and the system to a minimum is an essential part of handling data for a crashing application. FIGURE 10-14: Custom exceptions can make your code easier to read. CHAPTER 10 Dealing with Errors 193 The finally clause is part of the crashing-application strategy. You use this clause to perform any required last-minute tasks. Normally, the finally clause is quite short and uses only calls that are likely to succeed without further problem. It\u2019s essential to close the files, log the user off, and perform other required tasks, and then let the application crash before something terrible happens (such as a total system failure). With this necessity in mind, the following steps show a sim- ple example of using the finally clause. 1. Type the following code into the notebook \u2014 pressing Enter after each line: import sys try: raise ValueError print(\"Raising an exception.\") except ValueError: print(\"ValueError Exception!\") sys.exit() finally: print(\"Taking care of last minute details.\") print(\"This code will never execute.\") In this example, the code raises a ValueError exception. The except clause executes as normal when this happens. The call to sys.exit() means that the application exits after the exception is handled. Perhaps the application can\u2019t recover in this particular instance, but the application normally ends, which is why the final print() function call won\u2019t ever execute. The finally clause code always executes. It doesn\u2019t matter whether the exception happens or not. The code you place in this block needs to be common code that you always want to execute. For example, when working with a file, you place the code to close the file into this block to ensure that the data isn\u2019t damaged by remaining in memory rather than going to disk. 2. Click Run Cell. The application displays the except clause message and the finally clause message, as shown in Figure 10-15. The sys.exit() call prevents any other code from executing. Note that this isn\u2019t a normal exit, so Notepad displays additional information for you. When you use some other IDEs, such as IDLE, the application simply exits without displaying any additional information. 194 PART 2 Talking the Talk 3. Comment out the raise ValueErrorcall by preceding it with two pound signs, like this: ##raise ValueError Removing the exception will demonstrate how the finally clause actually works. 4. Click Run Cell. The application displays a series of messages, including the finally clause message, as shown in Figure 10-16. This part of the example shows that the finally clause always executes, so you need to use it carefully. FIGURE 10-15: Use the finally"}, {"filename": "Beginning Programming with Python.pdf", "text": "information for you. When you use some other IDEs, such as IDLE, the application simply exits without displaying any additional information. 194 PART 2 Talking the Talk 3. Comment out the raise ValueErrorcall by preceding it with two pound signs, like this: ##raise ValueError Removing the exception will demonstrate how the finally clause actually works. 4. Click Run Cell. The application displays a series of messages, including the finally clause message, as shown in Figure 10-16. This part of the example shows that the finally clause always executes, so you need to use it carefully. FIGURE 10-15: Use the finally clause to ensure specific actions take place before the application ends. FIGURE 10-16: Be sure to remember that the finally clause always executes. 3 Performing Common Tasks IN THIS PART . . . Import and use packages. Use strings to display data in human-readable form. Create and manage lists of objects. Use collections to enhance list capabilities. Develop and use classes. CHAPTER 11 Interacting with Packages 197 Chapter 11 Interacting with Packages T he examples in this book are small, but the functionality of the resulting applications is extremely limited as well. Even tiny real-world applications contain thousands of lines of code. In fact, applications that contain \u00admillions of lines of code are somewhat common. Imagine trying to work with a file large enough to contain millions of lines of code \u2014 you\u2019d never find anything. In short, you need some method to organize code into small pieces that are easier to manage, much like the examples in this book. The Python solution is to place code in separate code groupings called packages. (In some sources, you may see modules used in place of packages; the two terms are used interchangeably.) Commonly used packages that contain source code for generic needs are called libraries. Packages are contained in separate files. To use the package, you must tell Python to grab the file and read it into the current application. The process of obtaining code found in external files is called importing. You import a package or library to use the code it contains. A few examples in the book have already shown the import statement in use, but this chapter explains the import statement in detail so that you know how to use it. As part of the initial setup, Python created a pointer to the general-purpose librar- ies that it uses. That\u2019s why you can simply add an import statement with the name of the library and Python can find it. However, it pays to know how to locate IN THIS CHAPTER \u00bb \u00bb Organizing your code \u00bb \u00bb Adding code from outside sources \u00bb \u00bb Locating and viewing code libraries \u00bb \u00bb Obtaining and reading library documentation 198 PART 3 Performing Common Tasks the files on disk in case you ever need to update them or you want to add your own packages and libraries to the list of files that Python can use. The library code is"}, {"filename": "Beginning Programming with Python.pdf", "text": "it uses. That\u2019s why you can simply add an import statement with the name of the library and Python can find it. However, it pays to know how to locate IN THIS CHAPTER \u00bb \u00bb Organizing your code \u00bb \u00bb Adding code from outside sources \u00bb \u00bb Locating and viewing code libraries \u00bb \u00bb Obtaining and reading library documentation 198 PART 3 Performing Common Tasks the files on disk in case you ever need to update them or you want to add your own packages and libraries to the list of files that Python can use. The library code is self-contained and well documented (at least in most cases it is). Some developers might feel that they never need to look at the library code, and they\u2019re right to some degree \u2014 you never have to look at the library code in order to use it. You might want to view the library code, though, to ensure that you understand how the code works. In addition, the library code can teach you new programming techniques that you might not otherwise discover. So, viewing the library code is optional, but it can be helpful. The one thing you do need to know how to do is obtain and use the Python library documentation. This chapter shows you how to obtain and use the library \u00addocumentation as part of the application-creation process. You can find the downloadable source code for the client code examples this chapter in the BPPD_11_Interacting_with_Packages.ipynb file, as described in the book\u2019s Introduction. The package examples appear in the BPPD_11_Packages.ipynb file. Creating Code Groupings Grouping like pieces of code together is important to make the code easier to use, modify, and understand. As an application grows, managing the code found in a single file becomes harder and harder. At some point, the code becomes impos- sible to manage because the file has become too large for anyone to work with. The term code is used broadly in this particular case. Code groupings can include: \u00bb \u00bb Classes \u00bb \u00bb Functions \u00bb \u00bb Variables \u00bb \u00bb Runnable code The collection of classes, functions, variables, and runnable code within a package is known as attributes. A package has attributes that you access by that attribute\u2019s name. Later sections in this chapter discuss precisely how package access works. The runnable code can actually be written in a language other than Python. For example, it\u2019s somewhat common to find packages that are written in C/C++ instead of Python. The reason that some developers use runnable code is to make the Python application faster, less resource intensive, and better able to use a particu- lar platform\u2019s resources. However, using runnable code comes with the downside CHAPTER 11 Interacting with Packages 199 of making your application less portable (able to run on other platforms) unless you have runnable code packages for each platform that you want to support. In addition, dual-language applications can be harder to maintain because you must have developers who can speak"}, {"filename": "Beginning Programming with Python.pdf", "text": "example, it\u2019s somewhat common to find packages that are written in C/C++ instead of Python. The reason that some developers use runnable code is to make the Python application faster, less resource intensive, and better able to use a particu- lar platform\u2019s resources. However, using runnable code comes with the downside CHAPTER 11 Interacting with Packages 199 of making your application less portable (able to run on other platforms) unless you have runnable code packages for each platform that you want to support. In addition, dual-language applications can be harder to maintain because you must have developers who can speak each of the computer languages used in the application. The most common way to create a package is to define a separate file containing the code you want to group separately from the rest of the application. For example, you might want to create a print routine that an application uses in a number of places. The print routine isn\u2019t designed to work on its own but is part of the application as a whole. You want to separate it because the application uses it in numerous places and you could potentially use the same code in another application. The ability to reuse code ranks high on the list of reasons to create packages. To make things easier to understand, the examples in this chapter use a common package. The package doesn\u2019t do anything too amazing, but it demonstrates the principles of working with packages. Open a Python 3 Notebook project, name it BPPD_11_Packages, and create the code shown in Listing 11-1. After you complete this task, download the code as a new Python file named BPPD_11_Packages.py by choosing File \u27aa Download As \u27aa Python (.py) in Notebook. LISTING 11-1: A Simple Demonstration Package def SayHello(Name): print(\"Hello \", Name) return def SayGoodbye(Name): print(\"Goodbye \", Name) return You may need to copy the resulting file to your existing BPPD folder, depending on where your browser normally downloads files. When done correctly, your Note- book dashboard should contain a copy of the file, as shown in Figure 11-1. Using the Notebook\u2019s Import feature, described in the \u201cImporting a notebook\u201d section of Chapter 4, makes things considerably easier. The example code contains two simple functions named SayHello() and SayGoodbye(). In both cases, you supply a Name to print and the function prints it onscreen along with a greeting for you. At that point, the function returns control to the caller. Obviously, you normally create more complicated functions, but these functions work well for the purposes of this chapter. 200 PART 3 Performing Common Tasks Understanding the package types The Python support system is immense. In fact, you\u2019ll likely never use more than a small fraction of it for even the most demanding applications. It\u2019s not that Python itself is all that huge; the language is actually somewhat concise compared to many other languages out there. The immensity comes from the Python system of packages that perform everything from intense scientific work, to AI,"}, {"filename": "Beginning Programming with Python.pdf", "text": "the function returns control to the caller. Obviously, you normally create more complicated functions, but these functions work well for the purposes of this chapter. 200 PART 3 Performing Common Tasks Understanding the package types The Python support system is immense. In fact, you\u2019ll likely never use more than a small fraction of it for even the most demanding applications. It\u2019s not that Python itself is all that huge; the language is actually somewhat concise compared to many other languages out there. The immensity comes from the Python system of packages that perform everything from intense scientific work, to AI, to space exploration, to biologic modeling, to anything else you can imagine and many things you can\u2019t. However, not all those packages are available all the time, so you need some idea of what sort of packages Python supports and where you might find them (in order of preference): \u00bb \u00bb Built-in: The built-in packages address most common needs. You find them in the Adaconda3\\Lib folder on your system, and all you need to do to use them is import them into your application. \u00bb \u00bb Custom: As demonstrated in this chapter, you can create your own packages and use them as needed. They appear on your hard drive, normally in the same directory as your project code, and you simply import them into your application. \u00bb \u00bb Conda: You can find a wealth of packages specifically designed for Anaconda. Many of these packages appear at http://conda.anaconda.org/mutirri. Before you can use these packages, you must install them by using the conda utility at the Anaconda command line, as described in the \u201cInstalling conda packages\u201d section of this chapter. After you have the package installed, you use it as you would any built-in package. FIGURE 11-1: Make sure you place a copy of the package in your BPPD folder. CHAPTER 11 Interacting with Packages 201 \u00bb \u00bb Non-conda: Just because a package isn\u2019t specifically designed for use with Anaconda doesn\u2019t mean that you can\u2019t use it. You can find a great wealth of packages from third parties that provide significant functionality. To install these packages, you use the pip utility at the Anaconda command line, as described in the \u201cInstalling packages by using pip\u201d section, later in this chapter. After you have the package installed, you may have to perform additional configuration as described by the party who created the package. Generally, when the package is configured, you use it as you would any built-in package. Considering the package cache Anaconda provides a package cache that resides outside the Python library. This package cache lets you easily interact with the Anaconda-specific packages by using the conda command-line utility. To see how you use this package cache, open an Anaconda command prompt or terminal window. You get access to this feature through the Anaconda Prompt entry in the Anaconda3 folder on your sys- tem. Type conda list and press Enter to see a list of the packages that you have installed now."}, {"filename": "Beginning Programming with Python.pdf", "text": "Generally, when the package is configured, you use it as you would any built-in package. Considering the package cache Anaconda provides a package cache that resides outside the Python library. This package cache lets you easily interact with the Anaconda-specific packages by using the conda command-line utility. To see how you use this package cache, open an Anaconda command prompt or terminal window. You get access to this feature through the Anaconda Prompt entry in the Anaconda3 folder on your sys- tem. Type conda list and press Enter to see a list of the packages that you have installed now. Figure 11-2 shows typical results. Note that the output displays the package name as you would access it from within Anaconda, the package version, and the associated Python version. All this infor- mation is helpful in managing the packages. The following list provides the essential conda commands for managing your packages: \u00bb \u00bb conda clean: Removes packages that you aren\u2019t using. \u00bb \u00bb conda config: Configures the package cache setup. \u00bb \u00bb conda create: Defines a new conda environment that contains a specific list of packages, which makes it easier to manage the packages and can improve application speed. FIGURE 11-2: Obtain a list of Anaconda-specific packages by using the conda utility. 202 PART 3 Performing Common Tasks \u00bb \u00bb conda help: Displays a complete list of conda commands. \u00bb \u00bb conda info: Displays the conda configuration information, which includes details on where conda stores packages and where it looks for new packages. \u00bb \u00bb conda install: Installs one or more packages into the default or specified conda environment. \u00bb \u00bb conda list: Outputs a list of conda packages with varying levels of detail. You can specify which packages to list and in which environments to look. \u00bb \u00bb conda remove: Removes one or more packages from the package cache. \u00bb \u00bb conda search: Looks for specific packages by using the search criteria you provide. \u00bb \u00bb conda update: Updates some or all of the packages in the package cache. These commands can do a lot more than you might think. Of course, it\u2019s impos- sible to memorize all that information, so you can rely on the --help command- line switch to obtain full details on using a particular command. For example, to learn more about conda list, type conda list --help and press Enter. Importing Packages To use a package, you must import it. Python places the package code inline with the rest of your application in memory \u2014 as if you had created one huge file. \u00adNeither file is changed on disk \u2014 they\u2019re still separate, but the way Python views the code is different. You have two ways to import packages. Each technique is used in specific circumstances: \u00bb \u00bb import: You use the import statement when you want to import an entire package. This is the most common method that developers use to import packages because it saves time and requires only one line of code."}, {"filename": "Beginning Programming with Python.pdf", "text": "package, you must import it. Python places the package code inline with the rest of your application in memory \u2014 as if you had created one huge file. \u00adNeither file is changed on disk \u2014 they\u2019re still separate, but the way Python views the code is different. You have two ways to import packages. Each technique is used in specific circumstances: \u00bb \u00bb import: You use the import statement when you want to import an entire package. This is the most common method that developers use to import packages because it saves time and requires only one line of code. However, this approach also uses more memory resources than does the approach of selectively importing the attributes you need, which the next paragraph describes. \u00bb \u00bb from...import: You use the from...import statement when you want to selectively import individual package attributes. This method saves resources, but at the cost of complexity. In addition, if you try to use an attribute that you didn\u2019t import, Python registers an error. Yes, the package still contains the attribute, but Python can\u2019t see it because you didn\u2019t import it. CHAPTER 11 Interacting with Packages 203 Now that you have a better idea of how to import packages, it\u2019s time to look at them in detail. The following sections help you work through importing packages using the two techniques available in Python. Using the import statement The import statement is the most common method for importing a package into Python. This approach is fast and ensures that the entire package is ready for use. The following steps get you started using the import statement. INTERACTING WITH THE CURRENT PYTHON DIRECTORY The directory that Python is using to access code affects which packages you can load. The Python library files are always included in the list of locations that Python can access, but Python knows nothing of the directory you use to hold your source code unless you tell it to look there. Of course, you need to know how to interact with the directory functions in order to tell Python where to look for specific bits of code. You can find this example in the BPPD_11_Directory.ipynb file, as described in the book\u2019s Introduction. 1. Open a new notebook. 2. Type import os and press Enter. This action imports the Python os library. You need to import this library to change the directory (the location Python sees on disk) to the working directory for this book. 3. Type print(os.getcwd()) and click Run Cell. You see the current working directory (cwd) that Python uses to obtain local code. 4. In a new cell, type for entry in os.listdir(): print(entry) and click Run Cell. You see a listing of the directory entries. The listing lets you determine whether the file you need is in the cwd. If not, you need to change directories to a location that does contain the required file. To change directories to a new location, you use the os.chdir() method and include the new"}, {"filename": "Beginning Programming with Python.pdf", "text": "sees on disk) to the working directory for this book. 3. Type print(os.getcwd()) and click Run Cell. You see the current working directory (cwd) that Python uses to obtain local code. 4. In a new cell, type for entry in os.listdir(): print(entry) and click Run Cell. You see a listing of the directory entries. The listing lets you determine whether the file you need is in the cwd. If not, you need to change directories to a location that does contain the required file. To change directories to a new location, you use the os.chdir() method and include the new location as a string, such as os.chdir('C:\\MyDir'). However, you normally find with Notebook that the cwd does contain the files for your current project. 204 PART 3 Performing Common Tasks 1. Open a new notebook. You can also use the downloadable source file, BPPD_11_Interacting_with_ Packages.ipynb. 2. Change directories, if necessary, to the downloadable source code directory. Generally, Notebook places you in the correct directory to use the source code files, so you won\u2019t need to perform this step. See the instructions found in the \u201cInteracting with the current Python directory\u201d sidebar. 3. Type import BPPD_11_Packages and press Enter. This instruction tells Python to import the contents of the BPPD_11_Packages. py file that you created in the \u201cCreating Code Groupings\u201d section of the chapter. The entire library is now ready for use. It\u2019s important to know that Python also creates a cache of the package in the __pycache__ subdirectory. If you look into your source code directory after you import BPPD_11_Packages for the first time, you see the new __pycache__ directory. If you want to make changes to your package, you must delete this directory. Otherwise, Python will continue to use the unchanged cache file instead of your updated source code file. The cached filename includes the version of Python for which it is meant, so it\u2019s BPPD_11_Packages.cpython-36.pyc in this case. The 36 in the filename means that this file is Python 3.6 specific. A .pyc file represents a compiled Python file, which is used to improve application speed. 4. Type dir(BPPD_11_Packages) and click Run Cell. You see a listing of the package contents, which includes the SayHello() and SayGoodbye() functions, as shown in Figure 11-3. (A discussion of the other entries appears in the \u201cViewing the Package Content\u201d section, later in this chapter.) 5. In a new cell, type BPPD_11_Packages.SayHello(\u201cJosh\u201d). Notice that you must precede the attribute name, which is the SayHello() function in this case, with the package name, which is BPPD_11_Packages. The two elements are separated by a period. Every call to a package that you import follows the same pattern. 6. Type BPPD_11_Packages.SayGoodbye(\u201cSally\u201d) and click Run Cell. The SayHello() and SayGoodbye() functions output the expected text, as shown in Figure 11-4. CHAPTER 11 Interacting with Packages 205 Using the from. . .import statement The from...import statement has the advantage of importing only the attributes you need from a package. This difference means that the package uses less"}, {"filename": "Beginning Programming with Python.pdf", "text": "Notice that you must precede the attribute name, which is the SayHello() function in this case, with the package name, which is BPPD_11_Packages. The two elements are separated by a period. Every call to a package that you import follows the same pattern. 6. Type BPPD_11_Packages.SayGoodbye(\u201cSally\u201d) and click Run Cell. The SayHello() and SayGoodbye() functions output the expected text, as shown in Figure 11-4. CHAPTER 11 Interacting with Packages 205 Using the from. . .import statement The from...import statement has the advantage of importing only the attributes you need from a package. This difference means that the package uses less mem- ory and other system resources than using the import statement does. In addi- tion, the from...import statement makes the package a little easier to use because some commands, such as dir(), show less information, or only the information that you actually need. The point is that you get only what you want and not any- thing else. The following steps demonstrate using the from...import statement. However, before you can import BPPD_11_Packages selectively, you must remove it from the environment, which is the first part of the following process. 1. Type the following code into Notebook: import sys del sys.modules[\"BPPD_11_Packages\"] del BPPD_11_Packages dir(BPPD_11_Packages) FIGURE 11-3: A directory listing shows that Python imports both functions from the package. FIGURE 11-4: The SayHello() and SayGoodbye() functions output the expected text. 206 PART 3 Performing Common Tasks 2. Click Run Cell. You see the error message shown in Figure 11-5. Listing the content of the BPPD_11_Packages package isn\u2019t possible anymore because it\u2019s no longer loaded. 3. In a new cell, type from BPPD_11_Packages import SayHello and press Enter. Python imports the SayHello() function that you create in the \u201cCreating Code Groupings\u201d section, earlier in the chapter. Only this specific function is now ready for use. You can still import the entire package, should you want to do so. The two techniques for accomplishing the task are to create a list of packages to import (the names can be separated by commas, such as from BPPD_11_Packages import SayHello, SayGoodbye) or to use the asterisk (*) in place of a specific attribute name. The asterisk acts as a wildcard character that imports everything. 4. Type dir(BPPD_11_Packages) and click Run Cell. Python displays an error message, as shown previously in Figure 11-5. Python imports only the attributes that you specifically request. This means that the BPPD_11_Packages package isn\u2019t in memory \u2014 only the attributes that you requested are in memory. 5. In a new cell, type dir(SayHello) and click Run Cell. You see a listing of attributes that are associated with the SayHello() function, as shown in Figure 11-6 (which is only a partial list). You don\u2019t need to know how these attributes work just now, but you\u2019ll use some of them later in the book. FIGURE 11-5: Removing a package from the environment requires two steps. CHAPTER 11 Interacting with Packages 207 6. In a new cell, type SayHello(\u2033Angie\u2033) and click Run Cell. The SayHello()"}, {"filename": "Beginning Programming with Python.pdf", "text": "package isn\u2019t in memory \u2014 only the attributes that you requested are in memory. 5. In a new cell, type dir(SayHello) and click Run Cell. You see a listing of attributes that are associated with the SayHello() function, as shown in Figure 11-6 (which is only a partial list). You don\u2019t need to know how these attributes work just now, but you\u2019ll use some of them later in the book. FIGURE 11-5: Removing a package from the environment requires two steps. CHAPTER 11 Interacting with Packages 207 6. In a new cell, type SayHello(\u2033Angie\u2033) and click Run Cell. The SayHello() function outputs the expected text, as shown in Figure 11-7. When you import attributes by using the from...import statement, you don\u2019t need to precede the attribute name with a package name. This feature makes the attribute easier to access. Using the from...import statement can also cause problems. If two attri- butes have the same name, you can import only one of them. The import statement prevents name collisions, which is important when you have a large number of attributes to import. In sum, you must exercise care when using the from...import statement. 7. In a new cell, type SayGoodbye(\u2033Harold\u2033) and click Run Cell. You imported only the SayHello() function, so Python knows nothing about SayGoodbye() and displays an error message. The selective nature of the from...import statement can cause problems when you assume that an attribute is present when it really isn\u2019t. Finding Packages on Disk To use the code in a package, Python must be able to locate the package and load it into memory. The location information is stored as paths within Python. \u00adWhenever you request that Python import a package, Python looks at all the files in its list of paths to find it. The path information comes from three sources: \u00bb \u00bb Environment variables: Chapter 3 tells you about Python environment variables, such as PYTHONPATH, that tell Python where to find packages on disk. FIGURE 11-6: Use the dir() function to obtain information about the specific attributes you import. FIGURE 11-7: The SayHello() function no longer requires the package name. 208 PART 3 Performing Common Tasks \u00bb \u00bb Current directory: Earlier in this chapter, you discover that you can change the current Python directory so that it can locate any packages used by your application. \u00bb \u00bb Default directories: Even when you don\u2019t define any environment variables and the current directory doesn\u2019t yield any usable packages, Python can still find its own libraries in the set of default directories that are included as part of its own path information. Knowing the current path information is helpful because the lack of a path can cause your application to fail. To obtain path information, type for p in sys.path: print(p) in a new cell and click Run Cell. You see a listing of the path information, as shown in Figure 11-8. Your listing may be different from the one shown in \u00adFigure 11-8, depending on your platform, the"}, {"filename": "Beginning Programming with Python.pdf", "text": "variables and the current directory doesn\u2019t yield any usable packages, Python can still find its own libraries in the set of default directories that are included as part of its own path information. Knowing the current path information is helpful because the lack of a path can cause your application to fail. To obtain path information, type for p in sys.path: print(p) in a new cell and click Run Cell. You see a listing of the path information, as shown in Figure 11-8. Your listing may be different from the one shown in \u00adFigure 11-8, depending on your platform, the version of Python you have installed, and the Python features you have installed. The sys.path attribute is reliable but may not always contain every path that Python can see. If you don\u2019t see a needed path, you can always check in another place that Python looks for information. The following steps show how to perform this task: 1. In a new cell, type import os and press Enter. 2. Type os.environ[\u2018PYTHONPATH\u2019].split(os.pathsep) and click Run Cell. When you have a PYTHONPATH environment variable defined, you see a list of paths, as shown in Figure 11-9. However, if you don\u2019t have the environment variable defined, you see an error message instead. FIGURE 11-8: The sys.path attribute contains a listing of the individual paths for your system. FIGURE 11-9: You must request information about \u00adenvironment variables separately. CHAPTER 11 Interacting with Packages 209 Notice that both the sys.path and the os.environ['PYTHONPATH'] attributes contain the C:\\BP4D\\Chapter11 entry in this case. The sys.path attribute doesn\u2019t include the split() function, which is why the example uses a for loop with it. However, the os.environ['PYTHONPATH'] attribute does include the split() function, so you can use it to create a list of individual paths. You must provide split() with a value to look for in splitting a list of items. The os.pathsep constant (a variable that has one, unchangeable, defined value) defines the path separator for the current platform so that you can use the same code on any platform that supports Python. You can also add and remove items from sys.path. For example, if you want to add the current working directory to the list of packages, you type sys.path. append(os.getcwd()) in the Notebook cell and click Run Cell. When you list the sys.path contents again, you see that the new entry is added to the end of the list. Likewise, when you want to remove an entry you type sys.path.remove(os. getcwd()) in the Notebook cell and click Run Cell. The addition is present only during the current session. Downloading Packages from Other Sources Your copy of Python and the associated Jupyter Notebook component of Anaconda come with a wide assortment of packages that fulfill many common needs. In fact, for experimentation purposes, you seldom have to go beyond these packages because you already have so many of them installed on your system. Of course, someone is always thinking of some new way to do things, which"}, {"filename": "Beginning Programming with Python.pdf", "text": "of the list. Likewise, when you want to remove an entry you type sys.path.remove(os. getcwd()) in the Notebook cell and click Run Cell. The addition is present only during the current session. Downloading Packages from Other Sources Your copy of Python and the associated Jupyter Notebook component of Anaconda come with a wide assortment of packages that fulfill many common needs. In fact, for experimentation purposes, you seldom have to go beyond these packages because you already have so many of them installed on your system. Of course, someone is always thinking of some new way to do things, which requires new code and packages to store the code. In addition, some coding techniques are so esoteric that including the packages to support them with a default install would consume space that most people will never use. Consequently, you may have to install packages from online or other sources from time to time. The two most common methods of obtaining new packages are to use the conda or pip (also known by the recursive acronym Pip Installs Packages) utilities. How- ever, you may find packages that use other installation methods with varying degrees of success. You use conda and pip for different purposes. Many miscon- ceptions exist about the two package managers, but it really comes down to conda providing general-purpose package management for a wide range of languages with special needs in the conda environment, and to pip providing services \u00adspecifically for Python in any environment. You can read more about these dif- ferences at https://jakevdp.github.io/blog/2016/08/25/conda-myths-and- misconceptions/. When you need a Python-specific package, look to pip first. 210 PART 3 Performing Common Tasks For example, pip gives you access to the Python Package Index (PyPI) found at https://pypi.python.org/pypi. The following sections discuss these two methods. Opening the Anaconda Prompt Before you can do much in the way of managing packages, you must open the Anaconda Prompt. The Anaconda Prompt is just like any other command prompt or terminal window, but it provide special configuration features to make working with the various command-line utilities supplied with Anaconda easier. To open the prompt, locate its icon in the Anaconda3 folder on your machine. For example, when using a Windows system, you can open the Anaconda Prompt by choosing Start \u27aa All Programs \u27aa Anaconda3 \u27aa Anaconda Prompt. The Anaconda Prompt may take a moment or two to appear onscreen because of its configuration requirements. Working with conda packages You can perform a wide range of tasks using conda, but some tasks are more com- mon than others. The following sections describe how to perform five essential tasks using conda. You can obtain additional information about this utility at https://conda.io/docs/commands.html. Typing conda --help and pressing Enter also yields an overview of help information. Viewing conda packages You can view conda packages in two ways. The first is to create a list of available packages, while the second is to search for a specific package. Listing helps you discover whether a package is"}, {"filename": "Beginning Programming with Python.pdf", "text": "its configuration requirements. Working with conda packages You can perform a wide range of tasks using conda, but some tasks are more com- mon than others. The following sections describe how to perform five essential tasks using conda. You can obtain additional information about this utility at https://conda.io/docs/commands.html. Typing conda --help and pressing Enter also yields an overview of help information. Viewing conda packages You can view conda packages in two ways. The first is to create a list of available packages, while the second is to search for a specific package. Listing helps you discover whether a package is already installed. Searching helps you discover the details about the installed package. You can perform searching and listing in a general way to locate everything installed on a particular system. In this case, you use the commands by themselves: conda list conda search The output of these commands is lengthy and might scroll right off the end of the screen buffer (making it impossible to scroll back and view all of the results). For example, Figure 11-10 shows what happens when you use conda list by itself. CHAPTER 11 Interacting with Packages 211 Note that the output shows the package name, version, and associated version of Python. You can use this output to determine whether a package is installed on your system. However, sometimes you need more, which requires a search. For example, say that you want to know what you have installed from the scikit-learn package for the Windows 64-bit platform. In this case, you type conda search --platform win-64 scikit-learn and press Enter, which outputs the details shown in Figure 11-11. A number of flags exist to greatly increase the amount of information you receive. For example, when you use the --json flag, you obtain details such as a complete list of dependencies for the package, whether the package is completely installed, and a URL containing the location of the packages online. You can learn more about conda searches at https://conda.io/docs/commands/conda-search.html. Installing conda packages The conda packages appear at https://anaconda.org/. To determine whether a particular package, such as SciPy, is available, type its name in the search field near the top and press Enter. Oddly enough, you\u2019re apt to find a whole long list of candidates, as shown in Figure 11-12. FIGURE 11-10: The conda list output is rather lengthy and may overrun the screen buffer. FIGURE 11-11: Searches output a lot more information than lists. 212 PART 3 Performing Common Tasks To make any sense out of the long list of candidates, you must click the individual links, which takes you to a details page like the one shown in Figure 11-13. Note that you get links to all sorts of information about this particular copy of SciPy. However, the Installers section of the page is most important. You can download an installer or use conda to perform the task with the supplied command line, which is conda install -c anaconda scipy in this case. USING CONDA"}, {"filename": "Beginning Programming with Python.pdf", "text": "Searches output a lot more information than lists. 212 PART 3 Performing Common Tasks To make any sense out of the long list of candidates, you must click the individual links, which takes you to a details page like the one shown in Figure 11-13. Note that you get links to all sorts of information about this particular copy of SciPy. However, the Installers section of the page is most important. You can download an installer or use conda to perform the task with the supplied command line, which is conda install -c anaconda scipy in this case. USING CONDA INFO Even though the conda info command is normally associated with environment \u00adinformation, you can also use it to work with packages. To discover the specifics of a particular package, you just add the package name, such as conda info numpy. Unfortunately, using this command often results in information overload, so you need to shorten it a little. One way to do this is to add a version number after the package name separated by an equals (=) sign, such as conda info numpy=1.13.1 for \u00adversion 1.13.1 of the NumPy package. In most cases, you don\u2019t receive any additional information using the --verbose switch with packages. However, using the --json switch can yield a little additional information, and this switch puts the information in a form that lets you easily manipulate the output using code, such as a script. The point is that you can use conda info to discover even more deep, dark secrets about your packages. You can learn more about conda info at https://conda.io/docs/commands/conda-info.html. FIGURE 11-12: Choose a version of the package that you want to use. CHAPTER 11 Interacting with Packages 213 Updating conda packages The packages you use to develop applications can become outdated with time. The developers who maintain them might add new features or apply bug fixes. The problem with updates is that they can cause your application to work incorrectly, or sometimes not at all if you\u2019re depending on a broken behavior. However, it\u2019s generally a good idea to keep packages updated if for no other reason than to apply security-related bug fixes. Of course, you need to know that the package requires updating. To find outdated packages, you use the conda search --outdated command, followed by the name of the package you want to check. If you want to check all of the packages, then you simply leave the package name off when performing your search. Unfortunately, at this point the output becomes so long that it\u2019s really tough to see anything (assuming the majority doesn\u2019t just scroll right off the screen buffer). Using the conda search --outdated --names- only command helps in this case by showing just the names of the packages that require updating. After you know what you need to update, you can use the conda update command to perform the task. For example, you might want to update the NumPy package, which means typing conda update numpy"}, {"filename": "Beginning Programming with Python.pdf", "text": "of the packages, then you simply leave the package name off when performing your search. Unfortunately, at this point the output becomes so long that it\u2019s really tough to see anything (assuming the majority doesn\u2019t just scroll right off the screen buffer). Using the conda search --outdated --names- only command helps in this case by showing just the names of the packages that require updating. After you know what you need to update, you can use the conda update command to perform the task. For example, you might want to update the NumPy package, which means typing conda update numpy and pressing Enter. Few packages are stand-alone, so conda will present a list of items that you need to update along with NumPy. Type y and press Enter to proceed. Figure 11-14 shows a typical sequence of events during the update process. FIGURE 11-13: Locate the package version to install and use the condo command to install it. 214 PART 3 Performing Common Tasks You do have the option of updating all packages at one time. Simply type conda update --all and press Enter to get started. However, you may find that interac- tions between packages make the update less successful than it could be if you performed the updates individually. In addition, the update can take a long time, so be sure to have plenty of coffee and a copy of War and Peace on hand. You can learn more about conda updates at https://conda.io/docs/commands/ conda-update.html. Removing conda packages At some point, you might decide that you no longer need a conda package. The only problem is that you don\u2019t know whether other packages depend on the pack- age in question. Because package dependencies can become quite complex, and you want to be sure that your applications will continue to run, you need to check which other packages depend on this particular package. Unfortunately, the conda info command (described at https://conda.io/docs/commands/conda-info. html) tells you only about the package requirements \u2014 that is, what it depends on. Best practice is to keep packages installed after you\u2019ve install them. However, assuming that you really must remove the package, you use the conda remove command described at https://conda.io/docs/commands/conda- remove.html. This command removes the package that you specify, along with any packages that depend on this package. In this case, best practice is to use the --dry-run command-line switch first to ensure that you really do want to remove the package. For example, you may decide that you want to remove NumPy. In this case, you type conda remove --dry-run numpy and press Enter. The command won\u2019t actually execute; conda simply shows what would happen if you actually did run the command, as shown in Figure 11-15. FIGURE 11-14: You see a lot of information during the update process. CHAPTER 11 Interacting with Packages 215 As you can see, a single package can support many other packages \u2014some of which you might need. If you really must insist on removing the package, type"}, {"filename": "Beginning Programming with Python.pdf", "text": "you really do want to remove the package. For example, you may decide that you want to remove NumPy. In this case, you type conda remove --dry-run numpy and press Enter. The command won\u2019t actually execute; conda simply shows what would happen if you actually did run the command, as shown in Figure 11-15. FIGURE 11-14: You see a lot of information during the update process. CHAPTER 11 Interacting with Packages 215 As you can see, a single package can support many other packages \u2014some of which you might need. If you really must insist on removing the package, type the same command as before without the --dry-run command line switch. Never use the --force command-line switch. This command-line switch removes the package without removing the dependent packages, which will end up destroy- ing your Python installation. If you must remove a package, remove all the depen- dent packages as well to keep your installation in great shape. Installing packages by using pip Oddly enough, working with pip is much like working with conda. They both need to perform essentially the same tasks, so if you know how to use one, you know how to use the other. The reference at https://pip.pypa.io/en/stable/ reference/ shows that pip does support essentially the same commands (with a few wording differences). For example, if you want to find a list of outdated pack- ages, you type pip list --outdated and press Enter. Here is a list of the common commands that pip supports: \u00bb \u00bb check: Verify that the installed packages have compatible dependencies. \u00bb \u00bb download: Download the specified packages for later installation. \u00bb \u00bb freeze: Output installed packages in requirements format. \u00bb \u00bb help: Display a help screen listing an overview of the commands. \u00bb \u00bb install: Install the specified packages. \u00bb \u00bb list: List the installed packages. FIGURE 11-15: A single package can have a huge effect. 216 PART 3 Performing Common Tasks \u00bb \u00bb search: Search online at PyPI for packages. \u00bb \u00bb show: Show information about the installed packages. \u00bb \u00bb uninstall: Uninstall the specified packages. Viewing the Package Content Python gives you several different ways to view package content. The method that most developers use is to work with the dir() function, which tells you about the attributes that the package provides. Look at Figure 11-3, earlier in the chapter. In addition to the SayGoodbye() and SayHello() function entries discussed previously, the list has other entries. These attributes are automatically generated by Python for you. These attributes per- form the following tasks or contain the following information: \u00bb \u00bb __builtins__: Contains a listing of all the built-in attributes that are acces- sible from the package. Python adds these attributes automatically for you. \u00bb \u00bb __cached__: Tells you the name and location of the cached file that is associated with the package. The location information (path) is relative to the current Python directory. \u00bb \u00bb __doc__: Outputs help information for the package, assuming that you\u2019ve actually filled it in."}, {"filename": "Beginning Programming with Python.pdf", "text": "entries discussed previously, the list has other entries. These attributes are automatically generated by Python for you. These attributes per- form the following tasks or contain the following information: \u00bb \u00bb __builtins__: Contains a listing of all the built-in attributes that are acces- sible from the package. Python adds these attributes automatically for you. \u00bb \u00bb __cached__: Tells you the name and location of the cached file that is associated with the package. The location information (path) is relative to the current Python directory. \u00bb \u00bb __doc__: Outputs help information for the package, assuming that you\u2019ve actually filled it in. For example, if you type os.__doc__ and press Enter, Python will output the help information associated with the os library. \u00bb \u00bb __file__: Tells you the name and location of the package. The location information (path) is relative to the current Python directory. \u00bb \u00bb __initializing__: Determines whether the package is in the process of initializing itself. Normally this attribute returns a value of False. This attribute is useful when you need to wait until one package is done loading before you import another package that depends on it. \u00bb \u00bb __loader__: Outputs the loader information for this package. The loader is a piece of software that gets the package and puts it into memory so that Python can use it. This is one attribute you rarely (if ever) use. \u00bb \u00bb __name__: Tells you just the name of the package. \u00bb \u00bb __package__: This attribute is used internally by the import system to make it easier to load and manage packages. You don\u2019t need to worry about this particular attribute. CHAPTER 11 Interacting with Packages 217 It may surprise you to find that you can drill down even further into the attributes. Type dir(BPPD_11_Packages.SayHello) and press Enter. You see the entries shown in Figure 11-16. Some of these entries, such as __name__, also appeared in the package listing. However, you might be curious about some of the other entries. For example, you might want to know what __sizeof__ is all about. One way to get additional information is to type help(\u201c__sizeof__\u201d) and press Enter. You see some scanty (but useful) help information, as shown in Figure 11-17. Python isn\u2019t going to blow up if you try the attribute. Even if the Notebook does experience problems, you can always restart the kernel (or simply restart the envi- ronment as a whole). So, another way to check out a package is to simply try the attributes. For example, if you type BPPD_11_Packages.SayHello.__sizeof__() and press Enter, you see the size of the SayHello() function in bytes, as shown in Figure 11-18. FIGURE 11-16: Drill down as far as needed to understand the packages that you use in Python. FIGURE 11-17: Try getting some help information about the attribute you want to know about. FIGURE 11-18: Using the attributes will help you get a better feel for how they work. 218 PART 3 Performing Common Tasks Unlike many other programming languages, Python also"}, {"filename": "Beginning Programming with Python.pdf", "text": "whole). So, another way to check out a package is to simply try the attributes. For example, if you type BPPD_11_Packages.SayHello.__sizeof__() and press Enter, you see the size of the SayHello() function in bytes, as shown in Figure 11-18. FIGURE 11-16: Drill down as far as needed to understand the packages that you use in Python. FIGURE 11-17: Try getting some help information about the attribute you want to know about. FIGURE 11-18: Using the attributes will help you get a better feel for how they work. 218 PART 3 Performing Common Tasks Unlike many other programming languages, Python also makes the source code for its native language libraries available. For example, when you look into the \\Python36\\Lib directory, you see a listing of .py files that you can open in \u00adNotebook with no problem at all. Try uploading the os.py library that you use for various tasks in this chapter by using the Upload button on the Notebook \u00addashboard. Make sure to click Upload next to the file after you\u2019ve opened it; then click the resulting link, and you see the content shown in Figure 11-19. Note that .py files open in a simpler editor and don\u2019t display cells as the notebook files do that you\u2019ve been using throughout the book. Viewing the content directly can help you discover new programming techniques and better understand how the library works. The more time you spend work- ing with Python, the better you\u2019ll become at using it to build interesting applications. Make sure that you just look at the library code and don\u2019t accidentally change it. If you accidentally change the code, your applications can stop working. Worse yet, you can introduce subtle bugs into your application that will appear only on your system and nowhere else. Always exercise care when working with library code. FIGURE 11-19: Directly viewing package code can help in \u00adunderstanding it. CHAPTER 11 Interacting with Packages 219 Viewing Package Documentation You can use the doc() function whenever needed to get quick help. However, you have a better way to study the packages and libraries located in the Python path \u2014 the Python Package Documentation. This feature often appears as Package Docs in the Python folder on your system. It\u2019s also referred to as Pydoc. Whatever you call it, the Python Package Documentation makes life a lot easier for developers. The following sections describe how to work with this feature. Opening the Pydoc application Pydoc is just another Python application. It actually appears in the \\Python36\\Lib directory of your system as pydoc.py. As with any other .py file, you can open this one with Notebook and study how it works. You can start it by using the Python 3.6 Module Docs shortcut that appears in the Python 3.6 folder on your system or by using a command at the Anaconda Prompt (see the \u201cOpening the Anaconda Prompt\u201d section, earlier in this chapter, for details). You can use Pydoc in both graphical and textual mode. When opening an"}, {"filename": "Beginning Programming with Python.pdf", "text": "with this feature. Opening the Pydoc application Pydoc is just another Python application. It actually appears in the \\Python36\\Lib directory of your system as pydoc.py. As with any other .py file, you can open this one with Notebook and study how it works. You can start it by using the Python 3.6 Module Docs shortcut that appears in the Python 3.6 folder on your system or by using a command at the Anaconda Prompt (see the \u201cOpening the Anaconda Prompt\u201d section, earlier in this chapter, for details). You can use Pydoc in both graphical and textual mode. When opening an Ana- conda Prompt, you can provide a keyword, such as JSON, and Pydoc displays tex- tual help. Using the -k command-line switch, followed by a keyword such as if, lets you display a list of places where specific keywords appear. To actually start the server, you type Pydoc -b and press Enter. If you need to use a specific port for your browser, add the -p command-line switch with a port number. The graphical mode of the Pydoc application creates a localized server that works with your browser to display information about the Python packages and libraries. So when you start this application, you see a command (terminal) window open. As with any server, your system may prompt you for permissions. For example, you may see a warning from your firewall telling you that Pydoc is attempting to access the local system. You need to give Pydoc permission to work with the sys- tem so that you can see the information it provides. Any virus detection that you have installed may need permission to let Pydoc continue as well. Some platforms, such as Windows, may require an elevation in privileges to run Pydoc. Normally, the server automatically opens a new browser window for you, as shown in Figure 11-20. This window contains links to the various packages that are contained on your system, including any custom packages you create and include in the Python path. To see information about any package, you can simply click its link. 220 PART 3 Performing Common Tasks The Anaconda Prompt provides you with two commands to control the server. You simply type the letter associated with the command and press Enter to activate it. Here are the two commands: \u00bb \u00bb b: Starts a new copy of the default browser with the index page loaded. \u00bb \u00bb q: Stops the server. When you\u2019re done browsing the help information, make sure that you stop the server by typing q and pressing Enter at the command prompt. Stopping the server frees any resources it uses and closes any holes you made in your firewall to accommodate Pydoc. Using the quick-access links Refer back to Figure 11-20. Near the top of the web page, you see three links. These links provide quick access to the site features. The browser always begins at the Module Index. If you need to return to this page, simply click the Module"}, {"filename": "Beginning Programming with Python.pdf", "text": "loaded. \u00bb \u00bb q: Stops the server. When you\u2019re done browsing the help information, make sure that you stop the server by typing q and pressing Enter at the command prompt. Stopping the server frees any resources it uses and closes any holes you made in your firewall to accommodate Pydoc. Using the quick-access links Refer back to Figure 11-20. Near the top of the web page, you see three links. These links provide quick access to the site features. The browser always begins at the Module Index. If you need to return to this page, simply click the Module Index link. The Topics link takes you to the page shown in Figure 11-21. This page contains links for essential Python topics. For example, if you want to know more about Boolean values, click the BOOLEAN link. The page you see next describes how Boolean values work in Python. At the bottom of the page are related links that lead to pages that contain additional helpful information. FIGURE 11-20: Your browser displays a number of links that appear as part of the Index page. CHAPTER 11 Interacting with Packages 221 The Keywords link takes you to the page shown in Figure 11-22. What you see is a list of the keywords that Python supports. For example, if you want to know more about creating for loops, you click the for link. Typing a search term The pages also include two text boxes near the top. The first has a Get button next to it and the second has a Search button next to it. When you type a search term in the first text box and click Get, you see the documentation for that particular package or attribute. Figure 11-23 shows what you see when you type print and click Get. FIGURE 11-21: The Topics page tells you about essential Python topics, such as how Boolean values work. FIGURE 11-22: The Keywords page contains a listing of keywords that Python supports. 222 PART 3 Performing Common Tasks When you type a search term in the second text box and click Search, you see all the topics that could relate to that search term. Figure 11-24 shows typical results when you type print and click Search. In this case, you click a link, such as \u00adcalendar, to see additional information. Viewing the results The results you get when you view a page depends on the topic. Some topics are brief, such as the one shown previously in Figure 11-23 for print. However, other topics are extensive. For example, if you were to click the calendar link in \u00adFigure 11-24, you would see a significant amount of information, as shown in Figure 11-25. FIGURE 11-23: Using Get obtains specific \u00adinformation about a search term. FIGURE 11-24: Using Search obtains a list of topics about a search term. CHAPTER 11 Interacting with Packages 223 In this particular case, you see related package information, error information, functions, data, and all sorts of additional information"}, {"filename": "Beginning Programming with Python.pdf", "text": "page depends on the topic. Some topics are brief, such as the one shown previously in Figure 11-23 for print. However, other topics are extensive. For example, if you were to click the calendar link in \u00adFigure 11-24, you would see a significant amount of information, as shown in Figure 11-25. FIGURE 11-23: Using Get obtains specific \u00adinformation about a search term. FIGURE 11-24: Using Search obtains a list of topics about a search term. CHAPTER 11 Interacting with Packages 223 In this particular case, you see related package information, error information, functions, data, and all sorts of additional information about the calendar printing functions. The amount of information you see depends partly on the complexity of the topic and partly on the amount of information the developer provided with the package. For example, if you were to select BPPD_11_Packages from the Package Index page, you would see only a list of functions and no documentation at all. FIGURE 11-25: Some pages contain extensive information. CHAPTER 12 Working with Strings 225 Chapter 12 Working with Strings Y our computer doesn\u2019t understand strings. It\u2019s a basic fact. Computers understand numbers, not letters. When you see a string on the computer screen, the computer actually sees a series of numbers. However, humans understand strings quite well, so applications need to be able to work with them. Fortunately, Python makes working with strings relatively easy. It translates the string you understand into the numbers the computer understands, and vice versa. To make strings useful, you need to be able to manipulate them. Of course, that means taking strings apart and using just the pieces you need or searching the string for specific information. This chapter describes how you can build strings by using Python, dissect them as needed, and use just the parts you want after you find what\u2019s required. String manipulation is an important part of applications because humans depend on computers performing that sort of work for them (even though the computer has no idea of what a string is). After you have the string you want, you need to present it to the user in an eye- pleasing manner. The computer doesn\u2019t really care how it presents the string, so often you get the information, but it lacks pizzazz. In fact, it may be downright difficult to read. Knowing how to format strings so that they look nice onscreen is important because users need to see information in a form they understand. By the time you complete this chapter, you know how to create, manipulate, and format strings so that the user sees precisely the right information. You can find the downloadable source code for the examples in this chapter in the BPPD_12_ Working_with_Strings.ipynb file, as described in the book\u2019s Introduction. IN THIS CHAPTER \u00bb \u00bb Considering the string difference \u00bb \u00bb Working with special and single characters \u00bb \u00bb Manipulating and searching strings \u00bb \u00bb Modifying the appearance of string output 226 PART 3 Performing Common Tasks Understanding That"}, {"filename": "Beginning Programming with Python.pdf", "text": "important because users need to see information in a form they understand. By the time you complete this chapter, you know how to create, manipulate, and format strings so that the user sees precisely the right information. You can find the downloadable source code for the examples in this chapter in the BPPD_12_ Working_with_Strings.ipynb file, as described in the book\u2019s Introduction. IN THIS CHAPTER \u00bb \u00bb Considering the string difference \u00bb \u00bb Working with special and single characters \u00bb \u00bb Manipulating and searching strings \u00bb \u00bb Modifying the appearance of string output 226 PART 3 Performing Common Tasks Understanding That Strings Are Different Most aspiring developers (and even a few who have written code for a long time) really have a hard time understanding that computers truly do only understand 0s and 1s. Even larger numbers are made up of 0s and 1s. Comparisons take place with 0s and 1s. Data is moved by using 0s and 1s. In short, strings don\u2019t exist for the computer (and numbers just barely exist). Although grouping 0s and 1s to make numbers is relatively easy, strings are a lot harder because now you\u2019re talk- ing about information that the computer must manipulate as numbers but present as characters. There are no strings in computer science. Strings are made up of characters, and individual characters are actually numeric values. When you work with strings in Python, what you\u2019re really doing is creating an assembly of characters that the computer sees as numeric values. That\u2019s why the following sections are so impor- tant. They help you understand why strings are so special. Understanding this material will save you a lot of headaches later. Defining a character by using numbers To create a character, you must first define a relationship between that character and a number. More important, everyone must agree that when a certain number appears in an application and is viewed as a character by that application, the number is translated into a specific character. One of the most common ways to perform this task is to use the American Standard Code for Information Inter- change (ASCII). Python uses ASCII to translate the number 65 to the letter A. The chart at http://www.asciitable.com/ shows the various numeric values and their character equivalents. Every character you use must have a different numeric value assigned to it. The letter A uses a value of 65. To create a lowercase a, you must assign a different number, which is 97. The computer views A and a as completely different charac- ters, even though people view them as uppercase and lowercase versions of the same character. The numeric values used in this chapter are in decimal. However, the computer still views them as 0s and 1s. For example, the letter A is really the value 01000001 and the letter a is really the value 01100001. When you see an A onscreen, the com- puter sees a binary value instead. CHAPTER 12 Working with Strings 227 Having just one"}, {"filename": "Beginning Programming with Python.pdf", "text": "create a lowercase a, you must assign a different number, which is 97. The computer views A and a as completely different charac- ters, even though people view them as uppercase and lowercase versions of the same character. The numeric values used in this chapter are in decimal. However, the computer still views them as 0s and 1s. For example, the letter A is really the value 01000001 and the letter a is really the value 01100001. When you see an A onscreen, the com- puter sees a binary value instead. CHAPTER 12 Working with Strings 227 Having just one character set to deal with would be nice. However, not everyone could agree on a single set of numeric values to equate with specific characters. Part of the problem is that ASCII doesn\u2019t support characters used by other lan- guages; also, it lacks the capability to translate special characters into an onscreen presentation. In fact, character sets abound. You can see a number of them at http://www.i18nguy.com/unicode/codepages.html. Click one of the character set entries to see how it assigns specific numeric values to each character. Most characters sets do use ASCII as a starting point. Using characters to create strings Python doesn\u2019t make you jump through hoops to create strings. However, the term string should actually give you a good idea of what happens. Think about beads or anything else you might string. You place one bead at a time onto the string. Eventually you end up with some type of ornamentation \u2014 perhaps a necklace or tree garland. The point is that these items are made up of individual beads. The same concept used for necklaces made of beads holds true for strings in com- puters. When you see a sentence, you understand that the sentence is made up of individual characters that are strung together by the programming language you use. The language creates a structure that holds the individual characters together. So, the language, not the computer, knows that so many numbers in a row (each number being represented as a character) defines a string such as a sentence. You may wonder why it\u2019s important to even know how Python works with char- acters. The reason is that many of the functions and special features that Python provides work with individual characters, and you need to know that Python sees the individual characters. Even though you see a sentence, Python sees a specific number of characters. Unlike most programming languages, strings can use either single quotes or dou- ble quotes. For example, \u201cHello There!\u201d with double quotes is a string, as is \u2018Hello There!\u2019 with single quotes. Python also supports triple double and single quotes that let you create strings spanning multiple lines. The following steps help you create an example that demonstrates some of the string features that Python provides. 1. Open a new notebook. You can also use the downloadable source file, BPPD_12_Working_with_ Strings.ipynb. 228 PART 3 Performing Common Tasks 2. Type the following code"}, {"filename": "Beginning Programming with Python.pdf", "text": "a sentence, Python sees a specific number of characters. Unlike most programming languages, strings can use either single quotes or dou- ble quotes. For example, \u201cHello There!\u201d with double quotes is a string, as is \u2018Hello There!\u2019 with single quotes. Python also supports triple double and single quotes that let you create strings spanning multiple lines. The following steps help you create an example that demonstrates some of the string features that Python provides. 1. Open a new notebook. You can also use the downloadable source file, BPPD_12_Working_with_ Strings.ipynb. 228 PART 3 Performing Common Tasks 2. Type the following code into the notebook \u2014 pressing Enter after each line: print('Hello There (Single Quote)!') print(\"Hello There (Double Quote)!\") print(\"\"\"This is a multiple line string using triple double quotes. You can also use triple single quotes.\"\"\") Each of the three print() function calls demonstrates a different principle in working with strings. Equally acceptable is to enclose the string in either single or double quotes. When you use a triple quote (either single or double), the text can appear on multiple lines. 3. Click Run Cell. Python outputs the expected text. Notice that the multiline text appears on three lines (see Figure 12-1), just as it does in the source code file, so this is a kind of formatting. You can use multiline formatting to ensure that the text breaks where you want it to onscreen. FIGURE 12-1: Strings consist of individual characters that are linked together. CHAPTER 12 Working with Strings 229 Creating Stings with Special Characters Some strings include special characters. These characters are different from the alphanumeric and punctuation characters that you\u2019re used to using. In fact, they fall into these categories: \u00bb \u00bb Control: An application requires some means of determining that a particular character isn\u2019t meant to be displayed but rather to control the display. All the control movements are based on the insertion pointer, the line you see when you type text on the screen. For example, you don\u2019t see a tab character. The tab character provides a space between two elements, and the size of that space is controlled by a tab stop. Likewise, when you want to go to the next line, you use a carriage return (which returns the insertion pointer to the beginning of the line) and linefeed (which places the insertion pointer on the next line) combination. \u00bb \u00bb Accented: Characters that have accents, such as the acute (\u2018), grave (`), circumflex (^), umlaut or diaeresis (\u00a8), tilde (~), or ring (\u00b0), represent special spoken sounds, in most cases. You must use special characters to create alphabetical characters with these accents included. \u00bb \u00bb Drawing: You can create rudimentary art with some characters. You can see examples of the box-drawing characters at http://jrgraphix.net/r/ Unicode/2500-257F. Some people actually create art by using ASCII charac- ters as well (http://www.asciiworld.com/). \u00bb \u00bb Typographical: A number of typographical characters, such as the pilcrow (\u00b6),are used when displaying certain kinds of text onscreen, especially when the application"}, {"filename": "Beginning Programming with Python.pdf", "text": "have accents, such as the acute (\u2018), grave (`), circumflex (^), umlaut or diaeresis (\u00a8), tilde (~), or ring (\u00b0), represent special spoken sounds, in most cases. You must use special characters to create alphabetical characters with these accents included. \u00bb \u00bb Drawing: You can create rudimentary art with some characters. You can see examples of the box-drawing characters at http://jrgraphix.net/r/ Unicode/2500-257F. Some people actually create art by using ASCII charac- ters as well (http://www.asciiworld.com/). \u00bb \u00bb Typographical: A number of typographical characters, such as the pilcrow (\u00b6),are used when displaying certain kinds of text onscreen, especially when the application acts as an editor. \u00bb \u00bb Other: Depending on the character set you use, the selection of characters is nearly endless. You can find a character for just about any need. The point is that you need some means of telling Python how to present these special characters. A common need when working with strings, even strings from simple console applications, is control characters. With this in mind, Python provides escape sequences that you use to define control characters directly (and a special escape sequence for other characters). An escape sequence literally escapes the common meaning of a letter, such as a, and gives it a new meaning (such as the ASCII bell or beep). The combination of the backslash (\\) and a letter (such as a) is commonly viewed as a single letter by developers \u2014 an escape character or escape code. Table 12-1 provides an overview of these escape sequences. 230 PART 3 Performing Common Tasks The best way to see how the escape sequences work is to try them. The following steps help you create an example that tests various escape sequences so that you can see them in action. 1. Type the following code into the notebook \u2014 pressing Enter after each line: print(\"Part of this text\\r\\nis on the next line.\") print(\"This is an A with a grave accent: \\xC0.\") print(\"This is a drawing character: \\u2562.\") print(\"This is a pilcrow: \\266.\") print(\"This is a division sign: \\xF7.\") The example code uses various techniques to achieve the same end \u2014 to create a special character. Of course, you use control characters directly, as shown in the first line. Many special letters are accessible by using a hexadecimal number that has two digits (as in the second and fifth lines). However, some require that you rely on Unicode numbers (which always require four digits), TABLE 12-1 Python Escape Sequences Escape Sequence Meaning \\newline Ignored \\\\ Backslash (\\) \\\u2019 Single quote (\u2018) \\\" Double quote (\") \\a ASCII Bell (BEL) \\b ASCII Backspace (BS) \\f ASCII Formfeed (FF) \\n ASCII Linefeed (LF) \\r ASCII Carriage Return (CR) \\t ASCII Horizontal Tab (TAB) \\uhhhh Unicode character (a specific kind of character set with broad appeal across the world) with a hexadecimal value that replaces hhhh \\v ASCII Vertical Tab (VT) \\ooo ASCII character with octal numeric value that replaces ooo \\xhh ASCII character with hexadecimal value that replaces hh CHAPTER"}, {"filename": "Beginning Programming with Python.pdf", "text": "numbers (which always require four digits), TABLE 12-1 Python Escape Sequences Escape Sequence Meaning \\newline Ignored \\\\ Backslash (\\) \\\u2019 Single quote (\u2018) \\\" Double quote (\") \\a ASCII Bell (BEL) \\b ASCII Backspace (BS) \\f ASCII Formfeed (FF) \\n ASCII Linefeed (LF) \\r ASCII Carriage Return (CR) \\t ASCII Horizontal Tab (TAB) \\uhhhh Unicode character (a specific kind of character set with broad appeal across the world) with a hexadecimal value that replaces hhhh \\v ASCII Vertical Tab (VT) \\ooo ASCII character with octal numeric value that replaces ooo \\xhh ASCII character with hexadecimal value that replaces hh CHAPTER 12 Working with Strings 231 as shown in the third line. Octal values use three digits and have no special character associated with them, as shown in the fourth line. 2. Click Run Cell. Python outputs the expected text and special characters, as shown in Figure 12-2. Notebook uses a standard character set across platforms, so you should see the same special characters no matter which platform you test. However, when creating your application, make sure to test it on various platforms to see how the application will react. A character set on one platform may use different numbers for special characters than another platform does. In addition, user selection of character sets could have an impact on how special characters displayed by your application appear. Always make sure that you test special character usage completely. Selecting Individual Characters Earlier in the chapter, you discover that strings are made up of individual charac- ters. They are, in fact, just like beads on a necklace \u2014 with each bead being an individual element of the whole string. Python makes it possible to access individual characters in a string. This is an important feature because you can use it to create new strings that contain only part of the original. In addition, you can combine strings to create new results. The secret to this feature is the square bracket. You place a square bracket with a number in it after the name of the variable. Here\u2019s an example: MyString = \"Hello World\" print(MyString[0]) FIGURE 12-2: Use special characters as needed to present special information or to format the output. 232 PART 3 Performing Common Tasks In this case, the output of the code is the letter H. Python strings are zero-based, which means they start with the number 0 and proceed from there. For example, if you were to type print(MyString[1]), the output would be the letter e. You can also obtain a range of characters from a string. Simply provide the begin- ning and ending letter count separated by a colon in the square brackets. For example, print(MyString[6:11]) would output the word World. The output would begin with letter 7 and end with letter 12 (remember that the index is zero based). The following steps demonstrate some basic tasks that you can perform by using Python\u2019s character-selection technique. 1. Type the following code into the notebook \u2014 pressing Enter after each"}, {"filename": "Beginning Programming with Python.pdf", "text": "there. For example, if you were to type print(MyString[1]), the output would be the letter e. You can also obtain a range of characters from a string. Simply provide the begin- ning and ending letter count separated by a colon in the square brackets. For example, print(MyString[6:11]) would output the word World. The output would begin with letter 7 and end with letter 12 (remember that the index is zero based). The following steps demonstrate some basic tasks that you can perform by using Python\u2019s character-selection technique. 1. Type the following code into the notebook \u2014 pressing Enter after each line. String1 = \"Hello World\" String2 = \"Python is Fun!\" print(String1[0]) print(String1[0:5]) print(String1[:5]) print(String1[6:]) String3 = String1[:6] + String2[:6] print(String3) print(String2[:7]*5) The example begins by creating two strings. It then demonstrates various methods for using the index on the first string. Notice that you can leave out the beginning or ending number in a range if you want to work with the remainder of that string. The next step is to combine two substrings. In this case, the code combines the beginning of String1 with the beginning of String2 to create String3. The use of the + sign to combine two strings is called concatenation. This sign is one of the handier operators to remember when you\u2019re working with strings in an application. The final step is to use a Python feature called repetition. You use repetition to make a number of copies of a string or substring. 2. Click Run Cell. Python outputs a series of substrings and string combinations, as shown in Figure 12-3. CHAPTER 12 Working with Strings 233 Slicing and Dicing Strings Working with ranges of characters provides some degree of flexibility, but it doesn\u2019t provide you with the capability to actually manipulate the string content or discover anything about it. For example, you might want to change the charac- ters to uppercase or determine whether the string contains all letters. Fortunately, Python has functions that help you perform tasks of this sort. Here are the most commonly used functions: \u00bb \u00bb capitalize(): Capitalizes the first letter of a string. \u00bb \u00bb center(width, fillchar=\" \"): Centers a string so that it fits within the number of spaces specified by width. If you supply a character for fillchar, the function uses that character. Otherwise, center() uses spaces to create a string of the desired width. \u00bb \u00bb expandtabs(tabsize=8): Expands tabs in a string by replacing the tab with the number of spaces specified by tabsize. The function defaults to 8 spaces per tab when tabsize isn\u2019t provided. \u00bb \u00bb isalnum(): Returns True when the string has at least one character and all characters are alphanumeric (letters or numbers). \u00bb \u00bb isalpha(): Returns True when the string has at least one character and all characters are alphabetic (letters only). \u00bb \u00bb isdecimal(): Returns True when a Unicode string contains only decimal characters. \u00bb \u00bb isdigit(): Returns True when a string contains only digits (numbers and not letters). \u00bb"}, {"filename": "Beginning Programming with Python.pdf", "text": "expandtabs(tabsize=8): Expands tabs in a string by replacing the tab with the number of spaces specified by tabsize. The function defaults to 8 spaces per tab when tabsize isn\u2019t provided. \u00bb \u00bb isalnum(): Returns True when the string has at least one character and all characters are alphanumeric (letters or numbers). \u00bb \u00bb isalpha(): Returns True when the string has at least one character and all characters are alphabetic (letters only). \u00bb \u00bb isdecimal(): Returns True when a Unicode string contains only decimal characters. \u00bb \u00bb isdigit(): Returns True when a string contains only digits (numbers and not letters). \u00bb \u00bb islower(): Returns True when a string has at least one alphabetic character and all alphabetic characters are in lowercase. FIGURE 12-3: You can select individual pieces of a string. 234 PART 3 Performing Common Tasks \u00bb \u00bb isnumeric(): Returns True when a Unicode string contains only numeric characters. \u00bb \u00bb isspace(): Returns True when a string contains only whitespace characters (which includes spaces, tabs, carriage returns, linefeeds, form feeds, and vertical tabs, but not the backspace). \u00bb \u00bb istitle(): Returns True when a string is cased for use as a title, such as Hello World. However, the function requires that even little words have the title case. For example, Follow a Star returns False, even though it\u2019s properly cased, but Follow A Star returns True. \u00bb \u00bb isupper(): Returns True when a string has at least one alphabetic character and all alphabetic characters are in uppercase. \u00bb \u00bb join(seq): Creates a string in which the base string is separated in turn by each character in seq in a repetitive fashion. For example, if you start with MyString = \"Hello\" and type print(MyString.join(\"!*!\")), the output is !Hello*Hello!. \u00bb \u00bb len(string): Obtains the length of string. \u00bb \u00bb ljust(width, fillchar=\" \"): Left justifies a string so that it fits within the number of spaces specified by width. If you supply a character for fillchar, the function uses that character. Otherwise, ljust() uses spaces to create a string of the desired width. \u00bb \u00bb lower(): Converts all uppercase letters in a string to lowercase letters. \u00bb \u00bb lstrip(): Removes all leading whitespace characters in a string. \u00bb \u00bb max(str): Returns the character that has the maximum numeric value in str. For example, a would have a larger numeric value than A. \u00bb \u00bb min(str): Returns the character that has the minimum numeric value in str. For example, A would have a smaller numeric value than a. \u00bb \u00bb rjust(width, fillchar=\" \"): Right justifies a string so that it fits within the number of spaces specified by width. If you supply a character for fillchar, the function uses that character. Otherwise, rjust() uses spaces to create a string of the desired width. \u00bb \u00bb rstrip(): Removes all trailing whitespace characters in a string. \u00bb \u00bb split(str=\" \", num=string.count(str)): Splits a string into substrings using the delimiter specified by str (when supplied). The default is to use a space as a delimiter. Consequently, if"}, {"filename": "Beginning Programming with Python.pdf", "text": "value in str. For example, A would have a smaller numeric value than a. \u00bb \u00bb rjust(width, fillchar=\" \"): Right justifies a string so that it fits within the number of spaces specified by width. If you supply a character for fillchar, the function uses that character. Otherwise, rjust() uses spaces to create a string of the desired width. \u00bb \u00bb rstrip(): Removes all trailing whitespace characters in a string. \u00bb \u00bb split(str=\" \", num=string.count(str)): Splits a string into substrings using the delimiter specified by str (when supplied). The default is to use a space as a delimiter. Consequently, if your string contains A Fine Day, the output would be three substrings consisting of A, Fine, and Day. You use num to define the number of substrings to return. The default is to return every substring that the function can produce. CHAPTER 12 Working with Strings 235 \u00bb \u00bb splitlines(num=string.count('\\n')): Splits a string that contains newline (\\n) characters into individual strings. Each break occurs at the newline character. The output has the newline characters removed. You can use num to specify the number of strings to return. \u00bb \u00bb strip(): Removes all leading and trailing whitespace characters in a string. \u00bb \u00bb swapcase(): Inverts the case for each alphabetic character in a string. \u00bb \u00bb title(): Returns a string in which the initial letter in each word is in upper- case and all remaining letters in the word are in lowercase. \u00bb \u00bb upper(): Converts all lowercase letters in a string to uppercase letters. \u00bb \u00bb zfill (width): Returns a string that is left-padded with zeros so that the resulting string is the size of width. This function is designed for use with strings containing numeric values. It retains the original sign information (if any) supplied with the number. Playing with these functions a bit can help you understand them better. The \u00adfollowing steps create an example that demonstrates some of the tasks you can perform by using these functions. 1. Type the following code into the notebook \u2014 pressing Enter after each line: MyString = \" Hello World \" print(MyString.upper()) print(MyString.strip()) print(MyString.center(21, \"*\")) print(MyString.strip().center(21, \"*\")) print(MyString.isdigit()) print(MyString.istitle()) print(max(MyString)) print(MyString.split()) print(MyString.split()[0]) The code begins by creating MyString, which includes spaces before and after the text so that you can see how space-related functions work. The initial task is to convert all the characters to uppercase. Removing extra space is a common task in application development. The strip() function performs this task well. The center() function lets you add padding to both the left and right side of a string so that it consumes a desired amount of space. When you combine the strip() and center() functions, the output is different from when you use the center() function alone. 236 PART 3 Performing Common Tasks You can combine functions to produce a desired result. Python executes each of the functions one at a time from left to right. The order in which the functions appear will affect the output, and developers"}, {"filename": "Beginning Programming with Python.pdf", "text": "common task in application development. The strip() function performs this task well. The center() function lets you add padding to both the left and right side of a string so that it consumes a desired amount of space. When you combine the strip() and center() functions, the output is different from when you use the center() function alone. 236 PART 3 Performing Common Tasks You can combine functions to produce a desired result. Python executes each of the functions one at a time from left to right. The order in which the functions appear will affect the output, and developers commonly make the mistake of putting the functions in the wrong order. If your output is different from what you expected, try changing the function order. Some functions work on the string as an input rather than on the string instance. The max() function falls into this category. If you had typed MyString.max(), Python would have displayed an error. The bulleted list that appears earlier in this section shows which functions require this sort of string input. When working with functions that produce a list as an output, you can access an individual member by providing an index to it. The example shows how to use split() to split the string into substrings. It then shows how to access just the first substring in the list. You find out more about working with lists in Chapter 13. 2. Click Run Cell. Python outputs a number of modified strings, as shown in Figure 12-4. Locating a Value in a String Sometimes you need to locate specific information in a string. For example, you may want to know whether a string contains the word Hello in it. One of the essential purposes behind creating and maintaining data is to be able to search it later to locate specific bits of information. Strings are no different \u2014 they\u2019re most useful when you can find what you need quickly and without any problems. Python provides a number of functions for searching strings. Here are the most com- monly used functions: FIGURE 12-4: Using functions makes string manipulation a lot more flexible. CHAPTER 12 Working with Strings 237 \u00bb \u00bb count(str, beg= 0, end=len(string)): Counts how many times str occurs in a string. You can limit the search by specifying a beginning index using beg or an ending index using end. \u00bb \u00bb endswith(suffix, beg=0, end=len(string)): Returns True when a string ends with the characters specified by suffix. You can limit the check by specifying a beginning index using beg or an ending index using end. \u00bb \u00bb find(str, beg=0, end=len(string)): Determines whether str occurs in a string and outputs the index of the location. You can limit the search by specifying a beginning index using beg or a ending index using end. \u00bb \u00bb index(str, beg=0, end=len(string)): Provides the same functionality as find(), but raises an exception when str isn\u2019t found. \u00bb \u00bb replace(old, new [, max]): Replaces all occurrences of the character sequence"}, {"filename": "Beginning Programming with Python.pdf", "text": "end=len(string)): Returns True when a string ends with the characters specified by suffix. You can limit the check by specifying a beginning index using beg or an ending index using end. \u00bb \u00bb find(str, beg=0, end=len(string)): Determines whether str occurs in a string and outputs the index of the location. You can limit the search by specifying a beginning index using beg or a ending index using end. \u00bb \u00bb index(str, beg=0, end=len(string)): Provides the same functionality as find(), but raises an exception when str isn\u2019t found. \u00bb \u00bb replace(old, new [, max]): Replaces all occurrences of the character sequence specified by old in a string with the character sequence specified by new. You can limit the number of replacements by specifying a value for max. \u00bb \u00bb rfind(str, beg=0, end=len(string)): Provides the same functionality as find(), but searches backward from the end of the string instead of the beginning. \u00bb \u00bb rindex(str, beg=0, end=len(string)): Provides the same functionality as index(), but searches backward from the end of the string instead of the beginning. \u00bb \u00bb startswith(prefix, beg=0, end=len(string)): Returns True when a string begins with the characters specified by prefix. You can limit the check by specifying a beginning index using beg or an ending index using end. Finding the data that you need is an essential programming task \u2014 one that is required no matter what kind of application you create. The following steps help you create an example that demonstrates the use of search functionality within strings. 1. Type the following code into the window \u2014 pressing Enter after each line: SearchMe = \"The apple is red and the berry is blue!\" print(SearchMe.find(\"is\")) print(SearchMe.rfind(\"is\")) print(SearchMe.count(\"is\")) print(SearchMe.startswith(\"The\")) print(SearchMe.endswith(\"The\")) print(SearchMe.replace(\"apple\", \"car\") .replace(\"berry\", \"truck\")) 238 PART 3 Performing Common Tasks The example begins by creating SearchMe, a string with two instances of the word is. The two instances are important because they demonstrate how searches differ depending on where you start. When using find(), the example starts from the beginning of the string. By contrast, rfind() starts from the end of the string. Of course, you won\u2019t always know how many times a certain set of characters appears in a string. The count() function lets you determine this value. Depending on the kind of data you work with, sometimes the data is heavily formatted and you can use a particular pattern to your advantage. For example, you can determine whether a particular string (or substring) ends or begins with a specific sequence of characters. You could just as easily use this technique to look for a part number. The final bit of code replaces apple with car and berry with truck. Notice the technique used to place the code on two lines. In some cases, your code will need to appear on multiple lines to make it more readable. 2. Click Run Cell. Python displays the output shown in Figure 12-5. Notice especially that the searches returned different indexes based on where they started in the string. Using the correct"}, {"filename": "Beginning Programming with Python.pdf", "text": "a particular string (or substring) ends or begins with a specific sequence of characters. You could just as easily use this technique to look for a part number. The final bit of code replaces apple with car and berry with truck. Notice the technique used to place the code on two lines. In some cases, your code will need to appear on multiple lines to make it more readable. 2. Click Run Cell. Python displays the output shown in Figure 12-5. Notice especially that the searches returned different indexes based on where they started in the string. Using the correct function when performing searches is essential to ensure that you get the results you expected. Formatting Strings You can format strings in a number of ways using Python. The main emphasis of formatting is to present the string in a form that is both pleasing to the user and easy to understand. Formatting doesn\u2019t mean adding special fonts or effects in this case, but refers merely to the presentation of the data. For example, the user might want a fixed-point number rather than a decimal number as output. FIGURE 12-5: Typing the wrong input type generates an error instead of an exception. CHAPTER 12 Working with Strings 239 You have quite a few ways to format strings and you see a number of them as the book progresses. However, the focus of most formatting is the format() function. You create a formatting specification as part of the string and then use the format() function to add data to that string. A format specification may be as simple as two curly brackets {} that specify a placeholder for data. You can num- ber the placeholder to create special effects. For example, {0} would contain the first data element in a string. When the data elements are numbered, you can even repeat them so that the same data appears more than once in the string. The formatting specification follows a colon. When you want to create just a \u00adformatting specification, the curly brackets contain just the colon and whatever formatting you want to use. For example, {:f} would create a fixed-point num- ber as output. If you want to number the entries, the number that precedes the colon: {0:f} creates a fixed-point number output for data element one. The for- matting specification follows this form, with the italicized elements serving as placeholders here: [[fill]align][sign][#][0][width][,][.precision][type] The specification at https://docs.python.org/3/library/string.html pro- vides you with the in-depth details, but here\u2019s an overview of what the various entries mean: \u00bb \u00bb fill: Defines the fill character used when displaying data that is too small to fit within the assigned space. \u00bb \u00bb align: Specifies the alignment of data within the display space. You can use these alignments: \u2022 <: Left aligned \u2022 >: Right aligned \u2022 ^: Centered \u2022 =: Justified \u00bb \u00bb sign: Determines the use of signs for the output: \u2022 +: Positive numbers have a plus sign and negative numbers have a minus"}, {"filename": "Beginning Programming with Python.pdf", "text": "here: [[fill]align][sign][#][0][width][,][.precision][type] The specification at https://docs.python.org/3/library/string.html pro- vides you with the in-depth details, but here\u2019s an overview of what the various entries mean: \u00bb \u00bb fill: Defines the fill character used when displaying data that is too small to fit within the assigned space. \u00bb \u00bb align: Specifies the alignment of data within the display space. You can use these alignments: \u2022 <: Left aligned \u2022 >: Right aligned \u2022 ^: Centered \u2022 =: Justified \u00bb \u00bb sign: Determines the use of signs for the output: \u2022 +: Positive numbers have a plus sign and negative numbers have a minus sign. \u2022 -: Negative numbers have a minus sign. \u2022 <space>: Positive numbers are preceded by a space and negative numbers have a minus sign. 240 PART 3 Performing Common Tasks \u00bb \u00bb #: Specifies that the output should use the alternative display format for numbers. For example, hexadecimal numbers will have a 0x prefix added to them. \u00bb \u00bb 0: Specifies that the output should be sign aware and padded with zeros as needed to provide consistent output. \u00bb \u00bb width: Determines the full width of the data field (even if the data won\u2019t fit in the space provided). \u00bb \u00bb ,: Specifies that numeric data should have commas as a thousands separator. \u00bb \u00bb .precision: Determines the number of characters after the decimal point. \u00bb \u00bb type: Specifies the output type, even if the input type doesn\u2019t match. The types are split into three groups: \u2022 String: Use an s or nothing at all to specify a string. \u2022 Integer: The integer types are as follows: b (binary); c (character); d (\u00addecimal); o (octal); x (hexadecimal with lowercase letters); X (hexadecimal with uppercase letters); and n (locale-sensitive decimal that uses the appropriate characters for the thousands separator). \u2022 Floating point: The floating-point types are as follows: e (exponent using a lowercase e as a separator); E (exponent using an uppercase E as a separator); f (lowercase fixed point); F (uppercase fixed point); g (lowercase general format); G (uppercase general format); n (local-sensitive general format that uses the appropriate characters for the decimal and thousands separators); and % (percentage). The formatting specification elements must appear in the correct order or Python won\u2019t know what to do with them. If you specify the alignment before the fill character, Python displays an error message rather than performing the required formatting. The following steps help you see how the formatting specification works and demonstrate the order you need to follow in using the various format- ting specification criteria. 1. Type the following code into the notebook \u2014 pressing Enter after each line: Formatted = \"{:d}\" print(Formatted.format(7000)) Formatted = \"{:,d}\" print(Formatted.format(7000)) Formatted = \"{:^15,d}\" print(Formatted.format(7000)) CHAPTER 12 Working with Strings 241 Formatted = \"{:*^15,d}\" print(Formatted.format(7000)) Formatted = \"{:*^15.2f}\" print(Formatted.format(7000)) Formatted = \"{:*>15X}\" print(Formatted.format(7000)) Formatted = \"{:*<#15x}\" print(Formatted.format(7000)) Formatted = \"A {0} {1} and a {0} {2}.\" print(Formatted.format(\"blue\", \"car\", \"truck\")) The example starts simply with a field formatted as a decimal value. It then"}, {"filename": "Beginning Programming with Python.pdf", "text": "following steps help you see how the formatting specification works and demonstrate the order you need to follow in using the various format- ting specification criteria. 1. Type the following code into the notebook \u2014 pressing Enter after each line: Formatted = \"{:d}\" print(Formatted.format(7000)) Formatted = \"{:,d}\" print(Formatted.format(7000)) Formatted = \"{:^15,d}\" print(Formatted.format(7000)) CHAPTER 12 Working with Strings 241 Formatted = \"{:*^15,d}\" print(Formatted.format(7000)) Formatted = \"{:*^15.2f}\" print(Formatted.format(7000)) Formatted = \"{:*>15X}\" print(Formatted.format(7000)) Formatted = \"{:*<#15x}\" print(Formatted.format(7000)) Formatted = \"A {0} {1} and a {0} {2}.\" print(Formatted.format(\"blue\", \"car\", \"truck\")) The example starts simply with a field formatted as a decimal value. It then adds a thousands separator to the output. The next step is to make the field wider than needed to hold the data and to center the data within the field. Finally, the field has an asterisk added to pad the output. Of course, the example contains other data types. The next step is to display the same data in fixed-point format. The example also shows the output in both uppercase and lowercase hexadecimal format. The uppercase output is right aligned and the lowercase output is left aligned. Finally, the example shows how you can use numbered fields to your advan- tage. In this case, it creates an interesting string output that repeats one of the input values. 2. Click Run Cell. Python outputs data in various forms, as shown in Figure 12-6. FIGURE 12-6: Use formatting to present data in precisely the form you want. CHAPTER 13 Managing Lists 243 Chapter 13 Managing Lists A lot of people lose sight of the fact that most programming techniques are based on the real world. Part of the reason is that programmers often use terms that other people don\u2019t to describe these real-world objects. For example, most people would call a place to store something a box or a cupboard \u2014 but programmers insist on using the term variable. Lists are different. Everyone makes lists and uses them in various ways to perform an abundance of tasks. In fact, you\u2019re probably surrounded by lists of various sorts where you\u2019re sitting right now as you read this book. So, this chapter is about something you already use quite a lot. The only difference is that you need to think of lists in the same way Python does. You may read that lists are hard to work with. The reason that some people find working with lists difficult is that they\u2019re not used to actually thinking about the lists they create. When you create a list, you simply write items down in whatever order makes sense to you. Sometimes you rewrite the list when you\u2019re done to put it in a specific order. In other cases, you use your finger as a guide when going down the list to make looking through it easier. The point is that everything you normally do with lists is also doable within Python. The difference is that you must now actually think about what you\u2019re doing in order"}, {"filename": "Beginning Programming with Python.pdf", "text": "working with lists difficult is that they\u2019re not used to actually thinking about the lists they create. When you create a list, you simply write items down in whatever order makes sense to you. Sometimes you rewrite the list when you\u2019re done to put it in a specific order. In other cases, you use your finger as a guide when going down the list to make looking through it easier. The point is that everything you normally do with lists is also doable within Python. The difference is that you must now actually think about what you\u2019re doing in order to make Python under- stand what you want done. Lists are incredibly important in Python. This chapter introduces you to the con- cepts used to create, manage, search, and print lists (among other tasks). When you complete the chapter, you can use lists to make your Python applications more robust, faster, and more flexible. In fact, you\u2019ll wonder how you ever got IN THIS CHAPTER \u00bb \u00bb Defining why lists are important \u00bb \u00bb Generating lists \u00bb \u00bb Managing lists \u00bb \u00bb Using the Counter object to your advantage 244 PART 3 Performing Common Tasks along without using lists in the past. The important thing to keep in mind is that you have already used lists most of your life. There really isn\u2019t any difference now except that you must now think about the actions that you normally take for granted when managing your own lists. You can find the downloadable source code for the examples this chapter in the BPPD_13_Managing_Lists.ipynb file, as described in the book\u2019s Introduction. Organizing Information in an Application People create lists to organize information and make it easier to access and change. You use lists in Python for the same reason. In many situations, you really do need some sort of organizational aid to hold data. For example, you might want to cre- ate a single place to look for days of the week or months of the year. The names of these items would appear in a list, much as they would if you needed to commit them to paper in the real world. The following sections describe lists and how they work in more detail. Defining organization using lists The Python specification defines a list as a kind of sequence. Sequences simply provide some means of allowing multiple data items to exist together in a single storage unit, but as separate entities. Think about one of those large mail holders you see in apartment buildings. A single mail holder contains a number of small mailboxes, each of which can contain mail. Python supports other kinds of sequences as well (Chapter 14 discusses a number of these sequences): \u00bb \u00bb Tuples \u00bb \u00bb Dictionaries \u00bb \u00bb Stacks \u00bb \u00bb Queues \u00bb \u00bb Deques Of all the sequences, lists are the easiest to understand and are the most directly related to a real-world object. Working with lists helps you become better able to work with"}, {"filename": "Beginning Programming with Python.pdf", "text": "in a single storage unit, but as separate entities. Think about one of those large mail holders you see in apartment buildings. A single mail holder contains a number of small mailboxes, each of which can contain mail. Python supports other kinds of sequences as well (Chapter 14 discusses a number of these sequences): \u00bb \u00bb Tuples \u00bb \u00bb Dictionaries \u00bb \u00bb Stacks \u00bb \u00bb Queues \u00bb \u00bb Deques Of all the sequences, lists are the easiest to understand and are the most directly related to a real-world object. Working with lists helps you become better able to work with other kinds of sequences that provide greater functionality and improved flexibility. The point is that the data is stored in a list much as you would write it on a piece of paper \u2014 one item comes after another, as shown in Figure 13-1. The list has a beginning, a middle, and an end. As shown in the figure, the items are numbered. (Even if you might not normally number them in real life, Python always numbers the items for you.) CHAPTER 13 Managing Lists 245 Understanding how computers view lists The computer doesn\u2019t view lists in the same way that you do. It doesn\u2019t have an internal notepad and use a pen to write on it. A computer has memory. The \u00adcomputer stores each item in a list in a separate memory location, as shown in Figure 13-2. The memory is contiguous, so as you add new items, they\u2019re added to the next location in memory. In many respects, the computer uses something like a mailbox to hold your list. The list as a whole is the mail holder. As you add items, the computer places it in the next mailbox within the mail holder. Just as the mailboxes are numbered in a mail holder, the memory slots used for a list are numbered. The numbers begin with 0, not with 1 as you might expect. Each mailbox receives the next number in line. A mail holder with the months of the year would contain 12 mailboxes. The mailboxes would be numbered from 0 to 11 (not 1 to 12, as you might think). Getting the numbering scheme down as quickly as possible is essential because even experienced developers get into trouble by using 1 and not 0 as a starting point at times. FIGURE 13-1: A list is simply a sequence of items, much as you would write on a notepad. FIGURE 13-2: Each item added to a list takes the next position in memory. 246 PART 3 Performing Common Tasks Depending on what sort of information you place in each mailbox, the mailboxes need not be of the same size. Python lets you store a string in one mailbox, an integer in another, and a floating-point value in another. The computer doesn\u2019t know what kind of information is stored in each mailbox and it doesn\u2019t care. All the computer sees is one long list of numbers that"}, {"filename": "Beginning Programming with Python.pdf", "text": "simply a sequence of items, much as you would write on a notepad. FIGURE 13-2: Each item added to a list takes the next position in memory. 246 PART 3 Performing Common Tasks Depending on what sort of information you place in each mailbox, the mailboxes need not be of the same size. Python lets you store a string in one mailbox, an integer in another, and a floating-point value in another. The computer doesn\u2019t know what kind of information is stored in each mailbox and it doesn\u2019t care. All the computer sees is one long list of numbers that could be anything. Python \u00adperforms all the work required to treat the data elements according to the right type and to ensure that when you request item five, you actually get item five. In general, it\u2019s good practice to create lists of like items to make the data easier to manage. When creating a list of all integers, for example, rather than of mixed data, you can make assumptions about the information and don\u2019t have to spend nearly as much time checking it. However, in some situations, you might need to mix data. Many other programming languages require that lists have just one type of data, but Python offers the flexibility of using mixed data sorts. Just remember that using mixed data in a list means that you must determine the data type when retrieving the information in order to work with the data correctly. Treating a string as an integer would cause problems in your application. Creating Lists As in real life, before you can do anything with a list, you must create it. As previ- ously stated, Python lists can mix types. However, restricting a list to a single type when you can is always the best practice. The following steps demonstrate how to create Python lists. 1. Open a new notebook. You can also use the downloadable source file, BPPD_13_Managing_Lists. ipynb. 2. Type List1 = [\u201cOne\u201d, 1, \u201cTwo\u201d, True] and press Enter. Python creates a list named List1 for you. This list contains two string values (One and Two), an integer value (1), and a Boolean value (True). Of course, you can\u2019t actually see anything because Python processes the command without saying anything. Notice that each data type that you type is a different color. When you use the default color scheme, Python displays strings in green, numbers in black, and Boolean values in orange. The color of an entry is a cue that tells you whether you have typed the entry correctly, which helps reduce errors when creating a list. CHAPTER 13 Managing Lists 247 3. Type print(List1) and click Run Cell. You see the content of the list as a whole, as shown in Figure 13-3. Notice that the string entries appear in single quotes, even though you typed them using double quotes. Strings can appear in either single quotes or double quotes in Python. 4. Type dir(List1) and click Run Cell. Python displays a"}, {"filename": "Beginning Programming with Python.pdf", "text": "numbers in black, and Boolean values in orange. The color of an entry is a cue that tells you whether you have typed the entry correctly, which helps reduce errors when creating a list. CHAPTER 13 Managing Lists 247 3. Type print(List1) and click Run Cell. You see the content of the list as a whole, as shown in Figure 13-3. Notice that the string entries appear in single quotes, even though you typed them using double quotes. Strings can appear in either single quotes or double quotes in Python. 4. Type dir(List1) and click Run Cell. Python displays a list of actions that you can perform using lists, as shown (partially) in Figure 13-4. Notice that the output is actually a list. So, you\u2019re using a list to determine what you can do with another list. As you start working with objects of greater complexity, you need to remember that the dir() command always shows what tasks you can perform using that object. The actions that appear without underscores are the main actions that you can perform using a list. These actions are the following: \u2022 append \u2022 clear FIGURE 13-3: Python displays the content of List1. FIGURE 13-4: Python provides a listing of the actions you can perform using a list. 248 PART 3 Performing Common Tasks \u2022 copy \u2022 count \u2022 extend \u2022 index \u2022 insert \u2022 pop \u2022 remove \u2022 reverse \u2022 sort Accessing Lists After you create a list, you want to access the information it contains. An object isn\u2019t particularly useful if you can\u2019t at least access the information it contains. The pre- vious section shows how to use the print() and dir() functions to interact with a list, but other ways exist to perform the task, as described in the following steps. 1. Type List1 = [\u201cOne\u201d, 1, \u201cTwo\u201d, True] and click Run Cell. Python creates a list named List1 for you. 2. Type List1[1] and click Run Cell. You see the value 1 as output, as shown in Figure 13-5. The use of a number within a set of square brackets is called an index. Python always uses zero- based indexes, so asking for the element at index 1 means getting the second element in the list. 3. Type List1[1:3] and click Run Cell. You see a range of values that includes two elements, as shown in Figure 13-6. When typing a range, the end of the range is always one greater than the number of elements returned. In this case, that means that you get elements 1 and 2, not elements 1 through 3 as you might expect. FIGURE 13-5: Make sure to use the correct index number. CHAPTER 13 Managing Lists 249 4. Type List1[1:] and click Run Cell. You see all the elements, starting from element 1 to the end of the list, as shown in Figure 13-7. A range can have a blank ending number, which simply means to print the rest of the list. 5. Type List1[:3]"}, {"filename": "Beginning Programming with Python.pdf", "text": "range, the end of the range is always one greater than the number of elements returned. In this case, that means that you get elements 1 and 2, not elements 1 through 3 as you might expect. FIGURE 13-5: Make sure to use the correct index number. CHAPTER 13 Managing Lists 249 4. Type List1[1:] and click Run Cell. You see all the elements, starting from element 1 to the end of the list, as shown in Figure 13-7. A range can have a blank ending number, which simply means to print the rest of the list. 5. Type List1[:3] and click Run Cell. Python displays the elements from 0 through 2. Leaving the start of a range blank means that you want to start with element 0, as shown in Figure 13-8. Even though doing so is really confusing, you can use negative indexes with Python. Instead of working from the left, Python will work from the right and backward. For example, if you have List1 = [\"One\", 1, \"Two\", True] and type List1[-2], you get Two as output. Likewise, typing List[-3] results in an output of 1. The rightmost element is element -1 in this case. Looping through Lists To automate the processing of list elements, you need some way to loop through the list. The easiest way to perform this task is to rely on a for statement, as described in the following steps. FIGURE 13-6: Ranges return multiple values. FIGURE 13-7: Leaving the ending number of a range blank prints the rest of the list. FIGURE 13-8: Leaving the beginning number of a range blank prints from element 0. 250 PART 3 Performing Common Tasks 1. Type the following code into the window \u2014 pressing Enter after each line: List1 = [0, 1, 2, 3, 4, 5] for Item in List1: print(Item) The example begins by creating a list consisting of numeric values. It then uses a for loop to obtain each element in turn and print it onscreen. 2. Click Run Cell. Python shows the individual values in the list, one on each line, as shown in Figure 13-9. Modifying Lists You can modify the content of a list as needed. Modifying a list means to change a particular entry, add a new entry, or remove an existing entry. To perform these tasks, you must sometimes read an entry. The concept of modification is found within the acronym CRUD, which stands for Create, Read, Update, and Delete. Here are the list functions associated with CRUD: \u00bb \u00bb append(): Adds a new entry to the end of the list. \u00bb \u00bb clear(): Removes all entries from the list. \u00bb \u00bb copy(): Creates a copy of the current list and places it in a new list. \u00bb \u00bb extend(): Adds items from an existing list and into the current list. \u00bb \u00bb insert(): Adds a new entry to the position specified in the list. \u00bb \u00bb pop(): Removes an entry from the end of the list. \u00bb"}, {"filename": "Beginning Programming with Python.pdf", "text": "within the acronym CRUD, which stands for Create, Read, Update, and Delete. Here are the list functions associated with CRUD: \u00bb \u00bb append(): Adds a new entry to the end of the list. \u00bb \u00bb clear(): Removes all entries from the list. \u00bb \u00bb copy(): Creates a copy of the current list and places it in a new list. \u00bb \u00bb extend(): Adds items from an existing list and into the current list. \u00bb \u00bb insert(): Adds a new entry to the position specified in the list. \u00bb \u00bb pop(): Removes an entry from the end of the list. \u00bb \u00bb remove(): Removes an entry from the specified position in the list. FIGURE 13-9: A loop makes it easy to obtain a copy of each item and process it as needed. CHAPTER 13 Managing Lists 251 The following steps show how to perform modification tasks with lists. This is a hands-on exercise. As the book progresses, you see these same functions used within application code. The purpose of this exercise is to help you gain a feel for how lists work. 1. Type List2 = [ ] and press Enter. Python creates a list named List2 for you. Notice that the square brackets are empty. List2 doesn\u2019t contain any entries. You can create empty lists that you fill with information later. In fact, this is precisely how many lists start because you usually don\u2019t know what informa- tion they will contain until the user interacts with the list. 2. Type len(List2) and click Run Cell. The len() function outputs 0, as shown in Figure 13-10. When creating an application, you can check for an empty list by using the len() function. If a list is empty, you can\u2019t perform tasks such as removing elements from it because there is nothing to remove. 3. Type List2.append(1) and press Enter. 4. Type len(List2) and click Run Cell. The len() function now reports a length of 1. 5. Type List2[0] and click Run Cell. You see the value stored in element 0 of List2, as shown in Figure 13-11. FIGURE 13-10: Check for empty lists as needed in your application. FIGURE 13-11: Appending an element changes the list length and stores the value at the end of the list. 252 PART 3 Performing Common Tasks 6. Type List2.insert(0, 2) and press Enter. The insert() function requires two arguments. The first argument is the index of the insertion, which is element 0 in this case. The second argument is the object you want inserted at that point, which is 2 in this case. 7. Type List2 and click Run Cell. Python has added another element to List2. However, using the insert() function lets you add the new element before the first element, as shown in Figure 13-12. 8. Type List3 = List2.copy() and press Enter. The new list, List3, is a precise copy of List2. Copying is often used to create a temporary version of an existing list so that a user can make"}, {"filename": "Beginning Programming with Python.pdf", "text": "index of the insertion, which is element 0 in this case. The second argument is the object you want inserted at that point, which is 2 in this case. 7. Type List2 and click Run Cell. Python has added another element to List2. However, using the insert() function lets you add the new element before the first element, as shown in Figure 13-12. 8. Type List3 = List2.copy() and press Enter. The new list, List3, is a precise copy of List2. Copying is often used to create a temporary version of an existing list so that a user can make temporary modifications to it rather than to the original list. When the user is done, the application can either delete the temporary list or copy it to the original list. 9. Type List2.extend(List3) and press Enter. Python copies all the elements in List3 to the end of List2. Extending is commonly used to consolidate two lists. 10. Type List2 and click Run Cell. You see that the copy and extend processes have worked. List2 now contains the values 2, 1, 2, and 1, as shown in Figure 13-13. 11. Type List2.pop() and click Run Cell. Python displays a value of 1, as shown in Figure 13-14. The 1 was stored at the end of the list, and pop() always removes values from the end. FIGURE 13-12: Inserting provides flexibility in deciding where to add an element. FIGURE 13-13: Copying and extending provide methods for moving a lot of data around quickly. CHAPTER 13 Managing Lists 253 12. Type List2.remove(1) and click Run Cell. This time, Python removes the item at element 1. Unlike the pop() function, the remove() function doesn\u2019t display the value of the item it removed. 13. Type List2.clear() and press Enter. Using clear() means that the list shouldn\u2019t contain any elements now. 14. Type len(List2) and click Run Cell. You see that the output is 0. List2 is definitely empty. At this point, you\u2019ve tried all the modification methods that Python provides for lists. Work with List2 some more using these various functions until you feel comfortable making changes to the list. FIGURE 13-14: Use pop() to remove elements from the end of a list. USING OPERATORS WITH LISTS Lists can also rely on operators to perform certain tasks. For example, if you want to create a list that contains four copies of the word Hello, you could use MyList = [\"Hello\"] * 4 to fill it. A list allows repetition as needed. The multiplication operator (*) tells Python how many times to repeat a given item. You need to remember that every repeated element is separate, so what MyList contains is ['Hello', 'Hello', 'Hello', 'Hello']. You can also use concatenation to fill a list. For example, using MyList = [\"Hello\"] + [\"World\"] + [\"!\"] * 4 creates six elements in MyList. The first element is Hello, followed by World and ending with four elements with one exclamation mark (!) in each element. The membership operator (in)"}, {"filename": "Beginning Programming with Python.pdf", "text": "could use MyList = [\"Hello\"] * 4 to fill it. A list allows repetition as needed. The multiplication operator (*) tells Python how many times to repeat a given item. You need to remember that every repeated element is separate, so what MyList contains is ['Hello', 'Hello', 'Hello', 'Hello']. You can also use concatenation to fill a list. For example, using MyList = [\"Hello\"] + [\"World\"] + [\"!\"] * 4 creates six elements in MyList. The first element is Hello, followed by World and ending with four elements with one exclamation mark (!) in each element. The membership operator (in) also works with lists. This chapter uses a straightforward and easy-to-understand method of searching lists (the recommended approach). However, you can use the membership operator to make things shorter and simpler by using \"Hello\" in MyList. Assuming that you have your list filled with ['Hello', 'World', '!', '!', '!', '!'], the output of this statement is True. 254 PART 3 Performing Common Tasks Searching Lists Modifying a list isn\u2019t very easy when you don\u2019t know what the list contains. The ability to search a list is essential if you want to make maintenance tasks easier. The following steps help you create an application that demonstrates the ability to search a list for specific values. 1. Type the following code into the notebook \u2014 pressing Enter after each line: Colors = [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\"] ColorSelect = \"\" while str.upper(ColorSelect) != \"QUIT\": ColorSelect = input(\"Please type a color name: \") if (Colors.count(ColorSelect) >= 1): print(\"The color exists in the list!\") elif (str.upper(ColorSelect) != \"QUIT\"): print(\"The list doesn't contain the color.\") The example begins by creating a list named Colors that contains color names. It also creates a variable named ColorSelect to hold the name of the color that the user wants to find. The application then enters a loop where the user is asked for a color name that is placed in ColorSelect. As long as this variable doesn\u2019t contain the word QUIT, the application continues a loop that requests input. Whenever the user inputs a color name, the application asks the list to count the number of occurrences of that color. When the value is equal to or greater than one, the list does contain the color and an appropriate message appears onscreen. On the other hand, when the list doesn\u2019t contain the requested color, an alternative message appears onscreen. Notice how this example uses an elif clause to check whether ColorSelect contains the word QUIT. This technique of including an elif clause ensures that the application doesn\u2019t output a message when the user wants to quit the application. You need to use similar techniques when you create your applica- tions to avoid potential user confusion or even data loss (when the application performs a task the user didn\u2019t actually request). 2. Click Run Cell. Python asks you to type a color name. 3. Type Blue and press Enter. You see a message telling you that the color does"}, {"filename": "Beginning Programming with Python.pdf", "text": "onscreen. Notice how this example uses an elif clause to check whether ColorSelect contains the word QUIT. This technique of including an elif clause ensures that the application doesn\u2019t output a message when the user wants to quit the application. You need to use similar techniques when you create your applica- tions to avoid potential user confusion or even data loss (when the application performs a task the user didn\u2019t actually request). 2. Click Run Cell. Python asks you to type a color name. 3. Type Blue and press Enter. You see a message telling you that the color does exist in the list, as shown in Figure 13-15. CHAPTER 13 Managing Lists 255 4. Type Purple and press Enter. You see a message telling you that the color doesn\u2019t exist, as shown in Figure 13-16. 5. Type Quit and press Enter. The application ends. Notice that the application displays neither a success nor a failure message. Sorting Lists The computer can locate information in a list no matter what order it appears in. It\u2019s a fact, though, that longer lists are easier to search when you put them in sorted order. However, the main reason to put a list in sorted order is to make it easier for the human user to actually see the information the list contains. People work better with sorted information. This example begins with an unsorted list. It then sorts the list and outputs it to the display. The following steps demonstrate how to perform this task. FIGURE 13-15: Colors that exist in the list receive the success message. FIGURE 13-16: Entering a color that doesn\u2019t exist results in a failure message. 256 PART 3 Performing Common Tasks 1. Type the following code into the notebook \u2014 pressing Enter after each line: Colors = [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\"] for Item in Colors: print(Item, end=\" \") print() Colors.sort() for Item in Colors: print(Item, end=\" \") print() The example begins by creating an array of colors. The colors are currently in unsorted order. The example then prints the colors in the order in which they appear. Notice the use of the end=\" \" argument for the print() function to ensure that all color entries remain on one line (making them easier to compare). Sorting the list is as easy as calling the sort() function. After the example calls the sort() function, it prints the list again so that you can see the result. 2. Click Run Cell. Python outputs both the unsorted and sorted lists, as shown in Figure 13-17. You may need to sort items in reverse order at times. To accomplish this task, you use the reverse() function. The function must appear on a separate line. So the previous example would look like this if you wanted to sort the colors in reverse order: Colors = [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\"] for Item in Colors: print(Item, end=\" \") print() Colors.sort() FIGURE 13-17: Sorting a list is as easy as calling the sort() function."}, {"filename": "Beginning Programming with Python.pdf", "text": "again so that you can see the result. 2. Click Run Cell. Python outputs both the unsorted and sorted lists, as shown in Figure 13-17. You may need to sort items in reverse order at times. To accomplish this task, you use the reverse() function. The function must appear on a separate line. So the previous example would look like this if you wanted to sort the colors in reverse order: Colors = [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\"] for Item in Colors: print(Item, end=\" \") print() Colors.sort() FIGURE 13-17: Sorting a list is as easy as calling the sort() function. CHAPTER 13 Managing Lists 257 Colors.reverse() for Item in Colors: print(Item, end=\" \") print() Printing Lists Python provides myriad ways to output information. In fact, the number of ways would amaze you. This chapter has shown just a few of the most basic methods for outputting lists so far, using the most basic methods. Real-world printing can become more complex, so you need to know a few additional printing techniques to get you started. Using these techniques is actually a lot easier if you play with them as you go along. 1. Type the following code into the notebook \u2014 pressing Enter after each line: Colors = [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\"] print(*Colors, sep='\\n') This example begins by using the same list of colors in the previous section. In that section, you use a for loop to print the individual items. This example takes another approach. It uses the splat (*) operator, also called the positional expansion operator (and an assortment of other interesting terms), to unpack the list and send each element to the print() method one item at a time. The sep argument tells how to separate each of the printed outputs, relying on a newline character in this case. 2. Click Run Cell. Python outputs the list one item at a time, as shown in Figure 13-18. FIGURE 13-18: Using the splat operator can make your code significantly smaller. 258 PART 3 Performing Common Tasks 3. Type the following code into the notebook and click Run Cell. for Item in Colors: print(Item.rjust(8), sep='/n') Code doesn\u2019t have to appear on multiple lines. This example takes two lines of code and places it on just a single line. However, it also demonstrates the use of the rjust() method, which right justifies the string, as shown in Figure 13-19. Numerous methods of this sort are described at https://docs.python.org/2/ library/string.html. Even though they continue to work, Python may stop using them at any time. 4. Type the following code into the notebook and click Run Cell. print('\\n'.join(Colors)) Python provides more than one way to perform any task. In this case, the code uses the join() method to join the newline character with each member of Colors. The output is the same as that shown previously in Figure 13-18, even though the approach is different. The point is to use the approach that best suits a particular need. 5. Type the following"}, {"filename": "Beginning Programming with Python.pdf", "text": "methods of this sort are described at https://docs.python.org/2/ library/string.html. Even though they continue to work, Python may stop using them at any time. 4. Type the following code into the notebook and click Run Cell. print('\\n'.join(Colors)) Python provides more than one way to perform any task. In this case, the code uses the join() method to join the newline character with each member of Colors. The output is the same as that shown previously in Figure 13-18, even though the approach is different. The point is to use the approach that best suits a particular need. 5. Type the following code into the notebook and click Run Cell. print('First: {0}\\nSecond: {1}'.format(*Colors)) In this case, the output is formatted in a specific way with accompanying text, and the result doesn\u2019t include every member of Colors. The {0} and {1} entries represent placeholders for the values supplied from *Colors. Figure 13-20 shows the output. You can read more about this approach (the topic is immense) at https://docs.python.org/3/tutorial/ inputoutput.html. FIGURE 13-20: Use the format() function to obtain specific kinds of output from your application. FIGURE 13-19: String functions let you easily format your output in specific ways. CHAPTER 13 Managing Lists 259 This section touches on only some of the common techniques used to format out- put in Python. There are lots more. You see many of these approaches demon- strated in the chapters that follow. The essential goal is to use a technique that\u2019s easy to read, works well with all anticipated inputs, and doesn\u2019t paint you into a corner when you\u2019re creating additional output later. Working with the Counter Object Sometimes you have a data source and you simply need to know how often things happen (such as the appearance of a certain item in the list). When you have a short list, you can simply count the items. However, when you have a really long list, getting an accurate count is nearly impossible. For example, consider what it would take if you had a really long novel like War and Peace in a list and wanted to know the frequency of the words the novel used. The task would be impossible without a computer. The Counter object lets you count items quickly. In addition, it\u2019s incredibly easy to use. This book shows the Counter object in use a number of times, but this chapter shows how to use it specifically with lists. The example in this section creates a list with repetitive elements and then counts how many times those \u00adelements actually appear. 1. Type the following code into the notebook \u2014 pressing Enter after each line: from collections import Counter MyList = [1, 2, 3, 4, 1, 2, 3, 1, 2, 1, 5] ListCount = Counter(MyList) print(ListCount) for ThisItem in ListCount.items(): print(\"Item: \", ThisItem[0], \" Appears: \", ThisItem[1]) print(\"The value 1 appears {0} times.\" .format(ListCount.get(1))) To use the Counter object, you must import it from collections. Of course, if you work with other collection types in your application, you"}, {"filename": "Beginning Programming with Python.pdf", "text": "with lists. The example in this section creates a list with repetitive elements and then counts how many times those \u00adelements actually appear. 1. Type the following code into the notebook \u2014 pressing Enter after each line: from collections import Counter MyList = [1, 2, 3, 4, 1, 2, 3, 1, 2, 1, 5] ListCount = Counter(MyList) print(ListCount) for ThisItem in ListCount.items(): print(\"Item: \", ThisItem[0], \" Appears: \", ThisItem[1]) print(\"The value 1 appears {0} times.\" .format(ListCount.get(1))) To use the Counter object, you must import it from collections. Of course, if you work with other collection types in your application, you can import the entire collections package by typing import collections instead. The example begins by creating a list, MyList, with repetitive numeric ele- ments. You can easily see that some elements appear more than once. The example places the list into a new Counter object, ListCount. You can create Counter objects in all sorts of ways, but this is the most convenient method when working with a list. 260 PART 3 Performing Common Tasks The Counter object and the list aren\u2019t actually connected in any way. When the list content changes, you must re-create the Counter object because it won\u2019t automatically see the change. An alternative to re-creating the counter is to call the clear() method first and then call the update() method to fill the Counter object with the new data. The application prints ListCount in various ways. The first output is the Counter as it appears without any manipulation. The second output prints the individual unique elements in MyList along with the number of times each element appears. To obtain both the element and the number of times it appears, you must use the items() function as shown. Finally, the example demonstrates how to obtain an individual count from the list by using the get() function. 2. Click Run Cell. Python outputs the results of using the Counter object, as shown in Figure 13-21. Notice that the information is actually stored in the Counter as a key and value pair. Chapter 14 discusses this topic in greater detail. All you really need to know for now is that the element found in MyList becomes a key in ListCount that identifies the unique element name. The value contains the number of times that that element appears within MyList. FIGURE 13-21: The Counter is helpful in obtaining statistics about longer lists. CHAPTER 14 Collecting All Sorts of Data 261 Chapter 14 Collecting All Sorts of Data P eople collect all sorts of things. The CDs stacked near your entertainment center, the plates that are part of a series, baseball cards, and even the pens from every restaurant you\u2019ve ever visited are all collections. The collections you encounter when you write applications are the same as the collections in the real world. A collection is simply a grouping of like items in one place and usually organized into some easily understood form. This chapter is about collections of various sorts. The"}, {"filename": "Beginning Programming with Python.pdf", "text": "lists. CHAPTER 14 Collecting All Sorts of Data 261 Chapter 14 Collecting All Sorts of Data P eople collect all sorts of things. The CDs stacked near your entertainment center, the plates that are part of a series, baseball cards, and even the pens from every restaurant you\u2019ve ever visited are all collections. The collections you encounter when you write applications are the same as the collections in the real world. A collection is simply a grouping of like items in one place and usually organized into some easily understood form. This chapter is about collections of various sorts. The central idea behind every collection is to create an environment in which the collection is properly managed and lets you easily locate precisely what you want at any given time. A set of \u00adbookshelves works great for storing books, DVDs, and other sorts of flat items. However, you probably put your pen collection in a holder or even a display case. The difference in storage locations doesn\u2019t change the fact that both house collections. The same is true with computer collections. Yes, differences exist between a stack and a queue, but the main idea is to provide the means to manage data properly and make it easy to access when needed. You can find the download- able source code for the examples this chapter in the BPPD_14_Collecting_All_ Sorts_of_Data.ipynb file, as described in the book\u2019s Introduction. IN THIS CHAPTER \u00bb \u00bb Defining a collection \u00bb \u00bb Using tuples and dictionaries \u00bb \u00bb Developing stacks using lists \u00bb \u00bb Using the queue and deque packages 262 PART 3 Performing Common Tasks Understanding Collections In Chapter 13, you\u2019re introduced to sequences. A sequence is a succession of values that are bound together in a container. The simplest sequence is a string, which is a succession of characters. Next comes the list described in Chapter 13, which is a succession of objects. Even though a string and a list are both sequences, they have significant differences. For example, when working with a string, you can set all the characters to lowercase \u2014 something you can\u2019t do with a list. On the other hand, lists let you append new items, which is something a string doesn\u2019t support directly (concatenations actually create a new string). Collections are simply another kind of sequence, albeit a more complex sequence than you find in either a string or list. No matter which sequence you use, they all support two functions: index() and count(). The index() function always returns the position of a specified item in the sequence. For example, you can return the position of a character in a string or the position of an object in a list. The count() function returns the number of times a specific item appears in the list. Again, the kind of specific item depends upon the kind of sequence. You can use collections to create database-like structures using Python. Each col- lection type has a different purpose, and you use the various"}, {"filename": "Beginning Programming with Python.pdf", "text": "No matter which sequence you use, they all support two functions: index() and count(). The index() function always returns the position of a specified item in the sequence. For example, you can return the position of a character in a string or the position of an object in a list. The count() function returns the number of times a specific item appears in the list. Again, the kind of specific item depends upon the kind of sequence. You can use collections to create database-like structures using Python. Each col- lection type has a different purpose, and you use the various types in specific ways. The important idea to remember is that collections are simply another kind of sequence. As with every other kind of sequence, collections always support the index() and count() functions as part of their base functionality. Python is designed to be extensible. However, it does rely on a base set of collec- tions that you can use to create most application types. This chapter describes the most common collections: \u00bb \u00bb Tuple: A tuple is a collection used to create complex list-like sequences. An advantage of tuples is that you can nest the content of a tuple. This feature lets you create structures that can hold employee records or x-y coordi- nate pairs. \u00bb \u00bb Dictionary: As with the real dictionaries, you create key/value pairs when using the dictionary collection (think of a word and its associated definition). A dictionary provides incredibly fast search times and makes ordering data significantly easier. \u00bb \u00bb Stack: Most programming languages support stacks directly. However, Python doesn\u2019t support the stack, although there\u2019s a work-around for that. A stack is a last in/first out (LIFO) sequence. Think of a pile of pancakes: You can add new pancakes to the top and also take them off of the top. A stack is an important collection that you can simulate in Python by using a list, which is precisely what this chapter does. CHAPTER 14 Collecting All Sorts of Data 263 \u00bb \u00bb queue: A queue is a first in/first out (FIFO) collection. You use it to track items that need to be processed in some way. Think of a queue as a line at the bank. You go into the line, wait your turn, and are eventually called to talk with a teller. \u00bb \u00bb deque: A double-ended queue (deque) is a queue-like structure that lets you add or remove items from either end, but not from the middle. You can use a deque as a queue or a stack or any other kind of collection to which you\u2019re adding and from which you\u2019re removing items in an orderly manner (in contrast to lists, tuples, and dictionaries, which allow randomized access and management). Working with Tuples As previously mentioned, a tuple is a collection used to create complex lists, in which you can embed one tuple within another. This embedding lets you create hierarchies with tuples. A hierarchy could be something as simple"}, {"filename": "Beginning Programming with Python.pdf", "text": "structure that lets you add or remove items from either end, but not from the middle. You can use a deque as a queue or a stack or any other kind of collection to which you\u2019re adding and from which you\u2019re removing items in an orderly manner (in contrast to lists, tuples, and dictionaries, which allow randomized access and management). Working with Tuples As previously mentioned, a tuple is a collection used to create complex lists, in which you can embed one tuple within another. This embedding lets you create hierarchies with tuples. A hierarchy could be something as simple as the directory listing of your hard drive or an organizational chart for your company. The idea is that you can create complex data structures by using a tuple. Tuples are immutable, which means you can\u2019t change them. You can create a new tuple with the same name and modify it in some way, but you can\u2019t modify an existing tuple. Lists are mutable, which means that you can change them. So, a tuple can seem at first to be at a disadvantage, but immutability has all sorts of advantages, such as being more secure as well as faster. In addition, immutable objects are easier to use with multiple processors. The two biggest differences between a tuple and a list are that a tuple is immu- table and allows you to embed one tuple inside another. The following steps dem- onstrate how you can interact with a tuple in Python. 1. Open a new notebook. You can also use the downloadable source file, BPPD_14_Collecting_All_ Sorts_of_Data.ipynb. 2. Type MyTuple = (\u2033Red\u2033, \u2033 Blue\u2033, \u2033 Green \u2033) and press Enter. Python creates a tuple containing three strings. 3. Type MyTuple and click Run Cell. You see the content of MyTuple, which is three strings, as shown in Figure 14-1. Notice that the entries use single quotes, even though you used double quotes to create the tuple. In addition, notice that a tuple uses parentheses rather than square brackets, as lists do. 264 PART 3 Performing Common Tasks 4. Type print(dir(MyTuple)) and click Run Cell. Python presents a list of functions that you can use with tuples, as shown (partially) in Figure 14-2. Notice that the list of functions appears significantly smaller than the list of functions provided with lists in Chapter 13. The count() and index() functions are present. However, appearances can be deceiving. For example, you can add new items by using the __add__() function. When working with Python objects, look at all the entries before you make a decision as to functionality. Also notice that the output differs when using the print() function with the dir() function. Compare the dir()-only output shown in the upcoming Figure 14-4 with the combination output shown previously in Figure 14-2. The output shown in Figure 14-2 looks more like the output that you see with other IDEs, such as IDLE. The output you get is affected by the methods you use, but the IDE"}, {"filename": "Beginning Programming with Python.pdf", "text": "be deceiving. For example, you can add new items by using the __add__() function. When working with Python objects, look at all the entries before you make a decision as to functionality. Also notice that the output differs when using the print() function with the dir() function. Compare the dir()-only output shown in the upcoming Figure 14-4 with the combination output shown previously in Figure 14-2. The output shown in Figure 14-2 looks more like the output that you see with other IDEs, such as IDLE. The output you get is affected by the methods you use, but the IDE also makes a difference, so in some situations, you must use a different approach based on the IDE you prefer. Many people find that the Notebook listing of one method per line is much easier to read and use, but the combination method is certainly more compact. 5. Type MyTuple = MyTuple.__add__((\u2033Purple\u2033,)) and press Enter. This code adds a new tuple to MyTuple and places the result in a new copy of MyTuple. The old copy of MyTuple is destroyed after the call. FIGURE 14-1: Tuples use parentheses, not square brackets. FIGURE 14-2: Fewer functions seem to be available for use with tuples. CHAPTER 14 Collecting All Sorts of Data 265 The __add__() function accepts only tuples as input. This means that you must enclose the addition in parentheses. In addition, when creating a tuple with a single entry, you must add a comma after the entry, as shown in the example. This is an odd Python rule that you need to keep in mind or you\u2019ll see an error message similar to this one: TypeError: can only concatenate tuple (not \"str\") to tuple 6. Type MyTuple and click Run Cell. The addition to MyTuple appears at the end of the list, as shown in Figure 14-3. Notice that it appears at the same level as the other entries. 7. Type MyTuple = MyTuple.__add__((\u2033 Yellow\u2033, (\u2033 Orange\u2033, \u2033Black\u2033))) and press Enter. This step adds three entries: Yellow, Orange, and Black. However, Orange and Black are added as a tuple within the main tuple, which creates a hierarchy. These two entries are actually treated as a single entry within the main tuple. You can replace the __add__() function with the concatenation operator. For example, if you want to add Magenta to the front of the tuple list, you type MyTuple = (\"Magenta\",) + MyTuple. 8. Type MyTuple[4] and click Run Cell. Python displays a single member of MyTuple, Yellow. Tuples use indexes to access individual members, just as lists do. You can also specify a range when needed. Anything you can do with a list index you can also do with a tuple index. 9. Type MyTuple[5] and press Enter. You see a tuple that contains Orange and Black. Of course, you might not want to use both members in tuple form. Tuples do contain hierarchies on a regular basis. You can detect when an index has returned another tuple, rather"}, {"filename": "Beginning Programming with Python.pdf", "text": "(\"Magenta\",) + MyTuple. 8. Type MyTuple[4] and click Run Cell. Python displays a single member of MyTuple, Yellow. Tuples use indexes to access individual members, just as lists do. You can also specify a range when needed. Anything you can do with a list index you can also do with a tuple index. 9. Type MyTuple[5] and press Enter. You see a tuple that contains Orange and Black. Of course, you might not want to use both members in tuple form. Tuples do contain hierarchies on a regular basis. You can detect when an index has returned another tuple, rather than a value, by testing for type. For example, in this case, you could detect that the sixth item (index 5) contains a tuple by typing type(MyTuple[5]) == tuple. The output would be True in this case. FIGURE 14-3: This new copy of MyTuple contains an additional entry. 266 PART 3 Performing Common Tasks 10. Type MyTuple[5][0] and press Enter. At this point, you see Orange as output. Figure 14-4 shows the results of the previous commands so that you can see the progression of index usage. The indexes always appear in order of their level in the hierarchy. Using a combination of indexes and the __add__() function (or the concatena- tion operator, +), you can create flexible applications that rely on tuples. For example, you can remove an element from a tuple by making it equal to a range of values. If you wanted to remove the tuple containing Orange and Black, you type MyTuple = MyTuple[0:5]. Working with Dictionaries A Python dictionary works just the same as its real-world counterpart \u2014 you cre- ate a key and value pair. It\u2019s just like the word and definition in a dictionary. As with lists, dictionaries are mutable, which means that you can change them as needed. The main reason to use a dictionary is to make information lookup faster. The key is always short and unique so that the computer doesn\u2019t spend a lot of time looking for the information you need. The following sections demonstrate how to create and use a dictionary. When you know how to work with dictionaries, you use that knowledge to make up for defi- ciencies in the Python language. Most languages include the concept of a switch statement, which is essentially a menu of choices from which one choice is selected. Python doesn\u2019t include this option, so you must normally rely on if... elif statements to perform the task. (Such statements work, but they aren\u2019t as clear as they could be.) FIGURE 14-4: Use indexes to gain access to the individual tuple members. CHAPTER 14 Collecting All Sorts of Data 267 Creating and using a dictionary Creating and using a dictionary is much like working with a list, except that you must now define a key and value pair. Here are the special rules for \u00adcreating a key: \u00bb \u00bb The key must be unique. When you enter a duplicate key, the information found"}, {"filename": "Beginning Programming with Python.pdf", "text": "this option, so you must normally rely on if... elif statements to perform the task. (Such statements work, but they aren\u2019t as clear as they could be.) FIGURE 14-4: Use indexes to gain access to the individual tuple members. CHAPTER 14 Collecting All Sorts of Data 267 Creating and using a dictionary Creating and using a dictionary is much like working with a list, except that you must now define a key and value pair. Here are the special rules for \u00adcreating a key: \u00bb \u00bb The key must be unique. When you enter a duplicate key, the information found in the second entry wins \u2014 the first entry is simply replaced with the second. \u00bb \u00bb The key must be immutable. This rule means that you can use strings, numbers, or tuples for the key. You can\u2019t, however, use a list for a key. You have no restrictions on the values you provide. A value can be any Python object, so you can use a dictionary to access an employee record or other complex data. The following steps help you understand how to use dictionaries better. 1. Type Colors = {\u2033 Sam\u2033: \u2033 Blue\u2033, \u2033 Amy\u2033: \u2033Red\u2033, \u2033 Sarah\u2033: \u2033 Yellow\u2033} and press Enter. Python creates a dictionary containing three entries with people\u2019s favorite colors. Notice how you create the key and value pair. The key comes first, followed by a colon and then the value. Each entry is separated by a comma. 2. Type Colors and click Run Cell. You see the key and value pairs, as shown in Figure 14-5. However, notice that the entries are sorted in key order. A dictionary automatically keeps the keys sorted to make access faster, which means that you get fast search times even when working with a large data set. The downside is that creating the dictionary takes longer than using something like a list because the computer is busy sorting the entries. 3. Type Colors[\u2033 Sarah\u2033] and click Run Cell. You see the color associated with Sarah, Yellow, as shown in Figure 14-6. Using a string as a key, rather than using a numeric index, makes the code easier to read and makes it self-documenting to an extent. By making your code more readable, dictionaries save you considerable time in the long run (which is why FIGURE 14-5: A dictionary places entries in sorted order. 268 PART 3 Performing Common Tasks they\u2019re so popular). However, the convenience of a dictionary comes at the cost of additional creation time and a higher use of resources, so you have trade-offs to consider. 4. Type Colors.keys() and click Run Cell. The dictionary presents a list of the keys it contains, as shown in Figure 14-7. You can use these keys to automate access to the dictionary. 5. Type the following code pressing Enter after each line, and then click Run Cell. for Item in Colors.keys(): print(\"{0} likes the color {1}.\" .format(Item, Colors[Item])) The example code outputs a listing of each of the"}, {"filename": "Beginning Programming with Python.pdf", "text": "Common Tasks they\u2019re so popular). However, the convenience of a dictionary comes at the cost of additional creation time and a higher use of resources, so you have trade-offs to consider. 4. Type Colors.keys() and click Run Cell. The dictionary presents a list of the keys it contains, as shown in Figure 14-7. You can use these keys to automate access to the dictionary. 5. Type the following code pressing Enter after each line, and then click Run Cell. for Item in Colors.keys(): print(\"{0} likes the color {1}.\" .format(Item, Colors[Item])) The example code outputs a listing of each of the user names and the user\u2019s favorite color, as shown in Figure 14-8. Using dictionaries can make creating useful output a lot easier. The use of a meaningful key means that the key can easily be part of the output. 6. Type Colors[\u2033 Sarah\u2033] =\u2033Purple\u2033 and press Enter. The dictionary content is updated so that Sarah now likes Purple instead of Yellow. FIGURE 14-6: Dictionaries make value access easy and self-\u00addocumenting. FIGURE 14-7: You can ask a dictionary for a list of keys. FIGURE 14-8: You can create useful keys to output \u00adinformation with greater ease. CHAPTER 14 Collecting All Sorts of Data 269 7. Type Colors.update({\u2033 Harry\u2033: \u2033 Orange\u2033}) and press Enter. A new entry is added to the dictionary. 8. Type the following code, pressing Enter after each line: for name, color in Colors.items(): print(\"{0} likes the color {1}.\" .format(name, color)) Compare this code to the code in Step 5. This version obtains each of the items one at a time and places the key in name and the value in color. The output will always work the same from the item() method. You need two variables, one for the key and another value, presented in the order shown. The reason to consider this second form is that it might be easier to read in some cases. There doesn\u2019t seem to be much of a speed difference between the two versions. 9. Click Run Cell. You see the updated output in Figure 14-9. Notice that Harry is added in sorted order. In addition, Sarah\u2019s entry is changed to the color Purple. 10. Type del Colors[\u2033 Sam\u2033] and press Enter. Python removes Sam\u2019s entry from the dictionary. 11. Repeat Steps 8 and 9. You verify that Sam\u2019s entry is actually gone. 12. Type len(Colors) and click Run Cell. The output value of 3 verifies that the dictionary contains only three entries now, rather than 4. 13. Type Colors.clear( ) and press Enter. 14. Type len(Colors) and click Run Cell. Python reports that Colors has 0 entries, so the dictionary is now empty. FIGURE 14-9: Dictionaries are easy to modify. 270 PART 3 Performing Common Tasks Replacing the switch statement with a \u00addictionary Most programming languages provide some sort of switch statement. A switch statement provides for elegant menu type selections. The user has a number of options but is allowed to choose only one of them. The program takes some"}, {"filename": "Beginning Programming with Python.pdf", "text": "value of 3 verifies that the dictionary contains only three entries now, rather than 4. 13. Type Colors.clear( ) and press Enter. 14. Type len(Colors) and click Run Cell. Python reports that Colors has 0 entries, so the dictionary is now empty. FIGURE 14-9: Dictionaries are easy to modify. 270 PART 3 Performing Common Tasks Replacing the switch statement with a \u00addictionary Most programming languages provide some sort of switch statement. A switch statement provides for elegant menu type selections. The user has a number of options but is allowed to choose only one of them. The program takes some course of action based on the user selection. Here is some representative code (it won\u2019t execute) of a switch statement you might find in another language: switch(n) { case 0: print(\"You selected blue.\"); break; case 1: print(\"You selected yellow.\"); break; case 2: print(\"You selected green.\"); break; } The application normally presents a menu-type interface, obtains the number of the selection from the user, and then chooses the correct course of action from the switch statement. It\u2019s straightforward and much neater than using a series of if statements to accomplish the same task. Unfortunately, Python doesn\u2019t come with a switch statement. The best you can hope to do is use an if...elif statement for the task. However, by using a dictionary, you can simulate the use of a switch statement. The following steps help you create an example that will demonstrate the required technique. 1. Type the following code into the window \u2014 pressing Enter after each line: def PrintBlue(): print(\"You chose blue!\\r\\n\") def PrintRed(): print(\"You chose red!\\r\\n\") def PrintOrange(): print(\"You chose orange!\\r\\n\") def PrintYellow(): print(\"You chose yellow!\\r\\n\") CHAPTER 14 Collecting All Sorts of Data 271 Before the code can do anything for you, you must define the tasks. Each of these functions defines a task associated with selecting a color option onscreen. Only one of them gets called at any given time. 2. Type the following code into the notebook \u2014 pressing Enter after each line: ColorSelect = { 0: PrintBlue, 1: PrintRed, 2: PrintOrange, 3: PrintYellow } This code is the dictionary. Each key is like the case part of the switch state- ment. The values specify what to do. In other words, this is the switch structure. The functions that you created earlier are the action part of the switch \u2014 the part that goes between the case statement and the break clause. 3. Type the following code into the notebook \u2014 pressing Enter after each line: Selection = 0 while (Selection != 4): print(\"0. Blue\") print(\"1. Red\") print(\"2. Orange\") print(\"3. Yellow\") print(\"4. Quit\") Selection = int(input(\"Select a color option: \")) if (Selection >= 0) and (Selection < 4): ColorSelect[Selection]() Finally, you see the user interface part of the example. The code begins by creating an input variable, Selection. It then goes into a loop until the user enters a value of 4. During each loop, the application displays a list of options and then waits for user"}, {"filename": "Beginning Programming with Python.pdf", "text": "statement and the break clause. 3. Type the following code into the notebook \u2014 pressing Enter after each line: Selection = 0 while (Selection != 4): print(\"0. Blue\") print(\"1. Red\") print(\"2. Orange\") print(\"3. Yellow\") print(\"4. Quit\") Selection = int(input(\"Select a color option: \")) if (Selection >= 0) and (Selection < 4): ColorSelect[Selection]() Finally, you see the user interface part of the example. The code begins by creating an input variable, Selection. It then goes into a loop until the user enters a value of 4. During each loop, the application displays a list of options and then waits for user input. When the user does provide input, the application performs a range check on it. Any value between 0 and 3 selects one of the functions defined earlier using the dictionary as the switching mechanism. 4. Click Run Cell. Python displays a menu like the one shown in Figure 14-10. 272 PART 3 Performing Common Tasks 5. Type 0 and press Enter. The application tells you that you selected blue and then displays the menu again, as shown in Figure 14-11. 6. Type 4 and press Enter. The application ends. FIGURE 14-10: The application begins by displaying the menu. FIGURE 14-11: After displaying your selection, the application displays the menu again. CHAPTER 14 Collecting All Sorts of Data 273 Creating Stacks Using Lists A stack is a handy programming structure because you can use it to save an appli- cation execution environment (the state of variables and other attributes of the application environment at any given time) or as a means of determining an order of execution. Unfortunately, Python doesn\u2019t provide a stack as a collection. How- ever, it does provide lists, and you can use a list as a perfectly acceptable stack. The following steps help you create an example of using a list as a stack. 1. Type the following code into the notebook \u2014 pressing Enter after each line: MyStack = [] StackSize = 3 def DisplayStack(): print(\"Stack currently contains:\") for Item in MyStack: print(Item) def Push(Value): if len(MyStack) < StackSize: MyStack.append(Value) else: print(\"Stack is full!\") def Pop(): if len(MyStack) > 0: MyStack.pop() else: print(\"Stack is empty.\") Push(1) Push(2) Push(3) DisplayStack() input(\"Press any key when ready...\") Push(4) DisplayStack() input(\"Press any key when ready...\") Pop() DisplayStack() input(\"Press any key when ready...\") Pop() Pop() Pop() DisplayStack() 274 PART 3 Performing Common Tasks In this example, the application creates a list and a variable to determine the maximum stack size. Stacks normally have a specific size range. This is admittedly a really small stack, but it serves well for the example\u2019s needs. Stacks work by pushing a value onto the top of the stack and popping values back off the top of the stack. The Push() and Pop() functions perform these two tasks. The code adds DisplayStack() to make it easier to see the stack content as needed. The remaining code exercises the stack (demonstrates its functionality) by pushing values onto it and then removing them. Four main exercise sections"}, {"filename": "Beginning Programming with Python.pdf", "text": "list and a variable to determine the maximum stack size. Stacks normally have a specific size range. This is admittedly a really small stack, but it serves well for the example\u2019s needs. Stacks work by pushing a value onto the top of the stack and popping values back off the top of the stack. The Push() and Pop() functions perform these two tasks. The code adds DisplayStack() to make it easier to see the stack content as needed. The remaining code exercises the stack (demonstrates its functionality) by pushing values onto it and then removing them. Four main exercise sections test stack functionality. 2. Click Run Cell. Python fills the stack with information and then displays it onscreen, as shown in Figure 14-12 (only part of the code appears in the screenshot). In this case, 3 is at the top of the stack because it\u2019s the last value added. Depending on the IDE you use, the Press any key when ready message can appear at the top or the bottom of the output area. In the case of Notebook, the message and associated entry field appear at the top after the first query (refer to Figure 14-12). The message will move to the bottom during the second and subsequent queries. 3. Press Enter. The application attempts to push another value onto the stack. However, the stack is full, so the task fails, as shown in Figure 14-13. FIGURE 14-12: A stack pushes values one on top of the other. CHAPTER 14 Collecting All Sorts of Data 275 4. Press Enter. The application pops a value from the top of the stack. Remember that 3 is the top of the stack, so that\u2019s the value that is missing in Figure 14-14. 5. Press Enter. The application tries to pop more values from the stack than it contains, resulting in an error, as shown in Figure 14-15. Any stack implementation that you create must be able to detect both overflows (too many entries) and underflows (too few entries). Working with queues A queue works differently from a stack. Think of any line you\u2019ve ever stood in: You go to the back of the line, and when you reach the front of the line you get to do whatever you stood in the line to do. A queue is often used for task scheduling and to maintain program flow \u2014 just as it is in the real world. The following steps help you create a queue-based application. This example also appears with the downloadable source code as QueueData.py. FIGURE 14-13: When the stack is full, it can\u2019t accept any more values. FIGURE 14-14: Popping a value means removing it from the top of the stack. FIGURE 14-15: Make sure that your stack implementation detects overflows and underflows. 276 PART 3 Performing Common Tasks 1. Type the following code into the notebook \u2014 pressing Enter after each line: import queue MyQueue = queue.Queue(3) print(MyQueue.empty()) input(\"Press any key when ready...\") MyQueue.put(1) MyQueue.put(2) print(MyQueue.full()) input(\"Press any"}, {"filename": "Beginning Programming with Python.pdf", "text": "is in the real world. The following steps help you create a queue-based application. This example also appears with the downloadable source code as QueueData.py. FIGURE 14-13: When the stack is full, it can\u2019t accept any more values. FIGURE 14-14: Popping a value means removing it from the top of the stack. FIGURE 14-15: Make sure that your stack implementation detects overflows and underflows. 276 PART 3 Performing Common Tasks 1. Type the following code into the notebook \u2014 pressing Enter after each line: import queue MyQueue = queue.Queue(3) print(MyQueue.empty()) input(\"Press any key when ready...\") MyQueue.put(1) MyQueue.put(2) print(MyQueue.full()) input(\"Press any key when ready...\") MyQueue.put(3) print(MyQueue.full()) input(\"Press any key when ready...\") print(MyQueue.get()) print(MyQueue.empty()) print(MyQueue.full()) input(\"Press any key when ready...\") print(MyQueue.get()) print(MyQueue.get()) To create a queue, you must import the queue package. This package actually contains a number of queue types, but this example uses only the standard FIFO queue. When a queue is empty, the empty() function returns True. Likewise, when a queue is full, the full() function returns True. By testing the state of empty() and full(), you can determine whether you need to perform additional work with the queue or whether you can add other information to it. These two functions help you manage a queue. You can\u2019t iterate through a queue by using a for loop as you have done with other collection types, so you must monitor empty() and full() instead. The two functions used to work with data in a queue are put(), which adds new data, and get(), which removes data. A problem with queues is that if you try to put more items into the queue than it can hold, it simply waits until space is available to hold it. Unless you\u2019re using a multithreaded application (one that uses individual threads of execution to perform more than one task at one time), this state could end up freezing your application. 2. Click Run Cell. Python tests the state of the queue. In this case, you see an output of True, which means that the queue is empty. 3. Press Enter. The application adds two new values to the queue. In doing so, the queue is no longer empty, as shown in Figure 14-16. CHAPTER 14 Collecting All Sorts of Data 277 4. Press Enter. The application adds another entry to the queue, which means that the queue is now full because it was set to a size of 3. This means that full() will return True because the queue is now full. 5. Press Enter. To free space in the queue, the application gets one of the entries. Whenever an application gets an entry, the get() function returns that entry. Given that 1 was the first value added to the queue, the print() function should return a value of 1, as shown in Figure 14-17. In addition, both empty() and full() should now return False. 6. Press Enter. The application gets the remaining two entries. You see 2 and 3 (in turn) as output."}, {"filename": "Beginning Programming with Python.pdf", "text": "to a size of 3. This means that full() will return True because the queue is now full. 5. Press Enter. To free space in the queue, the application gets one of the entries. Whenever an application gets an entry, the get() function returns that entry. Given that 1 was the first value added to the queue, the print() function should return a value of 1, as shown in Figure 14-17. In addition, both empty() and full() should now return False. 6. Press Enter. The application gets the remaining two entries. You see 2 and 3 (in turn) as output. FIGURE 14-16: When the \u00adapplication puts new entries in the queue, the queue no longer reports that it\u2019s empty. FIGURE 14-17: Monitoring is a key part of working with a queue. 278 PART 3 Performing Common Tasks Working with deques A deque is simply a queue where you can remove and add items from either end. In many languages, a queue or stack starts out as a deque. Specialized code serves to limit deque functionality to what is needed to perform a particular task. When working with a deque, you need to think of the deque as a sort of horizontal line. Certain individual functions work with the left and right ends of the deque so that you can add and remove items from either side. The following steps help you create an example that demonstrates deque usage. This example also appears with the downloadable source code as DequeData.py. 1. Type the following code into Notebook \u2014 pressing Enter after each line. import collections MyDeque = collections.deque(\"abcdef\", 10) print(\"Starting state:\") for Item in MyDeque: print(Item, end=\" \") print(\"\\r\\n\\r\\nAppending and extending right\") MyDeque.append(\"h\") MyDeque.extend(\"ij\") for Item in MyDeque: print(Item, end=\" \") print(\"\\r\\nMyDeque contains {0} items.\" .format(len(MyDeque))) print(\"\\r\\nPopping right\") print(\"Popping {0}\".format(MyDeque.pop())) for Item in MyDeque: print(Item, end=\" \") print(\"\\r\\n\\r\\nAppending and extending left\") MyDeque.appendleft(\"a\") MyDeque.extendleft(\"bc\") for Item in MyDeque: print(Item, end=\" \") print(\"\\r\\nMyDeque contains {0} items.\" .format(len(MyDeque))) print(\"\\r\\nPopping left\") print(\"Popping {0}\".format(MyDeque.popleft())) for Item in MyDeque: print(Item, end=\" \") print(\"\\r\\n\\r\\nRemoving\") MyDeque.remove(\"a\") for Item in MyDeque: print(Item, end=\" \") CHAPTER 14 Collecting All Sorts of Data 279 The implementation of deque is found in the collections package, so you need to import it into your code. When you create a deque, you can optionally specify a starting list of iterable items (items that can be accessed and \u00adprocessed as part of a loop structure) and a maximum size, as shown. A deque differentiates between adding one item and adding a group of items. You use append() or appendleft() when adding a single item. The extend() and extendleft() functions let you add multiple items. You use the pop() or popleft() functions to remove one item at a time. The act of popping values returns the value popped, so the example prints the value onscreen. The remove() function is unique in that it always works from the left side and always removes the first instance of the requested data. Unlike some other collections, a deque is fully"}, {"filename": "Beginning Programming with Python.pdf", "text": "a maximum size, as shown. A deque differentiates between adding one item and adding a group of items. You use append() or appendleft() when adding a single item. The extend() and extendleft() functions let you add multiple items. You use the pop() or popleft() functions to remove one item at a time. The act of popping values returns the value popped, so the example prints the value onscreen. The remove() function is unique in that it always works from the left side and always removes the first instance of the requested data. Unlike some other collections, a deque is fully iterable. This means that you can obtain a list of items by using a for loop whenever necessary. 2. Click Run Cell. Python outputs the information shown in Figure 14-18 (the screenshot shows only the output and none of the code). Following the output listing closely is important. Notice how the size of the deque changes over time. After the application pops the j, the deque still contains eight items. When the application appends and extends from the left, it adds three more items. However, the resulting deque contains only ten items. When you exceed the maximum size of a deque, the extra data simply falls off the other end. FIGURE 14-18: A deque provides the double-ended functionality and other features you\u2019d expect. CHAPTER 15 Creating and Using Classes 281 Chapter 15 Creating and Using Classes Y ou\u2019ve already worked with a number of classes in previous chapters. Many of the examples are easy to construct and use because they depend on the Python classes. Even though classes are briefly mentioned in previous chapters, those chapters largely ignore them simply because discussing them wasn\u2019t immediately important. Classes make working with Python code more convenient by helping to make your applications easy to read, understand, and use. You use classes to create contain- ers for your code and data, so they stay together in one piece. Outsiders see your class as a black box \u2014 data goes in and results come out. At some point, you need to start constructing classes of your own if you want to avoid the dangers of the spaghetti code that is found in older applications. Spaghetti code is much as the name implies \u2014 various lines of procedures are interwoven and spread out in such a way that it\u2019s hard to figure out where one piece of spaghetti begins and another ends. Trying to maintain spaghetti code is nearly impossible, and some organizations have thrown out applications because no one could figure them out. Besides helping you understand classes as a packaging method that avoids \u00adspaghetti code, this chapter helps you create and use your own classes for the first time. IN THIS CHAPTER \u00bb \u00bb Defining the characteristics of a class \u00bb \u00bb Specifying the class components \u00bb \u00bb Creating and using your own class \u00bb \u00bb Working with subclasses 282 PART 3 Performing Common Tasks You gain insights into how Python classes work"}, {"filename": "Beginning Programming with Python.pdf", "text": "piece of spaghetti begins and another ends. Trying to maintain spaghetti code is nearly impossible, and some organizations have thrown out applications because no one could figure them out. Besides helping you understand classes as a packaging method that avoids \u00adspaghetti code, this chapter helps you create and use your own classes for the first time. IN THIS CHAPTER \u00bb \u00bb Defining the characteristics of a class \u00bb \u00bb Specifying the class components \u00bb \u00bb Creating and using your own class \u00bb \u00bb Working with subclasses 282 PART 3 Performing Common Tasks You gain insights into how Python classes work toward making your applications convenient to work with. This is an introductory sort of chapter, though, and you won\u2019t become so involved in classes that your head begins to spin around on its own. This chapter is about making class development simple and manageable. You can find the downloadable source code for the examples in this chapter in the BPPD_15_Creating_and_Using_Classes.ipynb file, as described in the book\u2019s Introduction. Understanding the Class as a Packaging Method A class is essentially a method for packaging code. The idea is to simplify code reuse, make applications more reliable, and reduce the potential for security breaches. Well-designed classes are black boxes that accept certain inputs and provide specific outputs based on those inputs. In short, a class shouldn\u2019t create any surprises for anyone and should have known (quantifiable) behaviors. How the class accomplishes its work is unimportant, and hiding the details of its inner workings is essential to good coding practice. Before you move onto actual class theory, you need to know a few terms that are specific to classes. The following list defines terms that you need to know in order to use the material that follows later in the chapter. These terms are specific to Python. (Other languages may use different terms for the same techniques or define terms that Python uses in different ways.) \u00bb \u00bb Class: Defines a blueprint for creating an object. Think of a builder who wants to create a building of some type. The builder uses a blueprint to ensure that the building will meet the required specifications. Likewise, Python uses classes as a blueprint for creating new objects. \u00bb \u00bb Class variable: Provides a storage location used by all methods in an instance of the class. A class variable is defined within the class proper but outside of any of the class methods. Class variables aren\u2019t used very often because they\u2019re a potential security risk \u2014 every instance of the class has access to the same information. In addition to being a security risk, class variables are also visible as part of the class rather than a particular method of a class, so they pose the potential problem of class contamination. Global variables have always been considered a bad idea in programming, doubly so in Python, because every instance can see the same information. In addition, data hiding really doesn\u2019t work in Python. Every variable is CHAPTER"}, {"filename": "Beginning Programming with Python.pdf", "text": "of any of the class methods. Class variables aren\u2019t used very often because they\u2019re a potential security risk \u2014 every instance of the class has access to the same information. In addition to being a security risk, class variables are also visible as part of the class rather than a particular method of a class, so they pose the potential problem of class contamination. Global variables have always been considered a bad idea in programming, doubly so in Python, because every instance can see the same information. In addition, data hiding really doesn\u2019t work in Python. Every variable is CHAPTER 15 Creating and Using Classes 283 always visible. The article at http://www.geeksforgeeks.org/object- oriented-programming-in-python-set-2-data-hiding-and-object- printing/ describes this issue in greater detail, but the most important thing to remember in Python is that it lacks the data hiding found in other languages to promote true object orientation. \u00bb \u00bb Data member: Defines either a class variable or an instance variable used to hold data associated with a class and its objects. \u00bb \u00bb Function overloading: Creates more than one version of a function, which results in different behaviors. The essential task of the function may be the same, but the inputs are different and potentially the outputs as well. Function overloading is used to provide flexibility so that a function can work with applications in various ways or perform a task with different variable types. \u00bb \u00bb Inheritance: Uses a parent class to create child classes that have the same characteristics. The child classes usually have extended functionality or provide more specific behaviors than the parent class does. \u00bb \u00bb Instance: Defines an object created from the specification provided by a class. Python can create as many instances of a class to perform the work required by an application. Each instance is unique. \u00bb \u00bb Instance variable: Provides a storage location used by a single method of an instance of a class. The variable is defined within a method. Instance variables are considered safer than class variables because only one method of the class can access them. Data is passed between methods by using arguments, which allows for controlled checks of incoming data and better control over data management. \u00bb \u00bb Instantiation: Performs the act of creating an instance of a class. The resulting object is a unique class instance. \u00bb \u00bb Method: Defines the term used for functions that are part of a class. Even though function and method essentially define the same element, method is considered more specific because only classes can have methods. \u00bb \u00bb Object: Defines a unique instance of a class. The object contains all the methods and properties of the original class. However, the data for each object differs. The storage locations are unique, even if the data is the same. \u00bb \u00bb Operator overloading: Creates more than one version of a function that is associated with an operator such as: +, -, /, or *, which results in different behaviors. The essential task of the"}, {"filename": "Beginning Programming with Python.pdf", "text": "of a class. Even though function and method essentially define the same element, method is considered more specific because only classes can have methods. \u00bb \u00bb Object: Defines a unique instance of a class. The object contains all the methods and properties of the original class. However, the data for each object differs. The storage locations are unique, even if the data is the same. \u00bb \u00bb Operator overloading: Creates more than one version of a function that is associated with an operator such as: +, -, /, or *, which results in different behaviors. The essential task of the operator may be the same, but the way in which the operator interacts with the data differs. Operator overloading is used to provide flexibility so that an operator can work with applications in various ways. 284 PART 3 Performing Common Tasks Considering the Parts of a Class A class has a specific construction. Each part of a class performs a particular task that gives the class useful characteristics. Of course, the class begins with a con- tainer that is used to hold the entire class together, so that\u2019s the part that the first section that follows discusses. The remaining sections describe the other parts of a class and help you understand how they contribute to the class as a whole. Creating the class definition A class need not be particularly complex. In fact, you can create just the container and one class element and call it a class. Of course, the resulting class won\u2019t do much, but you can instantiate it (tell Python to build an object by using your class as a blueprint) and work with it as you would any other class. The following steps help you understand the basics behind a class by creating the simplest class possible. 1. Open a new notebook. You can also use the downloadable source file, BPPD_15_Creating_and_ Using_Classes.ipynb. 2. Type the following code (pressing Enter after each line and pressing Enter twice after the last line): class MyClass: MyVar = 0 The first line defines the class container, which consists of the keyword class and the class name, which is MyClass. Every class you create must begin precisely this way. You must always include class followed by the class name. The second line is the class suite. All the elements that comprise the class are called the class suite. In this case, you see a class variable named MyVar, which is set to a value of 0. Every instance of the class will have the same variable and start at the same value. 3. Type MyInstance = MyClass() and press Enter. You have just created an instance of MyClass named MyInstance. Of course, you\u2019ll want to verify that you really have created such an instance. Step 4 accomplishes that task. CHAPTER 15 Creating and Using Classes 285 4. Type MyInstance.MyVar and click Run Cell. The output of 0, as shown in Figure 15-1, demonstrates that MyInstance does indeed have a class variable"}, {"filename": "Beginning Programming with Python.pdf", "text": "you see a class variable named MyVar, which is set to a value of 0. Every instance of the class will have the same variable and start at the same value. 3. Type MyInstance = MyClass() and press Enter. You have just created an instance of MyClass named MyInstance. Of course, you\u2019ll want to verify that you really have created such an instance. Step 4 accomplishes that task. CHAPTER 15 Creating and Using Classes 285 4. Type MyInstance.MyVar and click Run Cell. The output of 0, as shown in Figure 15-1, demonstrates that MyInstance does indeed have a class variable named MyVar. 5. Type MyInstance.__class__ and click Run Cell. Python displays the class used to create this instance, as shown in Figure 15-2. The output tells you that this class is part of the __main__ package, which means that you typed it directly into the application code and not as part of another package. Considering the built-in class attributes When you create a class, you can easily think that all you get is the class. However, Python adds built-in functionality to your class. For example, in the preceding section, you type __class__ and press Enter. The __class__ attribute is built in; you didn\u2019t create it. It helps to know that Python provides this functionality so that you don\u2019t have to add it. The functionality is needed often enough that every class should have it, so Python supplies it. The following steps help you work with FIGURE 15-1: The instance contains the required variable. FIGURE 15-2: The class name is also correct, so you know that this instance is created by using MyClass. 286 PART 3 Performing Common Tasks the built-in class attributes. They assume that you followed the steps in the pre- ceding section, \u201cCreating the class definition.\u201d 1. Type print(dir(MyInstance)) and click Run Cell. A list of attributes appears, as shown in Figure 15-3. These attributes provide specific functionality for your class. They\u2019re also common to every other class you create, so you can count on always having this functionality in the classes you create. 2. Type help(\u2032__class__\u2032) and press Enter. Python displays information on the __class__ attribute, as partially shown in Figure 15-4. You can use the same technique for learning more about any attribute that Python adds to your class. Working with methods Methods are simply another kind of function that reside in classes. You create and work with methods in precisely the same way that you do functions, except that methods are always associated with a class (you don\u2019t see freestanding methods as you do functions). You can create two kinds of methods: those associated with FIGURE 15-3: Use the dir() function to determine which built-in attributes are present. FIGURE 15-4: Python provides help for each of the attributes it adds to your class. CHAPTER 15 Creating and Using Classes 287 the class itself and those associated with an instance of a class. It\u2019s important to differentiate between the two. The following sections provide the details"}, {"filename": "Beginning Programming with Python.pdf", "text": "work with methods in precisely the same way that you do functions, except that methods are always associated with a class (you don\u2019t see freestanding methods as you do functions). You can create two kinds of methods: those associated with FIGURE 15-3: Use the dir() function to determine which built-in attributes are present. FIGURE 15-4: Python provides help for each of the attributes it adds to your class. CHAPTER 15 Creating and Using Classes 287 the class itself and those associated with an instance of a class. It\u2019s important to differentiate between the two. The following sections provide the details needed to work with both. Creating class methods A class method is one that you execute directly from the class without creating an instance of the class. Sometimes you need to create methods that execute from the class, such as the functions you used with the str class to modify strings. As an example, the multiple exception example in the \u201cNested exception handling\u201d sec- tion of Chapter 10 uses the str.upper() function. The following steps demon- strate how to create and use a class method. 1. Type the following code (pressing Enter after each line and pressing Enter twice after the last line): class MyClass: def SayHello(): print(\"Hello there!\") The example class contains a single defined attribute, SayHello(). This method doesn\u2019t accept any arguments and doesn\u2019t return any values. It simply prints a message as output. However, the method works just fine for demon- stration purposes. 2. Type MyClass.SayHello() and click Run Cell. The example outputs the expected string, as shown in Figure 15-5. Notice that you didn\u2019t need to create an instance of the class \u2014 the method is available immediately for use. A class method can work only with class data. It doesn\u2019t know about any data associated with an instance of the class. You can pass it data as an argument, and the method can return information as needed, but it can\u2019t access the instance data. As a consequence, you need to exercise care when creating class methods to ensure that they\u2019re essentially self-contained. FIGURE 15-5: The class method outputs a simple message. 288 PART 3 Performing Common Tasks Creating instance methods An instance method is one that is part of the individual instances. You use instance methods to manipulate the data that the class manages. As a consequence, you can\u2019t use instance methods until you instantiate an object from the class. All instance methods accept a single argument as a minimum, self. The self argument points at the particular instance that the application is using to manip- ulate data. Without the self argument, the method wouldn\u2019t know which instance data to use. However, self isn\u2019t considered an accessible argument \u2014 the value for self is supplied by Python, and you can\u2019t change it as part of calling the method. The following steps demonstrate how to create and use instance methods in Python. 1. Type the following code (pressing Enter after each line and pressing Enter twice"}, {"filename": "Beginning Programming with Python.pdf", "text": "an object from the class. All instance methods accept a single argument as a minimum, self. The self argument points at the particular instance that the application is using to manip- ulate data. Without the self argument, the method wouldn\u2019t know which instance data to use. However, self isn\u2019t considered an accessible argument \u2014 the value for self is supplied by Python, and you can\u2019t change it as part of calling the method. The following steps demonstrate how to create and use instance methods in Python. 1. Type the following code (pressing Enter after each line and pressing Enter twice after the last line): class MyClass: def SayHello(self): print(\"Hello there!\") The example class contains a single defined attribute, SayHello(). This method doesn\u2019t accept any special arguments and doesn\u2019t return any values. It simply prints a message as output. However, the method works just fine for demonstration purposes. 2. Type MyInstance = MyClass() and press Enter. Python creates an instance of MyClass named MyInstance. 3. Type MyInstance.SayHello() and click Run Cell. You see the message shown in Figure 15-6. Working with constructors A constructor is a special kind of method that Python calls when it instantiates an object by using the definitions found in your class. Python relies on the FIGURE 15-6: The instance message is called as part of an object and outputs this simple message. CHAPTER 15 Creating and Using Classes 289 constructor to perform tasks such as initializing (assigning values to) any instance variables that the object will need when it starts. Constructors can also verify that there are enough resources for the object and perform any other start-up task you can think of. The name of a constructor is always the same, __init__(). The constructor can accept arguments when necessary to create the object. When you create a class without a constructor, Python automatically creates a default constructor for you that doesn\u2019t do anything. Every class must have a constructor, even if it simply relies on the default constructor. The following steps demonstrate how to create a constructor: 1. Type the following code (pressing Enter after each line and pressing Enter twice after the last line): class MyClass: Greeting = \"\" def __init__(self, Name=\"there\"): self.Greeting = Name + \"!\" def SayHello(self): print(\"Hello {0}\".format(self.Greeting)) This example provides your first example of function overloading. In this case, there are two versions of __init__(). The first doesn\u2019t require any special input because it uses the default value for the Name of \u2033there\u2033. The second requires a name as an input. It sets Greeting to the value of this name, plus an exclamation mark. The SayHello() method is essentially the same as previous examples in this chapter. Python doesn\u2019t support true function overloading. Many strict adherents to strict Object-Oriented Programming (OOP) principles consider default values to be something different from function overloading. However, the use of default values obtains the same result, and it\u2019s the only option that Python offers. In true function overloading, you see multiple copies of the same"}, {"filename": "Beginning Programming with Python.pdf", "text": "input because it uses the default value for the Name of \u2033there\u2033. The second requires a name as an input. It sets Greeting to the value of this name, plus an exclamation mark. The SayHello() method is essentially the same as previous examples in this chapter. Python doesn\u2019t support true function overloading. Many strict adherents to strict Object-Oriented Programming (OOP) principles consider default values to be something different from function overloading. However, the use of default values obtains the same result, and it\u2019s the only option that Python offers. In true function overloading, you see multiple copies of the same function, each of which could process the input differently. 2. Type MyInstance = MyClass() and press Enter. Python creates an instance of MyClass named MyInstance. 3. Type MyInstance.SayHello() and click Run Cell. You see the message shown in Figure 15-7. Notice that this message provides the default, generic greeting. 4. Type MyInstance2 = MyClass(\u2033Amy\u2033) and press Enter. Python creates an instance of MyClass named MyInstance2. The instance MyInstance is completely different from the instance MyInstance2. 290 PART 3 Performing Common Tasks 5. Type MyInstance2.SayHello() and press Enter. Python displays the message for MyInstance2, not the message for MyInstance. 6. Type MyInstance.Greeting =\u2033Harry!\u2033 and press Enter. This step changes the greeting for MyInstance without changing the greeting for MyInstance2. 7. Type MyInstance.SayHello() and click Run Cell. You see the messages shown in Figure 15-8. Notice that this message provides a specific greeting for each of the instances. In addition, each instance is separate, and you were able to change the message for the first instance without affecting the second instance. Working with variables As mentioned earlier in the book, variables are storage containers that hold data. When working with classes, you need to consider how the data is stored and man- aged. A class can include both class variables and instance variables. The class variables are defined as part of the class itself, while instance variables are defined as part of methods. The following sections show how to use both variable types. Creating class variables Class variables provide global access to data that your class manipulates in some way. In most cases, you initialize global variables by using the constructor to ensure that they contain a known good value. The following steps demonstrate how class variables work. FIGURE 15-7: The first version of the constructor provides a default value for the name. FIGURE 15-8: Supplying the constructor with a name provides a customized output. CHAPTER 15 Creating and Using Classes 291 1. Type the following code (pressing Enter after each line and pressing Enter twice after the last line): class MyClass: Greeting = \"\" def SayHello(self): print(\"Hello {0}\".format(self.Greeting)) This is a version of the code found in the \u201cWorking with constructors\u201d section, earlier in this chapter, but this version doesn\u2019t include the constructor. Normally you do include a constructor to ensure that the class variable is initialized properly. However, this series of steps shows how class variables can go wrong. 2."}, {"filename": "Beginning Programming with Python.pdf", "text": "name. FIGURE 15-8: Supplying the constructor with a name provides a customized output. CHAPTER 15 Creating and Using Classes 291 1. Type the following code (pressing Enter after each line and pressing Enter twice after the last line): class MyClass: Greeting = \"\" def SayHello(self): print(\"Hello {0}\".format(self.Greeting)) This is a version of the code found in the \u201cWorking with constructors\u201d section, earlier in this chapter, but this version doesn\u2019t include the constructor. Normally you do include a constructor to ensure that the class variable is initialized properly. However, this series of steps shows how class variables can go wrong. 2. Type MyClass.Greeting = \u2033 Zelda\u2033 and press Enter. This statement sets the value of Greeting to something other than the value that you used when you created the class. Of course, anyone could make this change. The big question is whether the change will take. 3. Type MyClass.Greeting and click Run Cell. You see that the value of Greeting has changed, as shown in Figure 15-9. 4. Type MyInstance = MyClass() and press Enter. Python creates an instance of MyClass named MyInstance. 5. Type MyInstance.SayHello() and click Run Cell. You see the message shown in Figure 15-10. The change that you made to Greeting has carried over to the instance of the class. It\u2019s true that the use of a class variable hasn\u2019t really caused a problem in this example, but you can imagine what would happen in a real application if someone wanted to cause problems. FIGURE 15-9: You can change the value of Greeting. 292 PART 3 Performing Common Tasks This is just a simple example of how class variables can go wrong. The two concepts you should take away from this example are as follows: \u2022 Avoid class variables when you can because they\u2019re inherently unsafe. \u2022 Always initialize class variables to a known good value in the constructor code. Creating instance variables Instance variables are always defined as part of a method. The input arguments to a method are considered instance variables because they exist only when the method exists. Using instance variables is usually safer than using class variables because it\u2019s easier to maintain control over them and to ensure that the caller is providing the correct input. The following steps show an example of using instance variables. 1. Type the following code (pressing Enter after each line and pressing Enter twice after the last line): class MyClass: def DoAdd(self, Value1=0, Value2=0): Sum = Value1 + Value2 print(\"The sum of {0} plus {1} is {2}.\" .format(Value1, Value2, Sum)) In this case, you have three instance variables. The input arguments, Value1 and Value2, have default values of 0, so DoAdd() can\u2019t fail simply because the user forgot to provide values. Of course, the user could always supply something other than numbers, so you should provide the appropriate checks as part of your code. The third instance variable is Sum, which is equal to Value1 + Value2. The code simply adds the two numbers together and displays"}, {"filename": "Beginning Programming with Python.pdf", "text": "line): class MyClass: def DoAdd(self, Value1=0, Value2=0): Sum = Value1 + Value2 print(\"The sum of {0} plus {1} is {2}.\" .format(Value1, Value2, Sum)) In this case, you have three instance variables. The input arguments, Value1 and Value2, have default values of 0, so DoAdd() can\u2019t fail simply because the user forgot to provide values. Of course, the user could always supply something other than numbers, so you should provide the appropriate checks as part of your code. The third instance variable is Sum, which is equal to Value1 + Value2. The code simply adds the two numbers together and displays the result. 2. Type MyInstance = MyClass() and press Enter. Python creates an instance of MyClass named MyInstance. 3. Type MyInstance.DoAdd(1, 4) and click Run Cell. You see the message shown in Figure 15-11. In this case, you see the sum of adding 1 and 4. FIGURE 15-10: The change to Greeting carries over to the instance of the class. CHAPTER 15 Creating and Using Classes 293 Using methods with variable argument lists Sometimes you create methods that can take a variable number of arguments. Handling this sort of situation is something Python does well. Here are the two kinds of variable arguments that you can create: \u00bb \u00bb *args: Provides a list of unnamed arguments. \u00bb \u00bb **kwargs: Provides a list of named arguments. The actual names of the arguments don\u2019t matter, but Python developers use *args and **kwargs as a convention so that other Python developers know that they\u2019re a variable list of arguments. Notice that the first variable argument has just one asterisk (*) associated with it, which means the arguments are unnamed. The sec- ond variable has two asterisks, which means that the arguments are named. The following steps demonstrate how to use both approaches to writing an application. 1. Type the following code into the window \u2014 pressing Enter after each line: class MyClass: def PrintList1(*args): for Count, Item in enumerate(args): print(\"{0}. {1}\".format(Count, Item)) def PrintList2(**kwargs): for Name, Value in kwargs.items(): print(\"{0} likes {1}\".format(Name, Value)) MyClass.PrintList1(\"Red\", \"Blue\", \"Green\") MyClass.PrintList2(George=\"Red\", Sue=\"Blue\", Zarah=\"Green\") For the purposes of this example, you\u2019re seeing the arguments implemented as part of a class method. However, you can use them just as easily with an instance method. Look carefully at PrintList1() and you see a new method of using a for loop to iterate through a list. In this case, the enumerate() function outputs both a count (the loop count) and the string that was passed to the function. FIGURE 15-11: The output is simply the sum of two numbers. 294 PART 3 Performing Common Tasks The PrintList2() function accepts a dictionary input. Just as with PrintList1(), this list can be any length. However, you must process the items() found in the dictionary to obtain the individual values. 2. Click Run Cell. You see the output shown in Figure 15-12. The individual lists can be of any length. In fact, in this situation, playing with the code to see what you can"}, {"filename": "Beginning Programming with Python.pdf", "text": "function outputs both a count (the loop count) and the string that was passed to the function. FIGURE 15-11: The output is simply the sum of two numbers. 294 PART 3 Performing Common Tasks The PrintList2() function accepts a dictionary input. Just as with PrintList1(), this list can be any length. However, you must process the items() found in the dictionary to obtain the individual values. 2. Click Run Cell. You see the output shown in Figure 15-12. The individual lists can be of any length. In fact, in this situation, playing with the code to see what you can do with it is a good idea. For example, try mixing numbers and strings with the first list to see what happens. Try adding Boolean values as well. The point is that using this technique makes your methods incredibly flexible if all you want is a list of values as input. Overloading operators In some situations, you want to be able to do something special as the result of using a standard operator such as add (+). In fact, sometimes Python doesn\u2019t pro- vide a default behavior for operators because it has no default to implement. No matter what the reason might be, overloading operators makes it possible to assign new functionality to existing operators so that they do what you want, rather than what Python intended. The following steps demonstrate how to over- load an operator and use it as part of an application. 1. Type the following code into the Notebook \u2014 pressing Enter after each line: class MyClass: def __init__(self, *args): self.Input = args def __add__(self, Other): Output = MyClass() FIGURE 15-12: The code can process any number of entries in the list. CHAPTER 15 Creating and Using Classes 295 Output.Input = self.Input + Other.Input return Output def __str__(self): Output = \"\" for Item in self.Input: Output += Item Output += \" \" return Output Value1 = MyClass(\"Red\", \"Green\", \"Blue\") Value2 = MyClass(\"Yellow\", \"Purple\", \"Cyan\") Value3 = Value1 + Value2 print(\"{0} + {1} = {2}\" .format(Value1, Value2, Value3)) The example demonstrates a few different techniques. The constructor, __init__(), demonstrates a method for creating an instance variable attached to the self object. You can use this approach to create as many variables as needed to support the instance. When you create your own classes, no + operator is defined until you define one, in most cases. The only exception is when you inherit from an existing class that already has the + operator defined (see the \u201cExtending Classes to Make New Classes\u201d section, later in this chapter, for details). To add two MyClass entries together, you must define the __add__() method, which equates to the + operator. The code used for the __add__() method may look a little odd, too, but you need to think about it one line at a time. The code begins by creating a new object, Output, from MyClass. Nothing is added to Output at this point \u2014 it\u2019s a blank object. The two"}, {"filename": "Beginning Programming with Python.pdf", "text": "exception is when you inherit from an existing class that already has the + operator defined (see the \u201cExtending Classes to Make New Classes\u201d section, later in this chapter, for details). To add two MyClass entries together, you must define the __add__() method, which equates to the + operator. The code used for the __add__() method may look a little odd, too, but you need to think about it one line at a time. The code begins by creating a new object, Output, from MyClass. Nothing is added to Output at this point \u2014 it\u2019s a blank object. The two objects that you want to add, self.Input and Other. Input, are actually tuples. (See \u201cWorking with Tuples,\u201d in Chapter 14, for more details about tuples.) The code places the sum of these two objects into Output.Input. The __add__() method then returns the new combined object to the caller. Of course, you may want to know why you can\u2019t simply add the two inputs together as you would a number. The answer is that you\u2019d end up with a tuple as an output, rather than a MyClass as an output. The type of the output would be changed, and that would also change any use of the resulting object. To print MyClass properly, you also need to define a __str__() method. This method converts a MyClass object into a string. In this case, the output is a space-delimited string (in which each of the items in the string is separated from the other items by a space) containing each of the values found in self.Input. 296 PART 3 Performing Common Tasks Of course, the class that you create can output any string that fully represents the object. The main procedure creates two test objects, Value1 and Value2. It adds them together and places the result in Value3. The result is printed onscreen. 2. Click Run Cell. Figure 15-13 shows the result of adding the two objects together, converting them to strings, and then printing the result. It\u2019s a lot of code for such a simple output statement, but the result definitely demonstrates that you can create classes that are self-contained and fully functional. Creating a Class All the previous material in this chapter has helped prepare you for creating an interesting class of your own. In this case, you create a class that you place into an external package and eventually access within an application. The following sec- tions describe how to create and save this class. Defining the MyClass class Listing 15-1 shows the code that you need to create the class. You can also find this code in the BPPD_15_MyClass.ipynb file found in the downloadable source, as described in the Introduction. FIGURE 15-13: The result of adding two MyClass objects is a third object of the same type. CHAPTER 15 Creating and Using Classes 297 LISTING 15-1: Creating an External Class class MyClass: def __init__(self, Name=\"Sam\", Age=32): self.Name = Name self.Age = Age def GetName(self): return self.Name def SetName(self,"}, {"filename": "Beginning Programming with Python.pdf", "text": "access within an application. The following sec- tions describe how to create and save this class. Defining the MyClass class Listing 15-1 shows the code that you need to create the class. You can also find this code in the BPPD_15_MyClass.ipynb file found in the downloadable source, as described in the Introduction. FIGURE 15-13: The result of adding two MyClass objects is a third object of the same type. CHAPTER 15 Creating and Using Classes 297 LISTING 15-1: Creating an External Class class MyClass: def __init__(self, Name=\"Sam\", Age=32): self.Name = Name self.Age = Age def GetName(self): return self.Name def SetName(self, Name): self.Name = Name def GetAge(self): return self.Age def SetAge(self, Age): self.Age = Age def __str__(self): return \"{0} is aged {1}.\".format(self.Name, self.Age) In this case, the class begins by creating an object with two instance variables: Name and Age. If the user fails to provide these values, they default to Sam and 32. This example provides you with a new class feature. Most developers call this fea- ture an accessor. Essentially, it provides access to an underlying value. There are two types of accessors: getters and setters. Both GetName() and GetAge() are getters. They provide read-only access to the underlying value. The SetName() and SetAge() methods are setters, which provide write-only access to the underlying value. Using a combination of methods like this allows you to check inputs for correct type and range, as well as verify that the caller has permission to view the information. As with just about every other class you create, you need to define the __str__() method if you want the user to be able to print the object. In this case, the class provides formatted output that lists both of the instance variables. Saving a class to disk You could keep your class right in the same file as your test code, but that wouldn\u2019t reflect the real world very well. To use this class in a real-world way for the rest of the chapter, you must follow these steps: 1. Create a new notebook called BPPD_15_MyClass.ipynb. 2. Click Run Cell. Python will execute the code without error when you have typed the code correctly. 298 PART 3 Performing Common Tasks 3. Choose File \u27aa Save and Checkpoint. Notebook saves the file. 4. Choose File \u27aa Download As \u27aa Python (.py). Notebook outputs the code as a Python file. 5. Import the resulting file into your Notebook. The \u201cImporting a notebook\u201d section of Chapter 4 describes how to perform this task. Using the Class in an Application Most of the time, you use external classes when working with Python. It isn\u2019t very often that a class exists within the confines of the application file because the application would become large and unmanageable. In addition, reusing the class code in another application would be difficult. The following steps help you use the MyClass class that you created in the previous section. 1. Type the following code into the notebook for this chapter \u2014 pressing Enter"}, {"filename": "Beginning Programming with Python.pdf", "text": "into your Notebook. The \u201cImporting a notebook\u201d section of Chapter 4 describes how to perform this task. Using the Class in an Application Most of the time, you use external classes when working with Python. It isn\u2019t very often that a class exists within the confines of the application file because the application would become large and unmanageable. In addition, reusing the class code in another application would be difficult. The following steps help you use the MyClass class that you created in the previous section. 1. Type the following code into the notebook for this chapter \u2014 pressing Enter after each line: import BPPD_15_MyClass SamsRecord = BPPD_15_MyClass.MyClass() AmysRecord = BPPD_15_MyClass.MyClass(\"Amy\", 44) print(SamsRecord.GetAge()) SamsRecord.SetAge(33) print(AmysRecord.GetName()) AmysRecord.SetName(\"Aimee\") print(SamsRecord) print(AmysRecord) The example code begins by importing the BPPD_15_MyClass package. The package name is the name of the file used to store the external code, not the name of the class. A single package can contain multiple classes, so always think of the package as being the actual file that is used to hold one or more classes that you need to use with your application. After the package is imported, the application creates two MyClass objects. Notice that you use the package name first, followed by the class name. The first object, SamsRecord, uses the default settings. The second object, AmysRecord, relies on custom settings. CHAPTER 15 Creating and Using Classes 299 Sam has become a year old. After the application verifies that the age does need to be updated, it updates Sam\u2019s age. Somehow, HR spelled Aimee\u2019s name wrong. It turns out that Amy is an incorrect spelling. Again, after the application verifies that the name is wrong, it makes a correction to AmysRecord. The final step is to print both records in their entirety. 2. Click Run Cell. The application displays a series of messages as it puts MyClass through its paces, as shown in Figure 15-14. At this point, you know all the essentials of creating great classes. Extending Classes to Make New Classes As you might imagine, creating a fully functional, production-grade class (one that is used in a real-world application actually running on a system that is accessed by users) is time consuming because real classes perform a lot of tasks. Fortu- nately, Python supports a feature called inheritance. By using inheritance, you can obtain the features you want from a parent class when creating a child class. Overriding the features that you don\u2019t need and adding new features lets you cre- ate new classes relatively fast and with a lot less effort on your part. In addition, because the parent code is already tested, you don\u2019t have to put quite as much effort into ensuring that your new class works as expected. The following sections show how to build and use classes that inherit from each other. Building the child class Parent classes are normally supersets of something. For example, you might \u00adcreate a parent class named Car and then create child classes of various car"}, {"filename": "Beginning Programming with Python.pdf", "text": "class. Overriding the features that you don\u2019t need and adding new features lets you cre- ate new classes relatively fast and with a lot less effort on your part. In addition, because the parent code is already tested, you don\u2019t have to put quite as much effort into ensuring that your new class works as expected. The following sections show how to build and use classes that inherit from each other. Building the child class Parent classes are normally supersets of something. For example, you might \u00adcreate a parent class named Car and then create child classes of various car types FIGURE 15-14: The output shows that the class is fully functional. 300 PART 3 Performing Common Tasks around it. In this case, you build a parent class named Animal and use it to define a child class named Chicken. Of course, you can easily add other child classes after you have Animal in place, such as a Gorilla class. However, for this example, you build just the one parent and one child class, as shown in Listing 15-2. To use this class with the remainder of the chapter, you need to save it to disk by using the technique found in the \u201cSaving a class to disk\u201d section, earlier in this chapter. However, give your file the name BPPD_15_Animals.ipynb. LISTING 15-2: Building a Parent and Child Class class Animal: def __init__(self, Name=\"\", Age=0, Type=\"\"): self.Name = Name self.Age = Age self.Type = Type def GetName(self): return self.Name def SetName(self, Name): self.Name = Name def GetAge(self): return self.Age def SetAge(self, Age): self.Age = Age def GetType(self): return self.Type def SetType(self, Type): self.Type = Type def __str__(self): return \"{0} is a {1} aged {2}\".format(self.Name, self.Type, self.Age) class Chicken(Animal): def __init__(self, Name=\"\", Age=0): self.Name = Name self.Age = Age self.Type = \"Chicken\" def SetType(self, Type): print(\"Sorry, {0} will always be a {1}\" .format(self.Name, self.Type)) def MakeSound(self): print(\"{0} says Cluck, Cluck, Cluck!\".format(self.Name)) CHAPTER 15 Creating and Using Classes 301 The Animal class tracks three characteristics: Name, Age, and Type. A production application would probably track more characteristics, but these characteristics do everything needed for this example. The code also includes the required acces- sors for each of the characteristics. The __str__() method completes the picture by printing a simple message stating the animal characteristics. The Chicken class inherits from the Animal class. Notice the use of Animal in parentheses after the Chicken class name. This addition tells Python that Chicken is a kind of Animal, something that will inherit the characteristics of Animal. Notice that the Chicken constructor accepts only Name and Age. The user doesn\u2019t have to supply a Type value because you already know that it\u2019s a chicken. This new constructor overrides the Animal constructor. The three attributes are still in place, but Type is supplied directly in the Chicken constructor. Someone might try something funny, such as setting her chicken up as a gorilla. With this in mind, the Chicken class also overrides the SetType() setter. If some- one tries"}, {"filename": "Beginning Programming with Python.pdf", "text": "name. This addition tells Python that Chicken is a kind of Animal, something that will inherit the characteristics of Animal. Notice that the Chicken constructor accepts only Name and Age. The user doesn\u2019t have to supply a Type value because you already know that it\u2019s a chicken. This new constructor overrides the Animal constructor. The three attributes are still in place, but Type is supplied directly in the Chicken constructor. Someone might try something funny, such as setting her chicken up as a gorilla. With this in mind, the Chicken class also overrides the SetType() setter. If some- one tries to change the Chicken type, that user gets a message rather than the attempted change. Normally, you handle this sort of problem by using an excep- tion, but the message works better for this example by making the coding tech- nique clearer. Finally, the Chicken class adds a new feature, MakeSound(). Whenever someone wants to hear the sound a chicken makes, he can call MakeSound() to at least see it printed on the screen. Testing the class in an application Testing the Chicken class also tests the Animal class to some extent. Some func- tionality is different, but some classes aren\u2019t really meant to be used. The Animal class is simply a parent for specific kinds of animals, such as Chicken. The follow- ing steps demonstrate the Chicken class so that you can see how inheritance works. 1. Type the following code into the notebook for this chapter \u2014 pressing Enter after each line: import BPPD_15_Animals MyChicken = BPPD_15_Animals.Chicken(\"Sally\", 2) print(MyChicken) MyChicken.SetAge(MyChicken.GetAge() + 1) 302 PART 3 Performing Common Tasks print(MyChicken) MyChicken.SetType(\"Gorilla\") print(MyChicken) MyChicken.MakeSound() The first step is to import the Animals package. Remember that you always import the filename, not the class. The Animals.py file actually contains two classes in this case: Animal and Chicken. The example creates a chicken, MyChicken, named Sally, who is age 2. It then starts to work with MyChicken in various ways. For example, Sally has a birthday, so the code updates Sally\u2019s age by 1. Notice how the code combines the use of a setter, SetAge(), with a getter, GetAge(), to perform the task. After each change, the code displays the resulting object values for you. The final step is to let Sally say a few words. 2. Click Run Cell. You see each of the steps used to work with MyChicken, as shown in Figure 15-15. As you can see, using inheritance can greatly simplify the task of creating new classes when enough of the classes have commonality so that you can create a parent class that contains some amount of the code. FIGURE 15-15: Sally has a birthday and then says a few words. 4 Performing Advanced Tasks IN THIS PART . . . Store data permanently on disk. Create, read, update, and delete data in files. Create, send, and view an email. CHAPTER 16 Storing Data in Files 305 Chapter 16 Storing Data in Files U ntil now, application development"}, {"filename": "Beginning Programming with Python.pdf", "text": "shown in Figure 15-15. As you can see, using inheritance can greatly simplify the task of creating new classes when enough of the classes have commonality so that you can create a parent class that contains some amount of the code. FIGURE 15-15: Sally has a birthday and then says a few words. 4 Performing Advanced Tasks IN THIS PART . . . Store data permanently on disk. Create, read, update, and delete data in files. Create, send, and view an email. CHAPTER 16 Storing Data in Files 305 Chapter 16 Storing Data in Files U ntil now, application development might seem to be all about presenting information onscreen. Actually, applications revolve around a need to work with data in some way. Data is the focus of all applications because it\u2019s the data that users are interested in. Be prepared for a huge disappointment the first time you present a treasured application to a user base and find that the only thing users worry about is whether the application will help them leave work on time after creating a presentation. The fact is, the best applications are invisible, but they present data in the most appropriate manner possible for a user\u2019s needs. If data is the focus of applications, then storing the data in a permanent manner is equally important. For most developers, data storage revolves around a perma- nent media such as a hard drive, Solid State Drive (SSD), Universal Serial Bus (USB) flash drive, or some other methodology. (Even cloud-based solutions work fine, but you won\u2019t see them used in this book because they require different pro- gramming techniques that are beyond the book\u2019s scope.) The data in memory is temporary because it lasts only as long as the machine is running. A permanent storage device holds onto the data long after the machine is turned off so that it can be retrieved during the next session. In addition to permanent storage, this chapter also helps you understand the four basic operations that you can perform on files: Create, Read, Update, and Delete (CRUD). You see the CRUD acronym used quite often in database circles, but it applies equally well to any application. No matter how your application stores the data in a permanent location, it must be able to perform these four tasks in order to provide a complete solution to the user. Of course, CRUD operations must be IN THIS CHAPTER \u00bb \u00bb Considering how permanent storage works \u00bb \u00bb Using permanently stored content \u00bb \u00bb Creating, reading, updating, and deleting file data 306 PART 4 Performing Advanced Tasks performed in a secure, reliable, and controlled manner. This chapter also helps you set a few guidelines for how access must occur to ensure data integrity (a \u00admeasure of how often data errors occur when performing CRUD operations). You can find the downloadable source code for the examples this chapter in the BPPD_16_ Storing_Data_in_Files.ipynb file, as described in the book\u2019s Introduction. Understanding How Permanent Storage Works You"}, {"filename": "Beginning Programming with Python.pdf", "text": "must be IN THIS CHAPTER \u00bb \u00bb Considering how permanent storage works \u00bb \u00bb Using permanently stored content \u00bb \u00bb Creating, reading, updating, and deleting file data 306 PART 4 Performing Advanced Tasks performed in a secure, reliable, and controlled manner. This chapter also helps you set a few guidelines for how access must occur to ensure data integrity (a \u00admeasure of how often data errors occur when performing CRUD operations). You can find the downloadable source code for the examples this chapter in the BPPD_16_ Storing_Data_in_Files.ipynb file, as described in the book\u2019s Introduction. Understanding How Permanent Storage Works You don\u2019t need to understand absolutely every detail about how permanent stor- age works in order to use it. For example, just how the drive spins (assuming that it spins at all) is unimportant. However, most platforms adhere to a basic set of principles when it comes to permanent storage. These principles have developed over a period of time, starting with mainframe systems in the earliest days of computing. Data is generally stored in files (with pure data representing application state information), but you could also find it stored as objects (a method of storing seri- alized class instances). This chapter covers the use of files, not objects. You prob- ably know about files already because almost every useful application out there relies on them. For example, when you open a document in your word processor, you\u2019re actually opening a data file containing the words that you or someone else has typed. Files typically have an extension associated with them that defines the file type. The extension is generally standardized for any given application and is separated from the filename by a period, such as MyData.txt. In this case, .txt is the file extension, and you probably have an application on your machine for opening such files. In fact, you can likely choose from a number of applications to perform the task because the .txt file extension is relatively common. Internally, files structure the data in some specific manner to make it easy to write and read data to and from the file. Any application you write must know about the file structure in order to interact with the data the file contains. The examples in this chapter use a simple file structure to make it easy to write the code required to access them, but file structures can become quite complex. Files would be nearly impossible to find if you placed them all in the same location on the hard drive. Consequently, files are organized into directories. Many newer computer systems also use the term folder for this organizational feature of \u00adpermanent storage. No matter what you call it, permanent storage relies on CHAPTER 16 Storing Data in Files 307 directories to help organize the data and make individual files significantly easier to find. To find a particular file so that you can open it and interact with the data it contains, you must know which directory holds the file."}, {"filename": "Beginning Programming with Python.pdf", "text": "complex. Files would be nearly impossible to find if you placed them all in the same location on the hard drive. Consequently, files are organized into directories. Many newer computer systems also use the term folder for this organizational feature of \u00adpermanent storage. No matter what you call it, permanent storage relies on CHAPTER 16 Storing Data in Files 307 directories to help organize the data and make individual files significantly easier to find. To find a particular file so that you can open it and interact with the data it contains, you must know which directory holds the file. Directories are arranged in hierarchies that begin at the uppermost level of the hard drive. For example, when working with the downloadable source code for this book, you find the code for the entire book in the BPPD directory within the user folder on your system. On my Windows system, that directory hierarchy is C:\\Users\\John\\BPPD. However, my Mac and Linux systems have a different directory hierarchy to reach the same BPPD directory, and the directory hierarchy on your system will be different as well. Notice that I use a backslash (\\) to separate the directory levels. Some platforms use the forward slash (/); others use the backslash. You can read about this issue on my blog at http://blog.johnmuellerbooks.com/2014/03/10/backslash- versus-forward-slash/. The book uses backslashes when appropriate and assumes that you\u2019ll make any required changes for your platform. A final consideration for Python developers (at least for this book) is that the hier- archy of directories is called a path. You see the term path in a few places in this book because Python must be able to find any resources you want to use based on the path you provide. For example, C:\\Users\\John\\BPPD is the complete path to the source code for this chapter on a Windows system. A path that traces the entire route that Python must search is called an absolute path. An incomplete path that traces the route to a resource using the current directory as a starting point is called a relative path. To find a location using a relative path, you commonly use the current directory as the starting point. For example, BPPD\\__pycache__ would be the relative path to the Python cache. Note that it has no drive letter or beginning backslash. How- ever, sometimes you must add to the starting point in specific ways to define a relative path. Most platforms define these special relative path character sets: \u00bb \u00bb \\: The root directory of the current drive. The drive is relative, but the path begins at the root, the uppermost part, of that drive. \u00bb \u00bb .\\: The current directory. You use this shorthand for the current directory when the current directory name isn\u2019t known. For example, you could also define the location of the Python cache as .\\__pycache__. \u00bb \u00bb ..\\: The parent directory. You use this shorthand when the parent directory name isn\u2019t known. \u00bb \u00bb ..\\..\\: The parent of the parent"}, {"filename": "Beginning Programming with Python.pdf", "text": "define a relative path. Most platforms define these special relative path character sets: \u00bb \u00bb \\: The root directory of the current drive. The drive is relative, but the path begins at the root, the uppermost part, of that drive. \u00bb \u00bb .\\: The current directory. You use this shorthand for the current directory when the current directory name isn\u2019t known. For example, you could also define the location of the Python cache as .\\__pycache__. \u00bb \u00bb ..\\: The parent directory. You use this shorthand when the parent directory name isn\u2019t known. \u00bb \u00bb ..\\..\\: The parent of the parent directory. You can proceed up the hierarchy of directories as far as necessary to locate a particular starting point before you drill back down the hierarchy to a new location. 308 PART 4 Performing Advanced Tasks Creating Content for Permanent Storage A file can contain structured or unstructured data. An example of structured data is a database in which each record has specific information in it. An employee data- base would include columns for name, address, employee ID, and so on. Each record would be an individual employee and each employee record would contain the name, address, and employee ID fields. An example of unstructured data is a word processing file whose text can contain any content in any order. There is no required order for the content of a paragraph, and sentences can contain any number of words. However, in both cases, the application must know how to per- form CRUD operations with the file. This means that the content must be prepared in such a manner that the application can both write to and read from the file. Even with word processing files, the text must follow a certain series of rules. Assume for a moment that the files are simple text. Even so, every paragraph must have some sort of delimiter telling the application to begin a new paragraph. The application reads the paragraph until it sees this delimiter, and then it begins a new paragraph. The more that the word processor offers in the way of features, the more structured the output becomes. For example, when the word processor offers a method of formatting the text, the formatting must appear as part of the output file. The cues that make content usable for permanent storage are often hidden from sight. All you see when you work with the file is the data itself. The formatting remains invisible for a number of reasons, such as these: \u00bb \u00bb The cue is a control character, such as a carriage return or linefeed, that is normally invisible by default at the platform level. \u00bb \u00bb The application relies on special character combinations, such as commas and double quotes, to delimit the data entries. These special character combina- tions are consumed by the application during reading. \u00bb \u00bb Part of the reading process converts the character to another form, such as when a word processing file reads in content that"}, {"filename": "Beginning Programming with Python.pdf", "text": "with the file is the data itself. The formatting remains invisible for a number of reasons, such as these: \u00bb \u00bb The cue is a control character, such as a carriage return or linefeed, that is normally invisible by default at the platform level. \u00bb \u00bb The application relies on special character combinations, such as commas and double quotes, to delimit the data entries. These special character combina- tions are consumed by the application during reading. \u00bb \u00bb Part of the reading process converts the character to another form, such as when a word processing file reads in content that is formatted. The formatting appears onscreen, but in the background the file contains special characters to denote the formatting. \u00bb \u00bb The file is actually in an alternative format, such as eXtensible Markup Language (XML) (see http://www.w3schools.com/xml/default.ASP for information about XML). The alternative format is interpreted and presented onscreen in a manner the user can understand. CHAPTER 16 Storing Data in Files 309 Other rules likely exist for formatting data. For example, Microsoft actually uses a .zip file to hold its latest word processing files (the .docx) file. The use of a com- pressed file catalog, such as .zip, makes storing a great deal of information in a small space possible. It\u2019s interesting to see how others store data because you can often find more efficient and secure means of data storage for your own applications. Now that you have a better idea of what could happen as part of preparing content for disk storage, it\u2019s time to look at an example. In this case, the formatting strat- egy is quite simple. All this example does is accept input, format it for storage, and present the formatted version onscreen (rather than save it to disk just yet). 1. Open a new notebook. You can also use the downloadable source files BPPD_16_Storing_Data_in_ Files.ipynb, which contains the application code, and BPPD_16_FormattedData. ipynb, which contains the FormatData class code. 2. Type the following code into the window \u2014 pressing Enter after each line: class FormatData: def __init__(self, Name=\"\", Age=0, Married=False): self.Name = Name self.Age = Age self.Married = Married def __str__(self): OutString = \"'{0}', {1}, {2}\".format( self.Name, self.Age, self.Married) return OutString This is a shortened class. Normally, you\u2019d add accessors (getter and setter methods) and error-trapping code. (Remember that getter methods provide read-only access to class data and setter methods provide write-only access to class data.) However, the class works fine for the demonstration. The main feature to look at is the __str__() function. Notice that it formats the output data in a specific way. The string value, self.Name, is enclosed in single quotes. Each of the values is also separated by a comma. This is actually a form of a standard output format, comma-separated value (CSV), that is used on a wide range of platforms because it\u2019s easy to translate and is in plain text, so nothing special is needed to work with it. 310 PART 4 Performing Advanced Tasks 3. Save"}, {"filename": "Beginning Programming with Python.pdf", "text": "to class data.) However, the class works fine for the demonstration. The main feature to look at is the __str__() function. Notice that it formats the output data in a specific way. The string value, self.Name, is enclosed in single quotes. Each of the values is also separated by a comma. This is actually a form of a standard output format, comma-separated value (CSV), that is used on a wide range of platforms because it\u2019s easy to translate and is in plain text, so nothing special is needed to work with it. 310 PART 4 Performing Advanced Tasks 3. Save the code as BPPD_16_FormattedData.ipynb. To use this class with the remainder of the chapter, you need to save it to disk by using the technique found in the \u201cSaving a class to disk\u201d section of Chapter 15. You must also create the BPPD_16_FormattedData.py file to import the class into the application code. 4. Open another new notebook. 5. Type the following code into the window \u2014 pressing Enter after each line: from BPPD_16_FormattedData import FormatData NewData = [FormatData(\"George\", 65, True), FormatData(\"Sally\", 47, False), FormatData(\"Doug\", 52, True)] for Entry in NewData: print(Entry) The code begins by importing just the FormatData class from BPPD_16_ FormattedData. In this case, it doesn\u2019t matter because the BPPD_16_ FormattedData module contains only a single class. However, you need to keep this technique in mind when you need only one class from a module. Most of the time, you work with multiple records when you save data to disk. You might have multiple paragraphs in a word processed document or multiple records, as in this case. The example creates a list of records and places them in NewData. In this case, NewData represents the entire document. The representation will likely take other forms in a production application, but the idea is the same. Any application that saves data goes through some sort of output loop. In this case, the loop simply prints the data onscreen. However, in the upcoming sections, you actually output the data to a file. 6. Click Run Cell. You see the output shown in Figure 16-1. This is a representation of how the data would appear in the file. In this case, each record is separated by a carriage return and linefeed control character combination. That is, George, Sally, and Doug are all separate records in the file. Each field (data element) is separated by a comma. Text fields appear in quotes so that they aren\u2019t confused with other data types. CHAPTER 16 Storing Data in Files 311 Creating a File Any data that the user creates and wants to work with for more than one session must be put on some sort of permanent media. Creating a file and then placing the data into it is an essential part of working with Python. You can use the following steps to create code that will write data to the hard drive. 1. Open the previously saved BPPD_16_FormattedData.ipynb file. You see the code originally"}, {"filename": "Beginning Programming with Python.pdf", "text": "separated by a comma. Text fields appear in quotes so that they aren\u2019t confused with other data types. CHAPTER 16 Storing Data in Files 311 Creating a File Any data that the user creates and wants to work with for more than one session must be put on some sort of permanent media. Creating a file and then placing the data into it is an essential part of working with Python. You can use the following steps to create code that will write data to the hard drive. 1. Open the previously saved BPPD_16_FormattedData.ipynb file. You see the code originally created in the \u201cCreating Content for Permanent Storage\u201d section, earlier in this chapter, appear onscreen. This example makes adds a new class to the original code so that the package can now save a file to disk. 2. Type the following code into the notebook \u2014 pressing Enter after each line: import csv class FormatData2: def __init__(self, Name=\"\", Age=0, Married=False): self.Name = Name self.Age = Age self.Married = Married def __str__(self): OutString = \"'{0}', {1}, {2}\".format( self.Name, self.Age, self.Married) return OutString FIGURE 16-1: The example presents how the data might look in CSV format. 312 PART 4 Performing Advanced Tasks def SaveData(Filename = \"\", DataList = []): with open(Filename, \"w\", newline='\\n') as csvfile: DataWriter = csv.writer( csvfile, delimiter='\\n', quotechar=\" \", quoting=csv.QUOTE_NONNUMERIC) DataWriter.writerow(DataList) csvfile.close() print(\"Data saved!\") The csv module contains everything needed to work with CSV files. Python actually supports a huge number of file types natively, and libraries that provide additional support are available. If you have a file type that you need to support using Python, you can usually find a third-party library to support it when Python doesn\u2019t support it natively. Unfortunately, no compre- hensive list of supported files exists, so you need to search online to find how Python supports the file you need. The documentation divides the supported files by types and doesn\u2019t provide a comprehensive list. For example, you can find all the archive formats at https://docs.python.org/3/library/ archiving.html and the miscellaneous file formats at https://docs. python.org/3/library/fileformats.html. This example uses essentially the same text formatting code as you saw in the FormatData class, but now it adds the SaveData() method to put the formatted data on disk. Using a new class notifies everyone of the increased capability, so FormatData2 is the same class, but with more features. Notice that the SaveData() method accepts two arguments as input: a filename used to store the data and a list of items to store. This is a class method rather than an instance method. Later in this procedure, you see how using a class method is an advantage. The DataList argument defaults to an empty list so that if the caller doesn\u2019t pass anything at all, the method won\u2019t throw an exception. Instead, it produces an empty output file. Of course, you can also add code to detect an empty list as an error, if desired. The with statement tells Python to perform a series of tasks with a"}, {"filename": "Beginning Programming with Python.pdf", "text": "input: a filename used to store the data and a list of items to store. This is a class method rather than an instance method. Later in this procedure, you see how using a class method is an advantage. The DataList argument defaults to an empty list so that if the caller doesn\u2019t pass anything at all, the method won\u2019t throw an exception. Instead, it produces an empty output file. Of course, you can also add code to detect an empty list as an error, if desired. The with statement tells Python to perform a series of tasks with a specific resource \u2014 an open csvfile named Testfile.csv. The open() function accepts a number of inputs depending in how you use it. For this example, you open it in write mode (signified by the w). The newline attribute tells Python to treat the \\n control character (linefeed) as a newline character. In order to write output, you need a writer object. The DataWriter object is configured to use csvfile as the output file, to use /n as the record character, to quote records using a space, and to provide quoting only on nonnumeric values. CHAPTER 16 Storing Data in Files 313 This setup will produce some interesting results later, but for now, just assume that this is what you need to make the output usable. Actually writing the data takes less effort than you might think. A single call to DataWriter.writerow() with the DataList as input is all you need. Always close the file when you get done using it. This action flushes the data (makes sure that it gets written) to the hard drive. The code ends by telling you that the data has been saved. 3. Save the code as BPPD_16_FormattedData.ipynb. To use this class with the remainder of the chapter, you need to save it to disk using the technique found in the \u201cSaving a class to disk\u201d section of Chapter 15. You must also recreate the BPPD_16_FormattedData.py file to import the class into the application code. If you don\u2019t recreate the Python file, the client code won\u2019t be able to import FormatData2. Make sure that you delete the old version of BPPD_16_FormattedData.py from the code repository before you import the new one (or you can simply tell Notebook to overwrite the old copy). 4. Type the following code into the application notebook \u2014 pressing Enter after each line: from BPPD_16_FormattedData import FormatData2 NewData = [FormatData2(\"George\", 65, True), FormatData2(\"Sally\", 47, False), FormatData2(\"Doug\", 52, True)] FormatData2.SaveData(\"TestFile.csv\", NewData) This example should look similar to the one you created in the \u201cCreating Content for Permanent Storage\u201d section, earlier in the chapter. You still create NewData as a list. However, instead of displaying the information onscreen, you send it to a file instead by calling FormatData2.SaveData(). This is one of those situations in which using an instance method would actually get in the way. To use an instance method, you would first need to create an instance of FormatData that wouldn\u2019t"}, {"filename": "Beginning Programming with Python.pdf", "text": "each line: from BPPD_16_FormattedData import FormatData2 NewData = [FormatData2(\"George\", 65, True), FormatData2(\"Sally\", 47, False), FormatData2(\"Doug\", 52, True)] FormatData2.SaveData(\"TestFile.csv\", NewData) This example should look similar to the one you created in the \u201cCreating Content for Permanent Storage\u201d section, earlier in the chapter. You still create NewData as a list. However, instead of displaying the information onscreen, you send it to a file instead by calling FormatData2.SaveData(). This is one of those situations in which using an instance method would actually get in the way. To use an instance method, you would first need to create an instance of FormatData that wouldn\u2019t actually do anything for you. 5. Restart the Kernel by choosing Kernel \u27aa Restart or by clicking the Restart the Kernel button. You must perform this step to unload the previous version of BPPD_16_ FormattedData. Otherwise, even though the new copy of BPPD_16_ FormattedData.py appears in the code directory, the example won\u2019t run. 6. Click Run Cell. The application runs, and you see a data saved message as output. Of course, that doesn\u2019t tell you anything about the data. In the source code file, you see a new file named Testfile.csv. Most platforms have a default application that 314 PART 4 Performing Advanced Tasks opens such a file. With Windows, you can open it using Excel and WordPad (among other applications). Figure 16-2 shows the output in Excel, while Figure 16-3 shows it in WordPad. In both cases, the output looks surprisingly similar to the output shown in Figure 16-1. Reading File Content At this point, the data is on the hard drive. Of course, it\u2019s nice and safe there, but it really isn\u2019t useful because you can\u2019t see it. To see the data, you must read it into memory and then do something with it. The following steps show how to read data from the hard drive and into memory so that you can display it onscreen. 1. Open the previously saved BPPD_16_FormattedData.ipynb file. The code originally created in the \u201cCreating Content for Permanent Storage\u201d section, earlier in this chapter, appears onscreen. This example adds a new class to the original code so that the package can now save a file to disk. FIGURE 16-2: The application output as it appears in Excel. FIGURE 16-3: The application output as it appears in WordPad. CHAPTER 16 Storing Data in Files 315 2. Type the following code into the notebook \u2014 pressing Enter after each line: import csv class FormatData3: def __init__(self, Name=\"\", Age=0, Married=False): self.Name = Name self.Age = Age self.Married = Married def __str__(self): OutString = \"'{0}', {1}, {2}\".format( self.Name, self.Age, self.Married) return OutString def SaveData(Filename = \"\", DataList = []): with open(Filename, \"w\", newline='\\n') as csvfile: DataWriter = csv.writer( csvfile, delimiter='\\n', quotechar=\" \", quoting=csv.QUOTE_NONNUMERIC) DataWriter.writerow(DataList) csvfile.close() print(\"Data saved!\") def ReadData(Filename = \"\"): with open(Filename, \"r\", newline='\\n') as csvfile: DataReader = csv.reader( csvfile, delimiter=\"\\n\", quotechar=\" \", quoting=csv.QUOTE_NONNUMERIC) Output = [] for Item in DataReader: Output.append(Item[0]) csvfile.close() print(\"Data read!\") return Output 316 PART 4 Performing Advanced Tasks Opening a file"}, {"filename": "Beginning Programming with Python.pdf", "text": "pressing Enter after each line: import csv class FormatData3: def __init__(self, Name=\"\", Age=0, Married=False): self.Name = Name self.Age = Age self.Married = Married def __str__(self): OutString = \"'{0}', {1}, {2}\".format( self.Name, self.Age, self.Married) return OutString def SaveData(Filename = \"\", DataList = []): with open(Filename, \"w\", newline='\\n') as csvfile: DataWriter = csv.writer( csvfile, delimiter='\\n', quotechar=\" \", quoting=csv.QUOTE_NONNUMERIC) DataWriter.writerow(DataList) csvfile.close() print(\"Data saved!\") def ReadData(Filename = \"\"): with open(Filename, \"r\", newline='\\n') as csvfile: DataReader = csv.reader( csvfile, delimiter=\"\\n\", quotechar=\" \", quoting=csv.QUOTE_NONNUMERIC) Output = [] for Item in DataReader: Output.append(Item[0]) csvfile.close() print(\"Data read!\") return Output 316 PART 4 Performing Advanced Tasks Opening a file for reading is much like opening it for writing. The big difference is that you need to specify r (for read) instead of w (for write) as part of the csv.reader() constructor. Otherwise, the arguments are precisely the same and work the same. It\u2019s important to remember that you\u2019re starting with a text file when working with a .csv file. Yes, it has delimiters, but it\u2019s still text. When reading the text into memory, you must rebuild the Python structure. In this case, Output is an empty list when it starts. The file currently contains three records that are separated by the /n control character. Python reads each record in using a for loop. Notice the odd use of Item[0]. When Python reads the record, it sees the nonterminating entries (those that aren\u2019t last in the file) as actually being two list entries. The first entry contains data; the second is blank. You want only the first entry. These entries are appended to Output so that you end up with a complete list of the records that appear in the file. As before, make sure that you close the file when you get done with it. The method prints a data read message when it finishes. It then returns Output (a list of records) to the caller. 3. Save the code as BPPD_16_FormattedData.ipynb. To use this class with the remainder of the chapter, you need to save it to disk by using the technique found in the \u201cSaving a class to disk\u201d section of Chapter 15. You must also recreate the BPPD_16_FormattedData.py file to import the class into the application code. If you don\u2019t recreate the Python file, the client code won\u2019t be able to import FormatData3. Make sure that you delete the old version of BPPD_16_FormattedData.py from the code reposi- tory before you import the new one. 4. Type the following code into the application notebook \u2014 pressing Enter after each line: from BPPD_16_FormattedData import FormatData3 NewData = FormatData3.ReadData(\"TestFile.csv\") for Entry in NewData: print(Entry) The ReadCSV.py code begins by importing the FormatData class. It then creates a NewData object, a list, by calling FormatData.ReadData(). Notice that the use of a class method is the right choice in this case as well because it makes the code shorter and simpler. The application then uses a for loop to display the NewData content. CHAPTER 16 Storing Data in Files 317 5."}, {"filename": "Beginning Programming with Python.pdf", "text": "reposi- tory before you import the new one. 4. Type the following code into the application notebook \u2014 pressing Enter after each line: from BPPD_16_FormattedData import FormatData3 NewData = FormatData3.ReadData(\"TestFile.csv\") for Entry in NewData: print(Entry) The ReadCSV.py code begins by importing the FormatData class. It then creates a NewData object, a list, by calling FormatData.ReadData(). Notice that the use of a class method is the right choice in this case as well because it makes the code shorter and simpler. The application then uses a for loop to display the NewData content. CHAPTER 16 Storing Data in Files 317 5. Restart the kernel and then click Run Cell. You see the output shown in Figure 16-4. Notice that this output looks similar to the output in Figure 16-1, even though the data was written to disk and read back in. This is how applications that read and write data are supposed to work. The data should appear the same after you read it in as it did when you wrote it out to disk. Otherwise, the application is a failure because it has modified the data. Updating File Content Some developers treat updating a file as something complex. It can be complex if you view it as a single task. However, updates actually consist of three activities: 1. Read the file content into memory. 2. Modify the in-memory presentation of the data. 3. Write the resulting content to permanent storage. In most applications, you can further break down the second step of modifying the in-memory presentation of the data. An application can provide some or all of these features as part of the modification process: \u00bb \u00bb Provide an onscreen presentation of the data. \u00bb \u00bb Allow additions to the data list. \u00bb \u00bb Allow deletions from the data list. \u00bb \u00bb Make changes to existing data, which can actually be implemented by adding a new record with the changed data and deleting the old record. So far in this chapter, you have performed all but one of the activities in these two lists. You\u2019ve already read file content and written file content. In the modification list, you\u2019ve added data to a list and presented the data onscreen. The only inter- esting activity that you haven\u2019t performed is deleting data from a list. FIGURE 16-4: The application input after it has been processed. 318 PART 4 Performing Advanced Tasks The modification of data is often performed as a two-part process of creating a new record that starts with the data from the old record and then deleting the old record after the new record is in place in the list. Don\u2019t get into a rut by thinking that you must perform every activity mentioned in this section for every application. A monitoring program wouldn\u2019t need to dis- play the data onscreen. In fact, doing so might be harmful (or at least inconve- nient). A data logger only creates new entries \u2014 it never deletes or modifies them. An email application"}, {"filename": "Beginning Programming with Python.pdf", "text": "modification of data is often performed as a two-part process of creating a new record that starts with the data from the old record and then deleting the old record after the new record is in place in the list. Don\u2019t get into a rut by thinking that you must perform every activity mentioned in this section for every application. A monitoring program wouldn\u2019t need to dis- play the data onscreen. In fact, doing so might be harmful (or at least inconve- nient). A data logger only creates new entries \u2014 it never deletes or modifies them. An email application usually allows the addition of new records and deletion of old records, but not modification of existing records. On the other hand, a word \u00adprocessor implements all the features mentioned. What you implement and how you implement it depends solely on the kind of application you create. Separating the user interface from the activities that go on behind the user inter- face is important. To keep things simple, this example focuses on what needs to go on behind the user interface to make updates to the file you created in the \u201cCreating a File\u201d section, earlier in this chapter. The following steps demonstrate how to read, modify, and write a file in order to update it. The updates consist of an addition, a deletion, and a change. To allow you to run the application more than once, the updates are actually sent to another file. 1. Type the following code into the application notebook \u2014 pressing Enter after each line: from BPPD_16_FormattedData import FormatData3 import os.path if not os.path.isfile(\"Testfile.csv\"): print(\"Please run the CreateFile.py example!\") quit() NewData = FormatData3.ReadData(\"TestFile.csv\") for Entry in NewData: print(Entry) print(\"\\r\\nAdding a record for Harry.\") NewRecord = \"'Harry', 23, False\" NewData.append(NewRecord) for Entry in NewData: print(Entry) print(\"\\r\\nRemoving Doug's record.\") Location = NewData.index(\"'Doug', 52, True\") Record = NewData[Location] CHAPTER 16 Storing Data in Files 319 NewData.remove(Record) for Entry in NewData: print(Entry) print(\"\\r\\nModifying Sally's record.\") Location = NewData.index(\"'Sally', 47, False\") Record = NewData[Location] Split = Record.split(\",\") NewRecord = FormatData3(Split[0].replace(\"'\", \"\"), int(Split[1]), bool(Split[2])) NewRecord.Married = True NewRecord.Age = 48 NewData.append(NewRecord.__str__()) NewData.remove(Record) for Entry in NewData: print(Entry) FormatData3.SaveData(\"ChangedFile.csv\", NewData) This example has quite a bit going on. First, it checks to ensure that the Testfile.csv file is actually present for processing. This is a check that you should always perform when you expect a file to be present. In this case, you aren\u2019t creating a new file, you\u2019re updating an existing file, so the file must be present. If the file isn\u2019t present, the application ends. The next step is to read the data into NewData. This part of the process looks much like the data reading example earlier in the chapter. You have already seen code for using list functions in Chapter 13. This example uses those functions to perform practical work. The append() function adds a new record to NewData. However, notice that the data is added as a string, not as a FormatData object. The data is stored"}, {"filename": "Beginning Programming with Python.pdf", "text": "you aren\u2019t creating a new file, you\u2019re updating an existing file, so the file must be present. If the file isn\u2019t present, the application ends. The next step is to read the data into NewData. This part of the process looks much like the data reading example earlier in the chapter. You have already seen code for using list functions in Chapter 13. This example uses those functions to perform practical work. The append() function adds a new record to NewData. However, notice that the data is added as a string, not as a FormatData object. The data is stored as strings on disk, so that\u2019s what you get when the data is read back in. You can either add the new data as a string or create a FormatData object and then use the __str__() method to output the data as a string. The next step is to remove a record from NewData. To perform this task, you must first find the record. Of course, that\u2019s easy when working with just four records (remember that NewData now has a record for Harry in it). When working with a large number of records, you must first search for the record using the index() function. This act provides you with a number containing the location of the record, which you can then use to retrieve the actual record. After you have the actual record, you can remove it using the remove() function. 320 PART 4 Performing Advanced Tasks Modifying Sally\u2019s record looks daunting at first, but again, most of this code is part of dealing with the string storage on disk. When you obtain the record from NewData, what you receive is a single string with all three values in it. The split() function produces a list containing the three entries as strings, which still won\u2019t work for the application. In addition, Sally\u2019s name is enclosed in both double and single quotes. The simplest way to manage the record is to create a FormatData object and to convert each of the strings into the proper form. This means removing the extra quotes from the name, converting the second value to an int, and converting the third value to a bool. The FormatData class doesn\u2019t provide accessors, so the application modifies both the Married and Age fields directly. Using accessors (getter methods that provide read-only access and setter methods that provide write-only access) is a better policy. The application then appends the new record to and removes the existing record from NewData. Notice how the code uses NewRecord.__str__() to convert the new record from a FormatData object to the required string. The final act is to save the changed record. Normally, you\u2019d use the same file to save the data. However, the example saves the data to a different file in order to allow examination of both the old and new data. 2. Click Run Cell. You see the output shown in Figure 16-5. Notice that the application lists the records after"}, {"filename": "Beginning Programming with Python.pdf", "text": "access) is a better policy. The application then appends the new record to and removes the existing record from NewData. Notice how the code uses NewRecord.__str__() to convert the new record from a FormatData object to the required string. The final act is to save the changed record. Normally, you\u2019d use the same file to save the data. However, the example saves the data to a different file in order to allow examination of both the old and new data. 2. Click Run Cell. You see the output shown in Figure 16-5. Notice that the application lists the records after each change so that you can see the status of NewData. This is actually a useful troubleshooting technique for your own applications. Of course, you want to remove the display code before you release the applica- tion to production. FIGURE 16-5: The application shows each of the modifications in turn. CHAPTER 16 Storing Data in Files 321 3. Open the ChangedFile.csv file using an appropriate application. You see output similar to that shown in Figure 16-6. This output is shown using WordPad, but the data won\u2019t change when you use other applications. So, even if your screen doesn\u2019t quite match Figure 16-6, you should still see the same data. Deleting a File The previous section of this chapter, \u201cUpdating File Content,\u201d explains how to add, delete, and update records in a file. However, at some point you may need to delete the file. The following steps describe how to delete files that you no longer need. This example also appears with the downloadable source code as DeleteCSV.py. 1. Type the following code into the application notebook \u2014 pressing Enter after each line: import os os.remove(\"ChangedFile.csv\") print(\"File Removed!\") The task looks simple in this case, and it is. All you need to do to remove a file is call os.remove() with the appropriate filename and path (as needed, Python defaults to the current directory, so you don\u2019t need to specify a path if the file you want to remove is in the default directory). The ease with which you can perform this task is almost scary because it\u2019s too easy. Putting safeguards FIGURE 16-6: The updated information appears as expected in Changed File.csv. 322 PART 4 Performing Advanced Tasks in place is always a good idea. You may want to remove other items, so here are other functions you should know about: \u2022 os.rmdir(): Removes the specified directory. The directory must be empty or Python will display an exception message. \u2022 shutil.rmtree(): Removes the specified directory, all subdirectories, and all files. This function is especially dangerous because it removes every- thing without checking (Python assumes that you know what you\u2019re doing). As a result, you can easily lose data using this function. 2. Click Run Cell. The application displays the File Removed! message. When you look in the directory that originally contained the ChangedFile.csv file, you see that the file is gone. CHAPTER 17 Sending an Email 323 Chapter 17 Sending"}, {"filename": "Beginning Programming with Python.pdf", "text": "about: \u2022 os.rmdir(): Removes the specified directory. The directory must be empty or Python will display an exception message. \u2022 shutil.rmtree(): Removes the specified directory, all subdirectories, and all files. This function is especially dangerous because it removes every- thing without checking (Python assumes that you know what you\u2019re doing). As a result, you can easily lose data using this function. 2. Click Run Cell. The application displays the File Removed! message. When you look in the directory that originally contained the ChangedFile.csv file, you see that the file is gone. CHAPTER 17 Sending an Email 323 Chapter 17 Sending an Email T his chapter helps you understand the process of sending an email using Python. More important, this chapter is generally about helping you under- stand what happens when you communicate outside the local PC. Even though this chapter is specifically about email, it also contains principles you can use when performing other tasks. For example, when working with an external service, you often need to create the same sort of packaging as you do for an email. So, the information you see in this chapter can help you understand all sorts of communication needs. To make working with email as easy as possible, this chapter uses standard mail as a real-world equivalent of email. The comparison is apt. Email was actually modeled on real-world mail. Originally, the term email was used for any sort of electronic document transmission, and some forms of it required the sender and recipient to be online at the same time. As a result, you may find some confusing references online about the origins and development of email. This chapter views email as it exists today \u2014 as a storing and forwarding mechanism for exchanging documents of various types. The examples in this chapter rely on the availability of a Simple Mail Transfer Protocol (SMTP) server. If that sounds like Greek to you, read the sidebar entitled \u201cConsidering the SMTP server\u201d that appears later in the chapter. You can find the downloadable source code for the examples in this chapter in the BPPD_17_ Sending_an_Email.ipynb file, as described in the book\u2019s Introduction. IN THIS CHAPTER \u00bb \u00bb Defining the series of events for sending an email \u00bb \u00bb Developing an email application \u00bb \u00bb Testing the email application 324 PART 4 Performing Advanced Tasks Understanding What Happens When You Send Email Email has become so reliable and so mundane that most people don\u2019t understand what a miracle it is that it works at all. Actually, the same can be said of the real mail service. When you think about it, the likelihood of one particular letter leav- ing one location and ending up precisely where it should at the other end seems impossible \u2014 mind-boggling, even. However, both email and its real-world equivalent have several aspects in common that improve the likelihood that they\u2019ll actually work as intended. The following sections examine what happens when you write an email, click Send, and the recipient receives"}, {"filename": "Beginning Programming with Python.pdf", "text": "reliable and so mundane that most people don\u2019t understand what a miracle it is that it works at all. Actually, the same can be said of the real mail service. When you think about it, the likelihood of one particular letter leav- ing one location and ending up precisely where it should at the other end seems impossible \u2014 mind-boggling, even. However, both email and its real-world equivalent have several aspects in common that improve the likelihood that they\u2019ll actually work as intended. The following sections examine what happens when you write an email, click Send, and the recipient receives it on the other end. You might be surprised at what you discover. CONSIDERING THE SIMPLE MAIL TRANSFER PROTOCOL When you work with email, you see a lot of references to Simple Mail Transfer Protocol (SMTP). Of course, the term looks really technical, and what happens under the covers truly is technical, but all you really need to know is that it works. On the other hand, understanding SMTP a little more than as a \u201cblack box\u201d that takes an email from the sender and spits it out at the other end to the recipient can be useful. Taking the term apart (in reverse order), you see these elements: \u2022 Protocol: A standard set of rules. Email work by requiring rules that everyone agrees upon. Otherwise, email would become unreliable. Mail transfer: Documents are sent from one place to another, much the same as what the post office does with real mail. In email\u2019s case, the transfer process relies on short commands that your email application issues to the SMTP server. For example, the MAIL FROM command tells the SMTP server who is sending the email, while the RCPT TO command states where to send it. \u2022 Simple: States that this activity goes on with the least amount of effort possible. The fewer parts to anything, the more reliable it becomes. If you were to look at the rules for transferring the information, you would find they\u2019re anything but simple. For example, RFC1123 is a standard that specifies how Internet hosts are supposed to work (see http://www.faqs.org/rfcs/rfc1123.html for details). These rules are used by more than one Internet technology, which explains why most of them appear to work about the same (even though their resources and goals may be different). CHAPTER 17 Sending an Email 325 Viewing email as you do a letter The best way to view email is the same as how you view a letter. When you write a letter, you provide two pieces of paper as a minimum. The first contains the content of the letter, the second is an envelope. Assuming that the postal \u00adservice is honest, the content is never examined by anyone other than the recipient. The same can be said of email. An email actually consists of these components: \u00bb \u00bb Message: The content of the email, which is actually composed of two subparts: \u2022 Header: The part of the email content"}, {"filename": "Beginning Programming with Python.pdf", "text": "do a letter The best way to view email is the same as how you view a letter. When you write a letter, you provide two pieces of paper as a minimum. The first contains the content of the letter, the second is an envelope. Assuming that the postal \u00adservice is honest, the content is never examined by anyone other than the recipient. The same can be said of email. An email actually consists of these components: \u00bb \u00bb Message: The content of the email, which is actually composed of two subparts: \u2022 Header: The part of the email content that includes the subject, the list of recipients, and other features, such as the urgency of the email. \u2022 Body: The part of the email content that contains the actual message. The message can be in plain text, formatted as HTML, and consisting of one or more documents, or it can be a combination of all these elements. \u00bb \u00bb Envelope: A container for the message. The envelope provides sender and recipient information, just as the envelope for a physical piece of mail provides. However, an email doesn\u2019t include a stamp. When working with email, you create a message using an email application. As part of the email application setup, you also define account information. When you click send: 1. The email application wraps up your message, with the header first, in an envelope that includes both your sender and the recipient\u2019s information. 2. The email application uses the account information to contact the SMTP server and send the message for you. 3. The SMTP server reads only the information found in the message envelope and redirects your email to the recipient. 4. The recipient email application logs on to the local server, picks up the email, and then displays only the message part for the user. Another, entirely different standard, RFC2821, describes how SMTP specifically imple- ments the rules found in RFC1123 (see http://www.faqs.org/rfcs/rfc2821.html for details). The point is, a whole lot of rules are written in jargon that only a true geek could love (and even the geeks aren\u2019t sure). If you want a plain-English explanation of how email works, check out the article at http://computer.howstuffworks. com/e-mail-messaging/email.htm. Page 4 of this article (http://computer. howstuffworks.com/e-mail-messaging/email3.htm) describes the commands that SMTP uses to send information hither and thither across the Internet. In fact, if you want the shortest possible description of SMTP, page 4 is probably the right place to look. 326 PART 4 Performing Advanced Tasks The process is a little more complex than this explanation, but this is essentially what happens. In fact, it\u2019s much the same as the process used when working with physical letters in that the essential steps are the same. With physical mail, the email application is replaced by you on one end and the recipient at the other. The SMTP server is replaced by the post office and the employees who work there (including the postal carriers). However, someone generates a message, the"}, {"filename": "Beginning Programming with Python.pdf", "text": "of SMTP, page 4 is probably the right place to look. 326 PART 4 Performing Advanced Tasks The process is a little more complex than this explanation, but this is essentially what happens. In fact, it\u2019s much the same as the process used when working with physical letters in that the essential steps are the same. With physical mail, the email application is replaced by you on one end and the recipient at the other. The SMTP server is replaced by the post office and the employees who work there (including the postal carriers). However, someone generates a message, the \u00admessage is transferred to a recipient, and the recipient receives the message in both cases. Defining the parts of the envelope There is a difference in how the envelope for an email is configured and how it\u2019s actually handled. When you view the envelope for an email, it looks just like a let- ter in that it contains the address of the sender and the address of the recipient. It may not look physically like an envelope, but the same components are there. When you visualize a physical envelope, you see certain specifics, such as the sender\u2019s name, street address, city, state, and zip code. The same is true for the recipient. These elements define, in physical terms, where the postal carrier should deliver the letter or return the letter when it can\u2019t be delivered. However, when the SMTP server processes the envelope for an email, it must look at the specifics of the address, which is where the analogy of a physical envelope used for mail starts to break down a little. An email address contains different information from a physical address. In summary, here is what the email address contains: \u00bb \u00bb Host: The host is akin to the city and state used by a physical mail envelope. A host address is the address used by the card that is physically connected to the Internet, and it handles all the traffic that the Internet consumes or provides for this particular machine. A PC can use Internet resources in a lot of ways, but the host address for all these uses is the same. \u00bb \u00bb Port: The port is akin to the street address used by a physical mail envelope. It specifies which specific part of the system should receive the message. For example, an SMTP server used for outgoing messages normally relies on port 25. However, the Point-of-Presence (POP3) server used for incoming email messages usually relies on port 110. Your browser typically uses port 80 to communicate with websites. However, secure websites (those that use https as a protocol, rather than http) rely on port 443 instead. You can see a list of typical ports at http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers. \u00bb \u00bb Local hostname: The local hostname is the human-readable form of the combination of the host and port. For example, the website http://www. myplace.com might resolve to an address of 55.225.163.40:80 (where the first four numbers are the"}, {"filename": "Beginning Programming with Python.pdf", "text": "for outgoing messages normally relies on port 25. However, the Point-of-Presence (POP3) server used for incoming email messages usually relies on port 110. Your browser typically uses port 80 to communicate with websites. However, secure websites (those that use https as a protocol, rather than http) rely on port 443 instead. You can see a list of typical ports at http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers. \u00bb \u00bb Local hostname: The local hostname is the human-readable form of the combination of the host and port. For example, the website http://www. myplace.com might resolve to an address of 55.225.163.40:80 (where the first four numbers are the host address and the number after the colon is the port). CHAPTER 17 Sending an Email 327 Python takes care of these details behind the scenes for you, so normally you don\u2019t need to worry about them. However, it\u2019s nice to know that this information is available. Now that you have a better idea of how the address is put together, it\u2019s time to look at it more carefully. The following sections describe the envelope of an email in more precise terms. Host A host address is the identifier for a connection to a server. Just as an address on an envelope isn\u2019t the actual location, neither is the host address the actual server. It merely specifies the location of the server. The connection used to access a combination of a host address and a port is called a socket. Just who came up with this odd name and why isn\u2019t important. What is important is that you can use the socket to find out all kinds of information that\u2019s useful in understanding how email works. The following steps help you see host- names and host addresses at work. More important, you begin to understand the whole idea of an email envelope and the addresses it contains. 1. Open a new notebook. You can also use the downloadable source file, BPPD_17_Sending_an_Email. ipynb, which contains the application code. 2. Type import socket and press Enter. Before you can work with sockets, you must import the socket library. This library contains all sorts of confusing attributes, so use it with caution. However, this library also contains some interesting functions that help you see how the Internet addresses work. 3. Type print(socket.gethostbyname(\u201clocalhost\u201d)) and press Enter. You see a host address as output. In this case, you should see 127.0.0.1 as output because localhost is a standard hostname. The address, 127.0.0.1, is associated with the host name, localhost. 4. Type print(socket.gethostbyaddr(\u201c127.0.0.1\u201d)) and click Run Cell. Be prepared for a surprise. You get a tuple as output, as shown in Figure 17-1. However, instead of getting localhost as the name of the host, you get the name of your machine. You use localhost as a common name for the local machine, but when you specify the address, you get the machine name instead. In this case, Main is the name of my personal machine. The name you see on your screen will correspond to your"}, {"filename": "Beginning Programming with Python.pdf", "text": "is a standard hostname. The address, 127.0.0.1, is associated with the host name, localhost. 4. Type print(socket.gethostbyaddr(\u201c127.0.0.1\u201d)) and click Run Cell. Be prepared for a surprise. You get a tuple as output, as shown in Figure 17-1. However, instead of getting localhost as the name of the host, you get the name of your machine. You use localhost as a common name for the local machine, but when you specify the address, you get the machine name instead. In this case, Main is the name of my personal machine. The name you see on your screen will correspond to your machine. 328 PART 4 Performing Advanced Tasks 5. Type print(socket.gethostbyname(\u201cwww.johnmuellerbooks.com\u201d)) and click Run Cell. You see the output shown in Figure 17-2. This is the address for my website. The point is that these addresses work wherever you are and whatever you\u2019re doing \u2014 just like those you place on a physical envelope. The physical mail uses addresses that are unique across the world, just as the Internet does. Port A port is a specific entryway for a server location. The host address specifies the location, but the port defines where to get in. Even if you don\u2019t specify a port every time you use a host address, the port is implied. Access is always granted using a combination of the host address and the port. The following steps help illustrate how ports work with the host address to provide server access: 1. Type import socket and press Enter. Remember that a socket provides both host address and port information. You use the socket to create a connection that includes both items. FIGURE 17-1: The localhost address actually corresponds to your machine. FIGURE 17-2: The addresses that you use to send email are unique across the Internet. CHAPTER 17 Sending an Email 329 2. Type socket.getaddrinfo(\u201clocalhost\u201d, 110) and click Run Cell. The first value is the name of a host you want to obtain information about. The second value is the port on that host. In this case, you obtain the information about localhost port 110. You see the output shown in Figure 17-3. The output consists of two tuples: one for the Internet Protocol version 6 (IPv6) output and one for the Internet Protocol version 4 (IPv4) address. Each of these tuples contains five entries, four of which you really don\u2019t need to worry about because you\u2019ll likely never need them. However, the last entry, ('127.0.0.1', 110), shows the address and port for localhost port 110. 3. Type socket.getaddrinfo(\u201cjohnmuellerbooks.com\u201d, 80) and press Enter. Figure 17-4 shows the output from this command. Notice that this Internet location provides only an IPv4 address, not an IPv6, address, for port 80. The socket.getaddrinfo() method provides a useful method for determining how you can access a particular location. Using IPv6 provides significant benefits over IPv4 (see http://www.networkcomputing.com/networking/ six-benefits-of-ipv6/d/d-id/1232791 for details), but many Internet locations provide only IPv4 support now. (If you live in a larger city, you\u2019ll probably see both an IPv4 and"}, {"filename": "Beginning Programming with Python.pdf", "text": "need them. However, the last entry, ('127.0.0.1', 110), shows the address and port for localhost port 110. 3. Type socket.getaddrinfo(\u201cjohnmuellerbooks.com\u201d, 80) and press Enter. Figure 17-4 shows the output from this command. Notice that this Internet location provides only an IPv4 address, not an IPv6, address, for port 80. The socket.getaddrinfo() method provides a useful method for determining how you can access a particular location. Using IPv6 provides significant benefits over IPv4 (see http://www.networkcomputing.com/networking/ six-benefits-of-ipv6/d/d-id/1232791 for details), but many Internet locations provide only IPv4 support now. (If you live in a larger city, you\u2019ll probably see both an IPv4 and an IPv6 address.) 4. Type socket.getservbyport(25) and press Enter. You see the output shown in Figure 17-5. The socket.getservbyport() method provides the means to determine how a particular port is used. Port 25 is always dedicated to SMTP support on any server. So, when you access 127.0.0.1:25, you\u2019re asking for the SMTP server on localhost. In short, a port provides a specific kind of access in many situations. FIGURE 17-3: The localhost host provides both an IPv6 and an IPv4 address. FIGURE 17-4: Most Internet locations provide only an IPv4 address. 330 PART 4 Performing Advanced Tasks Some people assume that the port information is always provided. However, this isn\u2019t always the case. Python will provide a default port when you don\u2019t supply one, but relying on the default port is a bad idea because you can\u2019t be certain which service will be accessed. In addition, some systems use nonstandard port assignments as a security feature. Always get into the habit of using the port number and ensuring that you have the right one for the task at hand. Local hostname A hostname is simply the human-readable form of the host address. Humans don\u2019t really understand 127.0.0.1 very well (and the IPv6 addresses make even less sense). However, humans do understand localhost just fine. There is a special server and setup to translate human-readable hostnames to host addresses, but you really don\u2019t need to worry about it for this book (or programming in general). When your application suddenly breaks for no apparent reason, it helps to know that one does exist, though. The \u201cHost\u201d section, earlier in this chapter, introduces you to the hostname to a certain extent through the use of the socket.gethostbyaddr() method, whereby an address is translated into a hostname. You saw the process in reverse using the socket.gethostbyname() method. The following steps help you understand some nuances about working with the hostname: 1. Type import socket and press Enter. 2. Type socket.gethostname() and click Run Cell. You see the name of the local system, as shown in Figure 17-6. The name of your system will likely vary from mine, so your output will be different than that shown in Figure 17-6, but the idea is the same no matter which system you use. FIGURE 17-5: Standardized ports provide specific services on every server. FIGURE 17-6: Sometimes you need to know the name of the local system."}, {"filename": "Beginning Programming with Python.pdf", "text": "the socket.gethostbyname() method. The following steps help you understand some nuances about working with the hostname: 1. Type import socket and press Enter. 2. Type socket.gethostname() and click Run Cell. You see the name of the local system, as shown in Figure 17-6. The name of your system will likely vary from mine, so your output will be different than that shown in Figure 17-6, but the idea is the same no matter which system you use. FIGURE 17-5: Standardized ports provide specific services on every server. FIGURE 17-6: Sometimes you need to know the name of the local system. CHAPTER 17 Sending an Email 331 3. Type socket.gethostbyname(socket.gethostname()) and click Run Cell. You see the IP address of the local system, as shown in Figure 17-7. Again, your setup is likely different from mine, so the output you see will differ. This is a method you can use in your applications to determine the address of the sender when needed. Because it doesn\u2019t rely on any hard-coded value, the method works on any system. Defining the parts of the letter The \u201cenvelope\u201d for an email address is what the SMTP server uses to route the email. However, the envelope doesn\u2019t include any content \u2014 that\u2019s the purpose of the letter. A lot of developers get the two elements confused because the letter contains sender and receiver information as well. This information appears in the letter just like the address information that appears in a business letter \u2014 it\u2019s for the benefit of the viewer. When you send a business letter, the postal delivery person doesn\u2019t open the envelope to see the address information inside. Only the information on the envelope matters. It\u2019s because the information in the email letter is separate from its information in the envelope that nefarious individuals can spoof email addresses. The envelope potentially contains legitimate sender information, but the letter may not. (When you see the email in your email application, all that is present is the letter, not the envelope \u2014 the envelope has been stripped away by the email application.) For that matter, neither the sender nor the recipient information may be correct in the letter that you see onscreen in your email reader. The letter part of an email is actually made of separate components, just as the envelope is. Here is a summary of the three components: \u00bb \u00bb Sender: The sender information tells you who sent the message. It contains just the email address of the sender. \u00bb \u00bb Receiver: The receiver information tells you who will receive the message. This is actually a list of recipient email addresses. Even if you want to send the message to only one person, you must supply the single email address in a list. FIGURE 17-7: Avoid using hard-coded values for the local system whenever possible. 332 PART 4 Performing Advanced Tasks \u00bb \u00bb Message: Contains the information that you want the recipient to see. This information can include the following: \u2022 From:"}, {"filename": "Beginning Programming with Python.pdf", "text": "sender information tells you who sent the message. It contains just the email address of the sender. \u00bb \u00bb Receiver: The receiver information tells you who will receive the message. This is actually a list of recipient email addresses. Even if you want to send the message to only one person, you must supply the single email address in a list. FIGURE 17-7: Avoid using hard-coded values for the local system whenever possible. 332 PART 4 Performing Advanced Tasks \u00bb \u00bb Message: Contains the information that you want the recipient to see. This information can include the following: \u2022 From: The human-readable form of the sender. \u2022 To: The human-readable form of the recipients. \u2022 CC: Visible recipients who also received the message, even though they aren\u2019t the primary targets of the message. \u2022 Subject: The purpose of the message. \u2022 Documents: One or more documents, including the text message that appears with the email. Emails can actually become quite complex and lengthy. Depending on the kind of email that is sent, a message could include all sorts of additional information. However, most emails contain these simple components, and this is all the infor- mation you need to send an email from your application. The following sections describe the process used to generate a letter and its components in more detail. Defining the message Sending an empty envelope to someone will work, but it isn\u2019t very exciting. In order to make your email message worthwhile, you need to define a message. Python supports a number of methods of creating messages. However, the easiest and most reliable way to create a message is to use the Multipurpose Internet Mail Extensions (MIME) functionality that Python provides (and no, a MIME is not a silent person with white gloves who acts out in public). As with many email features, MIME is standardized, so it works the same no mat- ter which platform you use. There are also numerous forms of MIME that are all part of the email.mime module described at https://docs.python.org/3/ library/email.mime.html. Here are the forms that you need to consider most often when working with email: \u00bb \u00bb MIMEApplication: Provides a method for sending and receiving application input and output \u00bb \u00bb MIMEAudio: Contains an audio file \u00bb \u00bb MIMEImage: Contains an image file \u00bb \u00bb MIMEMultipart: Allows a single message to contain multiple subparts, such as including both text and graphics in a single message \u00bb \u00bb MIMEText: Contains text data that can be in ASCII, HTML, or another stan- dardized format CHAPTER 17 Sending an Email 333 Although you can create any sort of an email message with Python, the easiest type to create is one that contains plain text. The lack of formatting in the content lets you focus on the technique used to create the message, rather than on the message content. The following steps help you understand how the message-creating process works, but you won\u2019t actually send the message anywhere. 1. Type the following code (pressing"}, {"filename": "Beginning Programming with Python.pdf", "text": "graphics in a single message \u00bb \u00bb MIMEText: Contains text data that can be in ASCII, HTML, or another stan- dardized format CHAPTER 17 Sending an Email 333 Although you can create any sort of an email message with Python, the easiest type to create is one that contains plain text. The lack of formatting in the content lets you focus on the technique used to create the message, rather than on the message content. The following steps help you understand how the message-creating process works, but you won\u2019t actually send the message anywhere. 1. Type the following code (pressing Enter after each line): from email.mime.text import MIMEText msg = MIMEText(\"Hello There\") msg['Subject'] = \"A Test Message\" msg['From']='John Mueller <John@JohnMuellerBooks.com>' msg['To'] = 'John Mueller <John@JohnMuellerBooks.com>' This is a basic plain-text message. Before you can do anything, you must import the required class, which is MIMEText. If you were creating some other sort of message, you\u2019d need to import other classes or import the email.mime module as a whole. The MIMEText() constructor requires message text as input. This is the body of your message, so it might be quite long. In this case, the message is relatively short \u2014 just a greeting. At this point, you assign values to standard attributes. The example shows the three common attributes that you always define: Subject, From, and To. The two address fields, From and To, contain both a human-readable name and the email address. All you have to include is the email address. 2. Type msg.as_string() and click Run Cell. You see the output shown in Figure 17-8. This is how the message actually looks. If you have ever looked under the covers at the messages produced by your email application, the text probably looks familiar. The Content-Type reflects the kind of message you created, which is a plain-text message. The charset tells what kind of characters are used in the message so that the recipient knows how to handle them. The MIME-Version specifies the version of MIME used to create the message so that the recipient knows whether it can handle the content. Finally, the Context-Transfer- Encoding determines how the message is converted into a bit stream before it is sent to the recipient. 334 PART 4 Performing Advanced Tasks Specifying the transmission An earlier section (\u201cDefining the parts of the envelope\u201d) describes how the enve- lope is used to transfer the message from one location to another. The process of sending the message entails defining a transmission method. Python actually cre- ates the envelope for you and performs the transmission, but you must still define the particulars of the transmission. The following steps help you understand the simplest approach to transmitting a message using Python. These steps won\u2019t result in a successful transmission unless you modify them to match your setup. Read the \u201cConsidering the SMTP server\u201d sidebar for additional information. 1. Type the following code (pressing Enter after each line and pressing Enter twice after the last line): import smtplib"}, {"filename": "Beginning Programming with Python.pdf", "text": "message from one location to another. The process of sending the message entails defining a transmission method. Python actually cre- ates the envelope for you and performs the transmission, but you must still define the particulars of the transmission. The following steps help you understand the simplest approach to transmitting a message using Python. These steps won\u2019t result in a successful transmission unless you modify them to match your setup. Read the \u201cConsidering the SMTP server\u201d sidebar for additional information. 1. Type the following code (pressing Enter after each line and pressing Enter twice after the last line): import smtplib s = smtplib.SMTP('localhost') The smtplib module contains everything needed to create the message envelope and send it. The first step in this process is to create a connection to the SMTP server, which you name as a string in the constructor. If the SMTP server that you provide doesn\u2019t exist, the application will fail at this point, saying that the host actively refused the connection. 2. Type s.sendmail(\u2018SenderAddress\u2019, [\u2018RecipientAddress\u2019], msg.as_string()) and click Run Cell. For this step to work, you must replace SenderAddress and RecipientAddress with real addresses. Don\u2019t include the human-readable form this time \u2014 the server requires only an address. If you don\u2019t include a real address, you\u2019ll definitely see an error message when you click Run Cell. You might also see an error if your email server is temporarily offline, there is a glitch in the network connection, or any of a number of other odd things occur. If you\u2019re sure that you typed everything correctly, try sending the message a second time before you panic. See the sidebar \u201cConsidering the SMTP server\u201d for additional details. FIGURE 17-8: Python adds some additional information required to make your message work. CHAPTER 17 Sending an Email 335 This is the step that actually creates the envelope, packages the email mes- sage, and sends it off to the recipient. Notice that you specify the sender and recipient information separately from the message, which the SMTP server doesn\u2019t read. Considering the message subtypes The \u201cDefining the message\u201d section, earlier in this chapter, describes the major email message types, such as application and text. However, if email had to rely on just those types, transmitting coherent messages to anyone would be difficult. The problem is that the type of information isn\u2019t explicit enough. If you send someone a text message, you need to know what sort of text it is before you can process it, and guessing just isn\u2019t a good idea. A text message could be formatted as plain text, or it might actually be an HTML page. You wouldn\u2019t know from just seeing the type, so messages require a subtype. The type is text and the subtype is html when you send an HTML page to someone. The type and subtype are separated by a forward slash, so you\u2019d see text/html if you looked at the message. Theoretically, the number of subtypes is unlimited as long as the platform has"}, {"filename": "Beginning Programming with Python.pdf", "text": "to know what sort of text it is before you can process it, and guessing just isn\u2019t a good idea. A text message could be formatted as plain text, or it might actually be an HTML page. You wouldn\u2019t know from just seeing the type, so messages require a subtype. The type is text and the subtype is html when you send an HTML page to someone. The type and subtype are separated by a forward slash, so you\u2019d see text/html if you looked at the message. Theoretically, the number of subtypes is unlimited as long as the platform has a handler defined for that subtype. However, the reality is that everyone needs to agree on the subtypes or there won\u2019t be a handler (unless you\u2019re talking about a custom application for which the two parties have agreed to a custom subtype in advance). With this in mind, you can find a listing of standard types and sub- types at http://www.freeformatter.com/mime-types-list.html. The nice thing about the table on this site is that it provides you with a common file extension associated with the subtype and a reference to obtain additional infor- mation about it. Creating the Email Message So far, you\u2019ve seen how both the envelope and the message work. Now it\u2019s time to put them together and see how they actually work. The following sections show how to create two messages. The first message is a plain-text message and the second message uses HTML formatting. Both messages should work fine with most email readers \u2014 nothing fancy is involved. Working with a text message Text messages represent the most efficient and least resource-intensive method of sending communication. However, text messages also convey the least amount of information. Yes, you can use emoticons to help get the point across, but the 336 PART 4 Performing Advanced Tasks lack of formatting can become a problem in some situations. The following steps describe how to create a simple text message using Python. 1. Type the following code into the window \u2014 pressing Enter after each line: from email.mime.text import MIMEText import smtplib msg = MIMEText(\"Hello There!\") msg['Subject'] = 'A Test Message' msg['From']='SenderAddress' msg['To'] = 'RecipientAddress' s = smtplib.SMTP('localhost') s.sendmail('SenderAddress', ['RecipientAddress'], msg.as_string()) print(\"Message Sent!\") This example is a combination of everything you\u2019ve seen so far in the chapter. However, this is the first time you\u2019ve seen everything put together. Notice that you create the message first, and then the envelope (just as you would in real life). The example will display an error if you don\u2019t replace SenderAddress and RecipientAddress with real addresses. These entries are meant only as placeholders. As with the example in the previous section, you may also encounter errors when other situations occur, so always try to send the message at least twice if you see an error the first time. See the sidebar \u201cConsidering the SMTP server\u201d for additional details. 2. Click Run Cell. The application tells you that it has sent the message to the recipient. CONSIDERING"}, {"filename": "Beginning Programming with Python.pdf", "text": "the message first, and then the envelope (just as you would in real life). The example will display an error if you don\u2019t replace SenderAddress and RecipientAddress with real addresses. These entries are meant only as placeholders. As with the example in the previous section, you may also encounter errors when other situations occur, so always try to send the message at least twice if you see an error the first time. See the sidebar \u201cConsidering the SMTP server\u201d for additional details. 2. Click Run Cell. The application tells you that it has sent the message to the recipient. CONSIDERING THE SMTP SERVER If you tried the example in this chapter without modifying it, you\u2019re probably scratching your head right now trying to figure out what went wrong. It\u2019s unlikely that your system has an SMTP server connected to localhost. The reason for the examples to use \u00adlocalhost is to provide a placeholder that you replace later with the information for your \u00adparticular setup. CHAPTER 17 Sending an Email 337 Working with an HTML message An HTML message is basically a text message with special formatting. The \u00adfollowing steps help you create an HTML email to send off. 1. Type the following code into the window \u2014 pressing Enter after each line: from email.mime.text import MIMEText import smtplib msg = MIMEText( \"<h1>A Heading</h1><p>Hello There!</p>\",\"html\") msg['Subject'] = 'A Test HTML Message' msg['From']='SenderAddress' msg['To'] = 'RecipientAddress' s = smtplib.SMTP('localhost') s.sendmail('SenderAddress', ['RecipientAddress'], msg.as_string()) print(\"Message Sent!\") In order to see the example actually work, you need an SMTP server as well as a real- world email account. Of course, you could install all the software required to create such an environment on your own system, and some developers who work extensively with email applications do just that. Most platforms come with an email package that you can install, or you can use a freely available substitute such as Sendmail, an open source product available for download at https://www.sendmail.com/sm/open_ source/download/. The easiest way to see the example work is to use the same SMTP server that your email application uses. When you set up your email application, you either asked the email application to detect the SMTP server or you supplied the SMTP server on your own. The configuration settings for your email application should con- tain the required information. The exact location of this information varies widely by email application, so you need to look at the documentation for your particular product. No matter what sort of SMTP server you eventually find, you need to have an account on that server in most cases to use the functionality it provides. Replace the information in the examples with the information for your SMTP server, such as smtp.myisp.com, along with your email address for both sender and receiver. Otherwise, the example won\u2019t work. 338 PART 4 Performing Advanced Tasks The example follows the same flow as the text message example in the previous section. However, notice that the message now contains HTML tags. You create an"}, {"filename": "Beginning Programming with Python.pdf", "text": "look at the documentation for your particular product. No matter what sort of SMTP server you eventually find, you need to have an account on that server in most cases to use the functionality it provides. Replace the information in the examples with the information for your SMTP server, such as smtp.myisp.com, along with your email address for both sender and receiver. Otherwise, the example won\u2019t work. 338 PART 4 Performing Advanced Tasks The example follows the same flow as the text message example in the previous section. However, notice that the message now contains HTML tags. You create an HTML body, not an entire page. This message will have an H1 header and a paragraph. The most important part of this example is the text that comes after the message. The \"html\" argument changes the subtype from text/plain to text/html, so the recipient knows to treat the message as HTML content. If you don\u2019t make this change, the recipient won\u2019t see the HTML output. 2. Click Run Cell. The application tells you that it has sent the message to the recipient. Seeing the Email Output At this point, you have between one and three application-generated messages (depending on how you\u2019ve gone through the chapter) waiting in your Inbox. To see the messages you created in earlier sections, your email application must receive the messages from the server \u2014 just as it would with any email. Figure 17-9 shows an example of the HTML version of the message when viewed in Output. (Your message will likely look different depending on your platform and email application.) FIGURE 17-9: The HTML output contains a header and a paragraph as expected. CHAPTER 17 Sending an Email 339 If your email application offers the capability to look at the message source, you find that the message actually does contain the information you saw earlier in the chapter. Nothing is changed or different about it because after it leaves the appli- cation, the message isn\u2019t changed in any way during its trip. The point of creating your own application to send and receive email isn\u2019t \u00adconvenience \u2014 using an off-the-shelf application serves that purpose much bet- ter. The point is flexibility. As you can see from this short chapter on the subject, you control every aspect of the message when you create your own application. Python hides much of the detail from view, so what you really need to worry about are the essentials of creating and transmitting the message using the correct arguments. 5 The Part of Tens IN THIS PART . . . Continue your Python learning experience. Earn a living using Python. Use tools to make working with Python easier. Enhance Python using libraries. CHAPTER 18 Ten Amazing Programming Resources 343 Chapter 18 Ten Amazing Programming Resources T his book is a great start to your Python programming experience, but you\u2019ll want additional resources at some point. This chapter provides you with ten amazing programming resources that you can use to make"}, {"filename": "Beginning Programming with Python.pdf", "text": "you really need to worry about are the essentials of creating and transmitting the message using the correct arguments. 5 The Part of Tens IN THIS PART . . . Continue your Python learning experience. Earn a living using Python. Use tools to make working with Python easier. Enhance Python using libraries. CHAPTER 18 Ten Amazing Programming Resources 343 Chapter 18 Ten Amazing Programming Resources T his book is a great start to your Python programming experience, but you\u2019ll want additional resources at some point. This chapter provides you with ten amazing programming resources that you can use to make your develop- ment experience better. By using these resources, you save both time and energy in creating your next dazzling Python application. Of course, this chapter is only the beginning of your Python resource experience. Reams of Python documentation are out there, along with mountains of Python code. One might be able to write an entire book (or two) devoted solely to the Python libraries. This chapter is designed to provide you with ideas of where to look for additional information that\u2019s targeted toward meeting your specific needs. Don\u2019t let this be the end of your search \u2014 consider this chapter the start of your search instead. IN THIS CHAPTER \u00bb \u00bb Getting better information about Python \u00bb \u00bb Creating online applications using Python \u00bb \u00bb Extending the Python programming environment \u00bb \u00bb Improving both application and developer performance 344 PART 5 The Part of Tens Working with the Python Documentation Online An essential part of working with Python is knowing what is available in the base language and how to extend it to perform other tasks. The Python documentation at https://docs.python.org/3/ (created for the 3.6.x version of the product at the time of this writing; it may be updated by the time you read this chapter) con- tains a lot more than just the reference to the language that you receive as part of a download. In fact, you see these topics discussed as part of the documentation: \u00bb \u00bb New features in the current version of the language \u00bb \u00bb Access to a full-fledged tutorial \u00bb \u00bb Complete library reference \u00bb \u00bb Complete language reference \u00bb \u00bb How to install and configure Python \u00bb \u00bb How to perform specific tasks in Python \u00bb \u00bb Help with installing Python modules from other sources (as a means of extending Python) \u00bb \u00bb Help with distributing Python modules you create so that others can use them \u00bb \u00bb How to extend Python using C/C++ and then embed the new features you create \u00bb \u00bb Complete reference for C/C++ developers who want to extend their applica- tions using Python \u00bb \u00bb Frequently Asked Questions (FAQ) pages All this information is provided in a form that is easy to access and use. In addition to the usual table-of-contents approach to finding information, you have access to a number of indexes. For example, if you aren\u2019t interested in anything but locating a particular module,"}, {"filename": "Beginning Programming with Python.pdf", "text": "\u00bb \u00bb Help with distributing Python modules you create so that others can use them \u00bb \u00bb How to extend Python using C/C++ and then embed the new features you create \u00bb \u00bb Complete reference for C/C++ developers who want to extend their applica- tions using Python \u00bb \u00bb Frequently Asked Questions (FAQ) pages All this information is provided in a form that is easy to access and use. In addition to the usual table-of-contents approach to finding information, you have access to a number of indexes. For example, if you aren\u2019t interested in anything but locating a particular module, class, or method, you can use the Global Module Index. The https://docs.python.org/3/ web page is also the place where you report problems with Python (the specific URL is https://docs.python.org/3/bugs. html). It\u2019s important to work through problems you\u2019re having with the product, but as with any other language, Python does have bugs in it. Locating and destroy- ing the bugs will only make Python a better language. CHAPTER 18 Ten Amazing Programming Resources 345 You do have some flexibility in using the online documentation. Two drop-down list boxes appear in the upper-left corner for the documentation page. The first lets you choose your preferred language (as long as it\u2019s English, French, or Japa- nese, as of this writing). The second provides access to documentation for earlier versions of Python, including version 2.7. Using the LearnPython.org Tutorial Many tutorials are available for Python and many of them do a great job, but they\u2019re all lacking a special feature that you find when using the LearnPython.org tutorial at http://www.learnpython.org/: interactivity. Instead of just reading about a Python feature, you read it and then try it yourself using the interactive feature of the site. You may have already worked through all the material in the simple tutorials in this book. However, you likely haven\u2019t worked through the advanced tutorials at LearnPython.org yet. These tutorials present the following topics: \u00bb \u00bb Generators: Specialized functions that return iterators. \u00bb \u00bb List comprehensions: A method to generate new lists based on existing lists. \u00bb \u00bb Multiple function arguments: An extension of the methods described in the \u201cUsing methods with variable argument lists\u201d in Chapter 15. \u00bb \u00bb Regular expressions: Wildcard setups used to match patterns of characters, such as telephone numbers. \u00bb \u00bb Exception handling: An extension of the methods described in Chapter 10. \u00bb \u00bb Sets: Demonstrates a special kind of list that never contains duplicate entries. \u00bb \u00bb Serialization: Shows how to use a data storage methodology called JavaScript Object Notation (JSON). \u00bb \u00bb Partial functions: A technique for creating specialized versions of simple functions that derive from more complex functions. For example, if you have a multiply() function that requires two arguments, a partial function named double() might require only one argument that it always multiplies by 2. \u00bb \u00bb Code introspection: Provides the ability to examine classes, functions, and keywords to determine their purpose and capabilities. \u00bb \u00bb Decorator: A method for making"}, {"filename": "Beginning Programming with Python.pdf", "text": "Demonstrates a special kind of list that never contains duplicate entries. \u00bb \u00bb Serialization: Shows how to use a data storage methodology called JavaScript Object Notation (JSON). \u00bb \u00bb Partial functions: A technique for creating specialized versions of simple functions that derive from more complex functions. For example, if you have a multiply() function that requires two arguments, a partial function named double() might require only one argument that it always multiplies by 2. \u00bb \u00bb Code introspection: Provides the ability to examine classes, functions, and keywords to determine their purpose and capabilities. \u00bb \u00bb Decorator: A method for making simple modifications to callable objects. 346 PART 5 The Part of Tens Performing Web Programming by Using Python This book discusses the ins and outs of basic programming, so it relies on desktop applications because of their simplicity. However, many developers specialize in creating online applications of various sorts using Python. The Web Programming in Python site at https://wiki.python.org/moin/WebProgramming helps you make the move from the desktop to online application development. It doesn\u2019t just cover one sort of online application \u2014 it covers almost all of them (an entire book free for the asking). The tutorials are divided into these three major (and many minor) areas: \u00bb \u00bb Server \u2022 Developing server-side frameworks for applications \u2022 Creating a Common Gateway Interface (CGI) script \u2022 Providing server applications \u2022 Developing Content Management Systems (CMS) \u2022 Designing data access methods through web services solutions \u00bb \u00bb Client \u2022 Interacting with browsers and browser-based technologies \u2022 Creating browser-based clients \u2022 Accessing data through various methodologies, including web services \u00bb \u00bb Related \u2022 Creating common solutions for Python-based online computing \u2022 Interacting with DataBase Management Systems (DBMSs) \u2022 Designing application templates \u2022 Building Intranet solutions Getting Additional Libraries The Pythonware site (http://www.pythonware.com/) doesn\u2019t look all that inter- esting until you start clicking the links. It provides you with access to a number of third-party libraries that help you perform additional tasks using Python. CHAPTER 18 Ten Amazing Programming Resources 347 Although all the links provide you with useful resources, the \u201cDownloads (downloads.effbot.org)\u201d link is the one you should look at first. This download site provides you with access to \u00bb \u00bb aggdraw: A library that helps you create anti-aliased drawings. \u00bb \u00bb celementtree: An add-on to the elementtree library that makes working with XML data more efficient and faster. \u00bb \u00bb console: An interface for Windows that makes it possible to create better console applications. \u00bb \u00bb effbot: A collection of useful add-ons and utilities, including the EffNews RSS news reader. \u00bb \u00bb elementsoap: A library that helps you create Simple Object Access Protocol (SOAP) connections to Web services providers. \u00bb \u00bb elementtidy: An add-on to the elementtree library that helps you create nicer- looking and more functional XML tree displays than the standard ones in Python. \u00bb \u00bb elementtree: A library that helps you interact with XML data more efficiently than standard Python allows. \u00bb \u00bb exemaker: A utility that creates an executable"}, {"filename": "Beginning Programming with Python.pdf", "text": "for Windows that makes it possible to create better console applications. \u00bb \u00bb effbot: A collection of useful add-ons and utilities, including the EffNews RSS news reader. \u00bb \u00bb elementsoap: A library that helps you create Simple Object Access Protocol (SOAP) connections to Web services providers. \u00bb \u00bb elementtidy: An add-on to the elementtree library that helps you create nicer- looking and more functional XML tree displays than the standard ones in Python. \u00bb \u00bb elementtree: A library that helps you interact with XML data more efficiently than standard Python allows. \u00bb \u00bb exemaker: A utility that creates an executable program from your Python script so that you can execute the script just as you would any other applica- tion on your machine. \u00bb \u00bb ftpparse: A library for working with FTP sites. \u00bb \u00bb grabscreen: A library for performing screen captures. \u00bb \u00bb imaging: Provides the source distribution to the Python Imaging Library (PIL) that lets you add image-processing capabilities to the Python interpreter. Having the source lets you customize PIL to meet specific needs. \u00bb \u00bb pil: Binary installers for PIL, which make obtaining a good installation for your system easier. (There are other PIL-based libraries as well, such as pilfont \u2014 a library for adding enhanced font functionality to a PIL-based application.) \u00bb \u00bb pythondoc: A utility for creating documentation from the comments in your Python code that works much like JavaDoc. \u00bb \u00bb squeeze: A utility for converting your Python application contained in multiple files into a one- or two-file distribution that will execute as normal with the Python interpreter. \u00bb \u00bb tkinter3000: A widget-building library for Python that includes a number of subproducts. Widgets are essentially bits of code that create controls, such as buttons, to use in GUI applications. There are a number of add-ons for the tkinter3000 library, such as wckgraph, which helps you add graphing support to an application. 348 PART 5 The Part of Tens Creating Applications Faster by Using an IDE An Interactive Development Environment (IDE) helps you create applications in a specific language. The Integrated DeveLopment Environment (IDLE) editor that comes with Python works well for experimentation, but you may find it limited after a while. For example, IDLE doesn\u2019t provide the advanced debugging func- tionality that many developers favor. In addition, you may find that you want to create graphical applications, which is difficult using IDLE. The limitations in IDLE are the reason this edition of this book uses Jupyter \u00adNotebook instead of IDLE, which the first edition used. However, you may find that Jupyter doesn\u2019t meet your needs, either. You can talk to 50 developers and get little consensus as to the best tool for any job, especially when discussing IDEs. Every developer has a favorite product and isn\u2019t easily swayed to try another. Developers invest many hours learning a particular IDE and extending it to meet specific requirements (when the IDE allows such tampering). An inability (at times) to change IDEs later is why it\u2019s important"}, {"filename": "Beginning Programming with Python.pdf", "text": "in IDLE are the reason this edition of this book uses Jupyter \u00adNotebook instead of IDLE, which the first edition used. However, you may find that Jupyter doesn\u2019t meet your needs, either. You can talk to 50 developers and get little consensus as to the best tool for any job, especially when discussing IDEs. Every developer has a favorite product and isn\u2019t easily swayed to try another. Developers invest many hours learning a particular IDE and extending it to meet specific requirements (when the IDE allows such tampering). An inability (at times) to change IDEs later is why it\u2019s important to try a number of different IDEs before you settle on one. (The most common reason for not wanting to change an IDE after you select one is that the project types are incom- patible, which would mean having to re-create your projects every time you change editors, but there are many other reasons that you can find listed online.) The PythonEditors wiki at https://wiki.python.org/moin/PythonEditors \u00adprovides an extensive list of IDEs that you can try. The table provides you with particulars about each editor so that you can eliminate some of the choices immediately. Checking Your Syntax with Greater Ease The IDLE editor provides some level of syntax highlighting, which is helpful in finding errors. For example, if you mistype a keyword, it doesn\u2019t change color to the color used for keywords on your system. Seeing that it hasn\u2019t changed makes it possible for you to know to correct the error immediately, instead of having to run the application and find out later that something has gone wrong (sometimes after hours of debugging). Jupyter Notebook provides syntax highlighting as well, along with some advanced error checking not found in a standard IDE. However, for some developers, it, too, can come up short because you actually have to run the cell in order to see the error information. Some developers prefer interactive syntax checking, in which CHAPTER 18 Ten Amazing Programming Resources 349 the IDE flags the error immediately, even before the developer leaves the errant line of code. The python.vim utility (http://www.vim.org/scripts/script.php?script_ id=790) provides enhanced syntax highlighting that makes finding errors in your Python script even easier. This utility runs as a script, which makes it fast and efficient to use on any platform. In addition, you can tweak the source code as needed to meet particular needs. Using XML to Your Advantage The eXtensible Markup Language (XML) is used for data storage of all types in most applications of any substance today. You probably have a number of XML files on your system and don\u2019t even know it because XML data appears under a number of file extensions. For example, many .config files, used to hold applica- tion settings, rely on XML. In short, it\u2019s not a matter of if you\u2019ll encounter XML when writing Python applications, but when. XML has a number of advantages over other means of storing data. For example, it\u2019s platform independent. You can use"}, {"filename": "Beginning Programming with Python.pdf", "text": "to Your Advantage The eXtensible Markup Language (XML) is used for data storage of all types in most applications of any substance today. You probably have a number of XML files on your system and don\u2019t even know it because XML data appears under a number of file extensions. For example, many .config files, used to hold applica- tion settings, rely on XML. In short, it\u2019s not a matter of if you\u2019ll encounter XML when writing Python applications, but when. XML has a number of advantages over other means of storing data. For example, it\u2019s platform independent. You can use XML on any system, and the same file is readable on any other system as long as that system knows the file format. The platform independence of XML is why it appears with so many other technologies, such as Web Services. In addition, XML is relatively easy to learn and because it\u2019s text, you can usually fix problems with it without too many problems. It\u2019s important to learn about XML itself, and you can do so using an easy tutorial such as the one found on the W3Schools site at http://www.w3schools.com/xml/ default.ASP. Some developers rush ahead and later find that they can\u2019t under- stand the Python-specific materials that assume they already know how to write basic XML files. The W3Schools site is nice because it breaks up the learning pro- cess into chapters so that you can work with XML a little at a time, as follows: \u00bb \u00bb Taking a basic XML tutorial \u00bb \u00bb Validating your XML files \u00bb \u00bb Using XML with JavaScript (which may not seem important, but JavaScript is prominent in many online application scenarios) \u00bb \u00bb Gaining an overview of XML-related technologies \u00bb \u00bb Using advanced XML techniques \u00bb \u00bb Working with XML examples that make seeing XML in action easier 350 PART 5 The Part of Tens After you get the fundamentals down, you need a resource that shows how to use XML with Python. One of the better places to find this information is the Tutorials on XML Processing with Python site at https://wiki.python.org/moin/Tutorials %20on%20XML%20processing%20with%20Python. Between these two resources, you can quickly build a knowledge of XML that will have you building Python applica- tions that use XML in no time. Getting Past the Common Python Newbie Errors Absolutely everyone makes coding mistakes \u2014 even that snobby fellow down the hall who has been programming for the last 30 years (he started in kindergarten). No one likes to make mistakes and some people don\u2019t like to own up to them, but USING W3Schools TO YOUR ADVANTAGE One of the most used online resources for learning online computing technologies is W3Schools. You can find the main page at http://www.w3schools.com/. This single resource can help you discover every web technology needed to build any sort of modern application you can imagine. The topics include: \u2022 HTML \u2022 CSS \u2022 JavaScript \u2022 SQL \u2022 JQuery \u2022 PHP \u2022 XML \u2022 ASP.NET However, you should realize"}, {"filename": "Beginning Programming with Python.pdf", "text": "has been programming for the last 30 years (he started in kindergarten). No one likes to make mistakes and some people don\u2019t like to own up to them, but USING W3Schools TO YOUR ADVANTAGE One of the most used online resources for learning online computing technologies is W3Schools. You can find the main page at http://www.w3schools.com/. This single resource can help you discover every web technology needed to build any sort of modern application you can imagine. The topics include: \u2022 HTML \u2022 CSS \u2022 JavaScript \u2022 SQL \u2022 JQuery \u2022 PHP \u2022 XML \u2022 ASP.NET However, you should realize that this is just a starting point for Python developers. Use the W3Schools material to get a good handle on the underlying technology, and then rely on Python-specific resources to build your skills. Most Python developers need a combination of learning materials to build the skills required to make a real difference in application coding. CHAPTER 18 Ten Amazing Programming Resources 351 everyone does make them. So you shouldn\u2019t feel too bad when you make a mis- take. Simply fix it up and get on with your life. Of course, there is a difference between making a mistake and making an avoid- able, common mistake. Yes, even the professionals sometimes make the avoidable common mistakes, but it\u2019s far less likely because they have seen the mistake in the past and have trained themselves to avoid it. You can gain an advantage over your competition by avoiding the newbie mistakes that everyone has to learn about sometime. To avoid these mistakes, check out this two-part series: \u00bb \u00bb Python: Common Newbie Mistakes, Part 1 (http://blog.amir.rachum.com/ blog/2013/07/06/python-common-newbie-mistakes-part-1/) \u00bb \u00bb Python: Common Newbie Mistakes, Part 2 (http://blog.amir.rachum.com/ blog/2013/07/09/python-common-newbie-mistakes-part-2/) Many other resources are available for people who are just starting with Python, but these particular resources are succinct and easy to understand. You can read them in a relatively short time, make some notes about them for later use, and avoid those embarrassing errors that everyone tends to remember. Understanding Unicode Although this book tries to sidestep the thorny topic of Unicode, you\u2019ll eventually encounter it when you start writing serious applications. Unfortunately, Unicode is one of those topics that had a committee deciding what Unicode would look like, so we ended up with more than one poorly explained definition of Unicode and a multitude of standards to define it. In short, there is no one definition for Unicode. You\u2019ll encounter a wealth of Unicode standards when you start working with more advanced Python applications, especially when you start working with multiple human languages (each of which seems to favor its own flavor of Unicode). Keep- ing in mind the need to discover just what Unicode is, here are some resources you should check out: \u00bb \u00bb The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) (http://www.joelon software.com/articles/Unicode.html) \u00bb \u00bb The Updated Guide to Unicode on Python (http://lucumr.pocoo.org/2013/ 7/2/the-updated-guide-to-unicode/) 352 PART 5 The Part of Tens"}, {"filename": "Beginning Programming with Python.pdf", "text": "no one definition for Unicode. You\u2019ll encounter a wealth of Unicode standards when you start working with more advanced Python applications, especially when you start working with multiple human languages (each of which seems to favor its own flavor of Unicode). Keep- ing in mind the need to discover just what Unicode is, here are some resources you should check out: \u00bb \u00bb The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) (http://www.joelon software.com/articles/Unicode.html) \u00bb \u00bb The Updated Guide to Unicode on Python (http://lucumr.pocoo.org/2013/ 7/2/the-updated-guide-to-unicode/) 352 PART 5 The Part of Tens \u00bb \u00bb Python Encodings and Unicode (http://eric.themoritzfamily.com/ python-encodings-and-unicode.html) \u00bb \u00bb Unicode Tutorials and Overviews (http://www.unicode.org/standard/ tutorial-info.html) \u00bb \u00bb Explain it like I\u2019m five: Python and Unicode? (http://www.reddit.com/r/ Python/comments/1g62eh/explain_it_like_im_five_python_and_unicode/) \u00bb \u00bb Unicode Pain (http://nedbatchelder.com/text/unipain.html) Making Your Python Application Fast Nothing turns off a user faster than an application that performs poorly. When an application performs poorly, you can count on users not using it at all. In fact, poor performance is a significant source of application failure in enterprise envi- ronments. An organization can spend a ton of money to build an impressive appli- cation that does everything, but no one uses it because it runs too slowly or has other serious performance problems. Performance is actually a mix of reliability, security, and speed. In fact, you can read about the performance triangle on my blog at http://blog.johnmuellerbooks. com/2012/04/16/considering-the-performance-triangle/. Many developers focus on just the speed part of performance but end up not achieving their goal. It\u2019s important to look at every aspect of your application\u2019s use of resources and to ensure that you use the best coding techniques. Numerous resources are available to help you understand performance as it applies to Python applications. However, one of the best resources out there is \u201cA guide to analyzing Python performance,\u201d at http://zqpythonic.qiniucdn.com/ data/20170602154836/index.html. The author takes the time to explain why something is a performance bottleneck, rather than simply tell you that it is. After you read this article, make sure to check out the PythonSpeed Performance Tips at https://wiki.python.org/moin/PythonSpeed/PerformanceTips as well. CHAPTER 19 Ten Ways to Make a Living with Python 353 Chapter 19 Ten Ways to Make a Living with Python Y ou can literally write any application you want using any language you desire given enough time, patience, and effort. However, some undertak- ings would be so convoluted and time consuming as to make the effort a study in frustration. In short, most (possibly all) things are possible, but not everything is worth the effort. Using the right tool for the job is always a plus in a world that views time as something in short supply and not to be squandered. Python excels at certain kinds of tasks, which means that it also lends itself to certain types of programming. The kind of programming you can perform deter- mines the job you get and the way in which you make your living. For example, Python probably isn\u2019t a"}, {"filename": "Beginning Programming with Python.pdf", "text": "time consuming as to make the effort a study in frustration. In short, most (possibly all) things are possible, but not everything is worth the effort. Using the right tool for the job is always a plus in a world that views time as something in short supply and not to be squandered. Python excels at certain kinds of tasks, which means that it also lends itself to certain types of programming. The kind of programming you can perform deter- mines the job you get and the way in which you make your living. For example, Python probably isn\u2019t a very good choice for writing device drivers, as C/C++ are, so you probably won\u2019t find yourself working for a hardware company. Likewise, Python can work with databases, but not at the same depth that comes natively to other languages such as Structured Query Language (SQL), so you won\u2019t find your- self working on a huge corporate database project. However, you may find yourself using Python in academic settings because Python does make a great learning lan- guage. (See my blog post on the topic at http://blog.johnmuellerbooks. com/2014/07/14/python-as-a-learning-tool/.) The following sections describe some of the occupations that do use Python regu- larly so that you know what sorts of things you might do with your new-found knowledge. Of course, a single source can\u2019t list every kind of job. Consider this an overview of some of the more common uses for Python. IN THIS CHAPTER \u00bb \u00bb Using Python for QA \u00bb \u00bb Creating opportunities within an organization \u00bb \u00bb Demonstrating programming techniques \u00bb \u00bb Performing specialized tasks 354 PART 5 The Part of Tens Working in QA A lot of organizations have separate Quality Assurance (QA) departments that check applications to ensure that they work as advertised. Many different test script languages are on the market, but Python makes an excellent language in this regard because it\u2019s so incredibly flexible. In addition, you can use this single language in multiple environments \u2014 both on the client and on the server. The broad reach of Python means that you can learn a single language and use it for testing anywhere you need to test something, and in any environment. In this scenario, the developer usually knows another language, such as C++, and uses Python to test the applications written in C++. However, the QA person doesn\u2019t need to know another language in all cases. In some situations, blind test- ing may be used to confirm that an application behaves in a practical manner or as a means for checking the functionality of an external service provider. You need to check with the organization you want to work with as to the qualifications required for a job from a language perspective. WHY YOU NEED TO KNOW MULTIPLE PROGRAMMING LANGUAGES Most organizations see knowledge of multiple programming languages as a big plus (some see it as a requirement). Of course, when you\u2019re an employer, it\u2019s nice to get the best deal you can when"}, {"filename": "Beginning Programming with Python.pdf", "text": "all cases. In some situations, blind test- ing may be used to confirm that an application behaves in a practical manner or as a means for checking the functionality of an external service provider. You need to check with the organization you want to work with as to the qualifications required for a job from a language perspective. WHY YOU NEED TO KNOW MULTIPLE PROGRAMMING LANGUAGES Most organizations see knowledge of multiple programming languages as a big plus (some see it as a requirement). Of course, when you\u2019re an employer, it\u2019s nice to get the best deal you can when hiring a new employee. Knowing a broader range of languages means that you can work in more positions and offer greater value to an organization. Rewriting applications in another language is time consuming, error prone, and expen- sive, so most companies look for people who can support an application in the existing language, rather than rebuild it from scratch. From your perspective, knowing more languages means that you\u2019ll get more interesting jobs and will be less likely to get bored doing the same old thing every day. In addition, knowing multiple languages tends to reduce frustration. Most large applications today rely on components written in a number of computer languages. To understand the application and how it functions better, you need to know every language used to \u00adconstruct it. Knowing multiple languages also makes it possible to learn new languages faster. After a while, you start to see patterns in how computer languages are put together, so you spend less time with the basics and can move right on to advanced topics. The faster you can learn new technologies, the greater your opportunities to work in exciting areas of computer science. In short, knowing more languages opens a lot of doors. CHAPTER 19 Ten Ways to Make a Living with Python 355 Becoming the IT Staff for a Smaller Organization A smaller organization may have only one or two IT staff, which means that you have to perform a broad range of tasks quickly and efficiently. With Python, you can write utilities and in-house applications quite swiftly. Even though Python might not answer the needs of a large organization because it\u2019s interpreted (and potentially open to theft or fiddling by unskilled employees), using it in a smaller organization makes sense because you have greater access control and need to make changes fast. In addition, the ability to use Python in a significant number of environments reduces the need to use anything but Python to meet your needs. Some developers are unaware that Python is available in some non-obvious prod- ucts. For example, even though you can\u2019t use Python scripting with Internet Information Server (IIS) right out of the box, you can add Python scripting sup- port to this product by using the steps found in the Microsoft Knowledge Base article at http://support.microsoft.com/kb/276494. If you aren\u2019t sure whether a particular application can use Python for scripting, make sure that you check"}, {"filename": "Beginning Programming with Python.pdf", "text": "changes fast. In addition, the ability to use Python in a significant number of environments reduces the need to use anything but Python to meet your needs. Some developers are unaware that Python is available in some non-obvious prod- ucts. For example, even though you can\u2019t use Python scripting with Internet Information Server (IIS) right out of the box, you can add Python scripting sup- port to this product by using the steps found in the Microsoft Knowledge Base article at http://support.microsoft.com/kb/276494. If you aren\u2019t sure whether a particular application can use Python for scripting, make sure that you check it out online. You can also get Python support in some products that you might think couldn\u2019t possibly support it. For example, you can use Python with Visual Studio (see https://www.visualstudio.com/vs/python/) to make use of Microsoft tech- nologies with this language. The site at https://code.visualstudio.com/docs/ languages/python provides some additional details about Python support. Performing Specialty Scripting for Applications A number of products can use Python for scripting purposes. For example, Maya (http://www.autodesk.com/products/autodesk-maya/overview) relies on Python for scripting purposes. By knowing which high-end products support Python, you can find a job working with that application in any business that uses it. Here are some examples of products that rely on Python for scripting needs: \u00bb \u00bb 3ds Max \u00bb \u00bb Abaqus \u00bb \u00bb Blender 356 PART 5 The Part of Tens \u00bb \u00bb Cinema 4D \u00bb \u00bb GIMP \u00bb \u00bb Google App Engine \u00bb \u00bb Houdini \u00bb \u00bb Inkscape \u00bb \u00bb Lightwave \u00bb \u00bb Modo \u00bb \u00bb MotionBuilder \u00bb \u00bb Nuke \u00bb \u00bb Paint Shop Pro \u00bb \u00bb Scribus \u00bb \u00bb Softimage This is just the tip of the iceberg. You can also use Python with the GNU debugger to create more understandable output of complex structures, such as those found in C++ containers. Some video games also rely on Python as a scripting language. In short, you could build a career around creating application scripts using Python as the programming language. Administering a Network More than a few administrators use Python to perform tasks such as monitoring network health or creating utilities that automate tasks. Administrators are often short of time, so anything they can do to automate tasks is a plus. In fact, some network management software, such as Trigger (http://trigger.readthedocs. org/en/latest/), is actually written in Python. A lot of these tools are open source and free to download, so you can try them on your network. Also, some interesting articles discuss using Python for network administration, such as \u201cIntro to Python & Automation for Network Engineers\u201d at http://packetpushers.net/show- 176-intro-to-python-automation-for-network-engineers/. The point is that knowing how to use Python on your network can ultimately decrease your work- load and help you perform your tasks more easily. If you want to see some scripts that are written with network management in mind, check out 25 projects tagged \u201cNetwork Management\u201d at http://freecode.com/tags/network-management. CHAPTER 19 Ten Ways to Make a Living with Python 357 Teaching Programming Skills Many teachers are looking for"}, {"filename": "Beginning Programming with Python.pdf", "text": "so you can try them on your network. Also, some interesting articles discuss using Python for network administration, such as \u201cIntro to Python & Automation for Network Engineers\u201d at http://packetpushers.net/show- 176-intro-to-python-automation-for-network-engineers/. The point is that knowing how to use Python on your network can ultimately decrease your work- load and help you perform your tasks more easily. If you want to see some scripts that are written with network management in mind, check out 25 projects tagged \u201cNetwork Management\u201d at http://freecode.com/tags/network-management. CHAPTER 19 Ten Ways to Make a Living with Python 357 Teaching Programming Skills Many teachers are looking for a faster, more consistent method of teaching com- puter technology. Raspberry Pi (http://www.raspberrypi.org/) is a single- board computer that makes obtaining the required equipment a lot less expensive for schools. The smallish device plugs into a television or computer monitor to provide full computing capabilities with an incredibly simple setup. Interestingly enough, Python plays a big role into making Raspberry Pi into a teaching platform for programming skills (http://www.piprogramming.org/main/?page_id=372). In reality, teachers often use Python to extend native Raspberry Pi capabilities so that it can perform all sorts of interesting tasks (http://www.raspberrypi.org/ tag/python/). The project entitled, Boris, the Twitter Dino-Bot (http://www. raspberrypi.org/boris-the-twitter-dino-bot/), is especially interesting. The point is that if you have a teaching goal in mind, combining Raspberry Pi with Python is a fantastic idea. Helping People Decide on Location A Geographic Information System (GIS) provides a means of viewing geographic information with business needs in mind. For example, you could use GIS to determine the best place to put a new business or to determine the optimum routes for shipping goods. However, GIS is used for more than simply deciding on locations \u2014 it also provides a means for communicating location information better than maps, reports, and other graphics, and a method of presenting physi- cal locations to others. Also interesting is the fact that many GIS products use Python as their language of choice. In fact, a wealth of Python-specific informa- tion related to GIS is currently available, such as \u00bb \u00bb The GIS and Python Software Laboratory (https://sgillies.net/2009/ 09/18/reintroducing-the-gis-and-python-software-laboratory. html and http://gispython.org/) \u00bb \u00bb Python and GIS Resources (http://www.gislounge.com/ python-and-gis-resources/) \u00bb \u00bb GIS Programming and Automation (https://www.e-education.psu.edu/ geog485/node/17) 358 PART 5 The Part of Tens Many GIS-specific products, such as ArcGIS (http://www.esri.com/software/ arcgis), rely on Python to automate tasks. Entire communities develop around these software offerings, such as Python for ArcGIS (http://resources.arcgis. com/en/communities/python/). The point is that you can use your new program- ming skills in areas other than computing to earn an income. Performing Data Mining Everyone is collecting data about everyone and everything else. Trying to sift through the mountains of data collected is an impossible task without a lot of fine-tuned automation. The flexible nature of Python, combined with its terse language that makes changes extremely fast, makes it a favorite with people who perform data mining on a daily basis. In fact, you can find an online book on the topic, A"}, {"filename": "Beginning Programming with Python.pdf", "text": "such as Python for ArcGIS (http://resources.arcgis. com/en/communities/python/). The point is that you can use your new program- ming skills in areas other than computing to earn an income. Performing Data Mining Everyone is collecting data about everyone and everything else. Trying to sift through the mountains of data collected is an impossible task without a lot of fine-tuned automation. The flexible nature of Python, combined with its terse language that makes changes extremely fast, makes it a favorite with people who perform data mining on a daily basis. In fact, you can find an online book on the topic, A Programmer\u2019s Guide to Data Mining, at http://guidetodatamining.com/. Python makes data mining tasks a lot easier. The purpose of data mining is to recognize trends, which means looking for patterns of various sorts. The use of artificial intelligence with Python makes such pattern recognition possible. A paper on the topic, \u201cData Mining: Discovering and Visualizing Patterns with Python\u201d (http://refcardz.dzone.com/refcardz/data-mining-discovering- and), helps you understand how such analysis is possible. You can use Python to create just the right tool to locate a pattern that could net sales missed by your competitor. Of course, data mining is used for more than generating sales. For example, peo- ple use data mining to perform tasks such as locating new planets around stars or other types of analysis that increase our knowledge of the universe. Python fig- ures into this sort of data mining as well. You can likely find books and other resources dedicated to any kind of data mining that you want to perform, with many of them mentioning Python as the language of choice. Interacting with Embedded Systems An embedded system exists for nearly every purpose on the planet. For example, if you own a programmable thermostat for your house, you\u2019re interacting with an embedded system. Raspberry Pi (mentioned earlier in the chapter) is an example of a more complex embedded system. Many embedded systems rely on Python as their programming language. In fact, a special form of Python, Embedded Python (https://wiki.python.org/moin/EmbeddedPython), is sometimes used for these devices. You can even find a YouTube presentation on using Python to build an embedded system at http://www.youtube.com/watch?v=WZoeqnsY9AY. CHAPTER 19 Ten Ways to Make a Living with Python 359 Interestingly enough, you might already be interacting with a Python-driven embedded system. For example, Python is the language of choice for many car security systems (http://www.pythoncarsecurity.com/). The remote start fea- ture that you might have relies on Python to get the job done. Your home automa- tion and security system (http://www.linuxjournal.com/article/8513) might also rely on Python. Python is so popular for embedded systems because it doesn\u2019t require compila- tion. An embedded-system vendor can create an update for any embedded system and simply upload the Python file. The interpreter automatically uses this file without having to upload any new executables or jump through any of the types of hoops that other languages can require. Carrying Out Scientific Tasks Python seems to devote more time to scientific and numerical"}, {"filename": "Beginning Programming with Python.pdf", "text": "remote start fea- ture that you might have relies on Python to get the job done. Your home automa- tion and security system (http://www.linuxjournal.com/article/8513) might also rely on Python. Python is so popular for embedded systems because it doesn\u2019t require compila- tion. An embedded-system vendor can create an update for any embedded system and simply upload the Python file. The interpreter automatically uses this file without having to upload any new executables or jump through any of the types of hoops that other languages can require. Carrying Out Scientific Tasks Python seems to devote more time to scientific and numerical processing tasks than many of the computer languages out there. The number of Python\u2019s scientific and numeric processing packages is staggering (https://wiki.python.org/ moin/NumericAndScientific). Scientists love Python because it\u2019s small, easy to learn, and yet quite precise in its treatment of data. You can produce results by using just a few lines of code. Yes, you could produce the same result using another language, but the other language might not include the prebuilt packages to per- form the task, and it would most definitely require more lines of code even if it did. The two sciences that have dedicated Python packages are space sciences and life sciences. For example, there is actually a package for performing tasks related to solar physics. You can also find a package for working in genomic biology. If you\u2019re in a scientific field, the chances are good that your Python knowledge will significantly impact your ability to produce results quickly while your colleagues are still trying to figure out how to analyze the data. Performing Real-Time Analysis of Data Making decisions requires timely, reliable, and accurate data. Often, this data must come from a wide variety of sources, which then require a certain amount of analysis before becoming useful. A number of the people who report using Python do so in a management capacity. They use Python to probe those disparate sources of information, perform the required analysis, and then present the big picture to the manager who has asked for the information. Given that this task occurs regu- larly, trying to do it manually every time would be time consuming. In fact, it 360 PART 5 The Part of Tens would simply be a waste of time. By the time the manager performed the required work, the need to make a decision might already have passed. Python makes it possible to perform tasks quickly enough for a decision to have maximum impact. Previous sections have pointed out Python\u2019s data-mining, number-crunching, and graphics capabilities. A manager can combine all these qualities while using a language that isn\u2019t nearly as complex to learn as C++. In addition, any changes are easy to make, and the manager doesn\u2019t need to worry about learning program- ming skills such as compiling the application. A few changes to a line of code in an interpreted package usually serve to complete the task. As with other sorts of occupational leads in this"}, {"filename": "Beginning Programming with Python.pdf", "text": "passed. Python makes it possible to perform tasks quickly enough for a decision to have maximum impact. Previous sections have pointed out Python\u2019s data-mining, number-crunching, and graphics capabilities. A manager can combine all these qualities while using a language that isn\u2019t nearly as complex to learn as C++. In addition, any changes are easy to make, and the manager doesn\u2019t need to worry about learning program- ming skills such as compiling the application. A few changes to a line of code in an interpreted package usually serve to complete the task. As with other sorts of occupational leads in this chapter, thinking outside the box is important when getting a job. A lot of people need real-time analysis. Launch- ing a rocket into space, controlling product flow, ensuring that packages get delivered on time, and all sorts of other occupations rely on timely, reliable, and accurate data. You might be able to create your own new job simply by employing Python to perform real-time data analysis. CHAPTER 20 Ten Tools That Enhance Your Python Experience 361 Chapter 20 Ten Tools That Enhance Your Python Experience P ython, like most other programming languages, has strong third-party support in the form of various tools. A tool is any utility that enhances the natural capabilities of Python when building an application. So, a debugger is considered a tool because it\u2019s a utility, but a library isn\u2019t. Libraries are instead used to create better applications. (You can see some of them listed in Chapter 21.) Even making the distinction between a tool and something that isn\u2019t a tool, such as a library, doesn\u2019t reduce the list by much. Python enjoys access to a wealth of general-purpose and special tools of all sorts. In fact, the site at https://wiki. python.org/moin/DevelopmentTools breaks these tools down into the following 13 categories: \u00bb \u00bb AutomatedRefactoringTools \u00bb \u00bb BugTracking \u00bb \u00bb ConfigurationAndBuildTools \u00bb \u00bb DistributionUtilities \u00bb \u00bb DocumentationTools \u00bb \u00bb IntegratedDevelopmentEnvironments IN THIS CHAPTER \u00bb \u00bb Debugging, testing, and deploying applications \u00bb \u00bb Documenting and versioning your application \u00bb \u00bb Writing your application code \u00bb \u00bb Working within an interactive environment 362 PART 5 The Part of Tens \u00bb \u00bb PythonDebuggers \u00bb \u00bb PythonEditors \u00bb \u00bb PythonShells \u00bb \u00bb SkeletonBuilderTools \u00bb \u00bb TestSoftware \u00bb \u00bb UsefulModules \u00bb \u00bb VersionControl Interestingly enough, the lists on the Python DevelopmentTools site might not even be complete. You can find Python tools listed in quite a few places online. Given that a single chapter can\u2019t possibly cover all the tools out there, this chapter discusses a few of the more interesting tools \u2014 those that merit a little extra attention on your part. After you whet your appetite with this chapter, seeing what other sorts of tools you can find online is a good idea. You may find that the tool you thought you might have to create is already available, and in several different forms. Tracking Bugs with Roundup Issue Tracker You can use a number of bug-tracking sites with Python, such"}, {"filename": "Beginning Programming with Python.pdf", "text": "in quite a few places online. Given that a single chapter can\u2019t possibly cover all the tools out there, this chapter discusses a few of the more interesting tools \u2014 those that merit a little extra attention on your part. After you whet your appetite with this chapter, seeing what other sorts of tools you can find online is a good idea. You may find that the tool you thought you might have to create is already available, and in several different forms. Tracking Bugs with Roundup Issue Tracker You can use a number of bug-tracking sites with Python, such as the following: Github (https://github.com/); Google Code (https://code.google.com/); \u00adBitBucket (https://bitbucket.org/); and Launchpad (https://launchpad. net/). However, these public sites are generally not as convenient to use as your own specific, localized bug-tracking software. You can use a number of tracking systems on your local drive, but Roundup Issue Tracker (http://roundup. sourceforge.net/) is one of the better offerings. Roundup should work on any platform that supports Python, and it offers these basic features without any extra work: \u00bb \u00bb Bug tracking \u00bb \u00bb TODO list management If you\u2019re willing to put a little more work into the installation, you can get addi- tional features, and these additional features are what make the product special. However, to get them, you may need to install other products, such as a DataBase Management System (DBMS). The product instructions tell you what to install and which third-party products are compatible. After you make the additional installations, you get these upgraded features: CHAPTER 20 Ten Tools That Enhance Your Python Experience 363 \u00bb \u00bb Customer help-desk support with the following features: \u2022 Wizard for the phone answerers \u2022 Network links \u2022 System and development issue trackers \u00bb \u00bb Issue management for Internet Engineering Task Force (IETF) working groups \u00bb \u00bb Sales lead tracking \u00bb \u00bb Conference paper submission \u00bb \u00bb Double-blind referee management \u00bb \u00bb Blogging (extremely basic right now, but will become a stronger offering later) Creating a Virtual Environment by Using VirtualEnv Reasons abound to create virtual environments, but the main reason for to do so with Python is to provide a safe and known testing environment. By using the same testing environment each time, you help ensure that the application has a stable environment until you have completed enough of it to test in a production- like environment. VirtualEnv (https://pypi.python.org/pypi/virtualenv) provides the means to create a virtual Python environment that you can use for the early testing process or to diagnose issues that could occur because of the environment. It\u2019s important to remember that there are at least three standard levels of testing that you need to perform: \u00bb \u00bb Bug: Checking for errors in your application \u00bb \u00bb Performance: Validating that your application meets speed, reliability, and security requirements \u00bb \u00bb Usability: Verifying that your application meets user needs and will react to user input in the way the user expects Because of the manner in which most Python applications are used (see"}, {"filename": "Beginning Programming with Python.pdf", "text": "create a virtual Python environment that you can use for the early testing process or to diagnose issues that could occur because of the environment. It\u2019s important to remember that there are at least three standard levels of testing that you need to perform: \u00bb \u00bb Bug: Checking for errors in your application \u00bb \u00bb Performance: Validating that your application meets speed, reliability, and security requirements \u00bb \u00bb Usability: Verifying that your application meets user needs and will react to user input in the way the user expects Because of the manner in which most Python applications are used (see Chapter 19 for some ideas), you generally don\u2019t need to run them in a virtual environment after the application has gone to a production site. Most Python applications require access to the outside world, and the isolation of a virtual environment would prevent that access. 364 PART 5 The Part of Tens Installing Your Application by Using PyInstaller Users don\u2019t want to spend a lot of time installing your application, no matter how much it might help them in the end. Even if you can get the user to attempt an installation, less skilled users are likely to fail. In short, you need a surefire method of getting an application from your system to the user\u2019s system. Installers, such as PyInstaller (http://www.pyinstaller.org/), do just that. They make a nice package out of your application that the user can easily install. Fortunately, PyInstaller works on all the platforms that Python supports, so you need just the one tool to meet every installation need you have. In addition, you can get platform-specific support when needed. For example, when working on a Windows platform, you can create code-signed executables. Mac developers will appreciate that PyInstaller provides support for bundles. In many cases, avoiding the platform-specific features is best unless you really do need them. When you use a platform-specific feature, the installation will succeed only on the target platform. NEVER TEST ON A PRODUCTION SERVER A mistake that some developers make is to test their unreleased application on the pro- duction server where the user can easily get to it. Of the many reasons not to test your application on a production server, data loss has to be the most important. If you allow users to gain access to an unreleased version of your application that contains bugs that might corrupt the database or other data sources, the data could be lost or \u00addamaged permanently. You also need to realize that you get only one chance to make a first impression. Many software projects fail because users don\u2019t use the end result. The application is com- plete, but no one uses it because of the perception that the application is flawed in some way. Users have only one goal in mind: to complete their tasks and then go home. When users see that an application is costing them time, they tend not to use it. Unreleased applications can also have security holes that"}, {"filename": "Beginning Programming with Python.pdf", "text": "or other data sources, the data could be lost or \u00addamaged permanently. You also need to realize that you get only one chance to make a first impression. Many software projects fail because users don\u2019t use the end result. The application is com- plete, but no one uses it because of the perception that the application is flawed in some way. Users have only one goal in mind: to complete their tasks and then go home. When users see that an application is costing them time, they tend not to use it. Unreleased applications can also have security holes that nefarious individuals will use to gain access to your network. It doesn\u2019t matter how well your security software works if you leave the door open for anyone to come in. After they have come in, getting rid of them is nearly impossible, and even if you do get rid of them, the damage to your data is already done. Recovery from security breaches is notoriously difficult \u2014 and some- times impossible. In short, never test on your production server because the costs of doing so are simply too high. CHAPTER 20 Ten Tools That Enhance Your Python Experience 365 A number of the installer tools that you find online are platform specific. For example, when you look at an installer that reportedly creates executables, you need to be careful that the executables aren\u2019t platform specific (or at least match the platform you want to use). It\u2019s important to get a product that will work everywhere it\u2019s needed so that you don\u2019t create an installation package that the user can\u2019t use. Having a language that works everywhere doesn\u2019t help when the installation package actually hinders installation. Building Developer Documentation by Using pdoc Two kinds of documentation are associated with applications: user and developer. User documentation shows how to use the application, while developer documen- tation shows how the application works. A library requires only one sort of docu- mentation, developer, while a desktop application may require only user documentation. A service might actually require both kinds of documentation depending on who uses it and how the service is put together. The majority of your documentation is likely to affect developers, and pdoc (https://github.com/ BurntSushi/pdoc) is a simple solution for creating it. The pdoc utility relies on the documentation that you place in your code in the form of docstrings and comments. The output is in the form of a text file or an HTML document. You can also have pdoc run in a way that provides output through a web server so that people can see the documentation directly in a browser. This is actually a replacement for epydoc, which is no longer supported by its originator. AVOID THE ORPHANED PRODUCT Some Python tools floating around the Internet are orphaned, which means that the devel- oper is no longer actively supporting them. Developers still use the tool because they like the features it supports or how it works. However, doing so"}, {"filename": "Beginning Programming with Python.pdf", "text": "The output is in the form of a text file or an HTML document. You can also have pdoc run in a way that provides output through a web server so that people can see the documentation directly in a browser. This is actually a replacement for epydoc, which is no longer supported by its originator. AVOID THE ORPHANED PRODUCT Some Python tools floating around the Internet are orphaned, which means that the devel- oper is no longer actively supporting them. Developers still use the tool because they like the features it supports or how it works. However, doing so is always risky because you can\u2019t be sure that the tool will work with the latest version of Python. The best way to approach tools is to get tools that are fully supported by the vendor who created them. If you absolutely must use an orphaned tool (such as when an orphaned tool is the only one available to perform the task), make sure that the tool still has good community sup- port. The vendor may not be around any longer, but at least the community will provide a source of information when you need product support. Otherwise, you\u2019ll waste a lot of time trying to use an unsupported product that you might never get to work properly. 366 PART 5 The Part of Tens Developing Application Code by Using Komodo Edit Several chapters in this book discuss the issue of Interactive Development Envi- ronments (IDEs), but none make a specific recommendation (except for the use of Jupyter Notebook throughout the book). The IDE you choose depends partly on your needs as a developer, your skill level, and the kinds of applications you want to create. Some IDEs are better than others when it comes to certain kinds of application development. One of the better general-purpose IDEs for novice developers is Komodo Edit (http://komodoide.com/komodo-edit/). You can obtain this IDE for free, and it includes a wealth of features that will make your coding experience much better than what you\u2019ll get from IDLE. Here are some of those features: \u00bb \u00bb Support for multiple programming languages \u00bb \u00bb Automatic completion of keywords \u00bb \u00bb Indentation checking WHAT IS A DOCSTRING? Chapter 5 and this chapter both talk about document strings (docstrings). A docstring is a special kind of comment that appears within a triple quote, like this: \"\"\"This is a docstring.\"\"\" You associate a docstring with an object, such as packages, functions, classes, and methods. Any code object you can create in Python can have a docstring. The purpose of a docstring is to document the object. Consequently, you want to use descriptive \u00adsentences. The easiest way to see a docstring is to follow the object\u2019s name with the special __ doc__() method. For example, typing print(MyClass.__doc__()) would display the \u00addocstring for MyClass. You can also access a docstring by using help, such as help(MyClass). Good docstrings tell what the object does, rather than how it does it. Third-party utilities can"}, {"filename": "Beginning Programming with Python.pdf", "text": "You associate a docstring with an object, such as packages, functions, classes, and methods. Any code object you can create in Python can have a docstring. The purpose of a docstring is to document the object. Consequently, you want to use descriptive \u00adsentences. The easiest way to see a docstring is to follow the object\u2019s name with the special __ doc__() method. For example, typing print(MyClass.__doc__()) would display the \u00addocstring for MyClass. You can also access a docstring by using help, such as help(MyClass). Good docstrings tell what the object does, rather than how it does it. Third-party utilities can also make use of docstrings. Given the right utility, you can write the documentation for an entire library without actually having to write anything. The utility uses the docstrings within your library to create the documentation. Consequently, even though docstrings and comments are used for different purposes, they\u2019re equally important in your Python code. CHAPTER 20 Ten Tools That Enhance Your Python Experience 367 \u00bb \u00bb Project support so that applications are partially coded before you even begin \u00bb \u00bb Superior support However, the feature that sets Komodo Edit apart from other IDEs is that it has an upgrade path. When you start to find that your needs are no longer met by Komodo Edit, you can upgrade to Komodo IDE (http://komodoide.com/), which includes a lot of professional-level support features, such as code profiling (a feature that checks application speed) and a database explorer (to make working with data- bases easier). Debugging Your Application by Using pydbgr A high-end IDE, such as Komodo IDE, comes with a complete debugger. Even Komodo Edit comes with a simple debugger. However, if you\u2019re using something smaller, less expensive, and less capable than a high-end IDE, you might not have a debugger at all. A debugger helps you locate errors in your application and fix them. The better your debugger, the less effort required to locate and fix the error. When your editor doesn\u2019t include a debugger, you need an external debugger such as pydbgr (https://code.google.com/p/pydbgr/). A reasonably good debugger includes a number of standard features, such as code colorization (the use of color to indicate things like keywords). However, it also includes a number of nonstandard features that set it apart. Here are some of the standard and nonstandard features that make pydbgr a good choice when your editor doesn\u2019t come with a debugger: \u00bb \u00bb Smarteval: The eval command helps you see what will happen when you execute a line of code, before you actually execute it in the application. It helps you perform \u201cwhat if\u201d analysis to see what is going wrong with the application. \u00bb \u00bb Out-of-process debugging: Normally you have to debug applications that reside on the same machine. In fact, the debugger is part of the application\u2019s process, which means that the debugger can actually interfere with the debugging process. Using out-of-process debugging means that the debugger doesn\u2019t affect the application and you don\u2019t even have to run"}, {"filename": "Beginning Programming with Python.pdf", "text": "debugger: \u00bb \u00bb Smarteval: The eval command helps you see what will happen when you execute a line of code, before you actually execute it in the application. It helps you perform \u201cwhat if\u201d analysis to see what is going wrong with the application. \u00bb \u00bb Out-of-process debugging: Normally you have to debug applications that reside on the same machine. In fact, the debugger is part of the application\u2019s process, which means that the debugger can actually interfere with the debugging process. Using out-of-process debugging means that the debugger doesn\u2019t affect the application and you don\u2019t even have to run the application on the same machine as the debugger. \u00bb \u00bb Thorough byte-code inspection: Viewing how the code you write is turned into byte code (the code that the Python interpreter actually understands) can sometimes help you solve tough problems. 368 PART 5 The Part of Tens \u00bb \u00bb Event filtering and tracing: As your application runs in the debugger, it generates events that help the debugger understand what is going on. For example, moving to the next line of code generates an event, returning from a function call generates another event, and so on. This feature makes it possible to control just how the debugger traces through an application and which events it reacts to. Entering an Interactive Environment by Using IPython The Python shell works fine for many interactive tasks. However, if you have used this product, you may have already noted that the default shell has certain defi- ciencies. Of course, the biggest deficiency is that the Python shell is a pure text environment in which you must type commands to perform any given task. A more advanced shell, such as IPython (http://ipython.org/), can make the interactive environment friendlier by providing GUI features so that you don\u2019t have to remember the syntax for odd commands. IPython is actually more than just a simple shell. It provides an environment in which you can interact with Python in new ways, such as by displaying graphics that show the result of formulas you create using Python. In addition, IPython is designed as a kind of front end that can accommodate other languages. The IPython application actually sends commands to the real shell in the background, so you can use shells from other languages such as Julia and Haskell. (Don\u2019t worry if you\u2019ve never heard of these languages.) One of the more exciting features of IPython is the ability to work in parallel com- puting environments. Normally a shell is single threaded, which means that you can\u2019t perform any sort of parallel computing. In fact, you can\u2019t even create a mul- tithreaded environment. This feature alone makes IPython worthy of a trial. Testing Python Applications by Using PyUnit At some point, you need to test your applications to ensure that they work as instructed. You can test them by entering in one command at a time and verifying the result, or you can automate the process. Obviously, the automated approach is"}, {"filename": "Beginning Programming with Python.pdf", "text": "more exciting features of IPython is the ability to work in parallel com- puting environments. Normally a shell is single threaded, which means that you can\u2019t perform any sort of parallel computing. In fact, you can\u2019t even create a mul- tithreaded environment. This feature alone makes IPython worthy of a trial. Testing Python Applications by Using PyUnit At some point, you need to test your applications to ensure that they work as instructed. You can test them by entering in one command at a time and verifying the result, or you can automate the process. Obviously, the automated approach is CHAPTER 20 Ten Tools That Enhance Your Python Experience 369 better because you really do want to get home for dinner someday and manual testing is really, really slow (especially when you make mistakes, which are guar- anteed to happen). Products such as PyUnit (https://wiki.python.org/moin/ PyUnit) make unit testing (the testing of individual features) significantly easier. The nice part of this product is that you actually create Python code to perform the testing. Your script is simply another, specialized, application that tests the main application for problems. You may be thinking that the scripts, rather than your professionally written application, could be bug ridden. The testing script is designed to be extremely simple, which will keep scripting errors small and quite noticeable. Of course, errors can (and sometimes do) happen, so yes, when you can\u2019t find a problem with your application, you do need to check the script. Tidying Your Code by Using Isort It may seem like an incredibly small thing, but code can get messy, especially if you don\u2019t place all your import statements at the top of the file in alphabetical order. In some situations, it becomes difficult, if not impossible, to figure out what\u2019s going on with your code when it isn\u2019t kept neat. The Isort utility (http:// timothycrosley.github.io/isort/) performs the seemingly small task of sort- ing your import statements and ensuring that they all appear at the top of the source code file. This small step can have a significant effect on your ability to understand and modify the source code. Just knowing which modules a particular module needs can be a help in locating potential problems. For example, if you somehow get an older version of a needed module on your system, knowing which modules the application needs can make the process of finding that module easier. In addition, knowing which modules an application needs is important when it comes time to distribute your application to users. Knowing that the user has the correct modules available helps ensure that the application will run as anticipated. 370 PART 5 The Part of Tens Providing Version Control by Using Mercurial The applications you created while working through this book aren\u2019t very com- plex. In fact, after you finish this book and move on to more advanced training applications, you\u2019re unlikely to need version control. However, after you start working in an organizational development environment in which"}, {"filename": "Beginning Programming with Python.pdf", "text": "that module easier. In addition, knowing which modules an application needs is important when it comes time to distribute your application to users. Knowing that the user has the correct modules available helps ensure that the application will run as anticipated. 370 PART 5 The Part of Tens Providing Version Control by Using Mercurial The applications you created while working through this book aren\u2019t very com- plex. In fact, after you finish this book and move on to more advanced training applications, you\u2019re unlikely to need version control. However, after you start working in an organizational development environment in which you create real applications that users need to have available at all times, version control becomes essential. Version control is simply the act of keeping track of the changes that occur in an application between application releases to the production environ- ment. When you say you\u2019re using MyApp 1.2, you\u2019re referring to version 1.2 of the MyApp application. Versioning lets everyone know which application release is being used when bug fixes and other kinds of support take place. Numerous version control products are available for Python. One of the more interesting offerings is Mercurial (https://www.mercurial-scm.org/). You can get a version of Mercurial for almost any platform that Python will run on, so you don\u2019t have to worry about changing products when you change platforms. (If your platform doesn\u2019t offer a binary, executable, release, you can always build one from the source code provided on the download site.) Unlike a lot of the other offerings out there, Mercurial is free. Even if you find that you need a more advanced product later, you can gain useful experience by work- ing with Mercurial on a project or two. The act of storing each version of an application in a separate place so that changes can be undone or redone as needed is called source code management or SCM. For many people, source code management seems like a hard task. Because the \u00adMercurial environment is quite forgiving, you can learn about SCM in a friendly environment. Being able to interact with any version of the source code for a \u00adparticular application is essential when you need to go back and fix problems \u00adcreated by a new release. The best part about Mercurial is that it provides a great online tutorial at https:// www.mercurial-scm.org/wiki/Tutorial. Following along on your own machine is the best way to learn about SCM, but even just reading the material is helpful. Of course, the first tutorial is all about getting a good installation of Mercurial. The tutorials then lead you through the process of creating a repository (a place where application versions are stored) and using the repository as you create your application code. By the time you finish the tutorials, you should have a great idea of how source control should work and why versioning is an important part of application development. CHAPTER 21 Ten (Plus) Libraries You Need to Know About 371 Chapter 21 Ten (Plus) Libraries"}, {"filename": "Beginning Programming with Python.pdf", "text": "to learn about SCM, but even just reading the material is helpful. Of course, the first tutorial is all about getting a good installation of Mercurial. The tutorials then lead you through the process of creating a repository (a place where application versions are stored) and using the repository as you create your application code. By the time you finish the tutorials, you should have a great idea of how source control should work and why versioning is an important part of application development. CHAPTER 21 Ten (Plus) Libraries You Need to Know About 371 Chapter 21 Ten (Plus) Libraries You Need to Know About P ython provides you with considerable power when it comes to creating aver- age applications. However, most applications aren\u2019t average and require some sort of special processing to make them work. That\u2019s where libraries come into play. A good library will extend Python functionality so that it supports the special programming needs that you have. For example, you might need to plot statistics or interact with a scientific device. These sorts of tasks require the use of one or more libraries. One of the best places to find a library listing online is the UsefulModules site at https://wiki.python.org/moin/UsefulModules. Of course, you have many other places to look for libraries as well. For example, the article entitled \u201c7 Python Libraries you should know about\u201d (http://www.lleess.com/2013/03/7-python- libraries-you-should-know-about.html) provides you with a relatively \u00adcomplete description of the seven libraries its title refers to. If you\u2019re working on a specific platform, such as Windows, you can find platform-specific sites, such as Unofficial Windows Binaries for Python Extension Packages (http://www.lfd. uci.edu/~gohlke/pythonlibs/). The point is that you can find lists of libraries everywhere. The purpose of this chapter isn\u2019t to add to your already overflowing list of \u00adpotential library candidates. Instead, it provides you with a list of ten libraries that work on IN THIS CHAPTER \u00bb \u00bb Securing your data by using cryptology \u00bb \u00bb Managing and displaying data \u00bb \u00bb Working with graphics \u00bb \u00bb Finding the information you need \u00bb \u00bb Allowing access to Java code 372 PART 5 The Part of Tens every platform and provide basic services that just about everyone will need. Think of this chapter as a source for a core group of libraries to use for your next coding adventure. Developing a Secure Environment by Using PyCrypto Data security is an essential part of any programming effort. The reason that applications are so valued is that they make it easy to manipulate and use data of all sorts. However, the application must protect the data or the efforts to work with it are lost. It\u2019s the data that is ultimately the valuable part of a business \u2014 the application is simply a tool. Part of protecting the data is to ensure that no one can steal it or use it in a manner that the originator didn\u2019t intend, which is where cryptographic libraries such as PyCrypto (https://www.dlitz.net/software/ pycrypto/) come into play. The main"}, {"filename": "Beginning Programming with Python.pdf", "text": "of any programming effort. The reason that applications are so valued is that they make it easy to manipulate and use data of all sorts. However, the application must protect the data or the efforts to work with it are lost. It\u2019s the data that is ultimately the valuable part of a business \u2014 the application is simply a tool. Part of protecting the data is to ensure that no one can steal it or use it in a manner that the originator didn\u2019t intend, which is where cryptographic libraries such as PyCrypto (https://www.dlitz.net/software/ pycrypto/) come into play. The main purpose of this library is to turn your data into something that others can\u2019t read while it sits in permanent storage. The purposeful modification of data in this manner is called encryption. However, when you read the data into memory, a decryption routine takes the mangled data and turns it back into its original form so that the application can manage it. At the center of all this is the key, which is used to encrypt and decrypt the data. Ensuring that the key remains safe is part of your application coding as well. You can read the data because you have the key; no others can because they lack the key. Interacting with Databases by Using SQLAlchemy A database is essentially an organized manner of storing repetitive or structured data on disk. For example, customer records (individual entries in the database) are repetitive because each customer has the same sort of information require- ments, such as name, address, and telephone number. The precise organization of the data determines the sort of database you\u2019re using. Some database products specialize in text organization, others in tabular information, and still others in random bits of data (such as readings taken from a scientific instrument). Databases can use a tree-like structure or a flat-file configuration to store data. You\u2019ll hear all sorts of odd terms when you start looking into DataBase Manage- ment System (DBMS) technology \u2014 most of which mean something only to a DataBase Administrator (DBA) and won\u2019t matter to you. CHAPTER 21 Ten (Plus) Libraries You Need to Know About 373 The most common type of database is called a Relational DataBase Management System (RDBMS), which uses tables that are organized into records and fields (just like a table you might draw on a sheet of paper). Each field is part of a column of the same kind of information, such as the customer\u2019s name. Tables are related to each other in various ways, so creating complex relationships is possible. For example, each customer may have one or more entries in a purchase order table, and the customer table and the purchase order table are therefore related to each other. An RDBMS relies on a special language called the Structured Query Language (SQL) to access the individual records inside. Of course, you need some means of interacting with both the RDBMS and SQL, which is where SQLAlchemy (http:// www.sqlalchemy.org/) comes"}, {"filename": "Beginning Programming with Python.pdf", "text": "part of a column of the same kind of information, such as the customer\u2019s name. Tables are related to each other in various ways, so creating complex relationships is possible. For example, each customer may have one or more entries in a purchase order table, and the customer table and the purchase order table are therefore related to each other. An RDBMS relies on a special language called the Structured Query Language (SQL) to access the individual records inside. Of course, you need some means of interacting with both the RDBMS and SQL, which is where SQLAlchemy (http:// www.sqlalchemy.org/) comes into play. This product reduces the amount of work needed to ask the database to perform tasks such as returning a specific customer record, creating a new customer record, updating an existing customer record, and deleting an old customer record. Seeing the World by Using Google Maps Geocoding (the finding of geographic coordinates, such as longitude and latitude from geographic data, such as address) has lots of uses in the world today. People use the information to do everything from finding a good restaurant to locating a lost hiker in the mountains. Getting from one place to another often revolves around geocoding today as well. Google Maps (https://pypi.python.org/pypi/ googlemaps/) lets you add directional data to your applications. In addition to getting from one point to another or finding a lost soul in the desert, Google Maps can also help in Geographic Information System (GIS) applications. The \u201cHelping People Decide on Location\u201d section of Chapter 19 describes this particular technology in more detail, but essentially, GIS is all about deciding on a location for something or determining why one location works better than another location for a particular task. In short, Google Maps presents your application with a look at the outside world that it can use to help your user make decisions. Adding a Graphical User Interface by Using TkInter Users respond to the Graphical User Interface (GUI) because it\u2019s friendlier and requires less thought than using a command-line interface. Many products out there can give your Python application a GUI. However, the most commonly used 374 PART 5 The Part of Tens product is TkInter (https://wiki.python.org/moin/TkInter). Developers like it so much because TkInter keeps things simple. It\u2019s actually an interface for the Tool Command Language (Tcl)/Toolkit (Tk) found at http://www.tcl.tk/. A number of languages use Tcl/Tk as the basis for creating a GUI. You might not relish the idea of adding a GUI to your application. Doing so tends to be time consuming and doesn\u2019t make the application any more functional (it also slows the application down in many cases). The point is that users like GUIs, and if you want your application to see strong use, you need to meet user requirements. Providing a Nice Tabular Data Presentation by Using PrettyTable Displaying tabular data in a manner the user can understand is important. From the examples you\u2019ve seen throughout the book, you know that Python stores this type"}, {"filename": "Beginning Programming with Python.pdf", "text": "for creating a GUI. You might not relish the idea of adding a GUI to your application. Doing so tends to be time consuming and doesn\u2019t make the application any more functional (it also slows the application down in many cases). The point is that users like GUIs, and if you want your application to see strong use, you need to meet user requirements. Providing a Nice Tabular Data Presentation by Using PrettyTable Displaying tabular data in a manner the user can understand is important. From the examples you\u2019ve seen throughout the book, you know that Python stores this type of data in a form that works best for programming needs. However, users need something that is organized in a manner that humans understand and that is visually appealing. The PrettyTable library (https://pypi.python.org/pypi/ PrettyTable) makes it easy to add an appealing tabular presentation to your command-line application. Enhancing Your Application with Sound by Using PyAudio Sound is a useful way to convey certain types of information to the user. Of course, you have to be careful in using sound because special-needs users might not be able to hear it, and for those who can, using too much sound can interfere with normal business operations. However, sometimes audio is an important means of communicating supplementary information to users who can interact with it (or of simply adding a bit of pizzazz to make your application more interesting). One of the better platform-independent libraries to make sound work with your Python application is PyAudio (http://people.csail.mit.edu/hubert/ pyaudio/). This library makes it possible to record and play back sounds as needed (such as a user recording an audio note of tasks to perform later and then playing back the list of items as needed). CHAPTER 21 Ten (Plus) Libraries You Need to Know About 375 Working with sound on a computer always involves trade-offs. For example, a platform-independent library can\u2019t take advantage of special features that a \u00adparticular platform might possess. In addition, it might not support all the file formats that a particular platform uses. The reason to use a platform-\u00adindependent library is to ensure that your application provides basic sound support on all systems that it might interact with. Manipulating Images by Using PyQtGraph Humans are visually oriented. If you show someone a table of information and then show the same information as a graph, the graph is always the winner when it comes to conveying information. Graphs help people see trends and understand why the data has taken the course that it has. However, getting those pixels that CLASSIFYING PYTHON SOUND TECHNOLOGIES Realize that sound comes in many forms in computers. The basic multimedia services provided by Python (see the documentation at https://docs.python.org/3/ library/mm.html) provide essential playback functionality. You can also write certain types of audio files, but the selection of file formats is limited. In addition, some \u00adpackages, such as winsound (https://docs.python.org/3/library/winsound. html), are platform dependent, so you can\u2019t use them in an application designed to work everywhere. The standard"}, {"filename": "Beginning Programming with Python.pdf", "text": "it comes to conveying information. Graphs help people see trends and understand why the data has taken the course that it has. However, getting those pixels that CLASSIFYING PYTHON SOUND TECHNOLOGIES Realize that sound comes in many forms in computers. The basic multimedia services provided by Python (see the documentation at https://docs.python.org/3/ library/mm.html) provide essential playback functionality. You can also write certain types of audio files, but the selection of file formats is limited. In addition, some \u00adpackages, such as winsound (https://docs.python.org/3/library/winsound. html), are platform dependent, so you can\u2019t use them in an application designed to work everywhere. The standard Python offerings are designed to provide basic \u00admultimedia support for playing back system sounds. The middle ground, augmented audio functionality designed to improve application usability, is covered by libraries such as PyAudio. You can see a list of these libraries at https://wiki.python.org/moin/Audio. However, these libraries usually focus on business needs, such as recording notes and playing them back later. Hi-fidelity output isn\u2019t part of the plan for these libraries. Gamers need special audio support to ensure that they can hear special effects, such as a monster walking behind them. These needs are addressed by libraries such as PyGame (http://www.pygame.org/news.html). When using these libraries, you need higher-end equipment and have to plan to spend considerable time working on just the audio features of your application. You can see a list of these libraries at https://wiki.python.org/moin/PythonGameLibraries. 376 PART 5 The Part of Tens represent the tabular information onscreen is difficult, which is why you need a library such as PyQtGraph (http://www.pyqtgraph.org/) to make things simpler. Even though the library is designed around engineering, mathematical, and sci- entific requirements, you have no reason to avoid using it for other purposes. PyQtGraph supports both 2D and 3D displays, and you can use it to generate new graphics based on numeric input. The output is completely interactive, so a user can select image areas for enhancement or other sorts of manipulation. In addi- tion, the library comes with a wealth of useful widgets (controls, such as buttons, that you can display onscreen) to make the coding process even easier. Unlike many of the offerings in this chapter, PyQtGraph isn\u2019t a free-standing library, which means that you must have other products installed to use it. This isn\u2019t unexpected because PyQtGraph is doing quite a lot of work. You need these items installed on your system to use it: \u00bb \u00bb Python version 2.7 or above \u00bb \u00bb PyQt version 4.8 or above (https://wiki.python.org/moin/PyQt) or PySide (https://wiki.python.org/moin/PySide) \u00bb \u00bb numpy (http://www.numpy.org/) \u00bb \u00bb scipy (http://www.scipy.org/) \u00bb \u00bb PyOpenGL (http://pyopengl.sourceforge.net/) Locating Your Information by Using IRLib Finding your information can be difficult when the information grows to a \u00adcertain size. Consider your hard drive as a large, free-form, tree-based database that lacks a useful index. Any time such a structure becomes large enough, data sim- ply gets lost. (Just try to find those pictures you took last summer and you\u2019ll get the idea.) As a result, having some"}, {"filename": "Beginning Programming with Python.pdf", "text": "use it: \u00bb \u00bb Python version 2.7 or above \u00bb \u00bb PyQt version 4.8 or above (https://wiki.python.org/moin/PyQt) or PySide (https://wiki.python.org/moin/PySide) \u00bb \u00bb numpy (http://www.numpy.org/) \u00bb \u00bb scipy (http://www.scipy.org/) \u00bb \u00bb PyOpenGL (http://pyopengl.sourceforge.net/) Locating Your Information by Using IRLib Finding your information can be difficult when the information grows to a \u00adcertain size. Consider your hard drive as a large, free-form, tree-based database that lacks a useful index. Any time such a structure becomes large enough, data sim- ply gets lost. (Just try to find those pictures you took last summer and you\u2019ll get the idea.) As a result, having some type of search capability built into your appli- cation is important so that users can find that lost file or other information. A number of search libraries are available for Python. The problem with most of them is that they are hard to install or don\u2019t provide consistent platform support. In fact, some of them work on only one or two platforms. However, IRLib (https://github.com/gr33ndata/irlib) is written in pure Python, which ensures that it works on every platform. If you find that IRLib doesn\u2019t meet your needs, make sure the product you do get will provide the required search func- tionality on all the platforms you select and that the installation requirements are within reason. CHAPTER 21 Ten (Plus) Libraries You Need to Know About 377 IRLab works by creating a search index of whatever information you want to work with. You can then save this index to disk for later use. The search mechanism works through the use of metrics \u2014 you locate one or more entries that provide a best fit for the search criteria. Creating an Interoperable Java Environment by Using JPype Python does provide access to a huge array of libraries, and you\u2019re really unlikely to use them all. However, you might be in a situation in which you find a Java library that is a perfect fit but can\u2019t use it from your Python application unless you\u2019re willing to jump through a whole bunch of hoops. The JPype library (http://jpype.sourceforge.net/) makes it possible to access most (but not all) of the Java libraries out there directly from Python. The library works by creating a bridge between the two languages at the byte-code level. Conse- quently, you don\u2019t have to do anything weird to get your Python application to work with Java. CONVERTING YOUR PYTHON APPLICATION TO JAVA Many different ways exist to achieve interoperability between two languages. Creating a bridge between them, as JPype does, is one way. Another alternative is to convert the code created for one language into code for the other language. This is the approach used by Jython (https://wiki.python.org/jython/). This utility converts your Python code into Java code so that you can make full use of Java functionality in your application while maintaining the features that you like about Python. You\u2019ll encounter trade-offs in language interoperability no matter which solution you use. In the case of JPype, you won\u2019t have access"}, {"filename": "Beginning Programming with Python.pdf", "text": "TO JAVA Many different ways exist to achieve interoperability between two languages. Creating a bridge between them, as JPype does, is one way. Another alternative is to convert the code created for one language into code for the other language. This is the approach used by Jython (https://wiki.python.org/jython/). This utility converts your Python code into Java code so that you can make full use of Java functionality in your application while maintaining the features that you like about Python. You\u2019ll encounter trade-offs in language interoperability no matter which solution you use. In the case of JPype, you won\u2019t have access to some Java libraries. In addition, there is a speed penalty in using this approach because the JPype bridge is constantly \u00adconverting calls and data. The problem with Jython is that you lose the ability to modify your code after conversion. Any changes that you make will create an incompatibility between the original Python code and its Java counterpart. In short, no perfect solutions exist for the problem of getting the best features of two languages into one application. 378 PART 5 The Part of Tens Accessing Local Network Resources by Using Twisted Matrix Depending on your network setup, you may need access to files and other resources that you can\u2019t reach using the platform\u2019s native capabilities. In this case, you need a library that makes such access possible, such as Twisted Matrix (https:// twistedmatrix.com/trac/). The basic idea behind this library is to provide you with the calls needed to establish a connection, no matter what sort of protocol is in use. The feature that makes this library so useful is its event-driven nature. This means that your application need not get hung up while waiting for the network to respond. In addition, the use of an event-driven setup makes asynchronous communication (in which a request is sent by one routine and then handled by a completely separate routine) easy to implement. Accessing Internet Resources by Using Libraries Although products such as Twisted Matrix can handle online communication, getting a dedicated HTTP protocol library is often a better option when working with the Internet because a dedicated library is both faster and more feature \u00adcomplete. When you specifically need HTTP or HTTPS support, using a library such as httplib2 (https://github.com/jcgregorio/httplib2) is a good idea. This library is written in pure Python and makes handling HTTP-specific needs, such as setting a Keep-Alive value, relatively easy. (A Keep-Alive is a value that determines how long a port stays open waiting for a response so that the applica- tion doesn\u2019t have to continuously re-create the connection, wasting resources and time as a result.) You can use httplib2 for any Internet-specific methodology \u2014 it provides full support for both the GET and POST request methods. This library also includes routines for standard Internet compression methods, such as deflate and gzip. It also supports a level of automation. For example, httplib2 adds ETags back into PUT requests when resources are already cached. Index 379 Symbols"}, {"filename": "Beginning Programming with Python.pdf", "text": "Keep-Alive value, relatively easy. (A Keep-Alive is a value that determines how long a port stays open waiting for a response so that the applica- tion doesn\u2019t have to continuously re-create the connection, wasting resources and time as a result.) You can use httplib2 for any Internet-specific methodology \u2014 it provides full support for both the GET and POST request methods. This library also includes routines for standard Internet compression methods, such as deflate and gzip. It also supports a level of automation. For example, httplib2 adds ETags back into PUT requests when resources are already cached. Index 379 Symbols \\ (backslash), 229, 307 : (colon), 136, 152 {} (curly brackets), 239 = (equals) sign, 125, 212 / (forward slash), 307 [] (square brackets), 231 A Abaqus, 355 absolute path, 307 The Absolute Minimum Every Software Developer Absolutely, Positively Must Know about Unicode and Character Sets (No Excuses!), 351 Accelerate, 58 accented (special character category), 229 accessor, 297 AddIt() command, 129 Advanced IBM Unix (AIX) (platform), 22 align formatting specification, 239 Amazon, Echo, 7 American Standard Code for Information Interchange (ASCII), 226, 227 Anaconda changing appearance of Jupyter Notebook, 90\u201394 installation of on Linux, 59 installation of on MacOS, 60\u201361 installation of on Windows, 61\u201364 interacting with the kernel, 94\u201395 manipulating cells, 86\u201390 as name of Integrated Development Environment (IDE), 38, 55 obtaining help, 95\u201397 obtaining your copy of, 58\u201364 packages specifically designed for, 200, 201 reasons for using, 57 using magic functions, 97\u201399 version 4.4.0, 58 viewing running processes of, 99\u2013100 working with, 83\u2013100 working with checkpoints, 85\u201386 Anaconda Cloud, 104 Anaconda Prompt, 210, 219, 220 Android (platform), 22 append() function, 250 Apple, Siri, 7 application (app) adding comments, 77\u201380 adding documentation cells, 74\u201375 closing Jupyter Notebook, 80\u201381 converting your Python application to Java, 377 creating, 71\u201375 creating of faster by using IDE, 348 CRUD acronym to describe what it does, 37 defined, 10, 11\u201313 documentation associated with, 365 finding useful Python applications, 17\u201318 installing of using PyInstaller, 364\u2013365 making your Python application fast, 352 never test on production server, 364 organizing information in, 244\u2013246 other cell content, 75 performing specialty scripting for, 355\u2013356 questions to ask yourself as you work with, 13 role of, 9, 11 testing of by using PyUnit, 368\u2013369 testing of class in, 301\u2013302 understanding cells, 71\u201373 using class in, 298\u2013299 world\u2019s worst, 13 writing your first one, 55\u201381 ARCGIS, 358 arg values, 41 *args variable argument, 293 arguments. See also specific arguments creating functions with variable number of, 130\u2013131 defined, 40, 127 giving function arguments a default value, 129\u2013130 Index 380 Beginning Programming with Python For Dummies arguments (continued) positional arguments, 129 sending arguments by keyword, 129 sending required arguments, 128 understanding of, 127\u2013128 variable arguments, 293 working with exception arguments, 177\u2013178 arithmetic operators, 116, 118 ArithmeticError, 183 ASCII (American Standard Code for Information Interchange), 226, 227 assignment operator (=), 105, 136 assignment operators, 116, 120\u2013121 Attachments (Cell Toolbar menu option), 94 attributes. See also specific attributes automatically generated by Python, 216 considering built-in"}, {"filename": "Beginning Programming with Python.pdf", "text": "variable argument, 293 arguments. See also specific arguments creating functions with variable number of, 130\u2013131 defined, 40, 127 giving function arguments a default value, 129\u2013130 Index 380 Beginning Programming with Python For Dummies arguments (continued) positional arguments, 129 sending arguments by keyword, 129 sending required arguments, 128 understanding of, 127\u2013128 variable arguments, 293 working with exception arguments, 177\u2013178 arithmetic operators, 116, 118 ArithmeticError, 183 ASCII (American Standard Code for Information Interchange), 226, 227 assignment operator (=), 105, 136 assignment operators, 116, 120\u2013121 Attachments (Cell Toolbar menu option), 94 attributes. See also specific attributes automatically generated by Python, 216 considering built-in class attributes, 285\u2013286 defined, 198 audio, enhancing your application with by using PyAudio, 374 automatic checkpoint save, 85 B b command, 220 -B option, 40 -b option, 40 backslash (\\), 229, 307 Base 2, 106 Base 8, 106 Base 10, 106 Base 16 (hex), 106 base classes (exception category), 172 BaseException, 183 -bb option, 40 Beginning Programming with Python For Dummies (BPPD) folder, 65\u201366 BeOS (platform), 22 Berkeley Software Distribution (BSD)/FreeBSD (platform), 22 bin() command, 106 BitBucket, 362 bitwise operators, 116, 120 Blender, 355 body (email), 325 bool type, 110 Boole, George (definer of Boolean algebra), 110 BOOLEAN link, 220 Boolean values, 110 Boris, the Twitter Dino-Bot, 357 BPPD (Beginning Programming with Python For Dummies) folder, 65\u201366 break clause, 154 break statement, 153\u2013156 BSD (Berkeley Software Distribution)/FreeBSD (platform), 22 bugs, 56, 166, 218, 344, 362\u2013363 bug-tracking sites, 362 built-in packages, 200 __builtins__ attribute, 216 C C# (programming language), 15, 16, 18 __cached__ attribute, 216 capitalize() function, 233 car security systems, Python as language of choice for, 359 case sensitivity, 40, 170 catching exceptions, 165\u2013166, 171\u2013188 -c cmd option, 40 C/C++ (programming language), 14, 15, 18, 198, 353 cell toolbar features, 93 Cell Toolbar option, 91 Cell Type Selection icon, 91 cells, 71\u201375, 86\u201390 center(width, fillchar=\" \") function, 233, 234 CentOS, 28 Change Kernel (kernel-specific command), 95 character sets, 227 Cheat sheet, 3 check (pip command), 215 checkpoints, 85\u201386 child class, 299\u2013301 Cinema 4D, 356 Clark, Arthur C. (science writer), 55 class, defined, 282 __class__ attribute, 285\u2013286 class definition, 284\u2013285 class method, 287 class variable, 282\u2013283, 290\u2013292 classes child class, 299\u2013301 as code grouping, 198 Index 381 considering built-in class attributes, 285\u2013286 considering parts of, 284\u2013302 creating, 296\u2013298 creating and using, 281\u2013302 creating class definition, 284\u2013285 creating class methods, 287 creating instance methods, 288 extending classes to make new classes, 299\u2013302 overloading operators, 294\u2013296 parent class, 299 production-grade class, 299 saving class to disk, 297\u2013298 testing of in application, 301\u2013302 understanding of as packaging method, 282\u2013283 using methods with variable argument lists, 293\u2013294 using of in application, 298\u2013299 working with constructors, 288\u2013290 working with methods, 286\u2013287 working with variables, 290\u2013293 clause, 141. See also specific clauses clear() function, 250 Clear option, 90 client code, source code for, 198 cloud-based storage, 305 Clusters tab (main Notebook page), 99 code creating better code, 56 developing of by using Komodo Edit, 366\u2013367 downloading yours, 84\u201385 tidying of by using Isort, 369 use of term,"}, {"filename": "Beginning Programming with Python.pdf", "text": "overloading operators, 294\u2013296 parent class, 299 production-grade class, 299 saving class to disk, 297\u2013298 testing of in application, 301\u2013302 understanding of as packaging method, 282\u2013283 using methods with variable argument lists, 293\u2013294 using of in application, 298\u2013299 working with constructors, 288\u2013290 working with methods, 286\u2013287 working with variables, 290\u2013293 clause, 141. See also specific clauses clear() function, 250 Clear option, 90 client code, source code for, 198 cloud-based storage, 305 Clusters tab (main Notebook page), 99 code creating better code, 56 developing of by using Komodo Edit, 366\u2013367 downloading yours, 84\u201385 tidying of by using Isort, 369 use of term, 198 using comments to keep code from executing, 80 using comments to leave yourself reminders in, 79 code block, 138, 139 code cell type, 87 code groupings, 198\u2013202 code packages, 124 code repository, 65\u201371 code reusability, 124\u2013125 coding styles, 45 collections defined, 261 deques as. See deques dictionaries as. See dictionaries queues as. See queues stacks as. See stacks tuples as. See tuples understanding of, 262\u2013263 colon (:), 136, 152 color codes, in IDLE, 36 ,formatting specification, 240 command. See also specific commands defined, 43 finding commands using Command Palette, 91\u201392 seeing result of, 44 telling computer what to do, 43 telling computer when you\u2019re done, 44 typing of, 43\u201345 command line, 38\u201343, 51\u201353 Command Palette, 91\u201392 command shell IPython, 96 command-line shell, 31 command-line tool, 55\u201356 comments, 77\u201380 communication, application as form of, 9\u201311 companion files, 4 comparisons, 114\u2013115 compile time error, 168 complex numbers, 109 computer helping humans speak to, 12\u201313 telling it what to do, 43 telling it when you\u2019re done, 44 understanding how computers make comparisons, 115 understanding how computers view lists, 245 understanding that they take things literally, 11 understanding why you want to talk to yours, 8 as using special language, 12 concrete exceptions (exception category), 172 conda clean command, 201 conda commands, 201\u2013202 conda create command, 201 conda help command, 202, 210 conda info command, 202, 212, 214 conda install command, 202 conda list command, 202, 210, 211 conda packages, 200, 210\u2013215 conda remove command, 202, 214 conda search command, 202, 210, 211, 213 conda update command, 202, 213, 214 382 Beginning Programming with Python For Dummies conda utilities, 209 constant, 209 constructors, working with, 288\u2013290 continue clause, 156, 158 continue statement, 156\u2013157 control (special character category), 229 Copy Cells editing command, 88 copy() function, 250 Copy Selected Cells icon, 91 copyright() command, 46 count() function, 262 Counter object, 259\u2013260 count(str, beg= 0, end=len(string)) function, 237 credits() command, 46 CRUD acronym, 37, 250, 305\u2013306 curly brackets ({}), 239 current directory, 203, 208 custom exceptions, 191\u2013192 custom packages, 200 Cut Cells editing command, 88 Cut Selected Cells icon, 90 D -d option, 40 data collecting all sorts of, 261\u2013279 controlling how Python views data, 114\u2013115 a.k.a. information, 113 performing real-time analysis of as occupation that uses Python regularly, 359\u2013360 storing of in files, 305\u2013322 tabular data presentation by using PrettyTable, 374 data conversion, 133 data integrity, 306 data member, 283 \u201cData Mining: Discovering and"}, {"filename": "Beginning Programming with Python.pdf", "text": "46 count() function, 262 Counter object, 259\u2013260 count(str, beg= 0, end=len(string)) function, 237 credits() command, 46 CRUD acronym, 37, 250, 305\u2013306 curly brackets ({}), 239 current directory, 203, 208 custom exceptions, 191\u2013192 custom packages, 200 Cut Cells editing command, 88 Cut Selected Cells icon, 90 D -d option, 40 data collecting all sorts of, 261\u2013279 controlling how Python views data, 114\u2013115 a.k.a. information, 113 performing real-time analysis of as occupation that uses Python regularly, 359\u2013360 storing of in files, 305\u2013322 tabular data presentation by using PrettyTable, 374 data conversion, 133 data integrity, 306 data member, 283 \u201cData Mining: Discovering and Visualizing Patterns with Python,\u201d 358 data mining, performing of as occupation that uses Python regularly, 358 data types Boolean values, 110 complex numbers, 109 defined, 105 essential Python data types, 105\u2013111 expressions, 131 floating-point values, 107, 108, 109 integers, 106\u2013107, 108 results from other functions, 131 strings, 110\u2013111 numeric types, 106\u2013110 values, 131 variables, 131 DataBase Administrator (DBA), 372 DataBase Management System (DBMS), 362, 372 databases, interacting with by using SQLAlchemy, 372\u2013373 datasets, downloading of, 64\u201371 dates, working with, 111\u2013112 Debian-based Linux distributions, 30 debugger, 167, 361, 367 debugging, 56\u201357, 171, 367\u2013368 decision making, 135\u2013149 decryption, 372 default directories, 208 default Python setups, 24 default value, giving function arguments a default value, 129\u2013130 Delete Cells editing command, 88 deques, 244, 263, 278\u2013279 developer documentation, 365 development tool, 18 dictionaries as collections, 262 creating and using, 267\u2013269 replacing switch statement with, 270\u2013272 as sequence supported by Python, 244 working with, 266\u2013272 dir() command, 205 dir() function, 216, 248 direct help, 46, 50\u201351 directories as arranged in hierarchies, 307 current directory as source of path information, 208 default directories as source of path information, 208 files as organized into, 306 interacting with current Python directory, 203 doc() function, 219 __doc__ attribute, 216 document strings (docstrings), 366 documentation, 344\u2013345, 365 double quotes, use of, 227 Index 383 download (pip command), 215 drawing (special character category), 229 E -E option, 40 Echo (Amazon), 7 Edit Metadata (Cell Toolbar menu option), 93 editing commands, provided by Notebook, 88 elif clause, 143 else clause, 141, 143, 158 else statement, 158\u2013159 email components of, 325 creating message for, 335\u2013338 defining parts of envelope, 326\u2013331 defining parts of letter, 331\u2013335 seeing email output, 338\u2013339 sending, 323\u2013339 transmission method, 334\u2013335 understanding what happens when you send, 324\u2013335 viewing of as you do a letter, 325\u2013326 working with HTML message, 337\u2013338 working with text message, 335\u2013336 Embedded Python, 358 embedded systems, interacting with as occupation that uses Python regularly, 358\u2013359 encryption, 372 endless loop, 160 endswith(suffix, beg=0, end=len(string)) function, 237 envelope, 325, 326 environment variables, 41\u201343, 207 equals (=) sign, 125, 212 error handling, 165 errors catching exceptions, 165\u2013166, 171\u2013188 classifying when errors occur, 168 compile time error, 168 considering sources of, 167\u2013171 custom exceptions, 191\u2013192 dealing with, 165\u2013194 distinguishing error types, 169\u2013170 exceptions using finally clause, 192\u2013194 getting past common Python newbie errors, 350\u2013351 knowing why Python doesn\u2019t understand you, 166\u2013167 logical error, 170, 171 of omission, 169 principal"}, {"filename": "Beginning Programming with Python.pdf", "text": "337\u2013338 working with text message, 335\u2013336 Embedded Python, 358 embedded systems, interacting with as occupation that uses Python regularly, 358\u2013359 encryption, 372 endless loop, 160 endswith(suffix, beg=0, end=len(string)) function, 237 envelope, 325, 326 environment variables, 41\u201343, 207 equals (=) sign, 125, 212 error handling, 165 errors catching exceptions, 165\u2013166, 171\u2013188 classifying when errors occur, 168 compile time error, 168 considering sources of, 167\u2013171 custom exceptions, 191\u2013192 dealing with, 165\u2013194 distinguishing error types, 169\u2013170 exceptions using finally clause, 192\u2013194 getting past common Python newbie errors, 350\u2013351 knowing why Python doesn\u2019t understand you, 166\u2013167 logical error, 170, 171 of omission, 169 principal categories of, 167 raising exceptions, 188\u2013191 runtime error, 168\u2013169 semantic error, 170\u2013171 syntactical error, 170 that are of a specific type, 167 that occur at a specific time, 167 escape character, 229 escape code, 229 escape sequence, 229\u2013230 example code, downloading of, 64\u201371 except clause handling multiple exceptions with multiple except clauses, 181\u2013183 handling multiple exceptions with single except clause, 180\u2013181 use of without an exception, 175\u2013177 Exception, 183 exception arguments, 177\u2013180 exception handling, 165, 171\u2013183, 185\u2013188 exception hierarchy, 183 exceptions catching of, 165\u2013166, 171\u2013188 creating and using custom exceptions, 191\u2013192 handling more specific to less specific exceptions, 183\u2013185 handling multiple exceptions with multiple except clauses, 181\u2013183 handling multiple exceptions with single except clause, 180\u2013181 handling single exception, 172\u2013175 nested exception handling, 185\u2013188 raising of, 166, 188\u2013191 understanding built-in exceptions, 172 using except clause without an exception, 175\u2013177 using finally clause, 192\u2013194 working with exception arguments, 177\u2013178 exit() command, 51, 52 expandtabs(tabsize=8) function, 233 Explain if like I\u2019m five: Python and Unicode? 352 exponent, 108 extend() function, 250 eXtensible Markup Language (XML), 16, 308, 349\u2013350 extension (on files), 306 384 Beginning Programming with Python For Dummies F False, 110 Fedora Core, 28 field, 373 __file__ attribute, 216 filename, 40 files creating, 311\u2013314 deleting, 321\u2013322 extensions on, 306 reading file content, 314\u2013317 storing data in, 305\u2013322 updating file content, 317\u2013321 Files tab (main Notebook page), 99 fill formatting specification, 239 finally clause, 192\u2013194 find(str, beg=0, end=len(string)) function, 237 flags, 211 float() command, 111, 133 floating-point values, 107, 108, 109 floor division operator (//), 185 folder, files as organized into, 306 for loop, 130, 152, 153, 162 for statement, 152\u2013159, 249\u2013250 --force command-line switch, 215 format() function, 239 forward slash (/), 307 freeze (pip command), 215 from.import statement, 202, 205\u2013207 function overloading, 283 functional coding style, 45 functions. See also specific functions accessing of, 126\u2013127 associated with CRUD, 250 as code grouping, 198 comparing function output, 132 creating and using, 123\u2013132 defining of, 125\u2013126 as helping applications control data, 114 list of commonly used ones for searching strings, 237 list of commonly used ones for slicing and dicing strings, 233\u2013235 returning information from, 131\u2013132 sending information to, 127\u2013131 understanding code reusability, 124\u2013125 viewing of as code packages, 124 G geocoding, 373 Geographic Information System (GIS), 357\u2013358, 373 Get button, 221 getters, 297 GIMP, 356 The GIS and Python Software Laboratory, 357 GIS Programming and Automation, 357 Github, 362 global variables, 282, 290"}, {"filename": "Beginning Programming with Python.pdf", "text": "accessing of, 126\u2013127 associated with CRUD, 250 as code grouping, 198 comparing function output, 132 creating and using, 123\u2013132 defining of, 125\u2013126 as helping applications control data, 114 list of commonly used ones for searching strings, 237 list of commonly used ones for slicing and dicing strings, 233\u2013235 returning information from, 131\u2013132 sending information to, 127\u2013131 understanding code reusability, 124\u2013125 viewing of as code packages, 124 G geocoding, 373 Geographic Information System (GIS), 357\u2013358, 373 Get button, 221 getters, 297 GIMP, 356 The GIS and Python Software Laboratory, 357 GIS Programming and Automation, 357 Github, 362 global variables, 282, 290 GNU Compiler Collection (GCC) tools, 27 Google App Engine, 356 Google Code, 362 Google Maps, 373 graphical user interface (GUI), 16, 31, 373\u2013374 graphs, 375\u2013376 \u201cA guide to analyzing Python performance,\u201d 352 H -h option, 40 handle, 166 header (email), 325 heading (obsolete) cell type, 87 headings, versus comments, 77 Hello() function, 125, 126\u2013127 Hello2() function, 127\u2013128 Hello3() function, 129 Hello4() function, 130 help, 46\u201351, 95\u201397 help (pip command), 215 help() command, 46, 47 help mode, 46\u201347, 49\u201350 Hewlett-Packard Unix (HP-UX) (platform), 22 hex() command, 106 home automation and security systems, Python as language of choice for, 359 host (email address), 326, 327\u2013328 host address, 327 hostname, 330 Houdini, 356 HP-UX (Hewlett-Packard Unix) (platform), 22 HTML (.html) download option, 84 HTML message, 337\u2013338 HTTP protocol library, 378 httplib2, 378 Index 385 I -i option, 40 IBM i (formerly Application System 400 or AS/400, iSeries, and System i) (platform), 22 icons, explained, 3 IDE (Integrated Development Environment), 2, 38, 55, 56\u201358, 83 IDE (Interactive Development Environment), 348, 366 identity operators, 116, 122 IDLE (Integrated DeveLopment Environment), 24, 31, 32, 35, 36, 38, 56, 348 IDLE (Interactive DeveLopment Environment), 28 IEEE Spectrum, 15 IEEE-754 standard, 108 if statement, 136\u2013141, 143, 146\u2013148 if.elif statement, 143\u2013145, 146, 266, 270 if.else statement, 141\u2013148 IfElse.py, 172 IIS (Internet Information Server), 355 images, manipulating of by using PyQtGraph, 375\u2013376 imperative coding style, 45 import statement, 197, 202, 203\u2013205 importing, 112, 197, 202\u2013207 indentation, 75\u201377 index() function, 262 index(str, beg=0, end=len(string)) function, 237 information controlling how Python views data, 114\u2013115 creating and using functions, 123\u2013132 a.k.a. data, 113 locating of by using IRLib, 376\u2013377 managing, 113\u2013133 storing, 104\u2013105 storing and modifying, 103\u2013112 working with operators, 115\u2013123 inheritance, 283, 299 __init__() constructor, 289 initializing, 289 __initializing__ attribute, 216 Inkscape, 356 input() function, 132\u2013133 Insert Cell Below icon, 90 insert() function, 250 insertion pointer, 229 install (pip command), 215 installation of Python, 24\u201331 testing of, 35 instance, 283 instance method, 288 instance variable, 283, 290, 292\u2013293 instantiate, 284 instantiation, 283 int() command, 111 int data type, 106 integers, 106\u2013107, 108 Integrated Development Environment (IDE), 2, 38, 55, 56\u201358, 83 Integrated DeveLopment Environment (IDLE), 24, 31, 32, 35, 36, 38, 56, 348 Interactive Development Environment (IDE), 348, 366 Interactive DeveLopment Environment (IDLE), 28 interactive environment, 45, 368 Internet Information Server (IIS), 355 Interrupt (kernel-specific command), 94 Interrupt Kernel icon, 91 \u201cIntro to Python & Automation for Network Engineers,\u201d 356 iPhone Operating"}, {"filename": "Beginning Programming with Python.pdf", "text": "function, 250 insertion pointer, 229 install (pip command), 215 installation of Python, 24\u201331 testing of, 35 instance, 283 instance method, 288 instance variable, 283, 290, 292\u2013293 instantiate, 284 instantiation, 283 int() command, 111 int data type, 106 integers, 106\u2013107, 108 Integrated Development Environment (IDE), 2, 38, 55, 56\u201358, 83 Integrated DeveLopment Environment (IDLE), 24, 31, 32, 35, 36, 38, 56, 348 Interactive Development Environment (IDE), 348, 366 Interactive DeveLopment Environment (IDLE), 28 interactive environment, 45, 368 Internet Information Server (IIS), 355 Interrupt (kernel-specific command), 94 Interrupt Kernel icon, 91 \u201cIntro to Python & Automation for Network Engineers,\u201d 356 iPhone Operating System (iOS) (platform), 22 IPython, 96, 97, 98, 368 IRLib, 376\u2013377 isalnum() function, 233 isalpha() function, 233 isdecimal() function, 233 isdigit() function, 233 islower() function, 233 isnumeric() function, 234 Isort, 369 isspace() function, 234 istitle() function, 234 isupper() function, 234 IT staff, as occupation that uses Python regularly, 355 iterable items, 279 J Java (programming language), 14, 15, 18, 19, 377 JavaScript, 16 join(seq) function, 234 JPype, 377 --json flag, 211 386 Beginning Programming with Python For Dummies --json switch, 212 Jupyter Notebook. See also Notebook changing appearance of, 90\u201394 closing, 80\u201381 IDE named as, 55 starting, 64\u201365 Jython, 377 K Keep-Alive value, 378 kernel, 94\u201395 KeyboardInterrupt exception, 174, 186 keywords basic help topic, 47 Knuth, Donald (computer scientist), 57 Komodo Edit, 56, 366\u2013367 Komodo IDE, 367 **kwargs variable argument, 293 L Language INtegrated Query (LINQ), 16 LaTeX (.tex) download option, 84 Launchpad, 362 LearnPython.org tutorial, 345 len(string) function, 234 Leopard version of OS X (10.5), 27 libraries accessing Internet resources by using, 378 defined, 197 getting additional ones, 346\u2013347 search libraries, 376 you need to know about, 371\u2013378 library code, 198, 218 license() command, 46 Lightwave, 356 line numbers, 92 LINQ (Language INtegrated Query), 16 Linux (platform), 22, 28\u201331, 35, 59 list (pip command), 215 lists accessing of, 248\u2013249 creating, 246\u2013248 creating stacks using, 273\u2013275 defining organization by using, 244\u2013245 looping through, 249\u2013250 managing, 243\u2013260 modifying, 250\u2013253 organizing information in an application, 244\u2013246 printing, 257\u2013259 searching, 254\u2013255 sorting, 255\u2013257 tuples as distinguished from, 263 understanding how computers view, 245\u2013246 using operators with, 253 working with Counter object, 259\u2013260 literate programming, 57 ljust(width, fillchar=\" \") function, 234 __loader__ attribute, 216 local hostname (email address), 326\u2013327, 330\u2013331 location, helping build decide on as occupation that uses Python regularly, 357\u2013358 logical error, 170, 171 logical operators, 116, 119, 139\u2013141 loop, 152, 153, 160, 162\u2013164 lower() function, 234 lstrip() function, 234 M Mac, 27\u201328, 34\u201335 Mac OS X (platform), 22 MacOS, installation of Anaconda on, 60\u201361 magic functions, 97, 98\u201399 manitssa, 108 manual checkpoint save, 85\u201386 Markdown (interface-specific help entry), 95 Markdown (.md) download option, 84 markdown cell type, 87 Mathematica, 57 MATLAB, 57 max(str) function, 234, 236 Maya, 355 membership operators, 116, 121\u2013122 merging a cell, 88 message (email), 325, 332\u2013334 message subtypes (email), 335 method, 283, 286\u2013287, 293\u2013294 Microsoft C# (programming language), 15, 16, 18 .docx file, 309 Index 387 Knowledge Base scripting article, 355 .zip file, 309 Microsoft Disk Operating"}, {"filename": "Beginning Programming with Python.pdf", "text": "160, 162\u2013164 lower() function, 234 lstrip() function, 234 M Mac, 27\u201328, 34\u201335 Mac OS X (platform), 22 MacOS, installation of Anaconda on, 60\u201361 magic functions, 97, 98\u201399 manitssa, 108 manual checkpoint save, 85\u201386 Markdown (interface-specific help entry), 95 Markdown (.md) download option, 84 markdown cell type, 87 Mathematica, 57 MATLAB, 57 max(str) function, 234, 236 Maya, 355 membership operators, 116, 121\u2013122 merging a cell, 88 message (email), 325, 332\u2013334 message subtypes (email), 335 method, 283, 286\u2013287, 293\u2013294 Microsoft C# (programming language), 15, 16, 18 .docx file, 309 Index 387 Knowledge Base scripting article, 355 .zip file, 309 Microsoft Disk Operating System (MS-DOS) (platform), 22 MIME (Multipurpose Internet Mail Extensions), 332 MIMEApplication, 332 MIMEAudio, 332 MIMEImage, 332 MIMEMultipart, 332 MIMEText, 332 Miniconda installer, 58 min(str) function, 234 -m mod option, 40 Modo, 356 Module Index, 220 modules, a.k.a. packages, 197 modules basic help topic, 47 MorphOS (platform), 22 MotionBuilder, 356 Move Selected Cells Down icon, 91 Move Selected Cells Up icon, 91 MS-DOS (Microsoft Disk Operating System) (platform), 22 Mueller, John blog, 352 email address, 23 multiline comment, 78 multiple tasks, performing of, 138\u2013139 Multipurpose Internet Mail Extensions (MIME), 332 MyClass class, 296\u2013299 myVar variable, 105 N __name__ attribute, 216 nested decision statements, 146\u2013149 nesting, 185 nesting loop statements, 162\u2013164 network accessing local network resources by using Twisted Matrix, 378 administering of as occupation that uses Python regularly, 356 \u201cNetwork Management,\u201d 356 NEWS.txt file, 38 non-conda packages, 201 None (Cell Toolbar menu option), 93 Not Trusted button, 89 Notebook. See also Jupyter Notebook coding environment in, 84 shortened version of Jupyter Notebook, 65 trusting your, 89 Notebook Help (interface-specific help entry), 95 notebooks, 57, 67\u201371 Nuke, 356 # formatting specification, 240 numbers, defining character by using numbers, 226\u2013227 numeric bases, 106 numeric data types, 106, 108 NumPy, 16, 18 O -O option, 41 object, defined, 283 object-oriented coding style, 45 Object-Oriented Programming (OOP), 289 objects, data stored as, 306 occupations that use Python regularly, 353\u2013360 oct() command, 106 -OO option, 41 Open the Command Palette icon, 91 Operating System 2 (OS/2) (platform), 22 Operating System 390 (OS/390) and z/OS (platform), 22 operator overloading, 283 operators. See also specific operators categories of, 116 defining of, 116 as helping applications control data, 114 overloading of, 294\u2013296 as Python\u2019s main method for making comparisons, 114\u2013115 understanding operator precedence, 122\u2013123 use of with lists, 253 working with, 115\u2013123 orphaned product, 365 OS exceptions (exception category), 172 OS X version 10.5, 27 OS X version 10.12, 27 os._exit() command, 52, 53 OS/2 (Operating System 2) (platform), 22 OS/390 (Operating System 390) and z/OS (platform), 22 os.rmdir() function, 322 other (special character category), 229 outputs, toggling of, 90 388 Beginning Programming with Python For Dummies P package cache, 201 package content, 216\u2013218 Package Docs (Python Package Documentation), 219 package documentation, 219\u2013223 __package__ attribute, 216 packages built-in packages, 200 conda packages, 200, 210\u2013215 considering package cache, 201 custom packages, 200 defined, 197 downloading of from other sources, 209\u2013216 finding of on disk, 207\u2013209 importing, 202\u2013207 installing packages by"}, {"filename": "Beginning Programming with Python.pdf", "text": "172 OS X version 10.5, 27 OS X version 10.12, 27 os._exit() command, 52, 53 OS/2 (Operating System 2) (platform), 22 OS/390 (Operating System 390) and z/OS (platform), 22 os.rmdir() function, 322 other (special character category), 229 outputs, toggling of, 90 388 Beginning Programming with Python For Dummies P package cache, 201 package content, 216\u2013218 Package Docs (Python Package Documentation), 219 package documentation, 219\u2013223 __package__ attribute, 216 packages built-in packages, 200 conda packages, 200, 210\u2013215 considering package cache, 201 custom packages, 200 defined, 197 downloading of from other sources, 209\u2013216 finding of on disk, 207\u2013209 importing, 202\u2013207 installing packages by using pip, 215\u2013216 interacting with, 197\u2013223 a.k.a. modules, 197 non-conda packages, 201 understanding package types, 200\u2013201 viewing package content, 216\u2013218 viewing package documentation, 219\u2013223 packaging methods, as helping applications control data, 114 Paint Shop Pro, 356 PalmOS (platform), 22 parent class, 299 pass clause, 157\u2013158 Paste Cells Below editing command, 88 Paste Cells Below icon, 91 Paste Cells editing command, 88 path, defined, 307 path information, 207\u2013209 PDF via LaTeX (.pdf) download option, 84 pdoc, 365\u2013366 PERL (Practical Extraction and Report Language), 19 Perl (programming language), 19 permanent storage, 306\u2013311 pip (Pip Installs Packages) utilities, 209, 215\u2013216 platforms defined, 21 supported by Anaconda, 58 supported by Python, 22 PlayStation (platform), 22 pop() function, 250 port (email address), 326, 328\u2013330 positional arguments, 129 Practical Extraction and Report Language (PERL), 19 .precision formatting specification, 240 PrettyTable, 374 prewritten code, 64 print() command, 35, 43, 44, 48 print() function, 248 print() function argument, 129 procedural coding style, 45 procedure, 9\u201310, 11 production server, never test on, 364 production-grade class, 299 A Programmer\u2019s Guide to Data Mining, 358 programming language C#, 15, 16, 18 C/C++, 14, 15, 18, 198, 353 comparing Python to other languages, 18\u201320 creation of, 14 defined, 12 Java, 14, 15, 18, 19, 377 Perl, 19 R, 19\u201320 why you need to know multiple programming languages, 354 programming resources, 343\u2013352 programming skills, teaching of as occupation that uses Python regularly, 357 Psion (platform), 22 PyAudio, 374\u2013375 PyCrypto, 372 pydbgr, 367\u2013368 Pydoc (Python Package Documentation) application, 219\u2013220 PyGame, 375 PyInstaller, 364\u2013365 PyPI (Python Package Index), 210 .py files, 218 PyQtGraph, 375\u2013376 Python accessing of on your machine, 31\u201335 case sensitivity of, 40, 170 coding styles of, 45 common uses of, 15\u201316 comparing of to other languages, 18\u201320 current version of, 23 Index 389 deciding how you can personally benefit from, 15\u201316 discovering which organizations use, 16\u201317 documentation online, 344\u2013345 downloading the version you need, 21\u201324 enhancing your experience with, 361\u2013369 as fifth-ranked language on TIOBE, 1, 15 finding useful applications written in, 17\u201318 as first-ranked language on IEEE Spectrum, 15 getting your own copy of, 21\u201336 installation of, 24\u201331 interacting with, 37\u201353 knowing why it doesn\u2019t understand you, 166\u2013167 as learning tool, 15, 353 main objective of creating it, 14 making your Python application fast, 352 performing web programming by using, 346 programming resources, 343\u2013352 reasons for using, 14\u201315 starting, 38\u201339 as third-ranked language on Tech Rapidly, 15 use of by colleges"}, {"filename": "Beginning Programming with Python.pdf", "text": "which organizations use, 16\u201317 documentation online, 344\u2013345 downloading the version you need, 21\u201324 enhancing your experience with, 361\u2013369 as fifth-ranked language on TIOBE, 1, 15 finding useful applications written in, 17\u201318 as first-ranked language on IEEE Spectrum, 15 getting your own copy of, 21\u201336 installation of, 24\u201331 interacting with, 37\u201353 knowing why it doesn\u2019t understand you, 166\u2013167 as learning tool, 15, 353 main objective of creating it, 14 making your Python application fast, 352 performing web programming by using, 346 programming resources, 343\u2013352 reasons for using, 14\u201315 starting, 38\u201339 as third-ranked language on Tech Rapidly, 15 use of by colleges to teach coding, 15 ways to making a living with, 353\u2013360 why it\u2019s so cool, 14\u201320 Python (.py) download option, 84 Python 2.7.10, 27 Python 3.3.4, 21 Python and GIS Resources, 357 Python: Common Newbie Mistakes, Part 1, 351 Python: Common Newbie Mistakes, Part 2, 351 Python DevelopmentTools, 362 Python Encodings and Unicode, 352 Python Package Documentation (Package Docs or Pydoc), 219 Python Package Index (PyPI), 210 Python SayHello.py, 40 PYTHONCASEOK=x environment variable, 42 PYTHONDEBUG=x environment variable, 42 PYTHONDONTWRITEBYTECODE=x environment variable, 42 PythonEditors wiki, 348 PYTHONFAULTHANDLER=x environment variable, 42 Python-h, 39 PYTHONHASHSEED=arg environment variable, 42 PYTHONHOME=arg environment variable, 42 PYTHONINSPECT=x environment variable, 42 PYTHONIOENCODING=arg environment variable, 42 PYTHONNOUSERSITE environment variable, 42 PYTHONOPTIMIZE=x environment variable, 42 PYTHONPATH=arg environment variable, 42 PythonSpeed Performance Tips, 352 PYTHONSTARTUP=arg environment variable, 42 PYTHONUNBUFFERED=x environment variable, 42 PYTHONVERBOSE=x environment variable, 42 python.vim utility, 349 Pythonware site, 346 PYTHONWARNINGS=arg environment variable, 42 PyUnit, 368\u2013369 Q q command, 220 -q option, 41 QNX (platform), 22 Quality Assurance (QA) departments, as occupation that uses Python regularly, 354 queues, 244, 263, 275\u2013277 quick-access links, 220 quit() command, 36 quit() command, 51, 52 R R (programming language), 19\u201320 raising exceptions, 166, 188\u2013191 range checking, 139\u2013141 range() function, 152 Raspberry Pi, 357, 358 Raw Cell Format (Cell Toolbar menu option), 93 raw NBConvert cell type, 87 README file, 38 receiver (email), 331 Reconnect (kernel-specific command), 95 records, defined, 372 Red Hat, 28 Red Hat Package Manager (RPM)-based distribution, 28 Relational DataBase Management System (RDBMS), 373 relational equality operator (==), 136 relational operators, 116, 118\u2013119, 136, 137\u2013138 relative path, 307 relative path character sets, 307 remove() function, 250 repetitive tasks, performing of, 151\u2013164 390 Beginning Programming with Python For Dummies replace(old, new [, max]) function, 237 repository, 65 reST (.rst) download option, 84 Restart (kernel-specific command), 95 Restart & Clear Output (kernel-specific command), 95 Restart & Run All (kernel-specific command), 95 Restart the Kernel icon, 91 return keyword, 131 return values, 131\u2013132 rfind(str, beg=0, end=len(string)) function, 237 rindex(str, beg=0, end=len(string)) function, 237 RISC OS (originally Acorn) (platform), 22 rjust(width, fillchar=\" \") function, 234 Roundup Issue Tracker, 362\u2013363 rstrip() function, 234 Run Cell icon, 91 runnable code, 198\u2013199 Running tab (main Notebook page), 99, 100 runtime error, 168\u2013169 S -S option, 41 -s option, 41 safe access, ensuring of, 89 Save and Checkpoint icon, 90 SaveData() method, 312 SayGoodbye() function, 199 SayHello() function, 199 scientific tasks, carrying out of as occupation that uses Python"}, {"filename": "Beginning Programming with Python.pdf", "text": "95 Restart & Run All (kernel-specific command), 95 Restart the Kernel icon, 91 return keyword, 131 return values, 131\u2013132 rfind(str, beg=0, end=len(string)) function, 237 rindex(str, beg=0, end=len(string)) function, 237 RISC OS (originally Acorn) (platform), 22 rjust(width, fillchar=\" \") function, 234 Roundup Issue Tracker, 362\u2013363 rstrip() function, 234 Run Cell icon, 91 runnable code, 198\u2013199 Running tab (main Notebook page), 99, 100 runtime error, 168\u2013169 S -S option, 41 -s option, 41 safe access, ensuring of, 89 Save and Checkpoint icon, 90 SaveData() method, 312 SayGoodbye() function, 199 SayHello() function, 199 scientific tasks, carrying out of as occupation that uses Python regularly, 359 SciPy, 16, 18 screenshots, 31, 58 Scribus, 356 scripting, 355\u2013356 search (pip command), 216 search libraries, 376 Secure Digital (SD) card, 104 secure environment, developing of by using PyCrypto, 372 selection tree, 146 semantic error, 170\u2013171 sender (email), 331 sequences, 244, 262 Series 60 (platform), 22 setup process, on Windows, 25 \u201c7 Python Libraries you should know about,\u201d 371 show (pip command), 216 Shutdown (kernel-specific command), 95 shutil.rmtree() function, 322 sign formatting specification, 239 significand, 108 Simple Mail Transfer Protocol (SMTP), 323, 324\u2013325, 336\u2013337 single quotes, use of, 227 single-line comment, 78 Siri (Apple), 7 Slideshow (Cell Toolbar menu option), 93 socket, 327 socket.gethostbyaddr() method, 330 Softimage, 356 Solaris (platform), 22 Solid State Drive (SSD), 305 sound, 374\u2013375 spaghetti code, 281 special characters, 229\u2013231 splitlines(num=string.count(\u2019\\n\u2019)) function, 235 split(str=\" ,\" num=string.count(str)) function, 234, 236 splitting a cell, 88 SQL (Structured Query Language), 16, 353, 373 SQLAlchemy, 372\u2013373 square brackets ([]), 231 SSD (Solid State Drive), 305 stacks, 244, 262, 273\u2013275 startswith(prefix, beg=0, end=len(string)) function, 237 storage creating content for permanent storage, 308\u2013311 creating file, 311\u2013314 of data in files, 305\u2013322 deleting file, 321\u2013322 reading file content, 314\u2013317 understanding how permanent storage works, 306\u2013307 updating file content, 317\u2013321 storage boxes, 104 __str__() method, 297 strings creating of with special characters, 229\u2013231 defining character by using numbers, 226\u2013227 formatting, 238\u2013241 Index 391 locating a value in, 236\u2013238 selecting individual characters, 231\u2013233 slicing and dicing of, 233\u2013236 understanding of, 110\u2013111 understanding that strings are different, 226\u2013228 use of term, 227 using characters to create, 227\u2013228 working with, 225\u2013241 strip() function, 235 structured data, 308 Structured Query Language (SQL), 16, 353, 373 str.upper() function, 186 SUSE, 28 swapcase() function, 235 switch statement, 146, 266, 270\u2013272 symbols basic help topic, 47, 48 syntactical error, 170 syntax, checking of with greater ease, 348\u2013349 sys.exit() command, 52, 53 sys.path attribute, 208, 209 T tabular data, display of, 374 Tags (Cell Toolbar menu option), 94 Tech Rapidly, 15 terminals, 99\u2013100 ternary operators, 117 text editor, notebook compared to, 57 text message, 335\u2013336 third-party support, 361\u2013369 3ds Max, 355 throw an exception, 166 time() command, 112 times, working with, 111\u2013112 TIOBE, 15 title() function, 235 TkInter, 373\u2013374 Toggle Header option, 90 Toggle Line Numbers option, 91 Toggle option, 90 Toggle Scrolling option, 90 Toggle Toolbar option, 90 Tool Command Language (Tcl)/Toolkit (Tk), 374 tools availability of, 56 categories of, 361\u2013362 defined, 361 topics basic help topic, 47 Topics"}, {"filename": "Beginning Programming with Python.pdf", "text": "52, 53 sys.path attribute, 208, 209 T tabular data, display of, 374 Tags (Cell Toolbar menu option), 94 Tech Rapidly, 15 terminals, 99\u2013100 ternary operators, 117 text editor, notebook compared to, 57 text message, 335\u2013336 third-party support, 361\u2013369 3ds Max, 355 throw an exception, 166 time() command, 112 times, working with, 111\u2013112 TIOBE, 15 title() function, 235 TkInter, 373\u2013374 Toggle Header option, 90 Toggle Line Numbers option, 91 Toggle option, 90 Toggle Scrolling option, 90 Toggle Toolbar option, 90 Tool Command Language (Tcl)/Toolkit (Tk), 374 tools availability of, 56 categories of, 361\u2013362 defined, 361 topics basic help topic, 47 Topics link, 220 transmission method (email), 334\u2013335 Trigger, 356 triple double quotes, 227 True, 110 tuples, 244, 262, 263\u2013266 tutorials, 345, 349, 350, 352 Tutorials on XML Processing with Python, 350 Twisted Matrix, 378 type formatting specification, 240 type() method, 110 typographical (special character category), 229 U -u option, 41 Ubuntu 12.x, 30 unary operators, 116, 117\u2013118 Undo Delete Cells editing command, 88 Unicode, 351\u2013352 Unicode Pain, 352 Unicode Tutorials and Overviews, 352 uninstall (pip command), 216 Universal Serial Bus (USB) flash drive, 104, 305 Unofficial Windows Binaries for Python Extension Packages, 371 unstructured data, 308 The Updated Guide to Unicode on Python, 351 updates of file content, 317\u2013321 of Python, 4, 23 upper() function, 235 Useful Modules, 371 user documentation, 365 user input, 114, 132\u2013133 V -V option, 41 -v option, 41 ValueError exception, 173, 186, 190, 191, 192 392 Beginning Programming with Python For Dummies variable arguments, 293 variables class variable, 282\u2013283, 290\u2013292 as code grouping, 198 determining variable\u2019s type, 110 environment variables, 41\u201343, 207 instance variable, 283, 290, 292\u2013293 putting information into, 105 seeing of as storage boxes, 104 working with, 290\u2013293 -version option, 41 virtual environment, creating, 363 Virtual Memory System (VMS), 22 VirtualEnv, 363 Visual Basic, 15 Visual Studio, 355 W -W arg option, 41 warnings (exception category), 172 Web Programming in Python, 346 while loop, 162 while statement, 159\u2013162 width formatting specification, 240 Windows, 25\u201327, 32\u201334, 42, 61\u201364 Windows 32-bit (XP and later) (platform), 22 Windows 64-bit (platform), 22 Windows CE/Pocket PC (platform), 22 winsound, 375 W3Schools, 349, 350 X XeTeX, 84 XML (eXtensible Markup Language), 16, 308, 349\u2013350 -X opt option, 41 -x option, 41 Y Yellow Dog, 28 YouTube, on using Python to build embedded system, 358 Z 0 formatting specification, 240 ZeroDivisionError exception, 183 zfill (width) function, 235 About the Authors John Mueller is a freelance author and technical editor. He has writing in his blood, having produced 104 books and more than 600 articles to date. The topics range from networking to artificial intelligence and from database management to heads- down programming. Some of his current books include discussions of data science, machine learning, and algorithms \u2014 all of which use Python as a demonstration language. His technical editing skills have helped more than 70 authors refine the content of their manuscripts. John has provided technical \u00adediting services to various magazines, performed various kinds of consulting, and he writes certification exams."}, {"filename": "Beginning Programming with Python.pdf", "text": "Mueller is a freelance author and technical editor. He has writing in his blood, having produced 104 books and more than 600 articles to date. The topics range from networking to artificial intelligence and from database management to heads- down programming. Some of his current books include discussions of data science, machine learning, and algorithms \u2014 all of which use Python as a demonstration language. His technical editing skills have helped more than 70 authors refine the content of their manuscripts. John has provided technical \u00adediting services to various magazines, performed various kinds of consulting, and he writes certification exams. Be sure to read his blog at http://blog.\u00adjohnmuellerbooks.com/. You can reach him by email at John@John\u00adMuellerBooks.com. He also has a website at http://www.johnmuellerbooks.com/. Dedication This book is dedicated to the readers who take time to write me each day. Every morning I\u2019m greeted by various emails \u2014 some with requests, a few with com- plaints, and then there are the very few that just say thank you. All these emails encourage and challenge me as an author \u2014 to better both my books and myself. Thank you! Acknowledgments Thanks to my wife, Rebecca. Even though she is gone now, her spirit is in every book I write, in every word that appears on the page. She believed in me when no one else would. Russ Mullen deserves thanks for his technical edit of this book. He greatly added to the accuracy and depth of the material you see here. Russ is always providing me with great URLs for new products and ideas. However, it\u2019s the testing that Russ does that helps most. He\u2019s the sanity check for my work. Russ also has dif- ferent computer equipment from mine, so he\u2019s able to point out flaws that I might not otherwise notice. Matt Wagner, my agent, deserves credit for helping me get the contract in the first place and taking care of all the details that most authors don\u2019t really consider. I always appreciate his assistance. It\u2019s good to know that someone wants to help. A number of people read all or part of this book to help me refine the approach, test the coding examples, and generally provide input that all readers wish they could have. These unpaid volunteers helped in ways too numerous to mention here. I especially appreciate the efforts of Eva Beattie, Glenn A. Russell, Col Onyebuche, Emanuel Jonas, Michael Sasseen, Osvaldo T\u00e9llez Almirall, and Thomas Zinckgraf, who provided general input, read the entire book, and selflessly devoted them- selves to this project. Finally, I would like to thank Katie Mohr, Susan Christophersen, and the rest of the editorial and production staff. Publisher\u2019s Acknowledgments Senior Acquisitions Editor: Katie Mohr Project Manager and Copy Editor: Susan Christophersen Technical Editor: Russ Mullen Sr. Editorial Assistant: Cherie Case Production Editor: Antony Sami Cover Image: \u00a9 Esin Deniz/Shutterstock WILEY END USER LICENSE AGREEMENT Go to www.wiley.com/go/eula to access Wiley\u2019s ebook EULA."}, {"filename": "Beginning Programming with Python.pdf", "text": "Emanuel Jonas, Michael Sasseen, Osvaldo T\u00e9llez Almirall, and Thomas Zinckgraf, who provided general input, read the entire book, and selflessly devoted them- selves to this project. Finally, I would like to thank Katie Mohr, Susan Christophersen, and the rest of the editorial and production staff. Publisher\u2019s Acknowledgments Senior Acquisitions Editor: Katie Mohr Project Manager and Copy Editor: Susan Christophersen Technical Editor: Russ Mullen Sr. Editorial Assistant: Cherie Case Production Editor: Antony Sami Cover Image: \u00a9 Esin Deniz/Shutterstock WILEY END USER LICENSE AGREEMENT Go to www.wiley.com/go/eula to access Wiley\u2019s ebook EULA."}, {"filename": "Dsag.pdf", "text": "DSA D a t a S t r u c t u r e s a n d A l g o r i t h m s Annotated Reference with Examples Granville Barne! Luca Del Tongo Data Structures and Algorithms: Annotated Reference with Examples First Edition Copyright c\u20ddGranville Barnett, and Luca Del Tongo 2008. This book is made exclusively available from DotNetSlackers (http://dotnetslackers.com/) the place for .NET articles, and news from some of the leading minds in the software industry. Contents 1 Introduction 1 1.1 What this book is, and what it isn\u2019t . . . . . . . . . . . . . . . . 1 1.2 Assumed knowledge . . . . . . . . . . . . . . . . . . . . . . . . . 1 1.2.1 Big Oh notation . . . . . . . . . . . . . . . . . . . . . . . 1 1.2.2 Imperative programming language . . . . . . . . . . . . . 3 1.2.3 Object oriented concepts . . . . . . . . . . . . . . . . . . 4 1.3 Pseudocode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 1.4 Tips for working through the examples . . . . . . . . . . . . . . . 6 1.5 Book outline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 1.6 Testing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 1.7 Where can I get the code? . . . . . . . . . . . . . . . . . . . . . . 7 1.8 Final messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 I Data Structures 8 2 Linked Lists 9 2.1 Singly Linked List . . . . . . . . . . . . . . . . . . . . . . . . . . 9 2.1.1 Insertion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 2.1.2 Searching . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 2.1.3 Deletion . . ."}, {"filename": "Dsag.pdf", "text": "Linked Lists 9 2.1 Singly Linked List . . . . . . . . . . . . . . . . . . . . . . . . . . 9 2.1.1 Insertion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 2.1.2 Searching . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 2.1.3 Deletion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 2.1.4 Traversing the list . . . . . . . . . . . . . . . . . . . . . . 12 2.1.5 Traversing the list in reverse order . . . . . . . . . . . . . 13 2.2 Doubly Linked List . . . . . . . . . . . . . . . . . . . . . . . . . . 13 2.2.1 Insertion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2.2 Deletion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 2.2.3 Reverse Traversal . . . . . . . . . . . . . . . . . . . . . . . 16 2.3 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 3 Binary Search Tree 19 3.1 Insertion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 3.2 Searching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 3.3 Deletion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 3.4 Finding the parent of a given node . . . . . . . . . . . . . . . . . 24 3.5 Attaining a reference to a node . . . . . . . . . . . . . . . . . . . 24 3.6 Finding the smallest and largest values in the binary"}, {"filename": "Dsag.pdf", "text": ". 21 3.3 Deletion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 3.4 Finding the parent of a given node . . . . . . . . . . . . . . . . . 24 3.5 Attaining a reference to a node . . . . . . . . . . . . . . . . . . . 24 3.6 Finding the smallest and largest values in the binary search tree 25 3.7 Tree Traversals . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 3.7.1 Preorder . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 I 3.7.2 Postorder . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 3.7.3 Inorder . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 3.7.4 Breadth First . . . . . . . . . . . . . . . . . . . . . . . . . 30 3.8 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 4 Heap 32 4.1 Insertion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 4.2 Deletion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 4.3 Searching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 4.4 Traversal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 4.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 5 Sets 44 5.1 Unordered . . . . . . . . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Dsag.pdf", "text": ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 4.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 5 Sets 44 5.1 Unordered . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 5.1.1 Insertion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 5.2 Ordered . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 5.3 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 6 Queues 48 6.1 A standard queue . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 6.2 Priority Queue . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 6.3 Double Ended Queue . . . . . . . . . . . . . . . . . . . . . . . . . 49 6.4 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 7 AVL Tree 54 7.1 Tree Rotations . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 7.2 Tree Rebalancing . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 7.3 Insertion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 7.4 Deletion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 7.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Dsag.pdf", "text": "57 7.3 Insertion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 7.4 Deletion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 7.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 II Algorithms 62 8 Sorting 63 8.1 Bubble Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 8.2 Merge Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 8.3 Quick Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 8.4 Insertion Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 8.5 Shell Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68 8.6 Radix Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68 8.7 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70 9 Numeric 72 9.1 Primality Test . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 9.2 Base conversions . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 9.3 Attaining the greatest common denominator of two numbers . . 73 9.4 Computing the maximum value for a number of a speci\ufb01c base consisting of N digits . . . . . . . . . . . . . . . . . . . . . . . . . 74 9.5 Factorial of a number . . . . . . . . . . . . . . . . . . . . . . . . 74"}, {"filename": "Dsag.pdf", "text": ". . . . . . . . . . . . . . . 72 9.3 Attaining the greatest common denominator of two numbers . . 73 9.4 Computing the maximum value for a number of a speci\ufb01c base consisting of N digits . . . . . . . . . . . . . . . . . . . . . . . . . 74 9.5 Factorial of a number . . . . . . . . . . . . . . . . . . . . . . . . 74 9.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 II 10 Searching 76 10.1 Sequential Search . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 10.2 Probability Search . . . . . . . . . . . . . . . . . . . . . . . . . . 76 10.3 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 11 Strings 79 11.1 Reversing the order of words in a sentence . . . . . . . . . . . . . 79 11.2 Detecting a palindrome . . . . . . . . . . . . . . . . . . . . . . . 80 11.3 Counting the number of words in a string . . . . . . . . . . . . . 81 11.4 Determining the number of repeated words within a string . . . . 83 11.5 Determining the \ufb01rst matching character between two strings . . 84 11.6 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 A Algorithm Walkthrough 86 A.1 Iterative algorithms . . . . . . . . . . . . . . . . . . . . . . . . . 86 A.2 Recursive Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . 88 A.3 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 B Translation Walkthrough 91 B.1 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . ."}, {"filename": "Dsag.pdf", "text": ". . . 86 A.2 Recursive Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . 88 A.3 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 B Translation Walkthrough 91 B.1 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92 C Recursive Vs. Iterative Solutions 93 C.1 Activation Records . . . . . . . . . . . . . . . . . . . . . . . . . . 94 C.2 Some problems are recursive in nature . . . . . . . . . . . . . . . 95 C.3 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95 D Testing 97 D.1 What constitutes a unit test? . . . . . . . . . . . . . . . . . . . . 97 D.2 When should I write my tests? . . . . . . . . . . . . . . . . . . . 98 D.3 How seriously should I view my test suite? . . . . . . . . . . . . . 99 D.4 The three A\u2019s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 D.5 The structuring of tests . . . . . . . . . . . . . . . . . . . . . . . 99 D.6 Code Coverage . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100 D.7 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100 E Symbol De\ufb01nitions 101 III Preface Every book has a story as to how it came about and this one is no di\ufb00erent, although we would be lying if we said its development had not been somewhat impromptu. Put simply this book is the result of a series of emails sent back and forth between the two authors during the development of a library for the .NET framework of the same name (with the omission of the subtitle of course!). The conversation started o\ufb00something like, \u201cWhy don\u2019t we create a more aesthetically pleasing"}, {"filename": "Dsag.pdf", "text": ". . . . . . 100 E Symbol De\ufb01nitions 101 III Preface Every book has a story as to how it came about and this one is no di\ufb00erent, although we would be lying if we said its development had not been somewhat impromptu. Put simply this book is the result of a series of emails sent back and forth between the two authors during the development of a library for the .NET framework of the same name (with the omission of the subtitle of course!). The conversation started o\ufb00something like, \u201cWhy don\u2019t we create a more aesthetically pleasing way to present our pseudocode?\u201d After a few weeks this new presentation style had in fact grown into pseudocode listings with chunks of text describing how the data structure or algorithm in question works and various other things about it. At this point we thought, \u201cWhat the heck, let\u2019s make this thing into a book!\u201d And so, in the summer of 2008 we began work on this book side by side with the actual library implementation. When we started writing this book the only things that we were sure about with respect to how the book should be structured were: 1. always make explanations as simple as possible while maintaining a moder- ately \ufb01ne degree of precision to keep the more eager minded reader happy; and 2. inject diagrams to demystify problems that are even moderatly challenging to visualise (. . . and so we could remember how our own algorithms worked when looking back at them!); and \ufb01nally 3. present concise and self-explanatory pseudocode listings that can be ported easily to most mainstream imperative programming languages like C++, C#, and Java. A key factor of this book and its associated implementations is that all algorithms (unless otherwise stated) were designed by us, using the theory of the algorithm in question as a guideline (for which we are eternally grateful to their original creators). Therefore they may sometimes turn out to be worse than the \u201cnormal\u201d implementations\u2014and sometimes not. We are two fellows of the opinion that choice is a great thing. Read our book, read several others on the same subject and use what you see \ufb01t from each (if anything) when implementing your own version of the algorithms in question. Through this book we hope that you will see the absolute necessity of under- standing which data structure or algorithm to use for a certain scenario. In all projects, especially those that are concerned with performance (here we apply an even greater emphasis on real-time systems) the selection of the wrong data structure or algorithm can be the cause of a great deal of performance pain. IV V Therefore it is absolutely key that you think about the run time complexity and space requirements of your selected approach. In this book we only explain the theoretical implications to consider, but this is for a good reason: compilers are very di\ufb00erent in how they work. One C++ compiler may"}, {"filename": "Dsag.pdf", "text": "or algorithm to use for a certain scenario. In all projects, especially those that are concerned with performance (here we apply an even greater emphasis on real-time systems) the selection of the wrong data structure or algorithm can be the cause of a great deal of performance pain. IV V Therefore it is absolutely key that you think about the run time complexity and space requirements of your selected approach. In this book we only explain the theoretical implications to consider, but this is for a good reason: compilers are very di\ufb00erent in how they work. One C++ compiler may have some amazing optimisation phases speci\ufb01cally targeted at recursion, another may not, for ex- ample. Of course this is just an example but you would be surprised by how many subtle di\ufb00erences there are between compilers. These di\ufb00erences which may make a fast algorithm slow, and vice versa. We could also factor in the same concerns about languages that target virtual machines, leaving all the actual various implementation issues to you given that you will know your lan- guage\u2019s compiler much better than us...well in most cases. This has resulted in a more concise book that focuses on what we think are the key issues. One \ufb01nal note: never take the words of others as gospel; verify all that can be feasibly veri\ufb01ed and make up your own mind. We hope you enjoy reading this book as much as we have enjoyed writing it. Granville Barnett Luca Del Tongo Acknowledgements Writing this short book has been a fun and rewarding experience. We would like to thank, in no particular order the following people who have helped us during the writing of this book. Sonu Kapoor generously hosted our book which when we released the \ufb01rst draft received over thirteen thousand downloads, without his generosity this book would not have been able to reach so many people. Jon Skeet provided us with an alarming number of suggestions throughout for which we are eternally grateful. Jon also edited this book as well. We would also like to thank those who provided the odd suggestion via email to us. All feedback was listened to and you will no doubt see some content in\ufb02uenced by your suggestions. A special thank you also goes out to those who helped publicise this book from Microsoft\u2019s Channel 9 weekly show (thanks Dan!) to the many bloggers who helped spread the word. You gave us an audience and for that we are extremely grateful. Thank you to all who contributed in some way to this book. The program- ming community never ceases to amaze us in how willing its constituents are to give time to projects such as this one. Thank you. VI About the Authors Granville Barnett Granville is currently a Ph.D candidate at Queensland University of Technology (QUT) working on parallelism at the Microsoft QUT eResearch Centre1. He also holds a degree in Computer Science, and is a Microsoft MVP. His main interests are in programming"}, {"filename": "Dsag.pdf", "text": "helped spread the word. You gave us an audience and for that we are extremely grateful. Thank you to all who contributed in some way to this book. The program- ming community never ceases to amaze us in how willing its constituents are to give time to projects such as this one. Thank you. VI About the Authors Granville Barnett Granville is currently a Ph.D candidate at Queensland University of Technology (QUT) working on parallelism at the Microsoft QUT eResearch Centre1. He also holds a degree in Computer Science, and is a Microsoft MVP. His main interests are in programming languages and compilers. Granville can be contacted via one of two places: either his personal website (http://gbarnett.org) or his blog (http://msmvps.com/blogs/gbarnett). Luca Del Tongo Luca is currently studying for his masters degree in Computer Science at Flo- rence. His main interests vary from web development to research \ufb01elds such as data mining and computer vision. Luca also maintains an Italian blog which can be found at http://blogs.ugidotnet.org/wetblog/. 1http://www.mquter.qut.edu.au/ VII Page intentionally left blank. Chapter 1 Introduction 1.1 What this book is, and what it isn\u2019t This book provides implementations of common and uncommon algorithms in pseudocode which is language independent and provides for easy porting to most imperative programming languages. It is not a de\ufb01nitive book on the theory of data structures and algorithms. For the most part this book presents implementations devised by the authors themselves based on the concepts by which the respective algorithms are based upon so it is more than possible that our implementations di\ufb00er from those considered the norm. You should use this book alongside another on the same subject, but one that contains formal proofs of the algorithms in question. In this book we use the abstract big Oh notation to depict the run time complexity of algorithms so that the book appeals to a larger audience. 1.2 Assumed knowledge We have written this book with few assumptions of the reader, but some have been necessary in order to keep the book as concise and approachable as possible. We assume that the reader is familiar with the following: 1. Big Oh notation 2. An imperative programming language 3. Object oriented concepts 1.2.1 Big Oh notation For run time complexity analysis we use big Oh notation extensively so it is vital that you are familiar with the general concepts to determine which is the best algorithm for you in certain scenarios. We have chosen to use big Oh notation for a few reasons, the most important of which is that it provides an abstract measurement by which we can judge the performance of algorithms without using mathematical proofs. 1 CHAPTER 1. INTRODUCTION 2 Figure 1.1: Algorithmic run time expansion Figure 1.1 shows some of the run times to demonstrate how important it is to choose an e\ufb03cient algorithm. For the sanity of our graph we have omitted cubic O(n3), and exponential O(2n) run times. Cubic and exponential algorithms should only ever be used for very"}, {"filename": "Dsag.pdf", "text": "algorithm for you in certain scenarios. We have chosen to use big Oh notation for a few reasons, the most important of which is that it provides an abstract measurement by which we can judge the performance of algorithms without using mathematical proofs. 1 CHAPTER 1. INTRODUCTION 2 Figure 1.1: Algorithmic run time expansion Figure 1.1 shows some of the run times to demonstrate how important it is to choose an e\ufb03cient algorithm. For the sanity of our graph we have omitted cubic O(n3), and exponential O(2n) run times. Cubic and exponential algorithms should only ever be used for very small problems (if ever!); avoid them if feasibly possible. The following list explains some of the most common big Oh notations: O(1) constant: the operation doesn\u2019t depend on the size of its input, e.g. adding a node to the tail of a linked list where we always maintain a pointer to the tail node. O(n) linear: the run time complexity is proportionate to the size of n. O(log n) logarithmic: normally associated with algorithms that break the problem into smaller chunks per each invocation, e.g. searching a binary search tree. O(n log n) just n log n: usually associated with an algorithm that breaks the problem into smaller chunks per each invocation, and then takes the results of these smaller chunks and stitches them back together, e.g. quick sort. O(n2) quadratic: e.g. bubble sort. O(n3) cubic: very rare. O(2n) exponential: incredibly rare. If you encounter either of the latter two items (cubic and exponential) this is really a signal for you to review the design of your algorithm. While prototyp- ing algorithm designs you may just have the intention of solving the problem irrespective of how fast it works. We would strongly advise that you always review your algorithm design and optimise where possible\u2014particularly loops CHAPTER 1. INTRODUCTION 3 and recursive calls\u2014so that you can get the most e\ufb03cient run times for your algorithms. The biggest asset that big Oh notation gives us is that it allows us to es- sentially discard things like hardware. If you have two sorting algorithms, one with a quadratic run time, and the other with a logarithmic run time then the logarithmic algorithm will always be faster than the quadratic one when the data set becomes suitably large. This applies even if the former is ran on a ma- chine that is far faster than the latter. Why? Because big Oh notation isolates a key factor in algorithm analysis: growth. An algorithm with a quadratic run time grows faster than one with a logarithmic run time. It is generally said at some point as n \u2192\u221ethe logarithmic algorithm will become faster than the quadratic algorithm. Big Oh notation also acts as a communication tool. Picture the scene: you are having a meeting with some fellow developers within your product group. You are discussing prototype algorithms for node discovery in massive networks. Several minutes elapse after you and two others have discussed your respective algorithms"}, {"filename": "Dsag.pdf", "text": "than the latter. Why? Because big Oh notation isolates a key factor in algorithm analysis: growth. An algorithm with a quadratic run time grows faster than one with a logarithmic run time. It is generally said at some point as n \u2192\u221ethe logarithmic algorithm will become faster than the quadratic algorithm. Big Oh notation also acts as a communication tool. Picture the scene: you are having a meeting with some fellow developers within your product group. You are discussing prototype algorithms for node discovery in massive networks. Several minutes elapse after you and two others have discussed your respective algorithms and how they work. Does this give you a good idea of how fast each respective algorithm is? No. The result of such a discussion will tell you more about the high level algorithm design rather than its e\ufb03ciency. Replay the scene back in your head, but this time as well as talking about algorithm design each respective developer states the asymptotic run time of their algorithm. Using the latter approach you not only get a good general idea about the algorithm design, but also key e\ufb03ciency data which allows you to make better choices when it comes to selecting an algorithm \ufb01t for purpose. Some readers may actually work in a product group where they are given budgets per feature. Each feature holds with it a budget that represents its up- permost time bound. If you save some time in one feature it doesn\u2019t necessarily give you a bu\ufb00er for the remaining features. Imagine you are working on an application, and you are in the team that is developing the routines that will essentially spin up everything that is required when the application is started. Everything is great until your boss comes in and tells you that the start up time should not exceed n ms. The e\ufb03ciency of every algorithm that is invoked during start up in this example is absolutely key to a successful product. Even if you don\u2019t have these budgets you should still strive for optimal solutions. Taking a quantitative approach for many software development properties will make you a far superior programmer - measuring one\u2019s work is critical to success. 1.2.2 Imperative programming language All examples are given in a pseudo-imperative coding format and so the reader must know the basics of some imperative mainstream programming language to port the examples e\ufb00ectively, we have written this book with the following target languages in mind: 1. C++ 2. C# 3. Java CHAPTER 1. INTRODUCTION 4 The reason that we are explicit in this requirement is simple\u2014all our imple- mentations are based on an imperative thinking style. If you are a functional programmer you will need to apply various aspects from the functional paradigm to produce e\ufb03cient solutions with respect to your functional language whether it be Haskell, F#, OCaml, etc. Two of the languages that we have listed (C# and Java) target virtual machines which provide various things like security sand boxing, and memory management"}, {"filename": "Dsag.pdf", "text": "written this book with the following target languages in mind: 1. C++ 2. C# 3. Java CHAPTER 1. INTRODUCTION 4 The reason that we are explicit in this requirement is simple\u2014all our imple- mentations are based on an imperative thinking style. If you are a functional programmer you will need to apply various aspects from the functional paradigm to produce e\ufb03cient solutions with respect to your functional language whether it be Haskell, F#, OCaml, etc. Two of the languages that we have listed (C# and Java) target virtual machines which provide various things like security sand boxing, and memory management via garbage collection algorithms. It is trivial to port our imple- mentations to these languages. When porting to C++ you must remember to use pointers for certain things. For example, when we describe a linked list node as having a reference to the next node, this description is in the context of a managed environment. In C++ you should interpret the reference as a pointer to the next node and so on. For programmers who have a fair amount of experience with their respective language these subtleties will present no is- sue, which is why we really do emphasise that the reader must be comfortable with at least one imperative language in order to successfully port the pseudo- implementations in this book. It is essential that the user is familiar with primitive imperative language constructs before reading this book otherwise you will just get lost. Some algo- rithms presented in this book can be confusing to follow even for experienced programmers! 1.2.3 Object oriented concepts For the most part this book does not use features that are speci\ufb01c to any one language. In particular, we never provide data structures or algorithms that work on generic types\u2014this is in order to make the samples as easy to follow as possible. However, to appreciate the designs of our data structures you will need to be familiar with the following object oriented (OO) concepts: 1. Inheritance 2. Encapsulation 3. Polymorphism This is especially important if you are planning on looking at the C# target that we have implemented (more on that in \u00a71.7) which makes extensive use of the OO concepts listed above. As a \ufb01nal note it is also desirable that the reader is familiar with interfaces as the C# target uses interfaces throughout the sorting algorithms. 1.3 Pseudocode Throughout this book we use pseudocode to describe our solutions. For the most part interpreting the pseudocode is trivial as it looks very much like a more abstract C++, or C#, but there are a few things to point out: 1. Pre-conditions should always be enforced 2. Post-conditions represent the result of applying algorithm a to data struc- ture d CHAPTER 1. INTRODUCTION 5 3. The type of parameters is inferred 4. All primitive language constructs are explicitly begun and ended If an algorithm has a return type it will often be presented in the post- condition, but where the return type is"}, {"filename": "Dsag.pdf", "text": "we use pseudocode to describe our solutions. For the most part interpreting the pseudocode is trivial as it looks very much like a more abstract C++, or C#, but there are a few things to point out: 1. Pre-conditions should always be enforced 2. Post-conditions represent the result of applying algorithm a to data struc- ture d CHAPTER 1. INTRODUCTION 5 3. The type of parameters is inferred 4. All primitive language constructs are explicitly begun and ended If an algorithm has a return type it will often be presented in the post- condition, but where the return type is su\ufb03ciently obvious it may be omitted for the sake of brevity. Most algorithms in this book require parameters, and because we assign no explicit type to those parameters the type is inferred from the contexts in which it is used, and the operations performed upon it. Additionally, the name of the parameter usually acts as the biggest clue to its type. For instance n is a pseudo-name for a number and so you can assume unless otherwise stated that n translates to an integer that has the same number of bits as a WORD on a 32 bit machine, similarly l is a pseudo-name for a list where a list is a resizeable array (e.g. a vector). The last major point of reference is that we always explicitly end a language construct. For instance if we wish to close the scope of a for loop we will explicitly state end for rather than leaving the interpretation of when scopes are closed to the reader. While implicit scope closure works well in simple code, in complex cases it can lead to ambiguity. The pseudocode style that we use within this book is rather straightforward. All algorithms start with a simple algorithm signature, e.g. 1) algorithm AlgorithmName(arg1, arg2, ..., argN) 2) ... n) end AlgorithmName Immediately after the algorithm signature we list any Pre or Post condi- tions. 1) algorithm AlgorithmName(n) 2) Pre: n is the value to compute the factorial of 3) n \u22650 4) Post: the factorial of n has been computed 5) // ... n) end AlgorithmName The example above describes an algorithm by the name of AlgorithmName, which takes a single numeric parameter n. The pre and post conditions follow the algorithm signature; you should always enforce the pre-conditions of an algorithm when porting them to your language of choice. Normally what is listed as a pre-conidition is critical to the algorithms opera- tion. This may cover things like the actual parameter not being null, or that the collection passed in must contain at least n items. The post-condition mainly describes the e\ufb00ect of the algorithms operation. An example of a post-condition might be \u201cThe list has been sorted in ascending order\u201d Because everything we describe is language independent you will need to make your own mind up on how to best handle pre-conditions. For example, in the C# target we have implemented, we consider non-conformance to pre-"}, {"filename": "Dsag.pdf", "text": "of choice. Normally what is listed as a pre-conidition is critical to the algorithms opera- tion. This may cover things like the actual parameter not being null, or that the collection passed in must contain at least n items. The post-condition mainly describes the e\ufb00ect of the algorithms operation. An example of a post-condition might be \u201cThe list has been sorted in ascending order\u201d Because everything we describe is language independent you will need to make your own mind up on how to best handle pre-conditions. For example, in the C# target we have implemented, we consider non-conformance to pre- conditions to be exceptional cases. We provide a message in the exception to tell the caller why the algorithm has failed to execute normally. CHAPTER 1. INTRODUCTION 6 1.4 Tips for working through the examples As with most books you get out what you put in and so we recommend that in order to get the most out of this book you work through each algorithm with a pen and paper to track things like variable names, recursive calls etc. The best way to work through algorithms is to set up a table, and in that table give each variable its own column and continuously update these columns. This will help you keep track of and visualise the mutations that are occurring throughout the algorithm. Often while working through algorithms in such a way you can intuitively map relationships between data structures rather than trying to work out a few values on paper and the rest in your head. We suggest you put everything on paper irrespective of how trivial some variables and calculations may be so that you always have a point of reference. When dealing with recursive algorithm traces we recommend you do the same as the above, but also have a table that records function calls and who they return to. This approach is a far cleaner way than drawing out an elaborate map of function calls with arrows to one another, which gets large quickly and simply makes things more complex to follow. Track everything in a simple and systematic way to make your time studying the implementations far easier. 1.5 Book outline We have split this book into two parts: Part 1: Provides discussion and pseudo-implementations of common and uncom- mon data structures; and Part 2: Provides algorithms of varying purposes from sorting to string operations. The reader doesn\u2019t have to read the book sequentially from beginning to end: chapters can be read independently from one another. We suggest that in part 1 you read each chapter in its entirety, but in part 2 you can get away with just reading the section of a chapter that describes the algorithm you are interested in. Each of the chapters on data structures present initially the algorithms con- cerned with: 1. Insertion 2. Deletion 3. Searching The previous list represents what we believe in the vast majority of cases to be the most important for each respective"}, {"filename": "Dsag.pdf", "text": "operations. The reader doesn\u2019t have to read the book sequentially from beginning to end: chapters can be read independently from one another. We suggest that in part 1 you read each chapter in its entirety, but in part 2 you can get away with just reading the section of a chapter that describes the algorithm you are interested in. Each of the chapters on data structures present initially the algorithms con- cerned with: 1. Insertion 2. Deletion 3. Searching The previous list represents what we believe in the vast majority of cases to be the most important for each respective data structure. For all readers we recommend that before looking at any algorithm you quickly look at Appendix E which contains a table listing the various symbols used within our algorithms and their meaning. One keyword that we would like to point out here is yield. You can think of yield in the same light as return. The return keyword causes the method to exit and returns control to the caller, whereas yield returns each value to the caller. With yield control only returns to the caller when all values to return to the caller have been exhausted. CHAPTER 1. INTRODUCTION 7 1.6 Testing All the data structures and algorithms have been tested using a minimised test driven development style on paper to \ufb02esh out the pseudocode algorithm. We then transcribe these tests into unit tests satisfying them one by one. When all the test cases have been progressively satis\ufb01ed we consider that algorithm suitably tested. For the most part algorithms have fairly obvious cases which need to be satis\ufb01ed. Some however have many areas which can prove to be more complex to satisfy. With such algorithms we will point out the test cases which are tricky and the corresponding portions of pseudocode within the algorithm that satisfy that respective case. As you become more familiar with the actual problem you will be able to intuitively identify areas which may cause problems for your algorithms imple- mentation. This in some cases will yield an overwhelming list of concerns which will hinder your ability to design an algorithm greatly. When you are bom- barded with such a vast amount of concerns look at the overall problem again and sub-divide the problem into smaller problems. Solving the smaller problems and then composing them is a far easier task than clouding your mind with too many little details. The only type of testing that we use in the implementation of all that is provided in this book are unit tests. Because unit tests contribute such a core piece of creating somewhat more stable software we invite the reader to view Appendix D which describes testing in more depth. 1.7 Where can I get the code? This book doesn\u2019t provide any code speci\ufb01cally aligned with it, however we do actively maintain an open source project1 that houses a C# implementation of all the pseudocode listed. The project is named Data Structures and Algorithms (DSA)"}, {"filename": "Dsag.pdf", "text": "with too many little details. The only type of testing that we use in the implementation of all that is provided in this book are unit tests. Because unit tests contribute such a core piece of creating somewhat more stable software we invite the reader to view Appendix D which describes testing in more depth. 1.7 Where can I get the code? This book doesn\u2019t provide any code speci\ufb01cally aligned with it, however we do actively maintain an open source project1 that houses a C# implementation of all the pseudocode listed. The project is named Data Structures and Algorithms (DSA) and can be found at http://codeplex.com/dsa. 1.8 Final messages We have just a few \ufb01nal messages to the reader that we hope you digest before you embark on reading this book: 1. Understand how the algorithm works \ufb01rst in an abstract sense; and 2. Always work through the algorithms on paper to understand how they achieve their outcome If you always follow these key points, you will get the most out of this book. 1All readers are encouraged to provide suggestions, feature requests, and bugs so we can further improve our implementations. Part I Data Structures 8 Chapter 2 Linked Lists Linked lists can be thought of from a high level perspective as being a series of nodes. Each node has at least a single pointer to the next node, and in the last node\u2019s case a null pointer representing that there are no more nodes in the linked list. In DSA our implementations of linked lists always maintain head and tail pointers so that insertion at either the head or tail of the list is a constant time operation. Random insertion is excluded from this and will be a linear operation. As such, linked lists in DSA have the following characteristics: 1. Insertion is O(1) 2. Deletion is O(n) 3. Searching is O(n) Out of the three operations the one that stands out is that of insertion. In DSA we chose to always maintain pointers (or more aptly references) to the node(s) at the head and tail of the linked list and so performing a traditional insertion to either the front or back of the linked list is an O(1) operation. An exception to this rule is performing an insertion before a node that is neither the head nor tail in a singly linked list. When the node we are inserting before is somewhere in the middle of the linked list (known as random insertion) the complexity is O(n). In order to add before the designated node we need to traverse the linked list to \ufb01nd that node\u2019s current predecessor. This traversal yields an O(n) run time. This data structure is trivial, but linked lists have a few key points which at times make them very attractive: 1. the list is dynamically resized, thus it incurs no copy penalty like an array or vector would eventually incur; and 2. insertion is O(1). 2.1 Singly Linked List Singly linked lists"}, {"filename": "Dsag.pdf", "text": "are inserting before is somewhere in the middle of the linked list (known as random insertion) the complexity is O(n). In order to add before the designated node we need to traverse the linked list to \ufb01nd that node\u2019s current predecessor. This traversal yields an O(n) run time. This data structure is trivial, but linked lists have a few key points which at times make them very attractive: 1. the list is dynamically resized, thus it incurs no copy penalty like an array or vector would eventually incur; and 2. insertion is O(1). 2.1 Singly Linked List Singly linked lists are one of the most primitive data structures you will \ufb01nd in this book. Each node that makes up a singly linked list consists of a value, and a reference to the next node (if any) in the list. 9 CHAPTER 2. LINKED LISTS 10 Figure 2.1: Singly linked list node Figure 2.2: A singly linked list populated with integers 2.1.1 Insertion In general when people talk about insertion with respect to linked lists of any form they implicitly refer to the adding of a node to the tail of the list. When you use an API like that of DSA and you see a general purpose method that adds a node to the list, you can assume that you are adding the node to the tail of the list not the head. Adding a node to a singly linked list has only two cases: 1. head = \u2205in which case the node we are adding is now both the head and tail of the list; or 2. we simply need to append our node onto the end of the list updating the tail reference appropriately. 1) algorithm Add(value) 2) Pre: value is the value to add to the list 3) Post: value has been placed at the tail of the list 4) n \u2190node(value) 5) if head = \u2205 6) head \u2190n 7) tail \u2190n 8) else 9) tail.Next \u2190n 10) tail \u2190n 11) end if 12) end Add As an example of the previous algorithm consider adding the following se- quence of integers to the list: 1, 45, 60, and 12, the resulting list is that of Figure 2.2. 2.1.2 Searching Searching a linked list is straightforward: we simply traverse the list checking the value we are looking for with the value of each node in the linked list. The algorithm listed in this section is very similar to that used for traversal in \u00a72.1.4. CHAPTER 2. LINKED LISTS 11 1) algorithm Contains(head, value) 2) Pre: head is the head node in the list 3) value is the value to search for 4) Post: the item is either in the linked list, true; otherwise false 5) n \u2190head 6) while n \u0338= \u2205and n.Value \u0338= value 7) n \u2190n.Next 8) end while 9) if n = \u2205 10) return false 11) end if 12) return true 13) end Contains 2.1.3 Deletion Deleting a node from a linked list"}, {"filename": "Dsag.pdf", "text": "list. The algorithm listed in this section is very similar to that used for traversal in \u00a72.1.4. CHAPTER 2. LINKED LISTS 11 1) algorithm Contains(head, value) 2) Pre: head is the head node in the list 3) value is the value to search for 4) Post: the item is either in the linked list, true; otherwise false 5) n \u2190head 6) while n \u0338= \u2205and n.Value \u0338= value 7) n \u2190n.Next 8) end while 9) if n = \u2205 10) return false 11) end if 12) return true 13) end Contains 2.1.3 Deletion Deleting a node from a linked list is straightforward but there are a few cases we need to account for: 1. the list is empty; or 2. the node to remove is the only node in the linked list; or 3. we are removing the head node; or 4. we are removing the tail node; or 5. the node to remove is somewhere in between the head and tail; or 6. the item to remove doesn\u2019t exist in the linked list The algorithm whose cases we have described will remove a node from any- where within a list irrespective of whether the node is the head etc. If you know that items will only ever be removed from the head or tail of the list then you can create much more concise algorithms. In the case of always removing from the front of the linked list deletion becomes an O(1) operation. CHAPTER 2. LINKED LISTS 12 1) algorithm Remove(head, value) 2) Pre: head is the head node in the list 3) value is the value to remove from the list 4) Post: value is removed from the list, true; otherwise false 5) if head = \u2205 6) // case 1 7) return false 8) end if 9) n \u2190head 10) if n.Value = value 11) if head = tail 12) // case 2 13) head \u2190\u2205 14) tail \u2190\u2205 15) else 16) // case 3 17) head \u2190head.Next 18) end if 19) return true 20) end if 21) while n.Next \u0338= \u2205and n.Next.Value \u0338= value 22) n \u2190n.Next 23) end while 24) if n.Next \u0338= \u2205 25) if n.Next = tail 26) // case 4 27) tail \u2190n 28) end if 29) // this is only case 5 if the conditional on line 25 was false 30) n.Next \u2190n.Next.Next 31) return true 32) end if 33) // case 6 34) return false 35) end Remove 2.1.4 Traversing the list Traversing a singly linked list is the same as that of traversing a doubly linked list (de\ufb01ned in \u00a72.2). You start at the head of the list and continue until you come across a node that is \u2205. The two cases are as follows: 1. node = \u2205, we have exhausted all nodes in the linked list; or 2. we must update the node reference to be node.Next. The algorithm described is a very simple one that makes use of a simple while loop to check the \ufb01rst"}, {"filename": "Dsag.pdf", "text": "case 6 34) return false 35) end Remove 2.1.4 Traversing the list Traversing a singly linked list is the same as that of traversing a doubly linked list (de\ufb01ned in \u00a72.2). You start at the head of the list and continue until you come across a node that is \u2205. The two cases are as follows: 1. node = \u2205, we have exhausted all nodes in the linked list; or 2. we must update the node reference to be node.Next. The algorithm described is a very simple one that makes use of a simple while loop to check the \ufb01rst case. CHAPTER 2. LINKED LISTS 13 1) algorithm Traverse(head) 2) Pre: head is the head node in the list 3) Post: the items in the list have been traversed 4) n \u2190head 5) while n \u0338= 0 6) yield n.Value 7) n \u2190n.Next 8) end while 9) end Traverse 2.1.5 Traversing the list in reverse order Traversing a singly linked list in a forward manner (i.e. left to right) is simple as demonstrated in \u00a72.1.4. However, what if we wanted to traverse the nodes in the linked list in reverse order for some reason? The algorithm to perform such a traversal is very simple, and just like demonstrated in \u00a72.1.3 we will need to acquire a reference to the predecessor of a node, even though the fundamental characteristics of the nodes that make up a singly linked list make this an expensive operation. For each node, \ufb01nding its predecessor is an O(n) operation, so over the course of traversing the whole list backwards the cost becomes O(n2). Figure 2.3 depicts the following algorithm being applied to a linked list with the integers 5, 10, 1, and 40. 1) algorithm ReverseTraversal(head, tail) 2) Pre: head and tail belong to the same list 3) Post: the items in the list have been traversed in reverse order 4) if tail \u0338= \u2205 5) curr \u2190tail 6) while curr \u0338= head 7) prev \u2190head 8) while prev.Next \u0338= curr 9) prev \u2190prev.Next 10) end while 11) yield curr.Value 12) curr \u2190prev 13) end while 14) yield curr.Value 15) end if 16) end ReverseTraversal This algorithm is only of real interest when we are using singly linked lists, as you will soon see that doubly linked lists (de\ufb01ned in \u00a72.2) make reverse list traversal simple and e\ufb03cient, as shown in \u00a72.2.3. 2.2 Doubly Linked List Doubly linked lists are very similar to singly linked lists. The only di\ufb00erence is that each node has a reference to both the next and previous nodes in the list. CHAPTER 2. LINKED LISTS 14 Figure 2.3: Reverse traveral of a singly linked list Figure 2.4: Doubly linked list node CHAPTER 2. LINKED LISTS 15 The following algorithms for the doubly linked list are exactly the same as those listed previously for the singly linked list: 1. Searching (de\ufb01ned in \u00a72.1.2) 2. Traversal (de\ufb01ned in \u00a72.1.4) 2.2.1 Insertion The only major di\ufb00erence between the algorithm in \u00a72.1.1 is that we"}, {"filename": "Dsag.pdf", "text": "Doubly linked lists are very similar to singly linked lists. The only di\ufb00erence is that each node has a reference to both the next and previous nodes in the list. CHAPTER 2. LINKED LISTS 14 Figure 2.3: Reverse traveral of a singly linked list Figure 2.4: Doubly linked list node CHAPTER 2. LINKED LISTS 15 The following algorithms for the doubly linked list are exactly the same as those listed previously for the singly linked list: 1. Searching (de\ufb01ned in \u00a72.1.2) 2. Traversal (de\ufb01ned in \u00a72.1.4) 2.2.1 Insertion The only major di\ufb00erence between the algorithm in \u00a72.1.1 is that we need to remember to bind the previous pointer of n to the previous tail node if n was not the \ufb01rst node to be inserted into the list. 1) algorithm Add(value) 2) Pre: value is the value to add to the list 3) Post: value has been placed at the tail of the list 4) n \u2190node(value) 5) if head = \u2205 6) head \u2190n 7) tail \u2190n 8) else 9) n.Previous \u2190tail 10) tail.Next \u2190n 11) tail \u2190n 12) end if 13) end Add Figure 2.5 shows the doubly linked list after adding the sequence of integers de\ufb01ned in \u00a72.1.1. Figure 2.5: Doubly linked list populated with integers 2.2.2 Deletion As you may of guessed the cases that we use for deletion in a doubly linked list are exactly the same as those de\ufb01ned in \u00a72.1.3. Like insertion we have the added task of binding an additional reference (Previous) to the correct value. CHAPTER 2. LINKED LISTS 16 1) algorithm Remove(head, value) 2) Pre: head is the head node in the list 3) value is the value to remove from the list 4) Post: value is removed from the list, true; otherwise false 5) if head = \u2205 6) return false 7) end if 8) if value = head.Value 9) if head = tail 10) head \u2190\u2205 11) tail \u2190\u2205 12) else 13) head \u2190head.Next 14) head.Previous \u2190\u2205 15) end if 16) return true 17) end if 18) n \u2190head.Next 19) while n \u0338= \u2205and value \u0338= n.Value 20) n \u2190n.Next 21) end while 22) if n = tail 23) tail \u2190tail.Previous 24) tail.Next \u2190\u2205 25) return true 26) else if n \u0338= \u2205 27) n.Previous.Next \u2190n.Next 28) n.Next.Previous \u2190n.Previous 29) return true 30) end if 31) return false 32) end Remove 2.2.3 Reverse Traversal Singly linked lists have a forward only design, which is why the reverse traversal algorithm de\ufb01ned in \u00a72.1.5 required some creative invention. Doubly linked lists make reverse traversal as simple as forward traversal (de\ufb01ned in \u00a72.1.4) except that we start at the tail node and update the pointers in the opposite direction. Figure 2.6 shows the reverse traversal algorithm in action. CHAPTER 2. LINKED LISTS 17 Figure 2.6: Doubly linked list reverse traversal 1) algorithm ReverseTraversal(tail) 2) Pre: tail is the tail node of the list to traverse 3) Post: the list has been traversed in reverse order 4) n \u2190tail 5) while n"}, {"filename": "Dsag.pdf", "text": "a forward only design, which is why the reverse traversal algorithm de\ufb01ned in \u00a72.1.5 required some creative invention. Doubly linked lists make reverse traversal as simple as forward traversal (de\ufb01ned in \u00a72.1.4) except that we start at the tail node and update the pointers in the opposite direction. Figure 2.6 shows the reverse traversal algorithm in action. CHAPTER 2. LINKED LISTS 17 Figure 2.6: Doubly linked list reverse traversal 1) algorithm ReverseTraversal(tail) 2) Pre: tail is the tail node of the list to traverse 3) Post: the list has been traversed in reverse order 4) n \u2190tail 5) while n \u0338= \u2205 6) yield n.Value 7) n \u2190n.Previous 8) end while 9) end ReverseTraversal 2.3 Summary Linked lists are good to use when you have an unknown number of items to store. Using a data structure like an array would require you to specify the size up front; exceeding that size involves invoking a resizing algorithm which has a linear run time. You should also use linked lists when you will only remove nodes at either the head or tail of the list to maintain a constant run time. This requires maintaining pointers to the nodes at the head and tail of the list but the memory overhead will pay for itself if this is an operation you will be performing many times. What linked lists are not very good for is random insertion, accessing nodes by index, and searching. At the expense of a little memory (in most cases 4 bytes would su\ufb03ce), and a few more read/writes you could maintain a count variable that tracks how many items are contained in the list so that accessing such a primitive property is a constant operation - you just need to update count during the insertion and deletion algorithms. Singly linked lists should be used when you are only performing basic in- sertions. In general doubly linked lists are more accommodating for non-trivial operations on a linked list. We recommend the use of a doubly linked list when you require forwards and backwards traversal. For the most cases this requirement is present. For example, consider a token stream that you want to parse in a recursive descent fashion. Sometimes you will have to backtrack in order to create the correct parse tree. In this scenario a doubly linked list is best as its design makes bi-directional traversal much simpler and quicker than that of a singly linked CHAPTER 2. LINKED LISTS 18 list. Chapter 3 Binary Search Tree Binary search trees (BSTs) are very simple to understand. We start with a root node with value x, where the left subtree of x contains nodes with values < x and the right subtree contains nodes whose values are \u2265x. Each node follows the same rules with respect to nodes in their left and right subtrees. BSTs are of interest because they have operations which are favourably fast: insertion, look up, and deletion can all be done in O(log n) time. It"}, {"filename": "Dsag.pdf", "text": "quicker than that of a singly linked CHAPTER 2. LINKED LISTS 18 list. Chapter 3 Binary Search Tree Binary search trees (BSTs) are very simple to understand. We start with a root node with value x, where the left subtree of x contains nodes with values < x and the right subtree contains nodes whose values are \u2265x. Each node follows the same rules with respect to nodes in their left and right subtrees. BSTs are of interest because they have operations which are favourably fast: insertion, look up, and deletion can all be done in O(log n) time. It is important to note that the O(log n) times for these operations can only be attained if the BST is reasonably balanced; for a tree data structure with self balancing properties see AVL tree de\ufb01ned in \u00a77). In the following examples you can assume, unless used as a parameter alias that root is a reference to the root node of the tree. 23 14 31 7 17 9 Figure 3.1: Simple unbalanced binary search tree 19 CHAPTER 3. BINARY SEARCH TREE 20 3.1 Insertion As mentioned previously insertion is an O(log n) operation provided that the tree is moderately balanced. 1) algorithm Insert(value) 2) Pre: value has passed custom type checks for type T 3) Post: value has been placed in the correct location in the tree 4) if root = \u2205 5) root \u2190node(value) 6) else 7) InsertNode(root, value) 8) end if 9) end Insert 1) algorithm InsertNode(current, value) 2) Pre: current is the node to start from 3) Post: value has been placed in the correct location in the tree 4) if value < current.Value 5) if current.Left = \u2205 6) current.Left \u2190node(value) 7) else 8) InsertNode(current.Left, value) 9) end if 10) else 11) if current.Right = \u2205 12) current.Right \u2190node(value) 13) else 14) InsertNode(current.Right, value) 15) end if 16) end if 17) end InsertNode The insertion algorithm is split for a good reason. The \ufb01rst algorithm (non- recursive) checks a very core base case - whether or not the tree is empty. If the tree is empty then we simply create our root node and \ufb01nish. In all other cases we invoke the recursive InsertNode algorithm which simply guides us to the \ufb01rst appropriate place in the tree to put value. Note that at each stage we perform a binary chop: we either choose to recurse into the left subtree or the right by comparing the new value with that of the current node. For any totally ordered type, no value can simultaneously satisfy the conditions to place it in both subtrees. CHAPTER 3. BINARY SEARCH TREE 21 3.2 Searching Searching a BST is even simpler than insertion. The pseudocode is self-explanatory but we will look brie\ufb02y at the premise of the algorithm nonetheless. We have talked previously about insertion, we go either left or right with the right subtree containing values that are \u2265x where x is the value of the node we are inserting. When"}, {"filename": "Dsag.pdf", "text": "the left subtree or the right by comparing the new value with that of the current node. For any totally ordered type, no value can simultaneously satisfy the conditions to place it in both subtrees. CHAPTER 3. BINARY SEARCH TREE 21 3.2 Searching Searching a BST is even simpler than insertion. The pseudocode is self-explanatory but we will look brie\ufb02y at the premise of the algorithm nonetheless. We have talked previously about insertion, we go either left or right with the right subtree containing values that are \u2265x where x is the value of the node we are inserting. When searching the rules are made a little more atomic and at any one time we have four cases to consider: 1. the root = \u2205in which case value is not in the BST; or 2. root.Value = value in which case value is in the BST; or 3. value < root.Value, we must inspect the left subtree of root for value; or 4. value > root.Value, we must inspect the right subtree of root for value. 1) algorithm Contains(root, value) 2) Pre: root is the root node of the tree, value is what we would like to locate 3) Post: value is either located or not 4) if root = \u2205 5) return false 6) end if 7) if root.Value = value 8) return true 9) else if value < root.Value 10) return Contains(root.Left, value) 11) else 12) return Contains(root.Right, value) 13) end if 14) end Contains CHAPTER 3. BINARY SEARCH TREE 22 3.3 Deletion Removing a node from a BST is fairly straightforward, with four cases to con- sider: 1. the value to remove is a leaf node; or 2. the value to remove has a right subtree, but no left subtree; or 3. the value to remove has a left subtree, but no right subtree; or 4. the value to remove has both a left and right subtree in which case we promote the largest value in the left subtree. There is also an implicit \ufb01fth case whereby the node to be removed is the only node in the tree. This case is already covered by the \ufb01rst, but should be noted as a possibility nonetheless. Of course in a BST a value may occur more than once. In such a case the \ufb01rst occurrence of that value in the BST will be removed. 23 14 31 7 9 #1: Leaf Node #2: Right subtree no left subtree #3: Left subtree no right subtree #4: Right subtree and left subtree Figure 3.2: binary search tree deletion cases The Remove algorithm given below relies on two further helper algorithms named FindParent, and FindNode which are described in \u00a73.4 and \u00a73.5 re- spectively. CHAPTER 3. BINARY SEARCH TREE 23 1) algorithm Remove(value) 2) Pre: value is the value of the node to remove, root is the root node of the BST 3) Count is the number of items in the BST 3) Post: node with value is removed if found"}, {"filename": "Dsag.pdf", "text": "9 #1: Leaf Node #2: Right subtree no left subtree #3: Left subtree no right subtree #4: Right subtree and left subtree Figure 3.2: binary search tree deletion cases The Remove algorithm given below relies on two further helper algorithms named FindParent, and FindNode which are described in \u00a73.4 and \u00a73.5 re- spectively. CHAPTER 3. BINARY SEARCH TREE 23 1) algorithm Remove(value) 2) Pre: value is the value of the node to remove, root is the root node of the BST 3) Count is the number of items in the BST 3) Post: node with value is removed if found in which case yields true, otherwise false 4) nodeToRemove \u2190FindNode(value) 5) if nodeToRemove = \u2205 6) return false // value not in BST 7) end if 8) parent \u2190FindParent(value) 9) if Count = 1 10) root \u2190\u2205// we are removing the only node in the BST 11) else if nodeToRemove.Left = \u2205and nodeToRemove.Right = null 12) // case #1 13) if nodeToRemove.Value < parent.Value 14) parent.Left \u2190\u2205 15) else 16) parent.Right \u2190\u2205 17) end if 18) else if nodeToRemove.Left = \u2205and nodeToRemove.Right \u0338= \u2205 19) // case # 2 20) if nodeToRemove.Value < parent.Value 21) parent.Left \u2190nodeToRemove.Right 22) else 23) parent.Right \u2190nodeToRemove.Right 24) end if 25) else if nodeToRemove.Left \u0338= \u2205and nodeToRemove.Right = \u2205 26) // case #3 27) if nodeToRemove.Value < parent.Value 28) parent.Left \u2190nodeToRemove.Left 29) else 30) parent.Right \u2190nodeToRemove.Left 31) end if 32) else 33) // case #4 34) largestV alue \u2190nodeToRemove.Left 35) while largestV alue.Right \u0338= \u2205 36) // \ufb01nd the largest value in the left subtree of nodeToRemove 37) largestV alue \u2190largestV alue.Right 38) end while 39) // set the parents\u2019 Right pointer of largestV alue to \u2205 40) FindParent(largestV alue.Value).Right \u2190\u2205 41) nodeToRemove.Value \u2190largestV alue.Value 42) end if 43) Count \u2190Count \u22121 44) return true 45) end Remove CHAPTER 3. BINARY SEARCH TREE 24 3.4 Finding the parent of a given node The purpose of this algorithm is simple - to return a reference (or pointer) to the parent node of the one with the given value. We have found that such an algorithm is very useful, especially when performing extensive tree transforma- tions. 1) algorithm FindParent(value, root) 2) Pre: value is the value of the node we want to \ufb01nd the parent of 3) root is the root node of the BST and is ! = \u2205 4) Post: a reference to the parent node of value if found; otherwise \u2205 5) if value = root.Value 6) return \u2205 7) end if 8) if value < root.Value 9) if root.Left = \u2205 10) return \u2205 11) else if root.Left.Value = value 12) return root 13) else 14) return FindParent(value, root.Left) 15) end if 16) else 17) if root.Right = \u2205 18) return \u2205 19) else if root.Right.Value = value 20) return root 21) else 22) return FindParent(value, root.Right) 23) end if 24) end if 25) end FindParent A special case in the above algorithm is when the speci\ufb01ed value does not exist in the"}, {"filename": "Dsag.pdf", "text": "node of value if found; otherwise \u2205 5) if value = root.Value 6) return \u2205 7) end if 8) if value < root.Value 9) if root.Left = \u2205 10) return \u2205 11) else if root.Left.Value = value 12) return root 13) else 14) return FindParent(value, root.Left) 15) end if 16) else 17) if root.Right = \u2205 18) return \u2205 19) else if root.Right.Value = value 20) return root 21) else 22) return FindParent(value, root.Right) 23) end if 24) end if 25) end FindParent A special case in the above algorithm is when the speci\ufb01ed value does not exist in the BST, in which case we return \u2205. Callers to this algorithm must take account of this possibility unless they are already certain that a node with the speci\ufb01ed value exists. 3.5 Attaining a reference to a node This algorithm is very similar to \u00a73.4, but instead of returning a reference to the parent of the node with the speci\ufb01ed value, it returns a reference to the node itself. Again, \u2205is returned if the value isn\u2019t found. CHAPTER 3. BINARY SEARCH TREE 25 1) algorithm FindNode(root, value) 2) Pre: value is the value of the node we want to \ufb01nd the parent of 3) root is the root node of the BST 4) Post: a reference to the node of value if found; otherwise \u2205 5) if root = \u2205 6) return \u2205 7) end if 8) if root.Value = value 9) return root 10) else if value < root.Value 11) return FindNode(root.Left, value) 12) else 13) return FindNode(root.Right, value) 14) end if 15) end FindNode Astute readers will have noticed that the FindNode algorithm is exactly the same as the Contains algorithm (de\ufb01ned in \u00a73.2) with the modi\ufb01cation that we are returning a reference to a node not true or false. Given FindNode, the easiest way of implementing Contains is to call FindNode and compare the return value with \u2205. 3.6 Finding the smallest and largest values in the binary search tree To \ufb01nd the smallest value in a BST you simply traverse the nodes in the left subtree of the BST always going left upon each encounter with a node, termi- nating when you \ufb01nd a node with no left subtree. The opposite is the case when \ufb01nding the largest value in the BST. Both algorithms are incredibly simple, and are listed simply for completeness. The base case in both FindMin, and FindMax algorithms is when the Left (FindMin), or Right (FindMax) node references are \u2205in which case we have reached the last node. 1) algorithm FindMin(root) 2) Pre: root is the root node of the BST 3) root \u0338= \u2205 4) Post: the smallest value in the BST is located 5) if root.Left = \u2205 6) return root.Value 7) end if 8) FindMin(root.Left) 9) end FindMin CHAPTER 3. BINARY SEARCH TREE 26 1) algorithm FindMax(root) 2) Pre: root is the root node of the BST 3) root \u0338= \u2205 4) Post: the largest value in the BST is"}, {"filename": "Dsag.pdf", "text": "both FindMin, and FindMax algorithms is when the Left (FindMin), or Right (FindMax) node references are \u2205in which case we have reached the last node. 1) algorithm FindMin(root) 2) Pre: root is the root node of the BST 3) root \u0338= \u2205 4) Post: the smallest value in the BST is located 5) if root.Left = \u2205 6) return root.Value 7) end if 8) FindMin(root.Left) 9) end FindMin CHAPTER 3. BINARY SEARCH TREE 26 1) algorithm FindMax(root) 2) Pre: root is the root node of the BST 3) root \u0338= \u2205 4) Post: the largest value in the BST is located 5) if root.Right = \u2205 6) return root.Value 7) end if 8) FindMax(root.Right) 9) end FindMax 3.7 Tree Traversals There are various strategies which can be employed to traverse the items in a tree; the choice of strategy depends on which node visitation order you require. In this section we will touch on the traversals that DSA provides on all data structures that derive from BinarySearchTree. 3.7.1 Preorder When using the preorder algorithm, you visit the root \ufb01rst, then traverse the left subtree and \ufb01nally traverse the right subtree. An example of preorder traversal is shown in Figure 3.3. 1) algorithm Preorder(root) 2) Pre: root is the root node of the BST 3) Post: the nodes in the BST have been visited in preorder 4) if root \u0338= \u2205 5) yield root.Value 6) Preorder(root.Left) 7) Preorder(root.Right) 8) end if 9) end Preorder 3.7.2 Postorder This algorithm is very similar to that described in \u00a73.7.1, however the value of the node is yielded after traversing both subtrees. An example of postorder traversal is shown in Figure 3.4. 1) algorithm Postorder(root) 2) Pre: root is the root node of the BST 3) Post: the nodes in the BST have been visited in postorder 4) if root \u0338= \u2205 5) Postorder(root.Left) 6) Postorder(root.Right) 7) yield root.Value 8) end if 9) end Postorder CHAPTER 3. BINARY SEARCH TREE 27 23 14 31 7 17 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 (a) (b) (c) (d) (e) (f) 17 17 17 17 17 Figure 3.3: Preorder visit binary search tree example CHAPTER 3. BINARY SEARCH TREE 28 23 14 31 7 17 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 (a) (b) (c) (d) (e) (f) 17 17 17 17 17 Figure 3.4: Postorder visit binary search tree example CHAPTER 3. BINARY SEARCH TREE 29 3.7.3 Inorder Another variation of the algorithms de\ufb01ned in \u00a73.7.1 and \u00a73.7.2 is that of inorder traversal where the value of the current node is yielded in between traversing the left subtree and the right subtree. An example of inorder traversal is shown in Figure 3.5. 23 14 31 7 17 9 23 14 31 7 9 23 14 31 7 9"}, {"filename": "Dsag.pdf", "text": "31 7 9 23 14 31 7 9 23 14 31 7 9 (a) (b) (c) (d) (e) (f) 17 17 17 17 17 Figure 3.4: Postorder visit binary search tree example CHAPTER 3. BINARY SEARCH TREE 29 3.7.3 Inorder Another variation of the algorithms de\ufb01ned in \u00a73.7.1 and \u00a73.7.2 is that of inorder traversal where the value of the current node is yielded in between traversing the left subtree and the right subtree. An example of inorder traversal is shown in Figure 3.5. 23 14 31 7 17 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 (a) (b) (c) (d) (e) (f) 17 17 17 17 17 Figure 3.5: Inorder visit binary search tree example 1) algorithm Inorder(root) 2) Pre: root is the root node of the BST 3) Post: the nodes in the BST have been visited in inorder 4) if root \u0338= \u2205 5) Inorder(root.Left) 6) yield root.Value 7) Inorder(root.Right) 8) end if 9) end Inorder One of the beauties of inorder traversal is that values are yielded in their comparison order. In other words, when traversing a populated BST with the inorder strategy, the yielded sequence would have property xi \u2264xi+1\u2200i. CHAPTER 3. BINARY SEARCH TREE 30 3.7.4 Breadth First Traversing a tree in breadth \ufb01rst order yields the values of all nodes of a par- ticular depth in the tree before any deeper ones. In other words, given a depth d we would visit the values of all nodes at d in a left to right fashion, then we would proceed to d + 1 and so on until we hade no more nodes to visit. An example of breadth \ufb01rst traversal is shown in Figure 3.6. Traditionally breadth \ufb01rst traversal is implemented using a list (vector, re- sizeable array, etc) to store the values of the nodes visited in breadth \ufb01rst order and then a queue to store those nodes that have yet to be visited. 23 14 31 7 17 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 23 14 31 7 9 (a) (b) (c) (d) (e) (f) 17 17 17 17 17 Figure 3.6: Breadth First visit binary search tree example CHAPTER 3. BINARY SEARCH TREE 31 1) algorithm BreadthFirst(root) 2) Pre: root is the root node of the BST 3) Post: the nodes in the BST have been visited in breadth \ufb01rst order 4) q \u2190queue 5) while root \u0338= \u2205 6) yield root.Value 7) if root.Left \u0338= \u2205 8) q.Enqueue(root.Left) 9) end if 10) if root.Right \u0338= \u2205 11) q.Enqueue(root.Right) 12) end if 13) if !q.IsEmpty() 14) root \u2190q.Dequeue() 15) else 16) root \u2190\u2205 17) end if 18) end while 19) end BreadthFirst 3.8 Summary A binary search tree is a good solution when you need to represent types that are ordered according to some custom rules inherent"}, {"filename": "Dsag.pdf", "text": "2) Pre: root is the root node of the BST 3) Post: the nodes in the BST have been visited in breadth \ufb01rst order 4) q \u2190queue 5) while root \u0338= \u2205 6) yield root.Value 7) if root.Left \u0338= \u2205 8) q.Enqueue(root.Left) 9) end if 10) if root.Right \u0338= \u2205 11) q.Enqueue(root.Right) 12) end if 13) if !q.IsEmpty() 14) root \u2190q.Dequeue() 15) else 16) root \u2190\u2205 17) end if 18) end while 19) end BreadthFirst 3.8 Summary A binary search tree is a good solution when you need to represent types that are ordered according to some custom rules inherent to that type. With logarithmic insertion, lookup, and deletion it is very e\ufb00ecient. Traversal remains linear, but there are many ways in which you can visit the nodes of a tree. Trees are recursive data structures, so typically you will \ufb01nd that many algorithms that operate on a tree are recursive. The run times presented in this chapter are based on a pretty big assumption - that the binary search tree\u2019s left and right subtrees are reasonably balanced. We can only attain logarithmic run times for the algorithms presented earlier when this is true. A binary search tree does not enforce such a property, and the run times for these operations on a pathologically unbalanced tree become linear: such a tree is e\ufb00ectively just a linked list. Later in \u00a77 we will examine an AVL tree that enforces self-balancing properties to help attain logarithmic run times. Chapter 4 Heap A heap can be thought of as a simple tree data structure, however a heap usually employs one of two strategies: 1. min heap; or 2. max heap Each strategy determines the properties of the tree and its values. If you were to choose the min heap strategy then each parent node would have a value that is \u2264than its children. For example, the node at the root of the tree will have the smallest value in the tree. The opposite is true for the max heap strategy. In this book you should assume that a heap employs the min heap strategy unless otherwise stated. Unlike other tree data structures like the one de\ufb01ned in \u00a73 a heap is generally implemented as an array rather than a series of nodes which each have refer- ences to other nodes. The nodes are conceptually the same, however, having at most two children. Figure 4.1 shows how the tree (not a heap data structure) (12 7(3 2) 6(9 )) would be represented as an array. The array in Figure 4.1 is a result of simply adding values in a top-to-bottom, left-to-right fashion. Figure 4.2 shows arrows to the direct left and right child of each value in the array. This chapter is very much centred around the notion of representing a tree as an array and because this property is key to understanding this chapter Figure 4.3 shows a step by step process to represent a tree data structure as an array. In Figure"}, {"filename": "Dsag.pdf", "text": "4.1 shows how the tree (not a heap data structure) (12 7(3 2) 6(9 )) would be represented as an array. The array in Figure 4.1 is a result of simply adding values in a top-to-bottom, left-to-right fashion. Figure 4.2 shows arrows to the direct left and right child of each value in the array. This chapter is very much centred around the notion of representing a tree as an array and because this property is key to understanding this chapter Figure 4.3 shows a step by step process to represent a tree data structure as an array. In Figure 4.3 you can assume that the default capacity of our array is eight. Using just an array is often not su\ufb03cient as we have to be up front about the size of the array to use for the heap. Often the run time behaviour of a program can be unpredictable when it comes to the size of its internal data structures, so we need to choose a more dynamic data structure that contains the following properties: 1. we can specify an initial size of the array for scenarios where we know the upper storage limit required; and 2. the data structure encapsulates resizing algorithms to grow the array as required at run time 32 CHAPTER 4. HEAP 33 Figure 4.1: Array representation of a simple tree data structure Figure 4.2: Direct children of the nodes in an array representation of a tree data structure 1. Vector 2. ArrayList 3. List Figure 4.1 does not specify how we would handle adding null references to the heap. This varies from case to case; sometimes null values are prohibited entirely; in other cases we may treat them as being smaller than any non-null value, or indeed greater than any non-null value. You will have to resolve this ambiguity yourself having studied your requirements. For the sake of clarity we will avoid the issue by prohibiting null values. Because we are using an array we need some way to calculate the index of a parent node, and the children of a node. The required expressions for this are de\ufb01ned as follows for a node at index: 1. (index \u22121)/2 (parent index) 2. 2 \u2217index + 1 (left child) 3. 2 \u2217index + 2 (right child) In Figure 4.4 a) represents the calculation of the right child of 12 (2 \u22170 + 2); and b) calculates the index of the parent of 3 ((3 \u22121)/2). 4.1 Insertion Designing an algorithm for heap insertion is simple, but we must ensure that heap order is preserved after each insertion. Generally this is a post-insertion operation. Inserting a value into the next free slot in an array is simple: we just need to keep track of the next free index in the array as a counter, and increment it after each insertion. Inserting our value into the heap is the \ufb01rst part of the algorithm; the second is validating heap order. In the case of min-heap ordering this"}, {"filename": "Dsag.pdf", "text": "calculates the index of the parent of 3 ((3 \u22121)/2). 4.1 Insertion Designing an algorithm for heap insertion is simple, but we must ensure that heap order is preserved after each insertion. Generally this is a post-insertion operation. Inserting a value into the next free slot in an array is simple: we just need to keep track of the next free index in the array as a counter, and increment it after each insertion. Inserting our value into the heap is the \ufb01rst part of the algorithm; the second is validating heap order. In the case of min-heap ordering this requires us to swap the values of a parent and its child if the value of the child is < the value of its parent. We must do this for each subtree containing the value we just inserted. CHAPTER 4. HEAP 34 Figure 4.3: Converting a tree data structure to its array counterpart CHAPTER 4. HEAP 35 Figure 4.4: Calculating node properties The run time e\ufb03ciency for heap insertion is O(log n). The run time is a by product of verifying heap order as the \ufb01rst part of the algorithm (the actual insertion into the array) is O(1). Figure 4.5 shows the steps of inserting the values 3, 9, 12, 7, and 1 into a min-heap. CHAPTER 4. HEAP 36 Figure 4.5: Inserting values into a min-heap CHAPTER 4. HEAP 37 1) algorithm Add(value) 2) Pre: value is the value to add to the heap 3) Count is the number of items in the heap 4) Post: the value has been added to the heap 5) heap[Count] \u2190value 6) Count \u2190Count +1 7) MinHeapify() 8) end Add 1) algorithm MinHeapify() 2) Pre: Count is the number of items in the heap 3) heap is the array used to store the heap items 4) Post: the heap has preserved min heap ordering 5) i \u2190Count \u22121 6) while i > 0 and heap[i] < heap[(i \u22121)/2] 7) Swap(heap[i], heap[(i \u22121)/2] 8) i \u2190(i \u22121)/2 9) end while 10) end MinHeapify The design of the MaxHeapify algorithm is very similar to that of the Min- Heapify algorithm, the only di\ufb00erence is that the < operator in the second condition of entering the while loop is changed to >. 4.2 Deletion Just as for insertion, deleting an item involves ensuring that heap ordering is preserved. The algorithm for deletion has three steps: 1. \ufb01nd the index of the value to delete 2. put the last value in the heap at the index location of the item to delete 3. verify heap ordering for each subtree which used to include the value CHAPTER 4. HEAP 38 1) algorithm Remove(value) 2) Pre: value is the value to remove from the heap 3) left, and right are updated alias\u2019 for 2 \u2217index + 1, and 2 \u2217index + 2 respectively 4) Count is the number of items in the heap 5) heap is the array used to store the heap items 6) Post: value is located"}, {"filename": "Dsag.pdf", "text": "\ufb01nd the index of the value to delete 2. put the last value in the heap at the index location of the item to delete 3. verify heap ordering for each subtree which used to include the value CHAPTER 4. HEAP 38 1) algorithm Remove(value) 2) Pre: value is the value to remove from the heap 3) left, and right are updated alias\u2019 for 2 \u2217index + 1, and 2 \u2217index + 2 respectively 4) Count is the number of items in the heap 5) heap is the array used to store the heap items 6) Post: value is located in the heap and removed, true; otherwise false 7) // step 1 8) index \u2190FindIndex(heap, value) 9) if index < 0 10) return false 11) end if 12) Count \u2190Count \u22121 13) // step 2 14) heap[index] \u2190heap[Count] 15) // step 3 16) while left < Count and heap[index] > heap[left] or heap[index] > heap[right] 17) // promote smallest key from subtree 18) if heap[left] < heap[right] 19) Swap(heap, left, index) 20) index \u2190left 21) else 22) Swap(heap, right, index) 23) index \u2190right 24) end if 25) end while 26) return true 27) end Remove Figure 4.6 shows the Remove algorithm visually, removing 1 from a heap containing the values 1, 3, 9, 12, and 13. In Figure 4.6 you can assume that we have speci\ufb01ed that the backing array of the heap should have an initial capacity of eight. Please note that in our deletion algorithm that we don\u2019t default the removed value in the heap array. If you are using a heap for reference types, i.e. objects that are allocated on a heap you will want to free that memory. This is important in both unmanaged, and managed languages. In the latter we will want to null that empty hole so that the garbage collector can reclaim that memory. If we were to not null that hole then the object could still be reached and thus won\u2019t be garbage collected. 4.3 Searching Searching a heap is merely a matter of traversing the items in the heap array sequentially, so this operation has a run time complexity of O(n). The search can be thought of as one that uses a breadth \ufb01rst traversal as de\ufb01ned in \u00a73.7.4 to visit the nodes within the heap to check for the presence of a speci\ufb01ed item. CHAPTER 4. HEAP 39 Figure 4.6: Deleting an item from a heap CHAPTER 4. HEAP 40 1) algorithm Contains(value) 2) Pre: value is the value to search the heap for 3) Count is the number of items in the heap 4) heap is the array used to store the heap items 5) Post: value is located in the heap, in which case true; otherwise false 6) i \u21900 7) while i < Count and heap[i] \u0338= value 8) i \u2190i + 1 9) end while 10) if i < Count 11) return true 12) else 13) return false 14) end if 15) end Contains The problem"}, {"filename": "Dsag.pdf", "text": "Deleting an item from a heap CHAPTER 4. HEAP 40 1) algorithm Contains(value) 2) Pre: value is the value to search the heap for 3) Count is the number of items in the heap 4) heap is the array used to store the heap items 5) Post: value is located in the heap, in which case true; otherwise false 6) i \u21900 7) while i < Count and heap[i] \u0338= value 8) i \u2190i + 1 9) end while 10) if i < Count 11) return true 12) else 13) return false 14) end if 15) end Contains The problem with the previous algorithm is that we don\u2019t take advantage of the properties in which all values of a heap hold, that is the property of the heap strategy being used. For instance if we had a heap that didn\u2019t contain the value 4 we would have to exhaust the whole backing heap array before we could determine that it wasn\u2019t present in the heap. Factoring in what we know about the heap we can optimise the search algorithm by including logic which makes use of the properties presented by a certain heap strategy. Optimising to deterministically state that a value is in the heap is not that straightforward, however the problem is a very interesting one. As an example consider a min-heap that doesn\u2019t contain the value 5. We can only rule that the value is not in the heap if 5 > the parent of the current node being inspected and < the current node being inspected \u2200nodes at the current level we are traversing. If this is the case then 5 cannot be in the heap and so we can provide an answer without traversing the rest of the heap. If this property is not satis\ufb01ed for any level of nodes that we are inspecting then the algorithm will indeed fall back to inspecting all the nodes in the heap. The optimisation that we present can be very common and so we feel that the extra logic within the loop is justi\ufb01ed to prevent the expensive worse case run time. The following algorithm is speci\ufb01cally designed for a min-heap. To tailor the algorithm for a max-heap the two comparison operations in the else if condition within the inner while loop should be \ufb02ipped. CHAPTER 4. HEAP 41 1) algorithm Contains(value) 2) Pre: value is the value to search the heap for 3) Count is the number of items in the heap 4) heap is the array used to store the heap items 5) Post: value is located in the heap, in which case true; otherwise false 6) start \u21900 7) nodes \u21901 8) while start < Count 9) start \u2190nodes \u22121 10) end \u2190nodes + start 11) count \u21900 12) while start < Count and start < end 13) if value = heap[start] 14) return true 15) else if value > Parent(heap[start]) and value < heap[start] 16) count \u2190count + 1 17) end if 18) start \u2190start"}, {"filename": "Dsag.pdf", "text": "search the heap for 3) Count is the number of items in the heap 4) heap is the array used to store the heap items 5) Post: value is located in the heap, in which case true; otherwise false 6) start \u21900 7) nodes \u21901 8) while start < Count 9) start \u2190nodes \u22121 10) end \u2190nodes + start 11) count \u21900 12) while start < Count and start < end 13) if value = heap[start] 14) return true 15) else if value > Parent(heap[start]) and value < heap[start] 16) count \u2190count + 1 17) end if 18) start \u2190start + 1 19) end while 20) if count = nodes 21) return false 22) end if 23) nodes \u2190nodes \u22172 24) end while 25) return false 26) end Contains The new Contains algorithm determines if the value is not in the heap by checking whether count = nodes. In such an event where this is true then we can con\ufb01rm that \u2200nodes n at level i : value > Parent(n), value < n thus there is no possible way that value is in the heap. As an example consider Figure 4.7. If we are searching for the value 10 within the min-heap displayed it is obvious that we don\u2019t need to search the whole heap to determine 9 is not present. We can verify this after traversing the nodes in the second level of the heap as the previous expression de\ufb01ned holds true. 4.4 Traversal As mentioned in \u00a74.3 traversal of a heap is usually done like that of any other array data structure which our heap implementation is based upon. As a result you traverse the array starting at the initial array index (0 in most languages) and then visit each value within the array until you have reached the upper bound of the heap. You will note that in the search algorithm that we use Count as this upper bound rather than the actual physical bound of the allocated array. Count is used to partition the conceptual heap from the actual array implementation of the heap: we only care about the items in the heap, not the whole array\u2014the latter may contain various other bits of data as a result of heap mutation. CHAPTER 4. HEAP 42 Figure 4.7: Determining 10 is not in the heap after inspecting the nodes of Level 2 Figure 4.8: Living and dead space in the heap backing array If you have followed the advice we gave in the deletion algorithm then a heap that has been mutated several times will contain some form of default value for items no longer in the heap. Potentially you will have at most LengthOf(heapArray) \u2212Count garbage values in the backing heap array data structure. The garbage values of course vary from platform to platform. To make things simple the garbage value of a reference type will be simple \u2205and 0 for a value type. Figure 4.8 shows a heap that you can assume has been mutated"}, {"filename": "Dsag.pdf", "text": "space in the heap backing array If you have followed the advice we gave in the deletion algorithm then a heap that has been mutated several times will contain some form of default value for items no longer in the heap. Potentially you will have at most LengthOf(heapArray) \u2212Count garbage values in the backing heap array data structure. The garbage values of course vary from platform to platform. To make things simple the garbage value of a reference type will be simple \u2205and 0 for a value type. Figure 4.8 shows a heap that you can assume has been mutated many times. For this example we can further assume that at some point the items in indexes 3 \u22125 actually contained references to live objects of type T. In Figure 4.8 subscript is used to disambiguate separate objects of T. From what you have read thus far you will most likely have picked up that traversing the heap in any other order would be of little bene\ufb01t. The heap property only holds for the subtree of each node and so traversing a heap in any other fashion requires some creative intervention. Heaps are not usually traversed in any other way than the one prescribed previously. 4.5 Summary Heaps are most commonly used to implement priority queues (see \u00a76.2 for a sample implementation) and to facilitate heap sort. As discussed in both the insertion \u00a74.1 and deletion \u00a74.2 sections a heap maintains heap order according to the selected ordering strategy. These strategies are referred to as min-heap, CHAPTER 4. HEAP 43 and max heap. The former strategy enforces that the value of a parent node is less than that of each of its children, the latter enforces that the value of the parent is greater than that of each of its children. When you come across a heap and you are not told what strategy it enforces you should assume that it uses the min-heap strategy. If the heap can be con\ufb01gured otherwise, e.g. to use max-heap then this will often require you to state this explicitly. The heap abides progressively to a strategy during the invocation of the insertion, and deletion algorithms. The cost of such a policy is that upon each insertion and deletion we invoke algorithms that have logarithmic run time complexities. While the cost of maintaining the strategy might not seem overly expensive it does still come at a price. We will also have to factor in the cost of dynamic array expansion at some stage. This will occur if the number of items within the heap outgrows the space allocated in the heap\u2019s backing array. It may be in your best interest to research a good initial starting size for your heap array. This will assist in minimising the impact of dynamic array resizing. Chapter 5 Sets A set contains a number of values, in no particular order. The values within the set are distinct from one another. Generally set implementations tend to check that a"}, {"filename": "Dsag.pdf", "text": "at a price. We will also have to factor in the cost of dynamic array expansion at some stage. This will occur if the number of items within the heap outgrows the space allocated in the heap\u2019s backing array. It may be in your best interest to research a good initial starting size for your heap array. This will assist in minimising the impact of dynamic array resizing. Chapter 5 Sets A set contains a number of values, in no particular order. The values within the set are distinct from one another. Generally set implementations tend to check that a value is not in the set before adding it, avoiding the issue of repeated values from ever occurring. This section does not cover set theory in depth; rather it demonstrates brie\ufb02y the ways in which the values of sets can be de\ufb01ned, and common operations that may be performed upon them. The notation A = {4, 7, 9, 12, 0} de\ufb01nes a set A whose values are listed within the curly braces. Given the set A de\ufb01ned previously we can say that 4 is a member of A denoted by 4 \u2208A, and that 99 is not a member of A denoted by 99 /\u2208A. Often de\ufb01ning a set by manually stating its members is tiresome, and more importantly the set may contain a large number of values. A more concise way of de\ufb01ning a set and its members is by providing a series of properties that the values of the set must satisfy. For example, from the de\ufb01nition A = {x|x > 0, x % 2 = 0} the set A contains only positive integers that are even. x is an alias to the current value we are inspecting and to the right hand side of | are the properties that x must satisfy to be in the set A. In this example, x must be > 0, and the remainder of the arithmetic expression x/2 must be 0. You will be able to note from the previous de\ufb01nition of the set A that the set can contain an in\ufb01nite number of values, and that the values of the set A will be all even integers that are a member of the natural numbers set N, where N = {1, 2, 3, ...}. Finally in this brief introduction to sets we will cover set intersection and union, both of which are very common operations (amongst many others) per- formed on sets. The union set can be de\ufb01ned as follows A \u222aB = {x | x \u2208 A or x \u2208B}, and intersection A \u2229B = {x | x \u2208A and x \u2208B}. Figure 5.1 demonstrates set intersection and union graphically. Given the set de\ufb01nitions A = {1, 2, 3}, and B = {6, 2, 9} the union of the two sets is A\u222aB = {1, 2, 3, 6, 9}, and the intersection of the two sets is A\u2229B = {2}. Both set union and intersection are sometimes provided within"}, {"filename": "Dsag.pdf", "text": "which are very common operations (amongst many others) per- formed on sets. The union set can be de\ufb01ned as follows A \u222aB = {x | x \u2208 A or x \u2208B}, and intersection A \u2229B = {x | x \u2208A and x \u2208B}. Figure 5.1 demonstrates set intersection and union graphically. Given the set de\ufb01nitions A = {1, 2, 3}, and B = {6, 2, 9} the union of the two sets is A\u222aB = {1, 2, 3, 6, 9}, and the intersection of the two sets is A\u2229B = {2}. Both set union and intersection are sometimes provided within the frame- work associated with mainstream languages. This is the case in .NET 3.51 where such algorithms exist as extension methods de\ufb01ned in the type Sys- tem.Linq.Enumerable2, as a result DSA does not provide implementations of 1http://www.microsoft.com/NET/ 2http://msdn.microsoft.com/en-us/library/system.linq.enumerable_members.aspx 44 CHAPTER 5. SETS 45 Figure 5.1: a) A \u2229B; b) A \u222aB these algorithms. Most of the algorithms de\ufb01ned in System.Linq.Enumerable deal mainly with sequences rather than sets exclusively. Set union can be implemented as a simple traversal of both sets adding each item of the two sets to a new union set. 1) algorithm Union(set1, set2) 2) Pre: set1, and set2 \u0338= \u2205 3) union is a set 3) Post: A union of set1, and set2 has been created 4) foreach item in set1 5) union.Add(item) 6) end foreach 7) foreach item in set2 8) union.Add(item) 9) end foreach 10) return union 11) end Union The run time of our Union algorithm is O(m + n) where m is the number of items in the \ufb01rst set and n is the number of items in the second set. This runtime applies only to sets that exhibit O(1) insertions. Set intersection is also trivial to implement. The only major thing worth pointing out about our algorithm is that we traverse the set containing the fewest items. We can do this because if we have exhausted all the items in the smaller of the two sets then there are no more items that are members of both sets, thus we have no more items to add to the intersection set. CHAPTER 5. SETS 46 1) algorithm Intersection(set1, set2) 2) Pre: set1, and set2 \u0338= \u2205 3) intersection, and smallerSet are sets 3) Post: An intersection of set1, and set2 has been created 4) if set1.Count < set2.Count 5) smallerSet \u2190set1 6) else 7) smallerSet \u2190set2 8) end if 9) foreach item in smallerSet 10) if set1.Contains(item) and set2.Contains(item) 11) intersection.Add(item) 12) end if 13) end foreach 14) return intersection 15) end Intersection The run time of our Intersection algorithm is O(n) where n is the number of items in the smaller of the two sets. Just like our Union algorithm a linear runtime can only be attained when operating on a set with O(1) insertion. 5.1 Unordered Sets in the general sense do not enforce the explicit ordering of their mem- bers. For example the members of B = {6, 2, 9}"}, {"filename": "Dsag.pdf", "text": "7) smallerSet \u2190set2 8) end if 9) foreach item in smallerSet 10) if set1.Contains(item) and set2.Contains(item) 11) intersection.Add(item) 12) end if 13) end foreach 14) return intersection 15) end Intersection The run time of our Intersection algorithm is O(n) where n is the number of items in the smaller of the two sets. Just like our Union algorithm a linear runtime can only be attained when operating on a set with O(1) insertion. 5.1 Unordered Sets in the general sense do not enforce the explicit ordering of their mem- bers. For example the members of B = {6, 2, 9} conform to no ordering scheme because it is not required. Most libraries provide implementations of unordered sets and so DSA does not; we simply mention it here to disambiguate between an unordered set and ordered set. We will only look at insertion for an unordered set and cover brie\ufb02y why a hash table is an e\ufb03cient data structure to use for its implementation. 5.1.1 Insertion An unordered set can be e\ufb03ciently implemented using a hash table as its backing data structure. As mentioned previously we only add an item to a set if that item is not already in the set, so the backing data structure we use must have a quick look up and insertion run time complexity. A hash map generally provides the following: 1. O(1) for insertion 2. approaching O(1) for look up The above depends on how good the hashing algorithm of the hash table is, but most hash tables employ incredibly e\ufb03cient general purpose hashing algorithms and so the run time complexities for the hash table in your library of choice should be very similar in terms of e\ufb03ciency. CHAPTER 5. SETS 47 5.2 Ordered An ordered set is similar to an unordered set in the sense that its members are distinct, but an ordered set enforces some prede\ufb01ned comparison on each of its members to produce a set whose members are ordered appropriately. In DSA 0.5 and earlier we used a binary search tree (de\ufb01ned in \u00a73) as the internal backing data structure for our ordered set. From versions 0.6 onwards we replaced the binary search tree with an AVL tree primarily because AVL is balanced. The ordered set has its order realised by performing an inorder traversal upon its backing tree data structure which yields the correct ordered sequence of set members. Because an ordered set in DSA is simply a wrapper for an AVL tree that additionally ensures that the tree contains unique items you should read \u00a77 to learn more about the run time complexities associated with its operations. 5.3 Summary Sets provide a way of having a collection of unique objects, either ordered or unordered. When implementing a set (either ordered or unordered) it is key to select the correct backing data structure. As we discussed in \u00a75.1.1 because we check \ufb01rst if the item is already contained within the set before adding it we need this check to be"}, {"filename": "Dsag.pdf", "text": "an ordered set in DSA is simply a wrapper for an AVL tree that additionally ensures that the tree contains unique items you should read \u00a77 to learn more about the run time complexities associated with its operations. 5.3 Summary Sets provide a way of having a collection of unique objects, either ordered or unordered. When implementing a set (either ordered or unordered) it is key to select the correct backing data structure. As we discussed in \u00a75.1.1 because we check \ufb01rst if the item is already contained within the set before adding it we need this check to be as quick as possible. For unordered sets we can rely on the use of a hash table and use the key of an item to determine whether or not it is already contained within the set. Using a hash table this check results in a near constant run time complexity. Ordered sets cost a little more for this check, however the logarithmic growth that we incur by using a binary search tree as its backing data structure is acceptable. Another key property of sets implemented using the approach we describe is that both have favourably fast look-up times. Just like the check before inser- tion, for a hash table this run time complexity should be near constant. Ordered sets as described in 3 perform a binary chop at each stage when searching for the existence of an item yielding a logarithmic run time. We can use sets to facilitate many algorithms that would otherwise be a little less clear in their implementation. For example in \u00a711.4 we use an unordered set to assist in the construction of an algorithm that determines the number of repeated words within a string. Chapter 6 Queues Queues are an essential data structure that are found in vast amounts of soft- ware from user mode to kernel mode applications that are core to the system. Fundamentally they honour a \ufb01rst in \ufb01rst out (FIFO) strategy, that is the item \ufb01rst put into the queue will be the \ufb01rst served, the second item added to the queue will be the second to be served and so on. A traditional queue only allows you to access the item at the front of the queue; when you add an item to the queue that item is placed at the back of the queue. Historically queues always have the following three core methods: Enqueue: places an item at the back of the queue; Dequeue: retrieves the item at the front of the queue, and removes it from the queue; Peek: 1 retrieves the item at the front of the queue without removing it from the queue As an example to demonstrate the behaviour of a queue we will walk through a scenario whereby we invoke each of the previously mentioned methods observ- ing the mutations upon the queue data structure. The following list describes the operations performed upon the queue in Figure 6.1: 1. Enqueue(10) 2. Enqueue(12) 3. Enqueue(9)"}, {"filename": "Dsag.pdf", "text": "following three core methods: Enqueue: places an item at the back of the queue; Dequeue: retrieves the item at the front of the queue, and removes it from the queue; Peek: 1 retrieves the item at the front of the queue without removing it from the queue As an example to demonstrate the behaviour of a queue we will walk through a scenario whereby we invoke each of the previously mentioned methods observ- ing the mutations upon the queue data structure. The following list describes the operations performed upon the queue in Figure 6.1: 1. Enqueue(10) 2. Enqueue(12) 3. Enqueue(9) 4. Enqueue(8) 5. Enqueue(3) 6. Dequeue() 7. Peek() 1This operation is sometimes referred to as Front 48 CHAPTER 6. QUEUES 49 8. Enqueue(33) 9. Peek() 10. Dequeue() 6.1 A standard queue A queue is implicitly like that described prior to this section. In DSA we don\u2019t provide a standard queue because queues are so popular and such a core data structure that you will \ufb01nd pretty much every mainstream library provides a queue data structure that you can use with your language of choice. In this section we will discuss how you can, if required, implement an e\ufb03cient queue data structure. The main property of a queue is that we have access to the item at the front of the queue. The queue data structure can be e\ufb03ciently implemented using a singly linked list (de\ufb01ned in \u00a72.1). A singly linked list provides O(1) insertion and deletion run time complexities. The reason we have an O(1) run time complexity for deletion is because we only ever remove items from the front of queues (with the Dequeue operation). Since we always have a pointer to the item at the head of a singly linked list, removal is simply a case of returning the value of the old head node, and then modifying the head pointer to be the next node of the old head node. The run time complexity for searching a queue remains the same as that of a singly linked list: O(n). 6.2 Priority Queue Unlike a standard queue where items are ordered in terms of who arrived \ufb01rst, a priority queue determines the order of its items by using a form of custom comparer to see which item has the highest priority. Other than the items in a priority queue being ordered by priority it remains the same as a normal queue: you can only access the item at the front of the queue. A sensible implementation of a priority queue is to use a heap data structure (de\ufb01ned in \u00a74). Using a heap we can look at the \ufb01rst item in the queue by simply returning the item at index 0 within the heap array. A heap provides us with the ability to construct a priority queue where the items with the highest priority are either those with the smallest value, or those with the largest. 6.3 Double Ended Queue Unlike the queues we have talked about previously"}, {"filename": "Dsag.pdf", "text": "a normal queue: you can only access the item at the front of the queue. A sensible implementation of a priority queue is to use a heap data structure (de\ufb01ned in \u00a74). Using a heap we can look at the \ufb01rst item in the queue by simply returning the item at index 0 within the heap array. A heap provides us with the ability to construct a priority queue where the items with the highest priority are either those with the smallest value, or those with the largest. 6.3 Double Ended Queue Unlike the queues we have talked about previously in this chapter a double ended queue allows you to access the items at both the front, and back of the queue. A double ended queue is commonly known as a deque which is the name we will here on in refer to it as. A deque applies no prioritization strategy to its items like a priority queue does, items are added in order to either the front of back of the deque. The former properties of the deque are denoted by the programmer utilising the data structures exposed interface. CHAPTER 6. QUEUES 50 Figure 6.1: Queue mutations CHAPTER 6. QUEUES 51 Deque\u2019s provide front and back speci\ufb01c versions of common queue operations, e.g. you may want to enqueue an item to the front of the queue rather than the back in which case you would use a method with a name along the lines of EnqueueFront. The following list identi\ufb01es operations that are commonly supported by deque\u2019s: \u2022 EnqueueFront \u2022 EnqueueBack \u2022 DequeueFront \u2022 DequeueBack \u2022 PeekFront \u2022 PeekBack Figure 6.2 shows a deque after the invocation of the following methods (in- order): 1. EnqueueBack(12) 2. EnqueueFront(1) 3. EnqueueBack(23) 4. EnqueueFront(908) 5. DequeueFront() 6. DequeueBack() The operations have a one-to-one translation in terms of behaviour with those of a normal queue, or priority queue. In some cases the set of algorithms that add an item to the back of the deque may be named as they are with normal queues, e.g. EnqueueBack may simply be called Enqueue an so on. Some frameworks also specify explicit behaviour\u2019s that data structures must adhere to. This is certainly the case in .NET where most collections implement an interface which requires the data structure to expose a standard Add method. In such a scenario you can safely assume that the Add method will simply enqueue an item to the back of the deque. With respect to algorithmic run time complexities a deque is the same as a normal queue. That is enqueueing an item to the back of a the queue is O(1), additionally enqueuing an item to the front of the queue is also an O(1) operation. A deque is a wrapper data structure that uses either an array, or a doubly linked list. Using an array as the backing data structure would require the pro- grammer to be explicit about the size of the array up front, this would provide an"}, {"filename": "Dsag.pdf", "text": "simply enqueue an item to the back of the deque. With respect to algorithmic run time complexities a deque is the same as a normal queue. That is enqueueing an item to the back of a the queue is O(1), additionally enqueuing an item to the front of the queue is also an O(1) operation. A deque is a wrapper data structure that uses either an array, or a doubly linked list. Using an array as the backing data structure would require the pro- grammer to be explicit about the size of the array up front, this would provide an obvious advantage if the programmer could deterministically state the maxi- mum number of items the deque would contain at any one time. Unfortunately in most cases this doesn\u2019t hold, as a result the backing array will inherently incur the expense of invoking a resizing algorithm which would most likely be an O(n) operation. Such an approach would also leave the library developer CHAPTER 6. QUEUES 52 Figure 6.2: Deque data structure after several mutations CHAPTER 6. QUEUES 53 to look at array minimization techniques as well, it could be that after several invocations of the resizing algorithm and various mutations on the deque later that we have an array taking up a considerable amount of memory yet we are only using a few small percentage of that memory. An algorithm described would also be O(n) yet its invocation would be harder to gauge strategically. To bypass all the aforementioned issues a deque typically uses a doubly linked list as its baking data structure. While a node that has two pointers consumes more memory than its array item counterpart it makes redundant the need for expensive resizing algorithms as the data structure increases in size dynamically. With a language that targets a garbage collected virtual machine memory reclamation is an opaque process as the nodes that are no longer ref- erenced become unreachable and are thus marked for collection upon the next invocation of the garbage collection algorithm. With C++ or any other lan- guage that uses explicit memory allocation and deallocation it will be up to the programmer to decide when the memory that stores the object can be freed. 6.4 Summary With normal queues we have seen that those who arrive \ufb01rst are dealt with \ufb01rst; that is they are dealt with in a \ufb01rst-in-\ufb01rst-out (FIFO) order. Queues can be ever so useful; for example the Windows CPU scheduler uses a di\ufb00erent queue for each priority of process to determine which should be the next process to utilise the CPU for a speci\ufb01ed time quantum. Normal queues have constant insertion and deletion run times. Searching a queue is fairly unusual\u2014typically you are only interested in the item at the front of the queue. Despite that, searching is usually exposed on queues and typically the run time is linear. In this chapter we have also seen priority queues where those at the front of the queue have the highest priority"}, {"filename": "Dsag.pdf", "text": "be ever so useful; for example the Windows CPU scheduler uses a di\ufb00erent queue for each priority of process to determine which should be the next process to utilise the CPU for a speci\ufb01ed time quantum. Normal queues have constant insertion and deletion run times. Searching a queue is fairly unusual\u2014typically you are only interested in the item at the front of the queue. Despite that, searching is usually exposed on queues and typically the run time is linear. In this chapter we have also seen priority queues where those at the front of the queue have the highest priority and those near the back have the lowest. One implementation of a priority queue is to use a heap data structure as its backing store, so the run times for insertion, deletion, and searching are the same as those for a heap (de\ufb01ned in \u00a74). Queues are a very natural data structure, and while they are fairly primitive they can make many problems a lot simpler. For example the breadth \ufb01rst search de\ufb01ned in \u00a73.7.4 makes extensive use of queues. Chapter 7 AVL Tree In the early 60\u2019s G.M. Adelson-Velsky and E.M. Landis invented the \ufb01rst self- balancing binary search tree data structure, calling it AVL Tree. An AVL tree is a binary search tree (BST, de\ufb01ned in \u00a73) with a self-balancing condition stating that the di\ufb00erence between the height of the left and right subtrees cannot be no more than one, see Figure 7.1. This condition, restored after each tree modi\ufb01cation, forces the general shape of an AVL tree. Before continuing, let us focus on why balance is so important. Consider a binary search tree obtained by starting with an empty tree and inserting some values in the following order 1,2,3,4,5. The BST in Figure 7.2 represents the worst case scenario in which the run- ning time of all common operations such as search, insertion and deletion are O(n). By applying a balance condition we ensure that the worst case running time of each common operation is O(log n). The height of an AVL tree with n nodes is O(log n) regardless of the order in which values are inserted. The AVL balance condition, known also as the node balance factor represents an additional piece of information stored for each node. This is combined with a technique that e\ufb03ciently restores the balance condition for the tree. In an AVL tree the inventors make use of a well-known technique called tree rotation. h h+1 Figure 7.1: The left and right subtrees of an AVL tree di\ufb00er in height by at most 1 54 CHAPTER 7. AVL TREE 55 1 2 3 4 5 Figure 7.2: Unbalanced binary search tree 2 4 5 1 3 4 5 3 2 1 a) b) Figure 7.3: Avl trees, insertion order: -a)1,2,3,4,5 -b)1,5,4,3,2 CHAPTER 7. AVL TREE 56 7.1 Tree Rotations A tree rotation is a constant time operation on a binary search tree that changes the shape of a tree while preserving standard"}, {"filename": "Dsag.pdf", "text": "tree the inventors make use of a well-known technique called tree rotation. h h+1 Figure 7.1: The left and right subtrees of an AVL tree di\ufb00er in height by at most 1 54 CHAPTER 7. AVL TREE 55 1 2 3 4 5 Figure 7.2: Unbalanced binary search tree 2 4 5 1 3 4 5 3 2 1 a) b) Figure 7.3: Avl trees, insertion order: -a)1,2,3,4,5 -b)1,5,4,3,2 CHAPTER 7. AVL TREE 56 7.1 Tree Rotations A tree rotation is a constant time operation on a binary search tree that changes the shape of a tree while preserving standard BST properties. There are left and right rotations both of them decrease the height of a BST by moving smaller subtrees down and larger subtrees up. 14 24 11 8 2 8 14 24 2 11 Right Rotation Left Rotation Figure 7.4: Tree left and right rotations CHAPTER 7. AVL TREE 57 1) algorithm LeftRotation(node) 2) Pre: node.Right ! = \u2205 3) Post: node.Right is the new root of the subtree, 4) node has become node.Right\u2019s left child and, 5) BST properties are preserved 6) RightNode \u2190node.Right 7) node.Right \u2190RightNode.Left 8) RightNode.Left \u2190node 9) end LeftRotation 1) algorithm RightRotation(node) 2) Pre: node.Left ! = \u2205 3) Post: node.Left is the new root of the subtree, 4) node has become node.Left\u2019s right child and, 5) BST properties are preserved 6) LeftNode \u2190node.Left 7) node.Left \u2190LeftNode.Right 8) LeftNode.Right \u2190node 9) end RightRotation The right and left rotation algorithms are symmetric. Only pointers are changed by a rotation resulting in an O(1) runtime complexity; the other \ufb01elds present in the nodes are not changed. 7.2 Tree Rebalancing The algorithm that we present in this section veri\ufb01es that the left and right subtrees di\ufb00er at most in height by 1. If this property is not present then we perform the correct rotation. Notice that we use two new algorithms that represent double rotations. These algorithms are named LeftAndRightRotation, and RightAndLeftRotation. The algorithms are self documenting in their names, e.g. LeftAndRightRotation \ufb01rst performs a left rotation and then subsequently a right rotation. CHAPTER 7. AVL TREE 58 1) algorithm CheckBalance(current) 2) Pre: current is the node to start from balancing 3) Post: current height has been updated while tree balance is if needed 4) restored through rotations 5) if current.Left = \u2205and current.Right = \u2205 6) current.Height = -1; 7) else 8) current.Height = Max(Height(current.Left),Height(current.Right)) + 1 9) end if 10) if Height(current.Left) - Height(current.Right) > 1 11) if Height(current.Left.Left) - Height(current.Left.Right) > 0 12) RightRotation(current) 13) else 14) LeftAndRightRotation(current) 15) end if 16) else if Height(current.Left) - Height(current.Right) < \u22121 17) if Height(current.Right.Left) - Height(current.Right.Right) < 0 18) LeftRotation(current) 19) else 20) RightAndLeftRotation(current) 21) end if 22) end if 23) end CheckBalance 7.3 Insertion AVL insertion operates \ufb01rst by inserting the given value the same way as BST insertion and then by applying rebalancing techniques if necessary. The latter is only performed if the AVL property no longer holds, that is the left and"}, {"filename": "Dsag.pdf", "text": "+ 1 9) end if 10) if Height(current.Left) - Height(current.Right) > 1 11) if Height(current.Left.Left) - Height(current.Left.Right) > 0 12) RightRotation(current) 13) else 14) LeftAndRightRotation(current) 15) end if 16) else if Height(current.Left) - Height(current.Right) < \u22121 17) if Height(current.Right.Left) - Height(current.Right.Right) < 0 18) LeftRotation(current) 19) else 20) RightAndLeftRotation(current) 21) end if 22) end if 23) end CheckBalance 7.3 Insertion AVL insertion operates \ufb01rst by inserting the given value the same way as BST insertion and then by applying rebalancing techniques if necessary. The latter is only performed if the AVL property no longer holds, that is the left and right subtrees height di\ufb00er by more than 1. Each time we insert a node into an AVL tree: 1. We go down the tree to \ufb01nd the correct point at which to insert the node, in the same manner as for BST insertion; then 2. we travel up the tree from the inserted node and check that the node balancing property has not been violated; if the property hasn\u2019t been violated then we need not rebalance the tree, the opposite is true if the balancing property has been violated. CHAPTER 7. AVL TREE 59 1) algorithm Insert(value) 2) Pre: value has passed custom type checks for type T 3) Post: value has been placed in the correct location in the tree 4) if root = \u2205 5) root \u2190node(value) 6) else 7) InsertNode(root, value) 8) end if 9) end Insert 1) algorithm InsertNode(current, value) 2) Pre: current is the node to start from 3) Post: value has been placed in the correct location in the tree while 4) preserving tree balance 5) if value < current.Value 6) if current.Left = \u2205 7) current.Left \u2190node(value) 8) else 9) InsertNode(current.Left, value) 10) end if 11) else 12) if current.Right = \u2205 13) current.Right \u2190node(value) 14) else 15) InsertNode(current.Right, value) 16) end if 17) end if 18) CheckBalance(current) 19) end InsertNode 7.4 Deletion Our balancing algorithm is like the one presented for our BST (de\ufb01ned in \u00a73.3). The major di\ufb00erence is that we have to ensure that the tree still adheres to the AVL balance property after the removal of the node. If the tree doesn\u2019t need to be rebalanced and the value we are removing is contained within the tree then no further step are required. However, when the value is in the tree and its removal upsets the AVL balance property then we must perform the correct rotation(s). CHAPTER 7. AVL TREE 60 1) algorithm Remove(value) 2) Pre: value is the value of the node to remove, root is the root node 3) of the Avl 4) Post: node with value is removed and tree rebalanced if found in which 5) case yields true, otherwise false 6) nodeToRemove \u2190root 7) parent \u2190\u2205 8) Stackpath \u2190root 9) while nodeToRemove \u0338= \u2205and nodeToRemove.V alue = V alue 10) parent = nodeToRemove 11) if value < nodeToRemove.Value 12) nodeToRemove \u2190nodeToRemove.Left 13) else 14) nodeToRemove \u2190nodeToRemove.Right 15) end if 16) path.Push(nodeToRemove) 17) end while 18)"}, {"filename": "Dsag.pdf", "text": "then we must perform the correct rotation(s). CHAPTER 7. AVL TREE 60 1) algorithm Remove(value) 2) Pre: value is the value of the node to remove, root is the root node 3) of the Avl 4) Post: node with value is removed and tree rebalanced if found in which 5) case yields true, otherwise false 6) nodeToRemove \u2190root 7) parent \u2190\u2205 8) Stackpath \u2190root 9) while nodeToRemove \u0338= \u2205and nodeToRemove.V alue = V alue 10) parent = nodeToRemove 11) if value < nodeToRemove.Value 12) nodeToRemove \u2190nodeToRemove.Left 13) else 14) nodeToRemove \u2190nodeToRemove.Right 15) end if 16) path.Push(nodeToRemove) 17) end while 18) if nodeToRemove = \u2205 19) return false // value not in Avl 20) end if 21) parent \u2190FindParent(value) 22) if count = 1 // count keeps track of the # of nodes in the Avl 23) root \u2190\u2205// we are removing the only node in the Avl 24) else if nodeToRemove.Left = \u2205and nodeToRemove.Right = null 25) // case #1 26) if nodeToRemove.Value < parent.Value 27) parent.Left \u2190\u2205 28) else 29) parent.Right \u2190\u2205 30) end if 31) else if nodeToRemove.Left = \u2205and nodeToRemove.Right \u0338= \u2205 32) // case # 2 33) if nodeToRemove.Value < parent.Value 34) parent.Left \u2190nodeToRemove.Right 35) else 36) parent.Right \u2190nodeToRemove.Right 37) end if 38) else if nodeToRemove.Left \u0338= \u2205and nodeToRemove.Right = \u2205 39) // case #3 40) if nodeToRemove.Value < parent.Value 41) parent.Left \u2190nodeToRemove.Left 42) else 43) parent.Right \u2190nodeToRemove.Left 44) end if 45) else 46) // case #4 47) largestV alue \u2190nodeToRemove.Left 48) while largestV alue.Right \u0338= \u2205 49) // \ufb01nd the largest value in the left subtree of nodeToRemove 50) largestV alue \u2190largestV alue.Right CHAPTER 7. AVL TREE 61 51) end while 52) // set the parents\u2019 Right pointer of largestV alue to \u2205 53) FindParent(largestV alue.Value).Right \u2190\u2205 54) nodeToRemove.Value \u2190largestV alue.Value 55) end if 56) while path.Count > 0 57) CheckBalance(path.Pop()) // we trackback to the root node check balance 58) end while 59) count \u2190count \u22121 60) return true 61) end Remove 7.5 Summary The AVL tree is a sophisticated self balancing tree. It can be thought of as the smarter, younger brother of the binary search tree. Unlike its older brother the AVL tree avoids worst case linear complexity runtimes for its operations. The AVL tree guarantees via the enforcement of balancing algorithms that the left and right subtrees di\ufb00er in height by at most 1 which yields at most a logarithmic runtime complexity. Part II Algorithms 62 Chapter 8 Sorting All the sorting algorithms in this chapter use data structures of a speci\ufb01c type to demonstrate sorting, e.g. a 32 bit integer is often used as its associated operations (e.g. <, >, etc) are clear in their behaviour. The algorithms discussed can easily be translated into generic sorting algo- rithms within your respective language of choice. 8.1 Bubble Sort One of the most simple forms of sorting is that of comparing each item with every other item in some list, however as the description may imply this form of sorting is not"}, {"filename": "Dsag.pdf", "text": "complexity. Part II Algorithms 62 Chapter 8 Sorting All the sorting algorithms in this chapter use data structures of a speci\ufb01c type to demonstrate sorting, e.g. a 32 bit integer is often used as its associated operations (e.g. <, >, etc) are clear in their behaviour. The algorithms discussed can easily be translated into generic sorting algo- rithms within your respective language of choice. 8.1 Bubble Sort One of the most simple forms of sorting is that of comparing each item with every other item in some list, however as the description may imply this form of sorting is not particularly e\ufb00ecient O(n2). In it\u2019s most simple form bubble sort can be implemented as two loops. 1) algorithm BubbleSort(list) 2) Pre: list \u0338= \u2205 3) Post: list has been sorted into values of ascending order 4) for i \u21900 to list.Count \u22121 5) for j \u21900 to list.Count \u22121 6) if list[i] < list[j] 7) Swap(list[i], list[j]) 8) end if 9) end for 10) end for 11) return list 12) end BubbleSort 8.2 Merge Sort Merge sort is an algorithm that has a fairly e\ufb03cient space time complexity - O(n log n) and is fairly trivial to implement. The algorithm is based on splitting a list, into two similar sized lists (left, and right) and sorting each list and then merging the sorted lists back together. Note: the function MergeOrdered simply takes two ordered lists and makes them one. 63 CHAPTER 8. SORTING 64 54 2 74 75 4 0 1 2 3 4 54 2 74 75 4 0 1 2 3 4 54 2 75 74 4 0 1 2 3 4 54 75 2 74 4 0 1 2 3 4 75 54 2 74 4 0 1 2 3 4 75 54 2 74 4 0 1 2 3 4 75 54 2 74 4 0 1 2 3 4 75 54 74 2 4 0 1 2 3 4 75 74 54 2 4 0 1 2 3 4 75 74 54 2 4 0 1 2 3 4 75 74 54 4 2 0 1 2 3 4 75 74 54 4 2 0 1 2 3 4 75 74 54 4 2 0 1 2 3 4 75 74 54 4 2 0 1 2 3 4 75 74 54 4 2 0 1 2 3 4 Figure 8.1: Bubble Sort Iterations 1) algorithm Mergesort(list) 2) Pre: list \u0338= \u2205 3) Post: list has been sorted into values of ascending order 4) if list.Count = 1 // already sorted 5) return list 6) end if 7) m \u2190list.Count / 2 8) left \u2190list(m) 9) right \u2190list(list.Count \u2212m) 10) for i \u21900 to left.Count\u22121 11) left[i] \u2190list[i] 12) end for 13) for i \u21900 to right.Count\u22121 14) right[i] \u2190list[i] 15) end for 16) left \u2190Mergesort(left) 17) right \u2190Mergesort(right) 18) return MergeOrdered(left, right) 19) end Mergesort CHAPTER 8. SORTING 65 54 2 74 75 4 75 4 54 2 74 4 75 74 54 2"}, {"filename": "Dsag.pdf", "text": "algorithm Mergesort(list) 2) Pre: list \u0338= \u2205 3) Post: list has been sorted into values of ascending order 4) if list.Count = 1 // already sorted 5) return list 6) end if 7) m \u2190list.Count / 2 8) left \u2190list(m) 9) right \u2190list(list.Count \u2212m) 10) for i \u21900 to left.Count\u22121 11) left[i] \u2190list[i] 12) end for 13) for i \u21900 to right.Count\u22121 14) right[i] \u2190list[i] 15) end for 16) left \u2190Mergesort(left) 17) right \u2190Mergesort(right) 18) return MergeOrdered(left, right) 19) end Mergesort CHAPTER 8. SORTING 65 54 2 74 75 4 75 4 54 2 74 4 75 74 54 2 2 5 4 Divide 54 2 75 4 74 54 2 75 74 54 4 2 Impera (Merge) Figure 8.2: Merge Sort Divide et Impera Approach 8.3 Quick Sort Quick sort is one of the most popular sorting algorithms based on divide et impera strategy, resulting in an O(n log n) complexity. The algorithm starts by picking an item, called pivot, and moving all smaller items before it, while all greater elements after it. This is the main quick sort operation, called partition, recursively repeated on lesser and greater sub lists until their size is one or zero - in which case the list is implicitly sorted. Choosing an appropriate pivot, as for example the median element is funda- mental for avoiding the drastically reduced performance of O(n2). CHAPTER 8. SORTING 66 54 2 74 75 4 Pivot 54 2 74 75 4 Pivot 75 2 74 54 4 Pivot 75 54 74 2 4 Pivot 75 74 54 2 4 Pivot 2 4 Pivot 4 2 Pivot 75 74 Pivot 75 74 75 74 54 4 2 Pivot Figure 8.3: Quick Sort Example (pivot median strategy) 1) algorithm QuickSort(list) 2) Pre: list \u0338= \u2205 3) Post: list has been sorted into values of ascending order 4) if list.Count = 1 // already sorted 5) return list 6) end if 7) pivot \u2190MedianValue(list) 8) for i \u21900 to list.Count\u22121 9) if list[i] = pivot 10) equal.Insert(list[i]) 11) end if 12) if list[i] < pivot 13) less.Insert(list[i]) 14) end if 15) if list[i] > pivot 16) greater.Insert(list[i]) 17) end if 18) end for 19) return Concatenate(QuickSort(less), equal, QuickSort(greater)) 20) end Quicksort CHAPTER 8. SORTING 67 8.4 Insertion Sort Insertion sort is a somewhat interesting algorithm with an expensive runtime of O(n2). It can be best thought of as a sorting scheme similar to that of sorting a hand of playing cards, i.e. you take one card and then look at the rest with the intent of building up an ordered set of cards in your hand. 54 2 74 75 4 54 2 74 75 4 54 2 74 75 4 74 54 2 75 74 4 2 75 54 75 74 4 2 54 75 74 54 4 2 4 Figure 8.4: Insertion Sort Iterations 1) algorithm Insertionsort(list) 2) Pre: list \u0338= \u2205 3) Post: list has been sorted into values of ascending order 4) unsorted \u21901 5) while unsorted"}, {"filename": "Dsag.pdf", "text": "similar to that of sorting a hand of playing cards, i.e. you take one card and then look at the rest with the intent of building up an ordered set of cards in your hand. 54 2 74 75 4 54 2 74 75 4 54 2 74 75 4 74 54 2 75 74 4 2 75 54 75 74 4 2 54 75 74 54 4 2 4 Figure 8.4: Insertion Sort Iterations 1) algorithm Insertionsort(list) 2) Pre: list \u0338= \u2205 3) Post: list has been sorted into values of ascending order 4) unsorted \u21901 5) while unsorted < list.Count 6) hold \u2190list[unsorted] 7) i \u2190unsorted \u22121 8) while i \u22650 and hold < list[i] 9) list[i + 1] \u2190list[i] 10) i \u2190i \u22121 11) end while 12) list[i + 1] \u2190hold 13) unsorted \u2190unsorted + 1 14) end while 15) return list 16) end Insertionsort CHAPTER 8. SORTING 68 8.5 Shell Sort Put simply shell sort can be thought of as a more e\ufb03cient variation of insertion sort as described in \u00a78.4, it achieves this mainly by comparing items of varying distances apart resulting in a run time complexity of O(n log2 n). Shell sort is fairly straight forward but may seem somewhat confusing at \ufb01rst as it di\ufb00ers from other sorting algorithms in the way it selects items to compare. Figure 8.5 shows shell sort being ran on an array of integers, the red coloured square is the current value we are holding. 1) algorithm ShellSort(list) 2) Pre: list \u0338= \u2205 3) Post: list has been sorted into values of ascending order 4) increment \u2190list.Count / 2 5) while increment \u0338= 0 6) current \u2190increment 7) while current < list.Count 8) hold \u2190list[current] 9) i \u2190current \u2212increment 10) while i \u22650 and hold < list[i] 11) list[i + increment] \u2190list[i] 12) i\u2212= increment 13) end while 14) list[i + increment] \u2190hold 15) current \u2190current + 1 16) end while 17) increment / = 2 18) end while 19) return list 20) end ShellSort 8.6 Radix Sort Unlike the sorting algorithms described previously radix sort uses buckets to sort items, each bucket holds items with a particular property called a key. Normally a bucket is a queue, each time radix sort is performed these buckets are emptied starting the smallest key bucket to the largest. When looking at items within a list to sort we do so by isolating a speci\ufb01c key, e.g. in the example we are about to show we have a maximum of three keys for all items, that is the highest key we need to look at is hundreds. Because we are dealing with, in this example base 10 numbers we have at any one point 10 possible key values 0..9 each of which has their own bucket. Before we show you this \ufb01rst simple version of radix sort let us clarify what we mean by isolating keys. Given the number 102 if we look at the \ufb01rst key, the ones then we"}, {"filename": "Dsag.pdf", "text": "by isolating a speci\ufb01c key, e.g. in the example we are about to show we have a maximum of three keys for all items, that is the highest key we need to look at is hundreds. Because we are dealing with, in this example base 10 numbers we have at any one point 10 possible key values 0..9 each of which has their own bucket. Before we show you this \ufb01rst simple version of radix sort let us clarify what we mean by isolating keys. Given the number 102 if we look at the \ufb01rst key, the ones then we can see we have two of them, progressing to the next key - tens we can see that the number has zero of them, \ufb01nally we can see that the number has a single hundred. The number used as an example has in total three keys: CHAPTER 8. SORTING 69 Figure 8.5: Shell sort CHAPTER 8. SORTING 70 1. Ones 2. Tens 3. Hundreds For further clari\ufb01cation what if we wanted to determine how many thousands the number 102 has? Clearly there are none, but often looking at a number as \ufb01nal like we often do it is not so obvious so when asked the question how many thousands does 102 have you should simply pad the number with a zero in that location, e.g. 0102 here it is more obvious that the key value at the thousands location is zero. The last thing to identify before we actually show you a simple implemen- tation of radix sort that works on only positive integers, and requires you to specify the maximum key size in the list is that we need a way to isolate a speci\ufb01c key at any one time. The solution is actually very simple, but its not often you want to isolate a key in a number so we will spell it out clearly here. A key can be accessed from any integer with the following expression: key \u2190(number / keyToAccess) % 10. As a simple example lets say that we want to access the tens key of the number 1290, the tens column is key 10 and so after substitution yields key \u2190(1290 / 10) % 10 = 9. The next key to look at for a number can be attained by multiplying the last key by ten working left to right in a sequential manner. The value of key is used in the following algorithm to work out the index of an array of queues to enqueue the item into. 1) algorithm Radix(list, maxKeySize) 2) Pre: list \u0338= \u2205 3) maxKeySize \u22650 and represents the largest key size in the list 4) Post: list has been sorted 5) queues \u2190Queue[10] 6) indexOfKey \u21901 7) fori \u21900 to maxKeySize \u22121 8) foreach item in list 9) queues[GetQueueIndex(item, indexOfKey)].Enqueue(item) 10) end foreach 11) list \u2190CollapseQueues(queues) 12) ClearQueues(queues) 13) indexOfKey \u2190indexOfKey \u221710 14) end for 15) return list 16) end Radix Figure 8.6 shows the members of queues"}, {"filename": "Dsag.pdf", "text": "The value of key is used in the following algorithm to work out the index of an array of queues to enqueue the item into. 1) algorithm Radix(list, maxKeySize) 2) Pre: list \u0338= \u2205 3) maxKeySize \u22650 and represents the largest key size in the list 4) Post: list has been sorted 5) queues \u2190Queue[10] 6) indexOfKey \u21901 7) fori \u21900 to maxKeySize \u22121 8) foreach item in list 9) queues[GetQueueIndex(item, indexOfKey)].Enqueue(item) 10) end foreach 11) list \u2190CollapseQueues(queues) 12) ClearQueues(queues) 13) indexOfKey \u2190indexOfKey \u221710 14) end for 15) return list 16) end Radix Figure 8.6 shows the members of queues from the algorithm described above operating on the list whose members are 90, 12, 8, 791, 123, and 61, the key we are interested in for each number is highlighted. Omitted queues in Figure 8.6 mean that they contain no items. 8.7 Summary Throughout this chapter we have seen many di\ufb00erent algorithms for sorting lists, some are very e\ufb03cient (e.g. quick sort de\ufb01ned in \u00a78.3), some are not (e.g. CHAPTER 8. SORTING 71 Figure 8.6: Radix sort base 10 algorithm bubble sort de\ufb01ned in \u00a78.1). Selecting the correct sorting algorithm is usually denoted purely by e\ufb03ciency, e.g. you would always choose merge sort over shell sort and so on. There are also other factors to look at though and these are based on the actual imple- mentation. Some algorithms are very nicely expressed in a recursive fashion, however these algorithms ought to be pretty e\ufb03cient, e.g. implementing a linear, quadratic, or slower algorithm using recursion would be a very bad idea. If you want to learn more about why you should be very, very careful when implementing recursive algorithms see Appendix C. Chapter 9 Numeric Unless stated otherwise the alias n denotes a standard 32 bit integer. 9.1 Primality Test A simple algorithm that determines whether or not a given integer is a prime number, e.g. 2, 5, 7, and 13 are all prime numbers, however 6 is not as it can be the result of the product of two numbers that are < 6. In an attempt to slow down the inner loop the \u221an is used as the upper bound. 1) algorithm IsPrime(n) 2) Post: n is determined to be a prime or not 3) for i \u21902 to n do 4) for j \u21901 to sqrt(n) do 5) if i \u2217j = n 6) return false 7) end if 8) end for 9) end for 10) end IsPrime 9.2 Base conversions DSA contains a number of algorithms that convert a base 10 number to its equivalent binary, octal or hexadecimal form. For example 7810 has a binary representation of 10011102. Table 9.1 shows the algorithm trace when the number to convert to binary is 74210. 72 CHAPTER 9. NUMERIC 73 1) algorithm ToBinary(n) 2) Pre: n \u22650 3) Post: n has been converted into its base 2 representation 4) while n > 0 5) list.Add(n % 2) 6) n \u2190n/2 7) end while 8) return Reverse(list) 9)"}, {"filename": "Dsag.pdf", "text": "end if 8) end for 9) end for 10) end IsPrime 9.2 Base conversions DSA contains a number of algorithms that convert a base 10 number to its equivalent binary, octal or hexadecimal form. For example 7810 has a binary representation of 10011102. Table 9.1 shows the algorithm trace when the number to convert to binary is 74210. 72 CHAPTER 9. NUMERIC 73 1) algorithm ToBinary(n) 2) Pre: n \u22650 3) Post: n has been converted into its base 2 representation 4) while n > 0 5) list.Add(n % 2) 6) n \u2190n/2 7) end while 8) return Reverse(list) 9) end ToBinary n list 742 { 0 } 371 { 0, 1 } 185 { 0, 1, 1 } 92 { 0, 1, 1, 0 } 46 { 0, 1, 1, 0, 1 } 23 { 0, 1, 1, 0, 1, 1 } 11 { 0, 1, 1, 0, 1, 1, 1 } 5 { 0, 1, 1, 0, 1, 1, 1, 1 } 2 { 0, 1, 1, 0, 1, 1, 1, 1, 0 } 1 { 0, 1, 1, 0, 1, 1, 1, 1, 0, 1 } Table 9.1: Algorithm trace of ToBinary 9.3 Attaining the greatest common denomina- tor of two numbers A fairly routine problem in mathematics is that of \ufb01nding the greatest common denominator of two integers, what we are essentially after is the greatest number which is a multiple of both, e.g. the greatest common denominator of 9, and 15 is 3. One of the most elegant solutions to this problem is based on Euclid\u2019s algorithm that has a run time complexity of O(n2). 1) algorithm GreatestCommonDenominator(m, n) 2) Pre: m and n are integers 3) Post: the greatest common denominator of the two integers is calculated 4) if n = 0 5) return m 6) end if 7) return GreatestCommonDenominator(n, m % n) 8) end GreatestCommonDenominator CHAPTER 9. NUMERIC 74 9.4 Computing the maximum value for a num- ber of a speci\ufb01c base consisting of N digits This algorithm computes the maximum value of a number for a given number of digits, e.g. using the base 10 system the maximum number we can have made up of 4 digits is the number 999910. Similarly the maximum number that consists of 4 digits for a base 2 number is 11112 which is 1510. The expression by which we can compute this maximum value for N digits is: BN \u22121. In the previous expression B is the number base, and N is the number of digits. As an example if we wanted to determine the maximum value for a hexadecimal number (base 16) consisting of 6 digits the expression would be as follows: 166 \u22121. The maximum value of the previous example would be represented as FFFFFF16 which yields 1677721510. In the following algorithm numberBase should be considered restricted to the values of 2, 8, 9, and 16. For this reason in our actual implementation numberBase has an enumeration type. The Base enumeration type is"}, {"filename": "Dsag.pdf", "text": "N digits is: BN \u22121. In the previous expression B is the number base, and N is the number of digits. As an example if we wanted to determine the maximum value for a hexadecimal number (base 16) consisting of 6 digits the expression would be as follows: 166 \u22121. The maximum value of the previous example would be represented as FFFFFF16 which yields 1677721510. In the following algorithm numberBase should be considered restricted to the values of 2, 8, 9, and 16. For this reason in our actual implementation numberBase has an enumeration type. The Base enumeration type is de\ufb01ned as: Base = {Binary \u21902, Octal \u21908, Decimal \u219010, Hexadecimal \u219016} The reason we provide the de\ufb01nition of Base is to give you an idea how this algorithm can be modelled in a more readable manner rather than using various checks to determine the correct base to use. For our implementation we cast the value of numberBase to an integer, as such we extract the value associated with the relevant option in the Base enumeration. As an example if we were to cast the option Octal to an integer we would get the value 8. In the algorithm listed below the cast is implicit so we just use the actual argument numberBase. 1) algorithm MaxValue(numberBase, n) 2) Pre: numberBase is the number system to use, n is the number of digits 3) Post: the maximum value for numberBase consisting of n digits is computed 4) return Power(numberBase, n) \u22121 5) end MaxValue 9.5 Factorial of a number Attaining the factorial of a number is a primitive mathematical operation. Many implementations of the factorial algorithm are recursive as the problem is re- cursive in nature, however here we present an iterative solution. The iterative solution is presented because it too is trivial to implement and doesn\u2019t su\ufb00er from the use of recursion (for more on recursion see \u00a7C). The factorial of 0 and 1 is 0. The aforementioned acts as a base case that we will build upon. The factorial of 2 is 2\u2217the factorial of 1, similarly the factorial of 3 is 3\u2217the factorial of 2 and so on. We can indicate that we are after the factorial of a number using the form N! where N is the number we wish to attain the factorial of. Our algorithm doesn\u2019t use such notation but it is handy to know. CHAPTER 9. NUMERIC 75 1) algorithm Factorial(n) 2) Pre: n \u22650, n is the number to compute the factorial of 3) Post: the factorial of n is computed 4) if n < 2 5) return 1 6) end if 7) factorial \u21901 8) for i \u21902 to n 9) factorial \u2190factorial \u2217i 10) end for 11) return factorial 12) end Factorial 9.6 Summary In this chapter we have presented several numeric algorithms, most of which are simply here because they were fun to design. Perhaps the message that the reader should gain from this chapter is that algorithms can be"}, {"filename": "Dsag.pdf", "text": "CHAPTER 9. NUMERIC 75 1) algorithm Factorial(n) 2) Pre: n \u22650, n is the number to compute the factorial of 3) Post: the factorial of n is computed 4) if n < 2 5) return 1 6) end if 7) factorial \u21901 8) for i \u21902 to n 9) factorial \u2190factorial \u2217i 10) end for 11) return factorial 12) end Factorial 9.6 Summary In this chapter we have presented several numeric algorithms, most of which are simply here because they were fun to design. Perhaps the message that the reader should gain from this chapter is that algorithms can be applied to several domains to make work in that respective domain attainable. Numeric algorithms in particular drive some of the most advanced systems on the planet computing such data as weather forecasts. Chapter 10 Searching 10.1 Sequential Search A simple algorithm that search for a speci\ufb01c item inside a list. It operates looping on each element O(n) until a match occurs or the end is reached. 1) algorithm SequentialSearch(list, item) 2) Pre: list \u0338= \u2205 3) Post: return index of item if found, otherwise \u22121 4) index \u21900 5) while index < list.Count and list[index] \u0338= item 6) index \u2190index + 1 7) end while 8) if index < list.Count and list[index] = item 9) return index 10) end if 11) return \u22121 12) end SequentialSearch 10.2 Probability Search Probability search is a statistical sequential searching algorithm. In addition to searching for an item, it takes into account its frequency by swapping it with it\u2019s predecessor in the list. The algorithm complexity still remains at O(n) but in a non-uniform items search the more frequent items are in the \ufb01rst positions, reducing list scanning time. Figure 10.1 shows the resulting state of a list after searching for two items, notice how the searched items have had their search probability increased after each search operation respectively. 76 CHAPTER 10. SEARCHING 77 Figure 10.1: a) Search(12), b) Search(101) 1) algorithm ProbabilitySearch(list, item) 2) Pre: list \u0338= \u2205 3) Post: a boolean indicating where the item is found or not; in the former case swap founded item with its predecessor 4) index \u21900 5) while index < list.Count and list[index] \u0338= item 6) index \u2190index + 1 7) end while 8) if index \u2265list.Count or list[index] \u0338= item 9) return false 10) end if 11) if index > 0 12) Swap(list[index], list[index \u22121]) 13) end if 14) return true 15) end ProbabilitySearch 10.3 Summary In this chapter we have presented a few novel searching algorithms. We have presented more e\ufb03cient searching algorithms earlier on, like for instance the logarithmic searching algorithm that AVL and BST tree\u2019s use (de\ufb01ned in \u00a73.2). We decided not to cover a searching algorithm known as binary chop (another name for binary search, binary chop usually refers to its array counterpart) as CHAPTER 10. SEARCHING 78 the reader has already seen such an algorithm in \u00a73. Searching algorithms and their e\ufb03ciency largely depends on the underlying data structure being"}, {"filename": "Dsag.pdf", "text": "13) end if 14) return true 15) end ProbabilitySearch 10.3 Summary In this chapter we have presented a few novel searching algorithms. We have presented more e\ufb03cient searching algorithms earlier on, like for instance the logarithmic searching algorithm that AVL and BST tree\u2019s use (de\ufb01ned in \u00a73.2). We decided not to cover a searching algorithm known as binary chop (another name for binary search, binary chop usually refers to its array counterpart) as CHAPTER 10. SEARCHING 78 the reader has already seen such an algorithm in \u00a73. Searching algorithms and their e\ufb03ciency largely depends on the underlying data structure being used to store the data. For instance it is quicker to deter- mine whether an item is in a hash table than it is an array, similarly it is quicker to search a BST than it is a linked list. If you are going to search for data fairly often then we strongly advise that you sit down and research the data structures available to you. In most cases using a list or any other primarily linear data structure is down to lack of knowledge. Model your data and then research the data structures that best \ufb01t your scenario. Chapter 11 Strings Strings have their own chapter in this text purely because string operations and transformations are incredibly frequent within programs. The algorithms presented are based on problems the authors have come across previously, or were formulated to satisfy curiosity. 11.1 Reversing the order of words in a sentence De\ufb01ning algorithms for primitive string operations is simple, e.g. extracting a sub-string of a string, however some algorithms that require more inventiveness can be a little more tricky. The algorithm presented here does not simply reverse the characters in a string, rather it reverses the order of words within a string. This algorithm works on the principal that words are all delimited by white space, and using a few markers to de\ufb01ne where words start and end we can easily reverse them. 79 CHAPTER 11. STRINGS 80 1) algorithm ReverseWords(value) 2) Pre: value \u0338= \u2205, sb is a string bu\ufb00er 3) Post: the words in value have been reversed 4) last \u2190value.Length \u22121 5) start \u2190last 6) while last \u22650 7) // skip whitespace 8) while start \u22650 and value[start] = whitespace 9) start \u2190start \u22121 10) end while 11) last \u2190start 12) // march down to the index before the beginning of the word 13) while start \u22650 and start \u0338= whitespace 14) start \u2190start \u22121 15) end while 16) // append chars from start + 1 to length + 1 to string bu\ufb00er sb 17) for i \u2190start + 1 to last 18) sb.Append(value[i]) 19) end for 20) // if this isn\u2019t the last word in the string add some whitespace after the word in the bu\ufb00er 21) if start > 0 22) sb.Append(\u2018 \u2019) 23) end if 24) last \u2190start \u22121 25) start \u2190last 26) end while 27) // check if we have added one too many whitespace"}, {"filename": "Dsag.pdf", "text": "beginning of the word 13) while start \u22650 and start \u0338= whitespace 14) start \u2190start \u22121 15) end while 16) // append chars from start + 1 to length + 1 to string bu\ufb00er sb 17) for i \u2190start + 1 to last 18) sb.Append(value[i]) 19) end for 20) // if this isn\u2019t the last word in the string add some whitespace after the word in the bu\ufb00er 21) if start > 0 22) sb.Append(\u2018 \u2019) 23) end if 24) last \u2190start \u22121 25) start \u2190last 26) end while 27) // check if we have added one too many whitespace to sb 28) if sb[sb.Length \u22121] = whitespace 29) // cut the whitespace 30) sb.Length \u2190sb.Length \u22121 31) end if 32) return sb 33) end ReverseWords 11.2 Detecting a palindrome Although not a frequent algorithm that will be applied in real-life scenarios detecting a palindrome is a fun, and as it turns out pretty trivial algorithm to design. The algorithm that we present has a O(n) run time complexity. Our algo- rithm uses two pointers at opposite ends of string we are checking is a palindrome or not. These pointers march in towards each other always checking that each character they point to is the same with respect to value. Figure 11.1 shows the IsPalindrome algorithm in operation on the string \u201cWas it Eliot\u2019s toilet I saw?\u201d If you remove all punctuation, and white space from the aforementioned string you will \ufb01nd that it is a valid palindrome. CHAPTER 11. STRINGS 81 Figure 11.1: left and right pointers marching in towards one another 1) algorithm IsPalindrome(value) 2) Pre: value \u0338= \u2205 3) Post: value is determined to be a palindrome or not 4) word \u2190value.Strip().ToUpperCase() 5) left \u21900 6) right \u2190word.Length \u22121 7) while word[left] = word[right] and left < right 8) left \u2190left + 1 9) right \u2190right \u22121 10) end while 11) return word[left] = word[right] 12) end IsPalindrome In the IsPalindrome algorithm we call a method by the name of Strip. This algorithm discards punctuation in the string, including white space. As a result word contains a heavily compacted representation of the original string, each character of which is in its uppercase representation. Palindromes discard white space, punctuation, and case making these changes allows us to design a simple algorithm while making our algorithm fairly robust with respect to the palindromes it will detect. 11.3 Counting the number of words in a string Counting the number of words in a string can seem pretty trivial at \ufb01rst, however there are a few cases that we need to be aware of: 1. tracking when we are in a string 2. updating the word count at the correct place 3. skipping white space that delimits the words As an example consider the string \u201cBen ate hay\u201d Clearly this string contains three words, each of which distinguished via white space. All of the previously listed points can be managed by using three variables: 1. index 2. wordCount 3. inWord CHAPTER"}, {"filename": "Dsag.pdf", "text": "number of words in a string Counting the number of words in a string can seem pretty trivial at \ufb01rst, however there are a few cases that we need to be aware of: 1. tracking when we are in a string 2. updating the word count at the correct place 3. skipping white space that delimits the words As an example consider the string \u201cBen ate hay\u201d Clearly this string contains three words, each of which distinguished via white space. All of the previously listed points can be managed by using three variables: 1. index 2. wordCount 3. inWord CHAPTER 11. STRINGS 82 Figure 11.2: String with three words Figure 11.3: String with varying number of white space delimiting the words Of the previously listed index keeps track of the current index we are at in the string, wordCount is an integer that keeps track of the number of words we have encountered, and \ufb01nally inWord is a Boolean \ufb02ag that denotes whether or not at the present time we are within a word. If we are not currently hitting white space we are in a word, the opposite is true if at the present index we are hitting white space. What denotes a word? In our algorithm each word is separated by one or more occurrences of white space. We don\u2019t take into account any particular splitting symbols you may use, e.g. in .NET String.Split1 can take a char (or array of characters) that determines a delimiter to use to split the characters within the string into chunks of strings, resulting in an array of sub-strings. In Figure 11.2 we present a string indexed as an array. Typically the pattern is the same for most words, delimited by a single occurrence of white space. Figure 11.3 shows the same string, with the same number of words but with varying white space splitting them. 1http://msdn.microsoft.com/en-us/library/system.string.split.aspx CHAPTER 11. STRINGS 83 1) algorithm WordCount(value) 2) Pre: value \u0338= \u2205 3) Post: the number of words contained within value is determined 4) inWord \u2190true 5) wordCount \u21900 6) index \u21900 7) // skip initial white space 8) while value[index] = whitespace and index < value.Length \u22121 9) index \u2190index + 1 10) end while 11) // was the string just whitespace? 12) if index = value.Length and value[index] = whitespace 13) return 0 14) end if 15) while index < value.Length 16) if value[index] = whitespace 17) // skip all whitespace 18) while value[index] = whitespace and index < value.Length \u22121 19) index \u2190index + 1 20) end while 21) inWord \u2190false 22) wordCount \u2190wordCount + 1 23) else 24) inWord \u2190true 25) end if 26) index \u2190index + 1 27) end while 28) // last word may have not been followed by whitespace 29) if inWord 30) wordCount \u2190wordCount + 1 31) end if 32) return wordCount 33) end WordCount 11.4 Determining the number of repeated words within a string With the help of an unordered set, and an algorithm that can"}, {"filename": "Dsag.pdf", "text": "value[index] = whitespace 17) // skip all whitespace 18) while value[index] = whitespace and index < value.Length \u22121 19) index \u2190index + 1 20) end while 21) inWord \u2190false 22) wordCount \u2190wordCount + 1 23) else 24) inWord \u2190true 25) end if 26) index \u2190index + 1 27) end while 28) // last word may have not been followed by whitespace 29) if inWord 30) wordCount \u2190wordCount + 1 31) end if 32) return wordCount 33) end WordCount 11.4 Determining the number of repeated words within a string With the help of an unordered set, and an algorithm that can split the words within a string using a speci\ufb01ed delimiter this algorithm is straightforward to implement. If we split all the words using a single occurrence of white space as our delimiter we get all the words within the string back as elements of an array. Then if we iterate through these words adding them to a set which contains only unique strings we can attain the number of unique words from the string. All that is left to do is subtract the unique word count from the total number of stings contained in the array returned from the split operation. The split operation that we refer to is the same as that mentioned in \u00a711.3. CHAPTER 11. STRINGS 84 Figure 11.4: a) Undesired uniques set; b) desired uniques set 1) algorithm RepeatedWordCount(value) 2) Pre: value \u0338= \u2205 3) Post: the number of repeated words in value is returned 4) words \u2190value.Split(\u2019 \u2019) 5) uniques \u2190Set 6) foreach word in words 7) uniques.Add(word.Strip()) 8) end foreach 9) return words.Length \u2212uniques.Count 10) end RepeatedWordCount You will notice in the RepeatedWordCount algorithm that we use the Strip method we referred to earlier in \u00a711.1. This simply removes any punctuation from a word. The reason we perform this operation on each word is so that we can build a more accurate unique string collection, e.g. \u201ctest\u201d, and \u201ctest!\u201d are the same word minus the punctuation. Figure 11.4 shows the undesired and desired sets for the unique set respectively. 11.5 Determining the \ufb01rst matching character between two strings The algorithm to determine whether any character of a string matches any of the characters in another string is pretty trivial. Put simply, we can parse the strings considered using a double loop and check, discarding punctuation, the equality between any characters thus returning a non-negative index that represents the location of the \ufb01rst character in the match (Figure 11.5); otherwise we return -1 if no match occurs. This approach exhibit a run time complexity of O(n2). CHAPTER 11. STRINGS 85 t s e t 0 1 2 3 4 s r e t p 0 1 2 3 4 5 6 Word Match i t s e t 0 1 2 3 4 s r e t p 0 1 2 3 4 5 6 i index t s e t 0 1 2 3 4 s r e t p 0 1 2 3"}, {"filename": "Dsag.pdf", "text": "index that represents the location of the \ufb01rst character in the match (Figure 11.5); otherwise we return -1 if no match occurs. This approach exhibit a run time complexity of O(n2). CHAPTER 11. STRINGS 85 t s e t 0 1 2 3 4 s r e t p 0 1 2 3 4 5 6 Word Match i t s e t 0 1 2 3 4 s r e t p 0 1 2 3 4 5 6 i index t s e t 0 1 2 3 4 s r e t p 0 1 2 3 4 5 6 i index index a) b) c) Figure 11.5: a) First Step; b) Second Step c) Match Occurred 1) algorithm Any(word,match) 2) Pre: word, match \u0338= \u2205 3) Post: index representing match location if occured, \u22121 otherwise 4) for i \u21900 to word.Length \u22121 5) while word[i] = whitespace 6) i \u2190i + 1 7) end while 8) for index \u21900 to match.Length \u22121 9) while match[index] = whitespace 10) index \u2190index + 1 11) end while 12) if match[index] = word[i] 13) return index 14) end if 15) end for 16) end for 17) return \u22121 18) end Any 11.6 Summary We hope that the reader has seen how fun algorithms on string data types are. Strings are probably the most common data type (and data structure - remember we are dealing with an array) that you will work with so its important that you learn to be creative with them. We for one \ufb01nd strings fascinating. A simple Google search on string nuances between languages and encodings will provide you with a great number of problems. Now that we have spurred you along a little with our introductory algorithms you can devise some of your own. Appendix A Algorithm Walkthrough Learning how to design good algorithms can be assisted greatly by using a structured approach to tracing its behaviour. In most cases tracing an algorithm only requires a single table. In most cases tracing is not enough, you will also want to use a diagram of the data structure your algorithm operates on. This diagram will be used to visualise the problem more e\ufb00ectively. Seeing things visually can help you understand the problem quicker, and better. The trace table will store information about the variables used in your algo- rithm. The values within this table are constantly updated when the algorithm mutates them. Such an approach allows you to attain a history of the various values each variable has held. You may also be able to infer patterns from the values each variable has contained so that you can make your algorithm more e\ufb03cient. We have found this approach both simple, and powerful. By combining a visual representation of the problem as well as having a history of past values generated by the algorithm it can make understanding, and solving problems much easier. In this chapter we will show you how to work through both iterative,"}, {"filename": "Dsag.pdf", "text": "constantly updated when the algorithm mutates them. Such an approach allows you to attain a history of the various values each variable has held. You may also be able to infer patterns from the values each variable has contained so that you can make your algorithm more e\ufb03cient. We have found this approach both simple, and powerful. By combining a visual representation of the problem as well as having a history of past values generated by the algorithm it can make understanding, and solving problems much easier. In this chapter we will show you how to work through both iterative, and recursive algorithms using the technique outlined. A.1 Iterative algorithms We will trace the IsPalindrome algorithm (de\ufb01ned in \u00a711.2) as our example iterative walkthrough. Before we even look at the variables the algorithm uses, \ufb01rst we will look at the actual data structure the algorithm operates on. It should be pretty obvious that we are operating on a string, but how is this represented? A string is essentially a block of contiguous memory that consists of some char data types, one after the other. Each character in the string can be accessed via an index much like you would do when accessing items within an array. The picture should be presenting itself - a string can be thought of as an array of characters. For our example we will use IsPalindrome to operate on the string \u201cNever odd or even\u201d Now we know how the string data structure is represented, and the value of the string we will operate on let\u2019s go ahead and draw it as shown in Figure A.1. 86 APPENDIX A. ALGORITHM WALKTHROUGH 87 Figure A.1: Visualising the data structure we are operating on value word left right Table A.1: A column for each variable we wish to track The IsPalindrome algorithm uses the following list of variables in some form throughout its execution: 1. value 2. word 3. left 4. right Having identi\ufb01ed the values of the variables we need to keep track of we simply create a column for each in a table as shown in Table A.1. Now, using the IsPalindrome algorithm execute each statement updating the variable values in the table appropriately. Table A.2 shows the \ufb01nal table values for each variable used in IsPalindrome respectively. While this approach may look a little bloated in print, on paper it is much more compact. Where we have the strings in the table you should annotate these strings with array indexes to aid the algorithm walkthrough. There is one other point that we should clarify at this time - whether to include variables that change only a few times, or not at all in the trace table. In Table A.2 we have included both the value, and word variables because it was convenient to do so. You may \ufb01nd that you want to promote these values to a larger diagram (like that in Figure A.1) and only use the trace table for variables whose values"}, {"filename": "Dsag.pdf", "text": "Where we have the strings in the table you should annotate these strings with array indexes to aid the algorithm walkthrough. There is one other point that we should clarify at this time - whether to include variables that change only a few times, or not at all in the trace table. In Table A.2 we have included both the value, and word variables because it was convenient to do so. You may \ufb01nd that you want to promote these values to a larger diagram (like that in Figure A.1) and only use the trace table for variables whose values change during the algorithm. We recommend that you promote the core data structure being operated on to a larger diagram outside of the table so that you can interrogate it more easily. value word left right \u201cNever odd or even\u201d \u201cNEVERODDOREVEN\u201d 0 13 1 12 2 11 3 10 4 9 5 8 6 7 7 6 Table A.2: Algorithm trace for IsPalindrome APPENDIX A. ALGORITHM WALKTHROUGH 88 We cannot stress enough how important such traces are when designing your algorithm. You can use these trace tables to verify algorithm correctness. At the cost of a simple table, and quick sketch of the data structure you are operating on you can devise correct algorithms quicker. Visualising the problem domain and keeping track of changing data makes problems a lot easier to solve. Moreover you always have a point of reference which you can look back on. A.2 Recursive Algorithms For the most part working through recursive algorithms is as simple as walking through an iterative algorithm. One of the things that we need to keep track of though is which method call returns to who. Most recursive algorithms are much simple to follow when you draw out the recursive calls rather than using a table based approach. In this section we will use a recursive implementation of an algorithm that computes a number from the Fiboncacci sequence. 1) algorithm Fibonacci(n) 2) Pre: n is the number in the \ufb01bonacci sequence to compute 3) Post: the \ufb01bonacci sequence number n has been computed 4) if n < 1 5) return 0 6) else if n < 2 7) return 1 8) end if 9) return Fibonacci(n \u22121) + Fibonacci(n \u22122) 10) end Fibonacci Before we jump into showing you a diagrammtic representation of the algo- rithm calls for the Fibonacci algorithm we will brie\ufb02y talk about the cases of the algorithm. The algorithm has three cases in total: 1. n < 1 2. n < 2 3. n \u22652 The \ufb01rst two items in the preceeding list are the base cases of the algorithm. Until we hit one of our base cases in our recursive method call tree we won\u2019t return anything. The third item from the list is our recursive case. With each call to the recursive case we etch ever closer to one of our base cases. Figure A.2 shows a diagrammtic representation of the recursive call chain. In"}, {"filename": "Dsag.pdf", "text": "we will brie\ufb02y talk about the cases of the algorithm. The algorithm has three cases in total: 1. n < 1 2. n < 2 3. n \u22652 The \ufb01rst two items in the preceeding list are the base cases of the algorithm. Until we hit one of our base cases in our recursive method call tree we won\u2019t return anything. The third item from the list is our recursive case. With each call to the recursive case we etch ever closer to one of our base cases. Figure A.2 shows a diagrammtic representation of the recursive call chain. In Figure A.2 the order in which the methods are called are labelled. Figure A.3 shows the call chain annotated with the return values of each method call as well as the order in which methods return to their callers. In Figure A.3 the return values are represented as annotations to the red arrows. It is important to note that each recursive call only ever returns to its caller upon hitting one of the two base cases. When you do eventually hit a base case that branch of recursive calls ceases. Upon hitting a base case you go back to APPENDIX A. ALGORITHM WALKTHROUGH 89 Figure A.2: Call chain for Fibonacci algorithm Figure A.3: Return chain for Fibonacci algorithm APPENDIX A. ALGORITHM WALKTHROUGH 90 the caller and continue execution of that method. Execution in the caller is contiued at the next statement, or expression after the recursive call was made. In the Fibonacci algorithms\u2019 recursive case we make two recursive calls. When the \ufb01rst recursive call (Fibonacci(n \u22121)) returns to the caller we then execute the the second recursive call (Fibonacci(n \u22122)). After both recursive calls have returned to their caller, the caller can then subesequently return to its caller and so on. Recursive algorithms are much easier to demonstrate diagrammatically as Figure A.2 demonstrates. When you come across a recursive algorithm draw method call diagrams to understand how the algorithm works at a high level. A.3 Summary Understanding algorithms can be hard at times, particularly from an implemen- tation perspective. In order to understand an algorithm try and work through it using trace tables. In cases where the algorithm is also recursive sketch the recursive calls out so you can visualise the call/return chain. In the vast majority of cases implementing an algorithm is simple provided that you know how the algorithm works. Mastering how an algorithm works from a high level is key for devising a well designed solution to the problem in hand. Appendix B Translation Walkthrough The conversion from pseudo to an actual imperative language is usually very straight forward, to clarify an example is provided. In this example we will convert the algorithm in \u00a79.1 to the C# language. 1) public static bool IsPrime(int number) 2) { 3) if (number < 2) 4) { 5) return false; 6) } 7) int innerLoopBound = (int)Math.Floor(Math.Sqrt(number)); 8) for (int i = 1; i < number; i++) 9) {"}, {"filename": "Dsag.pdf", "text": "the algorithm works. Mastering how an algorithm works from a high level is key for devising a well designed solution to the problem in hand. Appendix B Translation Walkthrough The conversion from pseudo to an actual imperative language is usually very straight forward, to clarify an example is provided. In this example we will convert the algorithm in \u00a79.1 to the C# language. 1) public static bool IsPrime(int number) 2) { 3) if (number < 2) 4) { 5) return false; 6) } 7) int innerLoopBound = (int)Math.Floor(Math.Sqrt(number)); 8) for (int i = 1; i < number; i++) 9) { 10) for(int j = 1; j <= innerLoopBound; j++) 11) { 12) if (i \u2217j == number) 13) { 14) return false; 15) } 16) } 17) } 18) return true; 19) } For the most part the conversion is a straight forward process, however you may have to inject various calls to other utility algorithms to ascertain the correct result. A consideration to take note of is that many algorithms have fairly strict preconditions, of which there may be several - in these scenarios you will need to inject the correct code to handle such situations to preserve the correctness of the algorithm. Most of the preconditions can be suitably handled by throwing the correct exception. 91 APPENDIX B. TRANSLATION WALKTHROUGH 92 B.1 Summary As you can see from the example used in this chapter we have tried to make the translation of our pseudo code algorithms to mainstream imperative languages as simple as possible. Whenever you encounter a keyword within our pseudo code examples that you are unfamiliar with just browse to Appendix E which descirbes each key- word. Appendix C Recursive Vs. Iterative Solutions One of the most succinct properties of modern programming languages like C++, C#, and Java (as well as many others) is that these languages allow you to de\ufb01ne methods that reference themselves, such methods are said to be recursive. One of the biggest advantages recursive methods bring to the table is that they usually result in more readable, and compact solutions to problems. A recursive method then is one that is de\ufb01ned in terms of itself. Generally a recursive algorithms has two main properties: 1. One or more base cases; and 2. A recursive case For now we will brie\ufb02y cover these two aspects of recursive algorithms. With each recursive call we should be making progress to our base case otherwise we are going to run into trouble. The trouble we speak of manifests itself typically as a stack over\ufb02ow, we will describe why later. Now that we have brie\ufb02y described what a recursive algorithm is and why you might want to use such an approach for your algorithms we will now talk about iterative solutions. An iterative solution uses no recursion whatsoever. An iterative solution relies only on the use of loops (e.g. for, while, do-while, etc). The down side to iterative algorithms is that they tend not to be as clear"}, {"filename": "Dsag.pdf", "text": "be making progress to our base case otherwise we are going to run into trouble. The trouble we speak of manifests itself typically as a stack over\ufb02ow, we will describe why later. Now that we have brie\ufb02y described what a recursive algorithm is and why you might want to use such an approach for your algorithms we will now talk about iterative solutions. An iterative solution uses no recursion whatsoever. An iterative solution relies only on the use of loops (e.g. for, while, do-while, etc). The down side to iterative algorithms is that they tend not to be as clear as to their recursive counterparts with respect to their operation. The major advantage of iterative solutions is speed. Most production software you will \ufb01nd uses little or no recursive algorithms whatsoever. The latter property can sometimes be a companies prerequisite to checking in code, e.g. upon checking in a static analysis tool may verify that the code the developer is checking in contains no recursive algorithms. Normally it is systems level code that has this zero tolerance policy for recursive algorithms. Using recursion should always be reserved for fast algorithms, you should avoid it for the following algorithm run time de\ufb01ciencies: 1. O(n2) 2. O(n3) 93 APPENDIX C. RECURSIVE VS. ITERATIVE SOLUTIONS 94 3. O(2n) If you use recursion for algorithms with any of the above run time e\ufb03ciency\u2019s you are inviting trouble. The growth rate of these algorithms is high and in most cases such algorithms will lean very heavily on techniques like divide and conquer. While constantly splitting problems into smaller problems is good practice, in these cases you are going to be spawning a lot of method calls. All this overhead (method calls don\u2019t come that cheap) will soon pile up and either cause your algorithm to run a lot slower than expected, or worse, you will run out of stack space. When you exceed the allotted stack space for a thread the process will be shutdown by the operating system. This is the case irrespective of the platform you use, e.g. .NET, or native C++ etc. You can ask for a bigger stack size, but you typically only want to do this if you have a very good reason to do so. C.1 Activation Records An activation record is created every time you invoke a method. Put simply an activation record is something that is put on the stack to support method invocation. Activation records take a small amount of time to create, and are pretty lightweight. Normally an activation record for a method call is as follows (this is very general): \u2022 The actual parameters of the method are pushed onto the stack \u2022 The return address is pushed onto the stack \u2022 The top-of-stack index is incremented by the total amount of memory required by the local variables within the method \u2022 A jump is made to the method In many recursive algorithms operating on large data structures, or algo- rithms that are ine\ufb03cient"}, {"filename": "Dsag.pdf", "text": "on the stack to support method invocation. Activation records take a small amount of time to create, and are pretty lightweight. Normally an activation record for a method call is as follows (this is very general): \u2022 The actual parameters of the method are pushed onto the stack \u2022 The return address is pushed onto the stack \u2022 The top-of-stack index is incremented by the total amount of memory required by the local variables within the method \u2022 A jump is made to the method In many recursive algorithms operating on large data structures, or algo- rithms that are ine\ufb03cient you will run out of stack space quickly. Consider an algorithm that when invoked given a speci\ufb01c value it creates many recursive calls. In such a case a big chunk of the stack will be consumed. We will have to wait until the activation records start to be unwound after the nested methods in the call chain exit and return to their respective caller. When a method exits it\u2019s activation record is unwound. Unwinding an activation record results in several steps: 1. The top-of-stack index is decremented by the total amount of memory consumed by the method 2. The return address is popped o\ufb00the stack 3. The top-of-stack index is decremented by the total amount of memory consumed by the actual parameters APPENDIX C. RECURSIVE VS. ITERATIVE SOLUTIONS 95 While activation records are an e\ufb03cient way to support method calls they can build up very quickly. Recursive algorithms can exhaust the stack size allocated to the thread fairly fast given the chance. Just about now we should be dusting the cobwebs o\ufb00the age old example of an iterative vs. recursive solution in the form of the Fibonacci algorithm. This is a famous example as it highlights both the beauty and pitfalls of a recursive algorithm. The iterative solution is not as pretty, nor self documenting but it does the job a lot quicker. If we were to give the Fibonacci algorithm an input of say 60 then we would have to wait a while to get the value back because it has an O(gn) run time. The iterative version on the other hand has a O(n) run time. Don\u2019t let this put you o\ufb00recursion. This example is mainly used to shock programmers into thinking about the rami\ufb01cations of recursion rather than warning them o\ufb00. C.2 Some problems are recursive in nature Something that you may come across is that some data structures and algo- rithms are actually recursive in nature. A perfect example of this is a tree data structure. A common tree node usually contains a value, along with two point- ers to two other nodes of the same node type. As you can see tree is recursive in its makeup wit each node possibly pointing to two other nodes. When using recursive algorithms on tree\u2019s it makes sense as you are simply adhering to the inherent design of the data structure you are operating on. Of course it"}, {"filename": "Dsag.pdf", "text": "nature Something that you may come across is that some data structures and algo- rithms are actually recursive in nature. A perfect example of this is a tree data structure. A common tree node usually contains a value, along with two point- ers to two other nodes of the same node type. As you can see tree is recursive in its makeup wit each node possibly pointing to two other nodes. When using recursive algorithms on tree\u2019s it makes sense as you are simply adhering to the inherent design of the data structure you are operating on. Of course it is not all good news, after all we are still bound by the limitations we have mentioned previously in this chapter. We can also look at sorting algorithms like merge sort, and quick sort. Both of these algorithms are recursive in their design and so it makes sense to model them recursively. C.3 Summary Recursion is a powerful tool, and one that all programmers should know of. Often software projects will take a trade between readability, and e\ufb03ciency in which case recursion is great provided you don\u2019t go and use it to implement an algorithm with a quadratic run time or higher. Of course this is not a rule of thumb, this is just us throwing caution to the wind. Defensive coding will always prevail. Many times recursion has a natural home in recursive data structures and algorithms which are recursive in nature. Using recursion in such scenarios is perfectly acceptable. Using recursion for something like linked list traversal is a little overkill. Its iterative counterpart is probably less lines of code than its recursive counterpart. Because we can only talk about the implications of using recursion from an abstract point of view you should consult your compiler and run time environ- ment for more details. It may be the case that your compiler recognises things like tail recursion and can optimise them. This isn\u2019t unheard of, in fact most commercial compilers will do this. The amount of optimisation compilers can APPENDIX C. RECURSIVE VS. ITERATIVE SOLUTIONS 96 do though is somewhat limited by the fact that you are still using recursion. You, as the developer have to accept certain accountability\u2019s for performance. Appendix D Testing Testing is an essential part of software development. Testing has often been discarded by many developers in the belief that the burden of proof of their software is on those within the company who hold test centric roles. This couldn\u2019t be further from the truth. As a developer you should at least provide a suite of unit tests that verify certain boundary conditions of your software. A great thing about testing is that you build up progressively a safety net. If you add or tweak algorithms and then run your suite of tests you will be quickly alerted to any cases that you have broken with your recent changes. Such a suite of tests in any sizeable project is absolutely essential to maintaining a"}, {"filename": "Dsag.pdf", "text": "of their software is on those within the company who hold test centric roles. This couldn\u2019t be further from the truth. As a developer you should at least provide a suite of unit tests that verify certain boundary conditions of your software. A great thing about testing is that you build up progressively a safety net. If you add or tweak algorithms and then run your suite of tests you will be quickly alerted to any cases that you have broken with your recent changes. Such a suite of tests in any sizeable project is absolutely essential to maintaining a fairly high bar when it comes to quality. Of course in order to attain such a standard you need to think carefully about the tests that you construct. Unit testing which will be the subject of the vast majority of this chapter are widely available on most platforms. Most modern languages like C++, C#, and Java o\ufb00er an impressive catalogue of testing frameworks that you can use for unit testing. The following list identi\ufb01es testing frameworks which are popular: JUnit: Targeted at Jav., http://www.junit.org/ NUnit: Can be used with languages that target Microsoft\u2019s Common Language Runtime. http://www.nunit.org/index.php Boost Test Library: Targeted at C++. The test library that ships with the incredibly popular Boost libraries. http://www.boost.org. A direct link to the libraries doc- umentation http://www.boost.org/doc/libs/1_36_0/libs/test/doc/ html/index.html CppUnit: Targeted at C++. http://cppunit.sourceforge.net/ Don\u2019t worry if you think that the list is very sparse, there are far more on o\ufb00er than those that we have listed. The ones listed are the testing frameworks that we believe are the most popular for C++, C#, and Java. D.1 What constitutes a unit test? A unit test should focus on a single atomic property of the subject being tested. Do not try and test many things at once, this will result in a suite of somewhat 97 APPENDIX D. TESTING 98 unstructured tests. As an example if you were wanting to write a test that veri\ufb01ed that a particular value V is returned from a speci\ufb01c input I then your test should do the smallest amount of work possible to verify that V is correct given I. A unit test should be simple and self describing. As well as a unit test being relatively atomic you should also make sure that your unit tests execute quickly. If you can imagine in the future when you may have a test suite consisting of thousands of tests you want those tests to execute as quickly as possible. Failure to attain such a goal will most likely result in the suite of tests not being ran that often by the developers on your team. This can occur for a number of reasons but the main one would be that it becomes incredibly tedious waiting several minutes to run tests on a developers local machine. Building up a test suite can help greatly in a team scenario, particularly when using a continuous build server. In such a scenario you can"}, {"filename": "Dsag.pdf", "text": "have a test suite consisting of thousands of tests you want those tests to execute as quickly as possible. Failure to attain such a goal will most likely result in the suite of tests not being ran that often by the developers on your team. This can occur for a number of reasons but the main one would be that it becomes incredibly tedious waiting several minutes to run tests on a developers local machine. Building up a test suite can help greatly in a team scenario, particularly when using a continuous build server. In such a scenario you can have the suite of tests devised by the developers and testers ran as part of the build process. Employing such strategies can help you catch niggling little error cases early rather than via your customer base. There is nothing more embarrassing for a developer than to have a very trivial bug in their code reported to them from a customer. D.2 When should I write my tests? A source of great debate would be an understatement to personify such a ques- tion as this. In recent years a test driven approach to development has become very popular. Such an approach is known as test driven development, or more commonly the acronym TDD. One of the founding principles of TDD is to write the unit test \ufb01rst, watch it fail and then make it pass. The premise being that you only ever write enough code at any one time to satisfy the state based assertions made in a unit test. We have found this approach to provide a more structured intent to the implementation of algorithms. At any one stage you only have a single goal, to make the failing test pass. Because TDD makes you write the tests up front you never \ufb01nd yourself in a situation where you forget, or can\u2019t be bothered to write tests for your code. This is often the case when you write your tests after you have coded up your implementation. We, as the authors of this book ourselves use TDD as our preferred method. As we have already mentioned that TDD is our favoured approach to testing it would be somewhat of an injustice to not list, and describe the mantra that is often associate with it: Red: Signi\ufb01es that the test has failed. Green: The failing test now passes. Refactor: Can we restructure our program so it makes more sense, and easier to maintain? The \ufb01rst point of the above list always occurs at least once (more if you count the build error) in TDD initially. Your task at this stage is solely to make the test pass, that is to make the respective test green. The last item is based around APPENDIX D. TESTING 99 the restructuring of your program to make it as readable and maintainable as possible. The last point is very important as TDD is a progressive methodology to building a solution. If you adhere to progressive revisions"}, {"filename": "Dsag.pdf", "text": "restructure our program so it makes more sense, and easier to maintain? The \ufb01rst point of the above list always occurs at least once (more if you count the build error) in TDD initially. Your task at this stage is solely to make the test pass, that is to make the respective test green. The last item is based around APPENDIX D. TESTING 99 the restructuring of your program to make it as readable and maintainable as possible. The last point is very important as TDD is a progressive methodology to building a solution. If you adhere to progressive revisions of your algorithm restructuring when appropriate you will \ufb01nd that using TDD you can implement very cleanly structured types and so on. D.3 How seriously should I view my test suite? Your tests are a major part of your project ecosystem and so they should be treated with the same amount of respect as your production code. This ranges from correct, and clean code formatting, to the testing code being stored within a source control repository. Employing a methodology like TDD, or testing after implementing you will \ufb01nd that you spend a great amount of time writing tests and thus they should be treated no di\ufb00erently to your production code. All tests should be clearly named, and fully documented as to their intent. D.4 The three A\u2019s Now that you have a sense of the importance of your test suite you will inevitably want to know how to actually structure each block of imperatives within a single unit test. A popular approach - the three A\u2019s is described in the following list: Assemble: Create the objects you require in order to perform the state based asser- tions. Act: Invoke the respective operations on the objects you have assembled to mutate the state to that desired for your assertions. Assert: Specify what you expect to hold after the previous two steps. The following example shows a simple test method that employs the three A\u2019s: public void MyTest() { // assemble Type t = new Type(); // act t.MethodA(); // assert Assert.IsTrue(t.BoolExpr) } D.5 The structuring of tests Structuring tests can be viewed upon as being the same as structuring pro- duction code, e.g. all unit tests for a Person type may be contained within APPENDIX D. TESTING 100 a PersonTest type. Typically all tests are abstracted from production code. That is that the tests are disjoint from the production code, you may have two dynamic link libraries (dll); the \ufb01rst containing the production code, the second containing your test code. We can also use things like inheritance etc when de\ufb01ning classes of tests. The point being that the test code is very much like your production code and you should apply the same amount of thought to its structure as you would do the production code. D.6 Code Coverage Something that you can get as a product of unit testing are code coverage statistics. Code coverage is merely an indicator as"}, {"filename": "Dsag.pdf", "text": "that the tests are disjoint from the production code, you may have two dynamic link libraries (dll); the \ufb01rst containing the production code, the second containing your test code. We can also use things like inheritance etc when de\ufb01ning classes of tests. The point being that the test code is very much like your production code and you should apply the same amount of thought to its structure as you would do the production code. D.6 Code Coverage Something that you can get as a product of unit testing are code coverage statistics. Code coverage is merely an indicator as to the portions of production code that your units tests cover. Using TDD it is likely that your code coverage will be very high, although it will vary depending on how easy it is to use TDD within your project. D.7 Summary Testing is key to the creation of a moderately stable product. Moreover unit testing can be used to create a safety blanket when adding and removing features providing an early warning for breaking changes within your production code. Appendix E Symbol De\ufb01nitions Throughout the pseudocode listings you will \ufb01nd several symbols used, describes the meaning of each of those symbols. Symbol Description \u2190 Assignment. = Equality. \u2264 Less than or equal to. < Less than.* \u2265 Greater than or equal to. > Greater than.* \u0338= Inequality. \u2205 Null. and Logical and. or Logical or. whitespace Single occurrence of whitespace. yield Like return but builds a sequence. Table E.1: Pseudo symbol de\ufb01nitions * This symbol has a direct translation with the vast majority of imperative counterparts. 101"}]